{
  "year": 2002,
  "total": 56,
  "reference": "kb.cert.org",
  "reports": {
    "CVE-1999-0891": [
      {
        "url": "http://www.kb.cert.org/vuls/id/37828",
        "title": "Internet Explorer DHTML\"Download Behavior\" can be tricked into exposing local files",
        "overview": "The download behavior of Internet Explorer 5.0 can be used to perform arbitrary operations on local files.",
        "description": "Internet Explorer 5.0 includes a dynamic HTML (DHTML) behavior called \"download behavior.\" A \"behavior\" is a software object that specifies some behavior of a web page element, for example, the behavior of an object when the mouse is placed over the object. Some behaviors are included by default in IE 5, including the download behavior. This feature allows a web site to download files for use in a client side script. The \"start download\" method of the \"download\" behavior has the following syntax:oDownload.startDownload (sUrl, fpCallback)sURL is a string specifying the file, and fpCallback is a pointer to a function to handle the downloaded file. The contents of the file are returned to fpCallback as its only parameter. sURL is supposed to originate in the same domain as the web site. However, you can construct the web site so that it redirects the browser to a local file (if the name of the file can be guessed or is known). The callback function can then perform arbitrary operations on the file, including possibly sending it to the intruder. For more information, see http://www.microsoft.com/technet/treeview/default.asp?url=/technet/security/bulletin/MS99-040.asp",
        "impact": "Malicious web site operators can retrieve files from your system."
      }
    ],
    "CVE-2001-0803": [
      {
        "url": "http://www.kb.cert.org/vuls/id/172583",
        "title": "Common Desktop Environment (CDE) Subprocess Control Service dtspcd contains buffer overflow",
        "overview": "A remotely exploitable buffer overflow exists in the Common Desktop Environment (CDE) Subprocess Control Service (dtspcd). An attacker who successfully exploits this vulnerability can execute arbitrary code as root.",
        "description": "Internet Security Systems (ISS) X-Force has reported a remotely exploitable buffer overflow in the Common Desktop Environment (CDE) Subprocess Control Service (dtspcd). CDE is an integrated graphical user interface that runs on Unix and Linux operating systems. dtspcd is a network daemon that accepts requests from clients to execute commands and launch applications remotely. On systems running CDE, dtspcd is spawned by the Internet services daemon (typically inetd or xinetd) in response to a CDE client request. dtspcd is typically configured to run on port 6112/tcp with root privileges. dtspcd makes a function call to a shared library, libDTSvc.so.1, that contains a buffer overflow condition in the client connection routine. The buffer overflow can be exploited by a specially crafted CDE client request. Although the buffer overflow occurs in a shared library, the CERT/CC is not aware of any other CDE applications that use the vulnerable function.",
        "impact": "A successful attacker can execute arbitrary code remotely with root privileges."
      }
    ],
    "CVE-2001-1371": [
      {
        "url": "http://www.kb.cert.org/vuls/id/736923",
        "title": "Oracle 9iAS SOAP components allow anonymous users to deploy applications by default",
        "overview": "Oracle Application Server 9iAS installs with Simple Object Access Protocol (SOAP) enabled by default and allows unauthenticated remote users to deploy and undeploy SOAP services and providers.",
        "description": "Oracle Application Server 9iAS supports Simple Object Access Protocol (SOAP), an XML-based protocol used by Oracle for Web administration of database services. Version 1.0.2.2.1 of Oracle 9iAS installs with SOAP components enabled by default. The typical installation of this Oracle product also includes SOAP tools that allow remote Web users to deploy and undeploy SOAP services and providers on the server, without authentication and without notice to the Oracle system adminstrator.",
        "impact": "An attacker can control aspects of the Oracle system in ways not intended by its administrators. The attacker may be able to obtain or modify data or perform other actions that are not authorized."
      }
    ],
    "CVE-2001-1432": [
      {
        "url": "http://www.kb.cert.org/vuls/id/464827",
        "title": "Cherokee Web Server does not adequately validate user input thereby allowing directory traversal",
        "overview": "Cherokee contains a directory traversal vulnerability caused by failure to filter '../' character sequences.",
        "description": "Cherokee is a compact, open-source web server. Cherokee does not filter '../' sequences from HTTP requests. As a result, it is possible for a remote attacker to request and read files outside the Cherokee HTTP root directory.",
        "impact": "Attackers may read any file on the filesystem that is readable by the Cherokee process, which may be running as root."
      }
    ],
    "CVE-2001-1456": [
      {
        "url": "http://www.kb.cert.org/vuls/id/206723",
        "title": "Network Associates CSMAP and smap/smapd vulnerable to buffer overflow thereby allowing arbitrary command execution",
        "overview": "A remotely exploitable buffer overflow exists in the Gauntlet Firewall.",
        "description": "The buffer overflow occurs in the smap/smapd and CSMAP daemons. According to PGP Security, these daemons are responsible for handling email transactions for both inbound and outbound e-mail.This vulnerability occurs in smap/smapd on the following products:Gauntlet for Unix versions 5.xPGP e-ppliance 300 series version 1.0McAfee e-ppliance 100 and 120 seriesThis vulnerability occurs in CSMAP on the following products:Gauntlet for Unix version 6.0PGP e-ppliance 300 series versions 1.5, 2.0PGP e-ppliance 1000 series versions 1.5, 2.0McAfee WebShield for Solaris v4.1",
        "impact": "An intruder can execute arbitrary code with the privileges of the corresponding daemon."
      }
    ],
    "CVE-2001-1463": [
      {
        "url": "http://www.kb.cert.org/vuls/id/279763",
        "title": "RhinoSoft Serv-U remote administration client transmits password in plaintext",
        "overview": "A vulnerability exists in the remote administration client for RhinoSoft Serv-U. During the authentication process, the client ignores the S/KEY one-time password (OTP) challenge sent by the server and sends the password entered by the user in plaintext.",
        "description": "RhinoSoft Serv-U is a shareware Windows FTP server that supports S/KEY one-time password (OTP) authentication using MD4 or MD5 hash algorithms. Cat Soft LLC is also involved in the development of Serv-U and is an affiliate of RhinoSoft. The Serv-U distribution includes an administration client that can be used to manage Serv-U servers remotely. Serv-U user accounts can be configured to use plaintext or S/KEY OTP authentication, and accounts can be granted several levels of administrative privilege on the server. When a user with administrative privileges attempts to log on to a Serv-U server using the remote administration client, and that user's account is configured on the server to use S/KEY OTP authentication, the server correctly sends an S/KEY OTP challenge, but the administration client ignores the challenge and sends the password entered by the user in plaintext. The server refuses the plaintext password and authentication fails, and the plaintext password is exposed on the network.See RFC 1760 and RFC 2289 for more information on S/KEY and one-time password (OTP) authentication.",
        "impact": "A properly located intruder using a sniffer can obtain administrative users' passwords. In addition, an administrative user account configured to use S/KEY OTP cannot log into a Serv-U server using a vulnerable remote administration client."
      }
    ],
    "CVE-2001-1473": [
      {
        "url": "http://www.kb.cert.org/vuls/id/684820",
        "title": "SSH-1 allows client authentication to be forwarded by a malicious server to another server",
        "overview": "A design flaw in the SSH-1 protocol allows a malicious server to establish two concurrent sessions with the same session ID, allowing a man-in-the-middle attack. The client must accept unknown host keys from the malicious server to enable exploitation of this vulnerability.",
        "description": "SSH-1 authentication relies on the uniqueness of each SSH server's public host key. This key and a corresponding private key are computed by each server for its own use. Since there is a pseudorandom element in the computation of the keys, it is extremely unlikely that two servers would compute the same key pair.Servers share their public keys with other hosts, so a server could steal another server's public host key. However, if a server used another server's public host key as its own, it would also need the corresponding private key to decrypt messages from its clients. The private key is not shared and is very difficult to compute from the public host key alone.In SSH-1, a session ID is computed as a hash of the server's public host key and a 64-bit random number called a cookie. The SSH-1 protocol assumes that:1. no two servers have the same public and private host keys, and 2. that, given any public host key and 64-bit random number, it is very difficult to find a different public host key and/or cookie which yield the same session ID.SSH-1 relies on the above assumptions during authentication. In the SSH-1 authentication process, the server generates a 256-bit random number called a challenge. The challenge is then encrypted with the client's public key, so that only the client can decrypt it. The client receives the encrypted challenge and decrypts it. The client returns the challenge response: an MD5 hash of the concatentation of the challenge and the session ID. The server independently computes the expected challenge response by the same formula. If the client's challenge response matches what the server computed, then the server responds that client has successfully authenticated.Public key encryption of the challenge protects the challenge from discovery by third parties as it is sent from the server to the client. Furthermore, the MD5 hash prevents third parties from discovering the challenge from the client's challenge response to the server. Assuming that neither host has been compromised, only the server and the client will know the challenge.The inclusion of the session ID identifies the challenge response with a certain server, since the session ID is derived from the server's public host key. Different servers should have different host keys, which produce different session ID's and change the expected challenge response. This difference in session ID's prevents a malicious server from replaying a client's challenge response to another server to authenticate as the client.Unfortunately, a weakness has been discovered in the formula for computing a session ID from the server's public key. This discovery allows modification of a server's public host key without changing the derived session ID. Furthermore, the modified key is often much weaker than the original, so it is easily factored to create a corresponding private key. This new key pair can be used to negotiate multiple concurrent SSH connections with same the session ID.Therefore, assumption 2 above, upon which the security of SSH-1 authentication is grounded, does not hold. As a result, authentication in SSH-1 is vulnerable to man-in-the-middle attacks.",
        "impact": "Attackers can obtain victim user priviledges on other hosts running an SSH-1 server."
      }
    ],
    "CVE-2002-0012": [
      {
        "url": "http://www.kb.cert.org/vuls/id/107186",
        "title": "Multiple vulnerabilities in SNMPv1 trap handling",
        "overview": "Multiple vendor SNMPv1 Trap handling implementations contain vulnerabilities that may allow unauthorized privileged access, denial-of-service conditions, or unstable behavior . If your site uses SNMP in any capacity, the CERT/CC encourages you to read the information provided below.",
        "description": "The Oulu University Secure Programming Group (OUSPG) has reported numerous vulnerabilities in multiple vendor SNMPv1 implementations. By applying the PROTOS c06-SNMPv1 test suite to a variety of popular SNMPv1-enabled products, the OUSPG revealed a number of vulnerabilities across a wide range of products. This vulnerability note focuses on vulnerabilities occurring in code responsible for SNMPv1 trap handling. SNMPv1 supports five different types of messages: GetRequest, SetRequest, GetNextRequest, GetResponse, and Trap. A single SNMP message is referred to as a Protocol Data Unit (PDU). These messages are described using Abstract Syntax Notation One (ASN.1) and translated into binary format using Basic Encoding Rules (BER). SNMP trap messages are sent from agents to managers. Trap messages are unsolicited (the manager does not issue a request message) and may indicate a warning or error condition or otherwise notify the manager about the agent's state. SNMP managers should reliably decode trap messages and process the resulting application data. OUSPG performed two sets of tests of SNMP trap message handling: one test focused on ASN.1 decoding, the second looked for exceptions in the processing of the decoded data.The results yielded multiple vulnerabilities in both the ASN.1 decoding and the subsequent processing of SNMP trap messages by many different SNMP managers. Vulnerabilities include denial-of-service conditions, format string vulnerabilities, and buffer overflows. Some vulnerabilities do not require the request message to use the correct SNMP community string.Additional Background Information on the OUSPGOUSPG is a academic research group located at Oulu University in Finland. The purpose of this research group is to test software for vulnerabilities. History has shown that the techniques used by the OUSPG have discovered a large number of previously undetected problems in the products and protocols they have tested. In 2001, the OUSPG produced a comprehensive test suite for evaluating implementations of the Lightweight Directory Access Protocol (LDAP). This test suite was developed with the strategy of stressing protocol implementations in unsupported and unexpected ways, and it was very effective in uncovering a wide variety of vulnerabilities across several products. This approach can reveal vulnerabilities that would not manifest themselves under normal operating conditions. After completing its work on LDAP, OUSPG moved its focus to SNMPv1. As with LDAP, they designed a custom test suite, began testing a selection of products, and found a number of vulnerabilities. Because OUSPG's work on LDAP was similar in procedure to its current work on SNMP, you may wish to review the LDAP Test Suite and CERT Advisory CA-2001-18, which outlined results of application of the test suite. In order to test the security of protocols like SNMPv1, the PROTOS project presents a server with a wide variety of sample packets containing unexpected values or illegally formatted data. As a member of the PROTOS project consortium, the OUSPG used the PROTOS c06-snmpv1 test suite to study several implementations of the SNMPv1 protocol. Results of the test suites run against SNMP indicate that there are many different vulnerabilities on many different implementations of SNMP. Background Information on the Simple Network Management ProtocolThe Simple Network Management Protocol (SNMP) is the most popular protocol in use to manage networked devices. SNMP was designed in the late 80's to facilitate the exchange of management information between networked devices, operating at the application layer of the ISO/OSI model. The SNMP protocol enables network and system administrators to remotely monitor and configure devices on the network (devices such as switches and routers). Software and firmware products designed for networks often make use of the SNMP protocol. SNMP runs on a multitude of devices and operating systems, including, but not limited to, Core Network Devices (Routers, Switches, Hubs, Bridges, and Wireless Network Access Points) Consumer Broadband Network Devices (Cable Modems and DSL Modems) Consumer Electronic Devices (Cameras and Image Scanners) Networked Office Equipment (Printers, Copiers, and FAX Machines) Network and Systems Management/Diagnostic Frameworks (Network Sniffers and Network Analyzers) Networked Medical Equipment (Imaging Units and Oscilloscopes) Manufacturing and Processing Equipment The SNMPv1 protocol is formally defined in RFC1157. Quoting from that RFC: Implicit in the SNMP architectural model is a collection of network management stations and network elements. Network management stations execute management applications which monitor and control network elements. Network elements are devices such as hosts, gateways, terminal servers, and the like, which have management agents responsible for performing the network management functions requested by the network management stations. The Simple Network Management Protocol (SNMP) is used to communicate management information between the network management stations and the agents in the network elements.Additionally, SNMP is discussed in a number of other RFC documents: RFC 3000 Internet Official Protocol Standards RFC 1212 Concise MIB Definitions RFC 1213 Management Information Base for Network Management of TCP/IP-based Internets: MIB-II RFC 1215 A Convention for Defining Traps for use with the SNMP RFC 1270 SNMP Communications Services RFC 2570 Introduction to Version 3 of the Internet-standard Network Management Framework RFC 2571 An Architecture for Describing SNMP Management Frameworks RFC 2572 Message Processing and Dispatching for the Simple Network Management Protocol (SNMP) RFC 2573 SNMP Applications RFC 2574 User-based Security Model (USM) for version 3 of the Simple Network Management Protocol (SNMPv3) RFC 2575 View-based Access Control Model (VACM) for the Simple Network Management Protocol (SNMP) RFC 2576 Coexistence between Version 1, Version 2, and Version 3 of the Internet-standard Network Management Framework",
        "impact": "These vulnerabilities may cause denial-of-service conditions, service interruptions, and in some cases may allow an attacker to gain access to the affected device. Specific impacts will vary from product to product."
      }
    ],
    "CVE-2002-0013": [
      {
        "url": "http://www.kb.cert.org/vuls/id/854306",
        "title": "Multiple vulnerabilities in SNMPv1 request handling",
        "overview": "Multiple vendor SNMPv1 GetRequest, GetNextRequest, and SetRequest message handling implementations contain vulnerabilities that may allow unauthorized privileged access, denial-of-service conditions, or unstable behavior. If your site uses SNMP in any capacity, the CERT/CC encourages you to read the information provided below.",
        "description": "The Oulu University Secure Programming Group (OUSPG) has reported numerous vulnerabilities in multiple vendor SNMPv1 implementations. By applying the PROTOS c06-SNMPv1 test suite to a variety of popular SNMPv1-enabled products, the OUSPG revealed a number of vulnerabilities across a wide range of products. This vulnerability note focuses on vulnerabilities occurring in code responsible for SNMPv1 request handling.SNMPv1 supports five different types of messages: GetRequest, SetRequest, GetNextRequest, GetResponse, and Trap. A single SNMP message is referred to as a Protocol Data Unit (PDU). These messages are described using Abstract Syntax Notation One (ASN.1) and translated into binary format using Basic Encoding Rules (BER). SNMP request messages are sent from managers to agents. Request messages can poll the agent for current performance or configuration data, ask for the next SNMP object in a Management Information Base (MIB), or modify configuration settings. SNMP agents should reliably decode request messages and process the resulting application data. OUSPG performed two sets of tests of SNMP request message handling: one test focused on ASN.1 decoding, the second looked for exceptions in the processing of the decoded data.The results yielded multiple vulnerabilities in both the ASN.1 decoding and the subsequent processing of SNMP request messages by many different SNMP agents. Vulnerabilities include denial-of-service conditions, format string vulnerabilities, and buffer overflows. Some vulnerabilities do not require the request message to use the correct SNMP community string.Additional Background Information on the OUSPGOUSPG is a academic research group located at Oulu University in Finland. The purpose of this research group is to test software for vulnerabilities. History has shown that the techniques used by the OUSPG have discovered a large number of previously undetected problems in the products and protocols they have tested. In 2001, the OUSPG produced a comprehensive test suite for evaluating implementations of the Lightweight Directory Access Protocol (LDAP). This test suite was developed with the strategy of stressing protocol implementations in unsupported and unexpected ways, and it was very effective in uncovering a wide variety of vulnerabilities across several products. This approach can reveal vulnerabilities that would not manifest themselves under normal operating conditions. After completing its work on LDAP, OUSPG moved its focus to SNMPv1. As with LDAP, they designed a custom test suite, began testing a selection of products, and found a number of vulnerabilities. Because OUSPG's work on LDAP was similar in procedure to its current work on SNMP, you may wish to review the LDAP Test Suite and CERT Advisory CA-2001-18, which outlined results of application of the test suite. In order to test the security of protocols like SNMPv1, the PROTOS project presents a server with a wide variety of sample packets containing unexpected values or illegally formatted data. As a member of the PROTOS project consortium, the OUSPG used the PROTOS c06-snmpv1 test suite to study several implementations of the SNMPv1 protocol. Results of the test suites run against SNMP indicate that there are many different vulnerabilities on many different implementations of SNMP. Background Information on the Simple Network Management ProtocolThe Simple Network Management Protocol (SNMP) is the most popular protocol in use to manage networked devices. SNMP was designed in the late 80's to facilitate the exchange of management information between networked devices, operating at the application layer of the ISO/OSI model. The SNMP protocol enables network and system administrators to remotely monitor and configure devices on the network (devices such as switches and routers). Software and firmware products designed for networks often make use of the SNMP protocol. SNMP runs on a multitude of devices and operating systems, including, but not limited to, Core Network Devices (Routers, Switches, Hubs, Bridges, and Wireless Network Access Points) Consumer Broadband Network Devices (Cable Modems and DSL Modems) Consumer Electronic Devices (Cameras and Image Scanners) Networked Office Equipment (Printers, Copiers, and FAX Machines) Network and Systems Management/Diagnostic Frameworks (Network Sniffers and Network Analyzers) Networked Medical Equipment (Imaging Units and Oscilloscopes) Manufacturing and Processing Equipment The SNMPv1 protocol is formally defined in RFC1157. Quoting from that RFC: Implicit in the SNMP architectural model is a collection of network management stations and network elements. Network management stations execute management applications which monitor and control network elements. Network elements are devices such as hosts, gateways, terminal servers, and the like, which have management agents responsible for performing the network management functions requested by the network management stations. The Simple Network Management Protocol (SNMP) is used to communicate management information between the network management stations and the agents in the network elements. Additionally, SNMP is discussed in a number of other RFC documents: RFC 3000 Internet Official Protocol Standards RFC 1212 Concise MIB Definitions RFC 1213 Management Information Base for Network Management of TCP/IP-based Internets: MIB-II RFC 1215 A Convention for Defining Traps for use with the SNMP RFC 1270 SNMP Communications Services RFC 2570 Introduction to Version 3 of the Internet-standard Network Management Framework RFC 2571 An Architecture for Describing SNMP Management Frameworks RFC 2572 Message Processing and Dispatching for the Simple Network Management Protocol (SNMP) RFC 2573 SNMP Applications RFC 2574 User-based Security Model (USM) for version 3 of the Simple Network Management Protocol (SNMPv3) RFC 2575 View-based Access Control Model (VACM) for the Simple Network Management Protocol (SNMP) RFC 2576 Coexistence between Version 1, Version 2, and Version 3 of the Internet-standard Network Management Framework",
        "impact": "These vulnerabilities may cause denial-of-service conditions, service interruptions, and in some cases may allow an attacker to gain access to the affected device. Specific impacts will vary from product to product."
      }
    ],
    "CVE-2002-0053": [
      {
        "url": "http://www.kb.cert.org/vuls/id/854306",
        "title": "Multiple vulnerabilities in SNMPv1 request handling",
        "overview": "Multiple vendor SNMPv1 GetRequest, GetNextRequest, and SetRequest message handling implementations contain vulnerabilities that may allow unauthorized privileged access, denial-of-service conditions, or unstable behavior. If your site uses SNMP in any capacity, the CERT/CC encourages you to read the information provided below.",
        "description": "The Oulu University Secure Programming Group (OUSPG) has reported numerous vulnerabilities in multiple vendor SNMPv1 implementations. By applying the PROTOS c06-SNMPv1 test suite to a variety of popular SNMPv1-enabled products, the OUSPG revealed a number of vulnerabilities across a wide range of products. This vulnerability note focuses on vulnerabilities occurring in code responsible for SNMPv1 request handling.SNMPv1 supports five different types of messages: GetRequest, SetRequest, GetNextRequest, GetResponse, and Trap. A single SNMP message is referred to as a Protocol Data Unit (PDU). These messages are described using Abstract Syntax Notation One (ASN.1) and translated into binary format using Basic Encoding Rules (BER). SNMP request messages are sent from managers to agents. Request messages can poll the agent for current performance or configuration data, ask for the next SNMP object in a Management Information Base (MIB), or modify configuration settings. SNMP agents should reliably decode request messages and process the resulting application data. OUSPG performed two sets of tests of SNMP request message handling: one test focused on ASN.1 decoding, the second looked for exceptions in the processing of the decoded data.The results yielded multiple vulnerabilities in both the ASN.1 decoding and the subsequent processing of SNMP request messages by many different SNMP agents. Vulnerabilities include denial-of-service conditions, format string vulnerabilities, and buffer overflows. Some vulnerabilities do not require the request message to use the correct SNMP community string.Additional Background Information on the OUSPGOUSPG is a academic research group located at Oulu University in Finland. The purpose of this research group is to test software for vulnerabilities. History has shown that the techniques used by the OUSPG have discovered a large number of previously undetected problems in the products and protocols they have tested. In 2001, the OUSPG produced a comprehensive test suite for evaluating implementations of the Lightweight Directory Access Protocol (LDAP). This test suite was developed with the strategy of stressing protocol implementations in unsupported and unexpected ways, and it was very effective in uncovering a wide variety of vulnerabilities across several products. This approach can reveal vulnerabilities that would not manifest themselves under normal operating conditions. After completing its work on LDAP, OUSPG moved its focus to SNMPv1. As with LDAP, they designed a custom test suite, began testing a selection of products, and found a number of vulnerabilities. Because OUSPG's work on LDAP was similar in procedure to its current work on SNMP, you may wish to review the LDAP Test Suite and CERT Advisory CA-2001-18, which outlined results of application of the test suite. In order to test the security of protocols like SNMPv1, the PROTOS project presents a server with a wide variety of sample packets containing unexpected values or illegally formatted data. As a member of the PROTOS project consortium, the OUSPG used the PROTOS c06-snmpv1 test suite to study several implementations of the SNMPv1 protocol. Results of the test suites run against SNMP indicate that there are many different vulnerabilities on many different implementations of SNMP. Background Information on the Simple Network Management ProtocolThe Simple Network Management Protocol (SNMP) is the most popular protocol in use to manage networked devices. SNMP was designed in the late 80's to facilitate the exchange of management information between networked devices, operating at the application layer of the ISO/OSI model. The SNMP protocol enables network and system administrators to remotely monitor and configure devices on the network (devices such as switches and routers). Software and firmware products designed for networks often make use of the SNMP protocol. SNMP runs on a multitude of devices and operating systems, including, but not limited to, Core Network Devices (Routers, Switches, Hubs, Bridges, and Wireless Network Access Points) Consumer Broadband Network Devices (Cable Modems and DSL Modems) Consumer Electronic Devices (Cameras and Image Scanners) Networked Office Equipment (Printers, Copiers, and FAX Machines) Network and Systems Management/Diagnostic Frameworks (Network Sniffers and Network Analyzers) Networked Medical Equipment (Imaging Units and Oscilloscopes) Manufacturing and Processing Equipment The SNMPv1 protocol is formally defined in RFC1157. Quoting from that RFC: Implicit in the SNMP architectural model is a collection of network management stations and network elements. Network management stations execute management applications which monitor and control network elements. Network elements are devices such as hosts, gateways, terminal servers, and the like, which have management agents responsible for performing the network management functions requested by the network management stations. The Simple Network Management Protocol (SNMP) is used to communicate management information between the network management stations and the agents in the network elements. Additionally, SNMP is discussed in a number of other RFC documents: RFC 3000 Internet Official Protocol Standards RFC 1212 Concise MIB Definitions RFC 1213 Management Information Base for Network Management of TCP/IP-based Internets: MIB-II RFC 1215 A Convention for Defining Traps for use with the SNMP RFC 1270 SNMP Communications Services RFC 2570 Introduction to Version 3 of the Internet-standard Network Management Framework RFC 2571 An Architecture for Describing SNMP Management Frameworks RFC 2572 Message Processing and Dispatching for the Simple Network Management Protocol (SNMP) RFC 2573 SNMP Applications RFC 2574 User-based Security Model (USM) for version 3 of the Simple Network Management Protocol (SNMPv3) RFC 2575 View-based Access Control Model (VACM) for the Simple Network Management Protocol (SNMP) RFC 2576 Coexistence between Version 1, Version 2, and Version 3 of the Internet-standard Network Management Framework",
        "impact": "These vulnerabilities may cause denial-of-service conditions, service interruptions, and in some cases may allow an attacker to gain access to the affected device. Specific impacts will vary from product to product."
      },
      {
        "url": "http://www.kb.cert.org/vuls/id/107186",
        "title": "Multiple vulnerabilities in SNMPv1 trap handling",
        "overview": "Multiple vendor SNMPv1 Trap handling implementations contain vulnerabilities that may allow unauthorized privileged access, denial-of-service conditions, or unstable behavior . If your site uses SNMP in any capacity, the CERT/CC encourages you to read the information provided below.",
        "description": "The Oulu University Secure Programming Group (OUSPG) has reported numerous vulnerabilities in multiple vendor SNMPv1 implementations. By applying the PROTOS c06-SNMPv1 test suite to a variety of popular SNMPv1-enabled products, the OUSPG revealed a number of vulnerabilities across a wide range of products. This vulnerability note focuses on vulnerabilities occurring in code responsible for SNMPv1 trap handling. SNMPv1 supports five different types of messages: GetRequest, SetRequest, GetNextRequest, GetResponse, and Trap. A single SNMP message is referred to as a Protocol Data Unit (PDU). These messages are described using Abstract Syntax Notation One (ASN.1) and translated into binary format using Basic Encoding Rules (BER). SNMP trap messages are sent from agents to managers. Trap messages are unsolicited (the manager does not issue a request message) and may indicate a warning or error condition or otherwise notify the manager about the agent's state. SNMP managers should reliably decode trap messages and process the resulting application data. OUSPG performed two sets of tests of SNMP trap message handling: one test focused on ASN.1 decoding, the second looked for exceptions in the processing of the decoded data.The results yielded multiple vulnerabilities in both the ASN.1 decoding and the subsequent processing of SNMP trap messages by many different SNMP managers. Vulnerabilities include denial-of-service conditions, format string vulnerabilities, and buffer overflows. Some vulnerabilities do not require the request message to use the correct SNMP community string.Additional Background Information on the OUSPGOUSPG is a academic research group located at Oulu University in Finland. The purpose of this research group is to test software for vulnerabilities. History has shown that the techniques used by the OUSPG have discovered a large number of previously undetected problems in the products and protocols they have tested. In 2001, the OUSPG produced a comprehensive test suite for evaluating implementations of the Lightweight Directory Access Protocol (LDAP). This test suite was developed with the strategy of stressing protocol implementations in unsupported and unexpected ways, and it was very effective in uncovering a wide variety of vulnerabilities across several products. This approach can reveal vulnerabilities that would not manifest themselves under normal operating conditions. After completing its work on LDAP, OUSPG moved its focus to SNMPv1. As with LDAP, they designed a custom test suite, began testing a selection of products, and found a number of vulnerabilities. Because OUSPG's work on LDAP was similar in procedure to its current work on SNMP, you may wish to review the LDAP Test Suite and CERT Advisory CA-2001-18, which outlined results of application of the test suite. In order to test the security of protocols like SNMPv1, the PROTOS project presents a server with a wide variety of sample packets containing unexpected values or illegally formatted data. As a member of the PROTOS project consortium, the OUSPG used the PROTOS c06-snmpv1 test suite to study several implementations of the SNMPv1 protocol. Results of the test suites run against SNMP indicate that there are many different vulnerabilities on many different implementations of SNMP. Background Information on the Simple Network Management ProtocolThe Simple Network Management Protocol (SNMP) is the most popular protocol in use to manage networked devices. SNMP was designed in the late 80's to facilitate the exchange of management information between networked devices, operating at the application layer of the ISO/OSI model. The SNMP protocol enables network and system administrators to remotely monitor and configure devices on the network (devices such as switches and routers). Software and firmware products designed for networks often make use of the SNMP protocol. SNMP runs on a multitude of devices and operating systems, including, but not limited to, Core Network Devices (Routers, Switches, Hubs, Bridges, and Wireless Network Access Points) Consumer Broadband Network Devices (Cable Modems and DSL Modems) Consumer Electronic Devices (Cameras and Image Scanners) Networked Office Equipment (Printers, Copiers, and FAX Machines) Network and Systems Management/Diagnostic Frameworks (Network Sniffers and Network Analyzers) Networked Medical Equipment (Imaging Units and Oscilloscopes) Manufacturing and Processing Equipment The SNMPv1 protocol is formally defined in RFC1157. Quoting from that RFC: Implicit in the SNMP architectural model is a collection of network management stations and network elements. Network management stations execute management applications which monitor and control network elements. Network elements are devices such as hosts, gateways, terminal servers, and the like, which have management agents responsible for performing the network management functions requested by the network management stations. The Simple Network Management Protocol (SNMP) is used to communicate management information between the network management stations and the agents in the network elements.Additionally, SNMP is discussed in a number of other RFC documents: RFC 3000 Internet Official Protocol Standards RFC 1212 Concise MIB Definitions RFC 1213 Management Information Base for Network Management of TCP/IP-based Internets: MIB-II RFC 1215 A Convention for Defining Traps for use with the SNMP RFC 1270 SNMP Communications Services RFC 2570 Introduction to Version 3 of the Internet-standard Network Management Framework RFC 2571 An Architecture for Describing SNMP Management Frameworks RFC 2572 Message Processing and Dispatching for the Simple Network Management Protocol (SNMP) RFC 2573 SNMP Applications RFC 2574 User-based Security Model (USM) for version 3 of the Simple Network Management Protocol (SNMPv3) RFC 2575 View-based Access Control Model (VACM) for the Simple Network Management Protocol (SNMP) RFC 2576 Coexistence between Version 1, Version 2, and Version 3 of the Internet-standard Network Management Framework",
        "impact": "These vulnerabilities may cause denial-of-service conditions, service interruptions, and in some cases may allow an attacker to gain access to the affected device. Specific impacts will vary from product to product."
      }
    ],
    "CVE-2002-0184": [
      {
        "url": "http://www.kb.cert.org/vuls/id/820083",
        "title": "sudo vulnerable to heap corruption via -p parameter",
        "overview": "Sudo is susceptible to a locally exploitable heap overflow vulnerability.",
        "description": "Sudo is a common utility used to allow a system administrator to give users or groups of users rights to run certain programs as root or as another user. A locally exploitable heap overflow can lead to the execution of arbitrary code by a local attacker.",
        "impact": "A local attacker can execute arbitrary code as root."
      }
    ],
    "CVE-2002-0563": [
      {
        "url": "http://www.kb.cert.org/vuls/id/168795",
        "title": "Oracle 9iAS allows anonymous remote users to view sensitive Apache services by default",
        "overview": "Oracle Application Server 9iAS allows remote users to access several Apache services without authentication.",
        "description": "Oracle Application Server 9iAS includes the Apache Web server and several Apache services. In the default install configuration, many of these services, including Dynamic Monitoring Services, can be accessed remotely by anonymous users.",
        "impact": "Dynamic Monitoring Services may be used without authentication by attackers to monitor the internal workings of the Oracle server."
      }
    ],
    "CVE-2002-0649": [
      {
        "url": "http://www.kb.cert.org/vuls/id/399260",
        "title": "Microsoft SQL Server 2000 contains heap buffer overflow in SQL Server Resolution Service",
        "overview": "Microsoft SQL Server 2000 contains a remotely exploitable heap buffer overflow that allows attackers to execute arbitrary code with the same privileges as the SQL server.",
        "description": "The SQL Server Resolution Service (SSRS) was introduced in Microsoft SQL Server 2000 to provide referral services for multiple server instances running on the same machine. The service listens for requests on UDP port 1434 and returns the IP address and port number of the SQL server instance that provides access to the requested database. The SSRS contains a heap buffer overflow that allows an attacker to execute arbitrary code by sending a crafted request to port 1434/udp. The code within such a request will be executed by the server host with the privileges of the SQL Server service account.",
        "impact": "This vulnerability allows unauthenticated remote attackers to execute arbitrary code with the privileges of the SQL service account. If the privileges of the service account are elevated via VU#796313, this vulnerability may result in compromise of the server host."
      },
      {
        "url": "http://www.kb.cert.org/vuls/id/484891",
        "title": "Microsoft SQL Server 2000 contains stack buffer overflow in SQL Server Resolution Service",
        "overview": "Microsoft SQL Server 2000 contains a remotely exploitable stack buffer overflow that allows attackers to execute arbitrary code with the same privileges as the SQL server.",
        "description": "The SQL Server Resolution Service (SSRS) was introduced in Microsoft SQL Server 2000 to provide referral services for multiple server instances running on the same machine. The service listens for requests on UDP port 1434 and returns the IP address and port number of the SQL server instance that provides access to the requested database. The SSRS contains a stack buffer overflow that allows an attacker to execute arbitrary code by sending a crafted request to port 1434/udp. The code within such a request will be executed by the server host with the privileges of the SQL Server service account.",
        "impact": "This vulnerability allows unauthenticated remote attackers to execute arbitrary code with the privileges of the SQL service account. If the privileges of the service account are elevated via VU#796313, this vulnerability may result in compromise of the server host."
      }
    ],
    "CVE-2002-1024": [
      {
        "url": "http://www.kb.cert.org/vuls/id/290140",
        "title": "Multiple Cisco products consume excessive CPU resources in response to large SSH packets",
        "overview": "Multiple Cisco networking products contain a denial-of-service vulnerability.",
        "description": "Multiple Cisco networking products contain a vulnerability that allows large SSH packets to cause excessive consumption of CPU resources. In some circumstances, this resource consumption may cause the affected device to reboot. This vulnerability is a side effect of a Cisco patch for VU#13877, an SSH packet injection vulnerability. Please note that this patch does not contain the integer overflow vulnerability described in VU#945216. However, according to Cisco's Security Advisory, this denial-of-service vulnerability may be triggered by attempts to exploit VU#945216.",
        "impact": "Remote attackers may conduct denial-of-service attacks against affected devices."
      }
    ],
    "CVE-2002-1357": [
      {
        "url": "http://www.kb.cert.org/vuls/id/389665",
        "title": "Multiple vendors' SSH transport layer protocol implementations contain vulnerabilities in key exchange and initialization",
        "overview": "Secure shell (SSH) transport layer protocol implementations from different vendors contain multiple vulnerabilities in code that handles key exchange and initialization. Both SSH servers and clients are affected. A remote attacker could execute arbitrary code with the privileges of the SSH process or cause a denial of service.",
        "description": "From the IETF draft SSH Transport Layer Protocol:SSH is a protocol for secure remote login and other secure network services over an insecure network.This document describes the SSH transport layer protocol which typically runs on top of TCP/IP. The protocol can be used as a basis for a number of secure network services. It provides strong encryption, server authentication, and integrity protection. It may also provide compression.Key exchange method, public key algorithm, symmetric encryption algorithm, message authentication algorithm, and hash algorithm are all negotiated.Rapid7 has developed a suite of test cases (SSHredder) that examine the connection initialization, key exchange, and negotiation phase (KEX, KEXINIT) of the SSH transport layer protocol. The suite tests the way an SSH transport layer implementation handles invalid or incorrect packet and string lengths, padding and padding length, malformed strings, and invalid algorithms.The test suite has demonstrated a number of vulnerabilities in different vendors' SSH products. These vulnerabilities include buffer overflows, and they occur before user authentication takes place. Common Vulnerabilities and Exposures (CVE) has assigned the following candidate numbers for several classes of tests performed by SSHredder:CAN-2002-1357: incorrect length fields, i.e. specified length field does not match the actual length of the inputCAN-2002-1358: lists with empty elements or multiple separatorsCAN-2002-1359: \"classic\" buffer overflows (length field, if present, is consistent with the actual length of buffer)CAN-2002-1360: null characters in strings (which trigger conflicts between delimiter-based and length-based strings)Rapid7 has posted an advisory (R7-0009) and the SSHredder test suite.",
        "impact": "The impact will vary for different vulnerabilities, but in some cases remote attackers could execute arbitrary code with the privileges of the SSH process. Both SSH servers and clients are affected. On Windows systems, SSH servers commonly run with SYSTEM privileges. SSH daemons on UNIX systems typically run with root privileges. In the case of SSH clients, any attacker-supplied code would run with the privileges of the user who started the client program. Additional privileges may be afforded to an attacker when the SSH client is configured to run with an effective user ID (setuid/setgid) of root. Attackers could also crash a vulnerable SSH process, causing a denial of service.While OpenSSH does not appear to be affected, it is worth noting that privilege separation would greatly reduce the impact of arbitrary code execution during the KEXINIT phase."
      }
    ],
    "CVE-2002-1651": [
      {
        "url": "http://www.kb.cert.org/vuls/id/636431",
        "title": "Verity's Search97 contains a Cross-Site Scripting vulnerability in the processing of search requests",
        "overview": "Verity's Search97 application contains a Cross-Site Scripting vulnerability in the processing of search requests.",
        "description": "Verity's Search97 application contains a Cross-Site Scripting vulnerability in the processing of search requests. This vulnerability is in both the Microsoft Window's and UNIX versions of the product. More information about Cross-Site Scripting can be found in CA-2000-02.It appears that the fault lies in the error pages returned from templates and actions that use either vformat() or vfilter().",
        "impact": "The victim will be presented with information which the compromised site did not wish their visitors to be subjected. This could be used to \"sniff\" sensitive data from within the web page, including passwords, credit card numbers, and any arbitrary information the user inputs. Likewise, information stored in cookies can be stolen or corrupted."
      }
    ],
    "CVE-2002-1978": [
      {
        "url": "http://www.kb.cert.org/vuls/id/328867",
        "title": "Multiple vendors' firewalls do not adequately keep state of FTP traffic",
        "overview": "Firewalls and other systems that inspect FTP application layer traffic may not adequately maintain the state of FTP commands and responses. As a result, an attacker could establish arbitrary TCP connections to FTP servers or clients located behind a vulnerable firewall.",
        "description": "Many firewalls perform stateful inspection of application layer traffic, allowing them to support passive FTP and other applications that make connections using dynamically chosen ports. In the case of a passive FTP connection to an FTP server located behind a firewall, the firewall examines the application layer of the FTP control channel and interprets FTP commands and responses in order to determine what TCP ports the server is using for data connections. When a client requests a passive FTP connection by issuing the PASV command, the FTP server responds positively with a string like \"227 Entering Passive Mode h1,h2,h3,h4,p1,p2\", instructing the client to initiate a TCP connection to IP address h1,h2,h3,h4 on port p1,p2. The firewall monitors this string and creates a dynamic rule allowing an inbound TCP connection from the client to the server on the specified port.Some firewalls create dynamic rules without assuring that the PASV response string is part of a legitimate FTP connection.An attacker who is able to log in to an FTP server behind a vulnerable firewall issues an FTP command that echoes the argument of the command back to the attacker (NLST is one example of such a command). The attacker includes a PASV response string as the argument to the command, so that the PASV response \"227 Entering Passive Mode h1,h2,h3,h4,p1,p2\" is echoed back through the firewall. Using a spoofed IP address and a separate TCP/IP stack (libnet and libpcap), the attacker sends specially crafted TCP packets that acknowledge (ACK) the echoed response from the FTP server up to the start of the PASV response. If the operating system used by the FTP server supports the partial acknowledgement of TCP data segments (RFC 2581), it will resend the unacknowledged data, starting with the beginning of the PASV response. A vulnerable firewall will see a properly terminated PASV response at the start of a packet and create a rule allowing the client to connect to the specified port on the FTP server.This behavior has been previously discussed in public forums (February 2000):http://online.securityfocus.com/archive/1/47688/2000-02-12/2000-02-18/1http://online.securityfocus.com/archive/82/45571/2000-02-08/2000-02-14/1http://online.securityfocus.com/archive/82/45758/2000-02-08/2000-02-14/1In the February 2000 discussion, a number of similar techniques are mentioned:using a URL with a properly padded FTP command (HTML email or web page with hostile URL sent to clients)using other FTP commands (STAT) to echo PORT commands or PASV responses back through the firewallusing TCP MSS to control/lower the size of a TCP packet and properly align FTP commands and responsesuploading a file or creating a directory with a crafted name that contains FTP commands, then using \"ls\" or similar to echo the command back through the firewallThese techniques, including the use of partial acknowledgement as described above, might also be used with the PORT command by a malicious FTP server to open connections to active FTP clients that are behind a vulnerable firewall.It is possible that similar vulnerabilities exist in the way firewalls handle other applications that use dynamic ports. FTP application layer gateways and proxy servers may also be affected.An FTP server or FTP client running on an operating system that does not accept partial acknowledgement of TCP data segments is not susceptible to this specific attack.FTP servers that do not pad 3-digit numbers within multi-line responses exacerbate this problem by making it difficult for firewalls to recognize legitimate FTP status codes (VU#288905). From section 4.2 of RFC 959:If an intermediary line begins with a 3-digit number, the Server must pad the front to avoid confusion.In rare cases where these routines are able to generate three digits and a Space at the beginning of any line, the beginning of each text line should be offset by some neutral text, like Space.",
        "impact": "A remote attacker may be able to access TCP ports on an FTP server or client that is behind a vulnerable firewall system, which could expose other network services to attack."
      }
    ],
    "CVE-2002-1979": [
      {
        "url": "http://www.kb.cert.org/vuls/id/AAMN-5EQR65",
        "title": "Multiple vendors' firewalls do not adequately keep state of FTP traffic",
        "overview": "Firewalls and other systems that inspect FTP application layer traffic may not adequately maintain the state of FTP commands and responses. As a result, an attacker could establish arbitrary TCP connections to FTP servers or clients located behind a vulnerable firewall.",
        "description": "Many firewalls perform stateful inspection of application layer traffic, allowing them to support passive FTP and other applications that make connections using dynamically chosen ports. In the case of a passive FTP connection to an FTP server located behind a firewall, the firewall examines the application layer of the FTP control channel and interprets FTP commands and responses in order to determine what TCP ports the server is using for data connections. When a client requests a passive FTP connection by issuing the PASV command, the FTP server responds positively with a string like \"227 Entering Passive Mode h1,h2,h3,h4,p1,p2\", instructing the client to initiate a TCP connection to IP address h1,h2,h3,h4 on port p1,p2. The firewall monitors this string and creates a dynamic rule allowing an inbound TCP connection from the client to the server on the specified port.Some firewalls create dynamic rules without assuring that the PASV response string is part of a legitimate FTP connection.An attacker who is able to log in to an FTP server behind a vulnerable firewall issues an FTP command that echoes the argument of the command back to the attacker (NLST is one example of such a command). The attacker includes a PASV response string as the argument to the command, so that the PASV response \"227 Entering Passive Mode h1,h2,h3,h4,p1,p2\" is echoed back through the firewall. Using a spoofed IP address and a separate TCP/IP stack (libnet and libpcap), the attacker sends specially crafted TCP packets that acknowledge (ACK) the echoed response from the FTP server up to the start of the PASV response. If the operating system used by the FTP server supports the partial acknowledgement of TCP data segments (RFC 2581), it will resend the unacknowledged data, starting with the beginning of the PASV response. A vulnerable firewall will see a properly terminated PASV response at the start of a packet and create a rule allowing the client to connect to the specified port on the FTP server.This behavior has been previously discussed in public forums (February 2000):http://online.securityfocus.com/archive/1/47688/2000-02-12/2000-02-18/1http://online.securityfocus.com/archive/82/45571/2000-02-08/2000-02-14/1http://online.securityfocus.com/archive/82/45758/2000-02-08/2000-02-14/1In the February 2000 discussion, a number of similar techniques are mentioned:using a URL with a properly padded FTP command (HTML email or web page with hostile URL sent to clients)using other FTP commands (STAT) to echo PORT commands or PASV responses back through the firewallusing TCP MSS to control/lower the size of a TCP packet and properly align FTP commands and responsesuploading a file or creating a directory with a crafted name that contains FTP commands, then using \"ls\" or similar to echo the command back through the firewallThese techniques, including the use of partial acknowledgement as described above, might also be used with the PORT command by a malicious FTP server to open connections to active FTP clients that are behind a vulnerable firewall.It is possible that similar vulnerabilities exist in the way firewalls handle other applications that use dynamic ports. FTP application layer gateways and proxy servers may also be affected.An FTP server or FTP client running on an operating system that does not accept partial acknowledgement of TCP data segments is not susceptible to this specific attack.FTP servers that do not pad 3-digit numbers within multi-line responses exacerbate this problem by making it difficult for firewalls to recognize legitimate FTP status codes (VU#288905). From section 4.2 of RFC 959:If an intermediary line begins with a 3-digit number, the Server must pad the front to avoid confusion.In rare cases where these routines are able to generate three digits and a Space at the beginning of any line, the beginning of each text line should be offset by some neutral text, like Space.",
        "impact": "A remote attacker may be able to access TCP ports on an FTP server or client that is behind a vulnerable firewall system, which could expose other network services to attack."
      },
      {
        "url": "http://www.kb.cert.org/vuls/id/328867",
        "title": "Multiple vendors' firewalls do not adequately keep state of FTP traffic",
        "overview": "Firewalls and other systems that inspect FTP application layer traffic may not adequately maintain the state of FTP commands and responses. As a result, an attacker could establish arbitrary TCP connections to FTP servers or clients located behind a vulnerable firewall.",
        "description": "Many firewalls perform stateful inspection of application layer traffic, allowing them to support passive FTP and other applications that make connections using dynamically chosen ports. In the case of a passive FTP connection to an FTP server located behind a firewall, the firewall examines the application layer of the FTP control channel and interprets FTP commands and responses in order to determine what TCP ports the server is using for data connections. When a client requests a passive FTP connection by issuing the PASV command, the FTP server responds positively with a string like \"227 Entering Passive Mode h1,h2,h3,h4,p1,p2\", instructing the client to initiate a TCP connection to IP address h1,h2,h3,h4 on port p1,p2. The firewall monitors this string and creates a dynamic rule allowing an inbound TCP connection from the client to the server on the specified port.Some firewalls create dynamic rules without assuring that the PASV response string is part of a legitimate FTP connection.An attacker who is able to log in to an FTP server behind a vulnerable firewall issues an FTP command that echoes the argument of the command back to the attacker (NLST is one example of such a command). The attacker includes a PASV response string as the argument to the command, so that the PASV response \"227 Entering Passive Mode h1,h2,h3,h4,p1,p2\" is echoed back through the firewall. Using a spoofed IP address and a separate TCP/IP stack (libnet and libpcap), the attacker sends specially crafted TCP packets that acknowledge (ACK) the echoed response from the FTP server up to the start of the PASV response. If the operating system used by the FTP server supports the partial acknowledgement of TCP data segments (RFC 2581), it will resend the unacknowledged data, starting with the beginning of the PASV response. A vulnerable firewall will see a properly terminated PASV response at the start of a packet and create a rule allowing the client to connect to the specified port on the FTP server.This behavior has been previously discussed in public forums (February 2000):http://online.securityfocus.com/archive/1/47688/2000-02-12/2000-02-18/1http://online.securityfocus.com/archive/82/45571/2000-02-08/2000-02-14/1http://online.securityfocus.com/archive/82/45758/2000-02-08/2000-02-14/1In the February 2000 discussion, a number of similar techniques are mentioned:using a URL with a properly padded FTP command (HTML email or web page with hostile URL sent to clients)using other FTP commands (STAT) to echo PORT commands or PASV responses back through the firewallusing TCP MSS to control/lower the size of a TCP packet and properly align FTP commands and responsesuploading a file or creating a directory with a crafted name that contains FTP commands, then using \"ls\" or similar to echo the command back through the firewallThese techniques, including the use of partial acknowledgement as described above, might also be used with the PORT command by a malicious FTP server to open connections to active FTP clients that are behind a vulnerable firewall.It is possible that similar vulnerabilities exist in the way firewalls handle other applications that use dynamic ports. FTP application layer gateways and proxy servers may also be affected.An FTP server or FTP client running on an operating system that does not accept partial acknowledgement of TCP data segments is not susceptible to this specific attack.FTP servers that do not pad 3-digit numbers within multi-line responses exacerbate this problem by making it difficult for firewalls to recognize legitimate FTP status codes (VU#288905). From section 4.2 of RFC 959:If an intermediary line begins with a 3-digit number, the Server must pad the front to avoid confusion.In rare cases where these routines are able to generate three digits and a Space at the beginning of any line, the beginning of each text line should be offset by some neutral text, like Space.",
        "impact": "A remote attacker may be able to access TCP ports on an FTP server or client that is behind a vulnerable firewall system, which could expose other network services to attack."
      }
    ],
    "CVE-2002-2226": [
      {
        "url": "http://www.kb.cert.org/vuls/id/632633",
        "title": "Wyse Simple Imager (WSI) includes vulnerable versions of TFTPD32",
        "overview": "Wyse Simple Imager (WSI) includes older versions version of TFTPD32 that contains publicly known vulnerabilities. An attacker could exploit these vulnerabilities to potentially execute arbitrary code on the system running WSI and TFTPD32.",
        "description": "Wyse Simple Imager (WSI) is a component of Wyse Device Manager (WDM, formerly known as Wyse Rapport). WSI includes TFTPD32 as the TFTP service to load firmware images on client devices. The versions of TFTPD32 contains several known vulnerabilities. The following list of TFTPD32 vulnerabilities is based on public information:CVE-2002-2226 Buffer overflow in tftpd of TFTP32 2.21 and earlier allows remote attackers to execute arbitrary code via a long filename argument.CVE-2002-2237 tftp32 TFTP server 2.21 and earlier allows remote attackers to cause a denial of service via a GET request with a DOS device name such as com1 or aux.CVE-2002-2353 tftpd32 2.50 and 2.50.2 allows remote attackers to read or write arbitrary files via a full pathname in GET and PUT requests.CVE-2006-0328 Format string vulnerability in Tftpd32 2.81 allows remote attackers to cause a denial of service via format string specifiers in a filename in a (1) GET or (2) SEND request.CVE-2006-6141 Buffer overflow in Tftpd32 3.01 allows remote attackers to cause a denial of service via a long GET or PUT request, which is not properly handled when the request is displayed in the title of the gauge window.OSVDB ID: 12898 Tftpd32 contains a flaw that may allow a remote denial of service. The issue is triggered when the server receives a TFTP request with a long filename, and will result in loss of availability for the service.",
        "impact": "An attacker with network access to TFTPD32 could execute arbitrary code or cause a denial of service on a vulnerable system."
      }
    ],
    "CVE-2002-2237": [
      {
        "url": "http://www.kb.cert.org/vuls/id/632633",
        "title": "Wyse Simple Imager (WSI) includes vulnerable versions of TFTPD32",
        "overview": "Wyse Simple Imager (WSI) includes older versions version of TFTPD32 that contains publicly known vulnerabilities. An attacker could exploit these vulnerabilities to potentially execute arbitrary code on the system running WSI and TFTPD32.",
        "description": "Wyse Simple Imager (WSI) is a component of Wyse Device Manager (WDM, formerly known as Wyse Rapport). WSI includes TFTPD32 as the TFTP service to load firmware images on client devices. The versions of TFTPD32 contains several known vulnerabilities. The following list of TFTPD32 vulnerabilities is based on public information:CVE-2002-2226 Buffer overflow in tftpd of TFTP32 2.21 and earlier allows remote attackers to execute arbitrary code via a long filename argument.CVE-2002-2237 tftp32 TFTP server 2.21 and earlier allows remote attackers to cause a denial of service via a GET request with a DOS device name such as com1 or aux.CVE-2002-2353 tftpd32 2.50 and 2.50.2 allows remote attackers to read or write arbitrary files via a full pathname in GET and PUT requests.CVE-2006-0328 Format string vulnerability in Tftpd32 2.81 allows remote attackers to cause a denial of service via format string specifiers in a filename in a (1) GET or (2) SEND request.CVE-2006-6141 Buffer overflow in Tftpd32 3.01 allows remote attackers to cause a denial of service via a long GET or PUT request, which is not properly handled when the request is displayed in the title of the gauge window.OSVDB ID: 12898 Tftpd32 contains a flaw that may allow a remote denial of service. The issue is triggered when the server receives a TFTP request with a long filename, and will result in loss of availability for the service.",
        "impact": "An attacker with network access to TFTPD32 could execute arbitrary code or cause a denial of service on a vulnerable system."
      }
    ],
    "CVE-2002-2300": [
      {
        "url": "http://www.kb.cert.org/vuls/id/317417"
      }
    ],
    "CVE-2002-2353": [
      {
        "url": "http://www.kb.cert.org/vuls/id/632633",
        "title": "Wyse Simple Imager (WSI) includes vulnerable versions of TFTPD32",
        "overview": "Wyse Simple Imager (WSI) includes older versions version of TFTPD32 that contains publicly known vulnerabilities. An attacker could exploit these vulnerabilities to potentially execute arbitrary code on the system running WSI and TFTPD32.",
        "description": "Wyse Simple Imager (WSI) is a component of Wyse Device Manager (WDM, formerly known as Wyse Rapport). WSI includes TFTPD32 as the TFTP service to load firmware images on client devices. The versions of TFTPD32 contains several known vulnerabilities. The following list of TFTPD32 vulnerabilities is based on public information:CVE-2002-2226 Buffer overflow in tftpd of TFTP32 2.21 and earlier allows remote attackers to execute arbitrary code via a long filename argument.CVE-2002-2237 tftp32 TFTP server 2.21 and earlier allows remote attackers to cause a denial of service via a GET request with a DOS device name such as com1 or aux.CVE-2002-2353 tftpd32 2.50 and 2.50.2 allows remote attackers to read or write arbitrary files via a full pathname in GET and PUT requests.CVE-2006-0328 Format string vulnerability in Tftpd32 2.81 allows remote attackers to cause a denial of service via format string specifiers in a filename in a (1) GET or (2) SEND request.CVE-2006-6141 Buffer overflow in Tftpd32 3.01 allows remote attackers to cause a denial of service via a long GET or PUT request, which is not properly handled when the request is displayed in the title of the gauge window.OSVDB ID: 12898 Tftpd32 contains a flaw that may allow a remote denial of service. The issue is triggered when the server receives a TFTP request with a long filename, and will result in loss of availability for the service.",
        "impact": "An attacker with network access to TFTPD32 could execute arbitrary code or cause a denial of service on a vulnerable system."
      }
    ],
    "CVE-2002-2427": [
      {
        "url": "http://www.kb.cert.org/vuls/id/124059",
        "title": "GoAhead WebServer information disclosure and authentication bypass vulnerabilities",
        "overview": "GoAhead WebServer contains vulnerabilities that may allow an attacker to view source files containing sensitive information or bypass authentication. The information disclosure vulnerability was previously published as VU#975041.",
        "description": "GoAhead WebServer contains vulnerabilities handling file requests. By sending the web server a specially crafted URL, an attacker may be able to view the source files containing sensitive information or bypass authentication. GoAhead WebServer has a history of source file disclosure vulnerabilities.",
        "impact": "An attacker may be able to view any file on the web server, including files that contain sensitive information like usernames and passwords. An attacker may also be able to bypass authentication for protected files."
      }
    ],
    "CVE-2002-2438": [
      {
        "url": "https://www.kb.cert.org/vuls/id/464113",
        "title": "TCP/IP implementations handle unusual flag combinations inconsistently",
        "overview": "Various vendors' TCP/IP implementations handle packets containing unusual flag combinations in different ways, which may lead to a violation of implicit or explicit security policies.",
        "description": "Background on TCP/IP Connection SemanticsTo establish a TCP connection, a client and server must participate in a three-way handshake (as outlined in RFC793 - \"Transmission Control Protocol\"):1. The client system sends a packet with the SYN flag set to the server.2. The server acknowledges the client by sending a packet back with the SYN and ACK flags set.3. The client completes the connection by sending a packet with the ACK flag set.The connection between the client and the server is then open, and the service-specific data can be exchanged between the client and the server. The following diagram depicts the connection setup sequence:A firewall inserted between a client and a server can be used to manage the connection setup and subsequent traffic flow between the two systems. In general, firewalls are of two types: packet-filtering firewalls, and application-level firewalls. Packet filters look at the source, destination, types, and options associated with the packet, while an application level firewall can \"look inside\" the packet to examine application-specific attributes. This document is concerned primarily with packet-filtering firewalls. Section 3.4 (Establishing a connection) of RFC793 describes the three-way handshake as the standard procedure used to establish a connection. Firewalls will typically not allow this process between hosts that are not permitted to communicate with each other. For example, if an attacker sends a packet with the SYN bit set to a victim server, the firewall will not relay this packet to the victim because the firewall's rules only allow packets with the SYN bit set to come from certain hosts. As a result, the three-way handshake will not be completed, and the attacker will not be able to establish a connection with a host behind the firewall. This method of filtering SYN packets is typically the method used by packet-filtering firewalls to prevent certain hosts from \"getting past the firewall.\" How the Attacker Can Bypass the FirewallAn attacker is free to set whatever flags he chooses to set on any packet. RFC793 defines the meaning of most flag combinations, but it does not address all scenarios in which odd or unexpected flag combinations may be encountered. The method for handling the packet is largely left up to the TCP implementer, and each implementation handles flag combinations differently. For example, T/TCP (RFC1644) recognizes a packet with both the SYN and FIN flags set as being valid. Some implementations are even more liberal in what they accept and choose to treat any packet with the SYN flag set (regardless of what other flags are set or unset) as the opening in the three-way handshake. Other implementations are more conservative and drop packets with unexpected combinations of flags.This ambiguity results in a vulnerability in certain situations. Suppose you have a firewall that passes packets if the RST flag is set, regardless of the state of the SYN flag. Furthermore, suppose you have a host that accepts a SYN flag as the opening of the three-way handshake even if the RST flag is set. An intruder can now send a packet with the SYN and RST flags set and establish a connection with the host behind the firewall in violation of the expected behavior.A change introduced in the Linux Kernel (version 2.4.20) ensures that at least packets with both the SYN and RST flags set are discarded. This change was made within the function tcp_input.c.Finally, research has indicated that multiple TCP implementations will allow a TCP session to be established with hosts by setting certain combinations of flags in an initial packet. The researchers go on to indicate that, \"Other OSes than those tested above are expected to behave in a similar manner after obtaining such a discouraging result...\"Note that while the \"detailed\" research implies it is incorrect for a TCP implementation to accept a SYN with certain other bits set, it is actually a perfectly legal but rarely implemented behavior. Unfortunately, many firewalls either do not specify firewall rules that account for this (a documentation or user bug) or can not specify such firewall rules (an firewall implementation bug).",
        "impact": "The impact of this vulnerability is that an attacker may be able to establish connections with hosts behind firewalls in violation of implied security policies. As a result, an attacker can send data to hosts and services that he ordinarily cannot reach. An intruder could also leverage this flaw to exploit a vulnerability in passive software listening promiscuously on the inside of the firewall (e.g., vulnerability in tcpdump or some similar vulnerability). Note that the specific kinds of packets that may bypass a firewall are highly dependent on the implementation of the firewall."
      },
      {
        "url": "https://www.kb.cert.org/vuls/id/464113,",
        "title": "TCP/IP implementations handle unusual flag combinations inconsistently",
        "overview": "Various vendors' TCP/IP implementations handle packets containing unusual flag combinations in different ways, which may lead to a violation of implicit or explicit security policies.",
        "description": "Background on TCP/IP Connection Semantics. To establish a TCP connection, a client and server must participate in a three-way handshake (as outlined in RFC793 - "Transmission Control Protocol"): 1. The client system sends a packet with the SYN flag set to the server. 2. The server acknowledges the client by sending a packet back with the SYN and ACK flags set. 3. The client completes the connection by sending a packet with the ACK flag set. The connection between the client and the server is then open, and the service-specific data can be exchanged between the client and the server. The following diagram depicts the connection setup sequence: A firewall inserted between a client and a server can be used to manage the connection setup and subsequent traffic flow between the two systems. In general, firewalls are of two types: packet-filtering firewalls, and application-level firewalls. Packet filters look at the source, destination, types, and options associated with the packet, while an application level firewall can "look inside" the packet to examine application-specific attributes. This document is concerned primarily with packet-filtering firewalls. Section 3.4 (Establishing a connection) of RFC793 describes the three-way handshake as the standard procedure used to establish a connection. Firewalls will typically not allow this process between hosts that are not permitted to communicate with each other. For example, if an attacker sends a packet with the SYN bit set to a victim server, the firewall will not relay this packet to the victim because the firewall's rules only allow packets with the SYN bit set to come from certain hosts. As a result, the three-way handshake will not be completed, and the attacker will not be able to establish a connection with a host behind the firewall. This method of filtering SYN packets is typically the method used by packet-filtering firewalls to prevent certain hosts from "getting past the firewall." How the Attacker Can Bypass the Firewall. An attacker is free to set whatever flags he chooses to set on any packet. RFC793 defines the meaning of most flag combinations, but it does not address all scenarios in which odd or unexpected flag combinations may be encountered. The method for handling the packet is largely left up to the TCP implementer, and each implementation handles flag combinations differently. For example, T/TCP (RFC1644) recognizes a packet with both the SYN and FIN flags set as being valid. Some implementations are even more liberal in what they accept and choose to treat any packet with the SYN flag set (regardless of what other flags are set or unset) as the opening in the three-way handshake. Other implementations are more conservative and drop packets with unexpected combinations of flags. This ambiguity results in a vulnerability in certain situations. Suppose you have a firewall that passes packets if the RST flag is set, regardless of the state of the SYN flag. Furthermore, suppose you have a host that accepts a SYN flag as the opening of the three-way handshake even if the RST flag is set. An intruder can now send a packet with the SYN and RST flags set and establish a connection with the host behind the firewall in violation of the expected behavior. A change introduced in the Linux Kernel (version 2.4.20) ensures that at least packets with both the SYN and RST flags set are discarded. This change was made within the function tcp_input.c. Finally, research has indicated that multiple TCP implementations will allow a TCP session to be established with hosts by setting certain combinations of flags in an initial packet. The researchers go on to indicate that, "Other OSes than those tested above are expected to behave in a similar manner after obtaining such a discouraging result...". Note that while the "detailed" research implies it is incorrect for a TCP implementation to accept a SYN with certain other bits set, it is actually a perfectly legal but rarely implemented behavior. Unfortunately, many firewalls either do not specify firewall rules that account for this (a documentation or user bug) or can not specify such firewall rules (an firewall implementation bug).",
        "impact": "The impact of this vulnerability is that an attacker may be able to establish connections with hosts behind firewalls in violation of implied security policies. As a result, an attacker can send data to hosts and services that he ordinarily cannot reach. An intruder could also leverage this flaw to exploit a vulnerability in passive software listening promiscuously on the inside of the firewall (e.g., vulnerability in tcpdump or some similar vulnerability). Note that the specific kinds of packets that may bypass a firewall are highly dependent on the implementation of the firewall."
      }
    ]
  }
}
