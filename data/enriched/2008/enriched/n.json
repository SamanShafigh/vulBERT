{
  "year": 2008,
  "total": 109,
  "reference": "bugzilla.mozilla.org",
  "reports": {
    "CVE-2008-0016": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=443288",
        "title": "Investigate CVE 2008-0016: crash [@ nsACString_internal::SetLength]",
        "description": "Justin Schuh and Tom Cross of the IBM X-Force and Peter Williams of IBM Watson Labs reported this vulnerability to security@m.o. I have attached the full advisory they provided. I can confirm that this crashes Firefox 2.0.0.15 but not 3.0. I will attach a sample backtrace from the crash I'm seeing which for me appears to be a null deref with a small offset. This differs quite a bit from the advisory notes, so it would be great if we can get some additional eyes looking at this to figure out what's going on."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=451617",
        "title": "ConvertUTF8toUTF16 with incomplete multi-byte character sequence can cause overrun",
        "description": "Spun off from bug 443288 (see also bug 451613 and bug 451615) Description from attachment 327885 [details]: The invalid URL segment is eventually passed to ConvertUTF8toUTF16::write. This method copies the string in a loop, checking to see if the end is reached. However, the loop condition does not properly account for the scenario where the loop body passes the end of the string, which occurs when the source string ends inside a multi-byte character sequence. xpcom\\string\\public\\nsUTF8Utils.h:88-90 for ( ; p != end /* && *p */; ) { char c = *p++; This results in an unbounded copy into the previously allocated stack buffer."
      }
    ],
    "CVE-2008-0017": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=443299",
        "title": "Investigate possible buffer overflow in nsDirIndexParser",
        "description": "Justin Schuh of the IBM X-Force reported the following issue via security@m.o. The issue appears to require specially-formatted HTTP response headers, so I will send email to the reporter to see if they have a PoC CGI they can provide. From the advisory: Summary: The http-index-format parser does not check for an allocation failure on a format array. The resulting array is then terminated with a sentinel value of 0xFFFFFFFF. A malicious party can exploit this issue to execute arbitrary code by overwriting a sensitive memory location (such as a buffer length or boolean variable). Details: When handling a content type of \"application/http-index-format\", a specially crafted 200 header line in an HTTP index response can result in an exploitable memory corruption condition. The following code fails to check for a NULL pointer returned from a new [] statement (and no exception is thrown). netwerk\\streamconv\\converters\\nsDirIndexParser.cpp lines 203-204 mFormat = new int[num+1]; mFormat[num] = -1; The resulting pointer is then dereferenced by four times the number of tokens provided in the header line, and a 32-bit integer value of -1 (0xFFFFFFFF) is assigned to the dereferenced location. By manipulating the currently available memory (such as through Javascript) a malicious party can reliably exploit this issue to overwrite an arbitrary memory location with the 4-byte value 0xFFFFFFFF."
      }
    ],
    "CVE-2008-0367": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=244273",
        "title": "improve current HTTP authentication prompt",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8a) Gecko/20040519 Firefox/0.8 Build Identifier: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8a) Gecko/20040519 Firefox/0.8 take a look at two enclosed attachments. one whows IE HTTP Auth prompt, one shows Firefox HTTP Auth prompt. guess which of these is nicer and more user friendly. shouldn't we also have something more nice, when we have IMHO the best browser artwork on the market? Reproducible: Always Steps to Reproduce: use everything that requires HTTP authentication and see the prompt. Actual Results: the prompt is ugly. Expected Results: the prompt should be much more nice, as the IE's prompt is."
      }
    ],
    "CVE-2008-0412": [
      {
        "url": "https://bugzilla.mozilla.org/buglist.cgi?bug_id=398088,393141,364801,346405,396613,394337,406290",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8a) Gecko/20040519 Firefox/0.8 Build Identifier: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8a) Gecko/20040519 Firefox/0.8 take a look at two enclosed attachments. one whows IE HTTP Auth prompt, one shows Firefox HTTP Auth prompt. guess which of these is nicer and more user friendly. shouldn't we also have something more nice, when we have IMHO the best browser artwork on the market? Reproducible: Always Steps to Reproduce: use everything that requires HTTP authentication and see the prompt. Actual Results: the prompt is ugly. Expected Results: the prompt should be much more nice, as the IE's prompt is."
      }
    ],
    "CVE-2008-0413": [
      {
        "url": "https://bugzilla.mozilla.org/buglist.cgi?bug_id=407720,390597,373344,398085,406572,391028,406036,402087",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8a) Gecko/20040519 Firefox/0.8 Build Identifier: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8a) Gecko/20040519 Firefox/0.8 take a look at two enclosed attachments. one whows IE HTTP Auth prompt, one shows Firefox HTTP Auth prompt. guess which of these is nicer and more user friendly. shouldn't we also have something more nice, when we have IMHO the best browser artwork on the market? Reproducible: Always Steps to Reproduce: use everything that requires HTTP authentication and see the prompt. Actual Results: the prompt is ugly. Expected Results: the prompt should be much more nice, as the IE's prompt is."
      }
    ],
    "CVE-2008-0414": [
      {
        "url": "https://bugzilla.mozilla.org/buglist.cgi?bug_id=404451,408034,404391,405299",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8a) Gecko/20040519 Firefox/0.8 Build Identifier: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8a) Gecko/20040519 Firefox/0.8 take a look at two enclosed attachments. one whows IE HTTP Auth prompt, one shows Firefox HTTP Auth prompt. guess which of these is nicer and more user friendly. shouldn't we also have something more nice, when we have IMHO the best browser artwork on the market? Reproducible: Always Steps to Reproduce: use everything that requires HTTP authentication and see the prompt. Actual Results: the prompt is ugly. Expected Results: the prompt should be much more nice, as the IE's prompt is."
      }
    ],
    "CVE-2008-0415": [
      {
        "url": "https://bugzilla.mozilla.org/buglist.cgi?bug_id=386695,393761,393762,399298,407289,372075,363597",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8a) Gecko/20040519 Firefox/0.8 Build Identifier: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8a) Gecko/20040519 Firefox/0.8 take a look at two enclosed attachments. one whows IE HTTP Auth prompt, one shows Firefox HTTP Auth prompt. guess which of these is nicer and more user friendly. shouldn't we also have something more nice, when we have IMHO the best browser artwork on the market? Reproducible: Always Steps to Reproduce: use everything that requires HTTP authentication and see the prompt. Actual Results: the prompt is ugly. Expected Results: the prompt should be much more nice, as the IE's prompt is."
      }
    ],
    "CVE-2008-0416": [
      {
        "url": "https://bugzilla.mozilla.org/buglist.cgi?bug_id=404252,381412,407161",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8a) Gecko/20040519 Firefox/0.8 Build Identifier: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8a) Gecko/20040519 Firefox/0.8 take a look at two enclosed attachments. one whows IE HTTP Auth prompt, one shows Firefox HTTP Auth prompt. guess which of these is nicer and more user friendly. shouldn't we also have something more nice, when we have IMHO the best browser artwork on the market? Reproducible: Always Steps to Reproduce: use everything that requires HTTP authentication and see the prompt. Actual Results: the prompt is ugly. Expected Results: the prompt should be much more nice, as the IE's prompt is."
      }
    ],
    "CVE-2008-0417": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=394610",
        "title": "Content can corrupt stored passwords by injecting line breaks",
        "description": "This is a potential issue raised at last week's pwmgr security/design review. The current storage file, signons2.txt, is a line-based text file with an expected structure. If newlines were to be injected into the file, following entries would be shifted by one or more lines from where expected. If this is possible, I think the only serious impact is that saving a login at an evil site would corrupt the file, and make existing logins inaccessible. I've thought about how entries shifted up/down by one or more lines would be handled, and tricking the pwmgr into disclosing a username or password shouldn't be possible. It might be possible to inject an extra, valid (not-corrupt) login with this technique... The username and password would already be known to the malicious site, though, so I'm not sure if that's useful for anything. [The injected entry would have to a base64 encoded user/pass] The following things might be avenues for funky input: * HTML name/id attribute on the input fields for a username and password * The HTTP realm for WWW-Authenticate (equivalents for other protocols?) * Site address? We ignore the URL Path, but maybe \"evil\\n.site.com\" would work? [Also http://us\\ner:pa\\nss@site.com/ ?] * The form submit URL. Handled the same as the site address, but because it doesn't actually have to work (and comes more or less directly from content),more bizarre values might be possible] The actual username and password values are encrypted and stored as base64 encoded values, so it's unlikely bizarre values will do anything."
      }
    ],
    "CVE-2008-0419": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=400556",
        "title": "[FIX]Vulnerability allows script to see where user is headed, sniff history, and crash [@ nsDocShell::Destroy()] the browser too",
        "description": "User-Agent: Opera/9.50 (Macintosh; Intel Mac OS X; U; en) Build Identifier: Mozilla/5.0 (Macintosh; U; Intel Mac OS X; en-US; rv:1.8.1.8) Gecko/20071008 Firefox/2.0.0.8 See testcase. The problem is that the resize handles on the designMode <IMG> are firing DOM mutation events after location.href has been updated. I couldn't pull off any cross-site-scripting or spoofing with this, but I'm not intimately familiar with the browser's architecture... Reproducible: Always Steps to Reproduce: See testcase. Actual Results: The URL I was headed to was detected. The browser can crash (if you give the testcase permission). Expected Results: No detection of what URL I entered in the address bar to leave the page. No crash."
      }
    ],
    "CVE-2008-0420": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=408076",
        "title": "out of bounds read in BMP decoder can lead to information disclosure",
        "description": "Full credit goes to Michael Skladnikiewicz, who reported this to security@mozilla.org in an email with subject \"Mozilla Firefox 2.0.0.11, 3.0b2pre and prior Remote Information Disclosure\". His initial email is quoted below. ------------------------------------------- Hi, (credit: Gynvael Coldwind // Vexillium with help from udevd and porneL (I didn't know about <canvas> ;D)) OK, Here is how it goes. Firefox has a problem in handling 8bit BMP files. The BMP format has a field in the BITMAPINFOHEADER named biClrUsed, the field says how many colors does the palette contain. If this field is 0, then 256 color pallet is used. When this field is not 0, the palette has the given number of colors. Now this is how it goes in Firefox: 1. Firefox allocates 256 * sizeof(RGB) for the palette 2. It copies the biClrUsed colors from the BMP file Well, what is missing is: 1a. memset(pallete, 0, 256 * sizeof(RGB) The palette still contains old data from the heap. Now, we take a BMP file sized 256x1x8 with biClrUser = 0, and fill the bitmap with gradient, from 0 to 255: 00 01 02 03 04 05 ... and so on When displayed, the BMP file looks chaotic, and in fact it contains the palette copied to the screen. Here is where HTML 5.0 comes in and <canvas>. You can imagine the rest... But I'll write it anyway. You can create a HTML/javascript that copies the image from img to a canvas and then gets it data and, for example using a form, posts it to some remote server. This has been tested and it works. There is a PoC exploit in the bottom. The harvested data contains mainly trash, but there are also parts of other websites, parts of java scripts, even parts of favorites. Well, if there are also cookies and passwords in heap, then they are also reachable. I've attached also the scripts and the leak.bmp bitmap. This will be posted on bugtraq as soon as a fixed version of FireFox is released. Please check also Thunderbird for this issue (I didn't check). Best regards, Looking forward to Your reply, Michael \"Gynvael Coldwind\" Skladnikiewicz Team Vexillium Hispasec"
      }
    ],
    "CVE-2008-0593": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=397427",
        "title": "[FIX]Stylesheet href property shows redirected URL unlike other browsers",
        "description": "Received the following via mail: -------------------------------- The issue is that Firefox will follow 302 redirects on <LINK REL=\"stylesheet\" HREF=\"...\"> requests, *and* then allow the target URL to be read by accessing element.sheet.href property. This sounds like a non-issue, but has profound implications for a number of contemporary websites, most notably: 1) Many webpages use SSO mechanisms and pass temporary authentication tokens in URLs to set cookies for the target domain, then safely consume the token. By pointing an already authenticated user to 'sso.example.com/auth?cont=fun.example.com' and reading back 'fun.example.com/auth_ok?secret_token' target URL, user accounts can be compromised on a large number of high-profile sites. 2) Many webpages redirect an already authenticated user from main page (fun.example.com) by appending URL information that may temporarily contain sensitive data, such as session IDs, mailbox names, user names, and the like (fun.example.com/home/john.doe/hot_movies;jsessionid=foo). These would be disclosed to third parties, severely violating user's privacy, especially if done at a large scale. Because the problem affects a number of sites and is hard to fix on server side, we would prefer not to have to explicitly explain these attack scenarios in a Bugzilla entry (and without that additional explanation, the impact is not very obvious). (We have no problem with the existence of a fix being communicated to users once it is available, naturally; Martin Straka should be credited as the original reporter if you wish to do so). ---------------------------------------------------- The above did not come with a PoC, but the attached file shows the difference between the link href and the sheet href. Mozilla.com's support page isn't a real stylesheet, but it's a handy redirected page."
      }
    ],
    "CVE-2008-1244": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=371598",
        "title": "drive-by pharming: changing settings on home router without the user's knowledge",
        "description": "User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X; en-US; rv:1.8.1.2) Gecko/20070219 Firefox/2.0.0.2 Build Identifier: Mozilla/5.0 (Macintosh; U; Intel Mac OS X; en-US; rv:1.8.1.2) Gecko/20070219 Firefox/2.0.0.2 Through use of javascript and/or plain http requests (images, links, ...), settings of some broadband routers that use web-based configuration can be modified. This can lead to various attacks when changes are made to DNS servers (think phishing), DMZ (NAT won't serve as basic firewall anymore), ... Reproducible: Sometimes Steps to Reproduce: 1. use a vulnerable router (with default password (note: on philips routers, a password is not required to perform this attack)) 2. visit a web page that contains, for example, following code: <img src=http://192.168.1.1/cgi-bin/setup_dns.exe?page=setup_dns&logout=&dns1_1=208&dns1_2=67&dns1_3=222&dns1_4=222&dns2_1=208&dns2_2=67&dns2_3=220&dns2_4=220> -> this sets, on a philips router, the dns servers to opendns.org without asking for a password note: in the paper on \"drive-by pharming\" (see additional information) more examples are given (javascript on how to determine the router's ip address, brand and model (through use of images in the configuration page of the router)) Actual Results: DNS servers can be changed (leading to phishing attacks) but so can port forwarding rules, DMZ, wireless encryption, changing the firmware of the router, ... Expected Results: Even though this is the responsibility of the router manufacturer and the user (change default password, ...), maybe firefox should prevent web pages from loading scripts/images/... from the ip of the router (or anything on the lan for that matter) if the user has not requested to actually visit http://<ip of router> (note: this does not prevent users from clicking a link that changes configuration...) Maybe it's better to go to an error page that says \"Do you want to change settings of your router?\" See http://www.symantec.com/avcenter/reference/Driveby_Pharming.pdf and http://www.schneier.com/blog/archives/2007/02/driveby_pharmin.html (and maybe http://it.slashdot.org/article.pl?sid=07/02/16/1421238) note: I have not yet tested this on other routers that do require password authentication not just for visiting the configuration pages (check this by using for example wireshark(former ethereal) and saving what GET/POST requests are made during configuration. Afterwards, try issuing the same requests from a test html file and see whether configurations have changed.(you all know this, so I don't know why I'm writing this ;) )) note: changing default passwords and router ip addresses are responsibilities of the user, however, as the past has shown, we can't expect everyone to have done this. As long as vulnerable routers are in use, I feel firefox should do something to prevent users from falling victim of such attacks(\"pharming\") in light of the phishing protection added in 2.0 note: this is the first bug I have filed, I'm in no way an authority on the field of security or bugzilla and I apologize if I have made a mistake by posting this here and hope the proper admins can move this to the proper category. I have chosen to not make this a \"confidential bug\" since it's more of a feature request."
      }
    ],
    "CVE-2008-1380": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=425576",
        "title": "Crash on login to Excite Japan Blog (exblog.jp) after updating to Firefox 2.0.0.13 [@ js_MarkGCThing]",
        "description": "Some Japanese users reported that they have encountered crashes on login to Excite Blog <http://www.exblog.jp/> after updating to Firefox 2.0.0.13. http://forums.mozillazine.jp/viewtopic.php?t=7215 http://takublog.exblog.jp/7581761/ http://asfradio.exblog.jp/8538149/ http://sanggar.exblog.jp/6943437/ http://ddrer.exblog.jp/7736962/ http://th69.exblog.jp/7574222/ http://runtotorun.exblog.jp/7735841/ - error message says: The instruction at \"0x600f0290\" referenced memory at \"0x000013e8\". The Memory could not be \"read\". Click OK to terminate the application. - both on Windows and Mac - no problem with the \"secure mode login\" (with SSL) - no problem when login from the home page, crash when login form \"login\" links on each blogs"
      }
    ],
    "CVE-2008-2103": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=425665",
        "title": "[SECURITY] XSS in show_bug.cgi: id isn't filtered for format=multiple",
        "description": "id isn't filtered for format=multiple. Noted by lbutler on IRC, via some automated XSS checker thing (lbutler - can you add details?). lpsolit verfied on 2.20 :( will look into it and do patch in a sec"
      }
    ],
    "CVE-2008-2104": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=415471",
        "title": "[SECURITY] A user without canconfirm privs can enter bugs in the NEW/ASSIGNED status using XML-RPC",
        "description": "Bug->create() doesn't make sure that the bug status entered by the user is legal based on his privs. If votes to confirm > 0, then a user with no privs cannot choose the initial bug status; this one must be UNCONFIRMED. Either _check_bug_status() or create() itself should enforce this, maybe using something like: delete $params->{bug_status} unless $user->in_group('canconfirm', $product)"
      }
    ],
    "CVE-2008-2105": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=419188",
        "title": "[SECURITY] email_in.pl lets you set the changer as @reporter instead of only checking the \"From\" header",
        "description": "email_in.pl lets you do changes even without altering the email headers. This means that even if you use PGP to sign your emails, or use tokens, it's still trivial to alter bugs as if you were someone else. One useful case would be the ability to CC yourself to bugs you want to see. All you have to do is to add the following line to your email: @reporter = someone.else@user.account Where the email address is a valid user account with privs to access security bugs. This trick works with process_bug.cgi, i.e. with existing bugs, which is why I restricted this bug to the security group. I know email_in.pl currently has no way to check the real identity of the sender, but for installations which added some checks to it and turned on incoming emails, they are still fully vulnerable (e.g. Mandriva Bugzilla). Now technically, the reason this works is because we have: my $username = $mail_fields->{'reporter'}; my $user = Bugzilla::User->new({ name => $username }) || ThrowUserError('invalid_username', { name => $username }); Bugzilla->set_user($user); But $mail_fields->{'reporter'} comes from: my ($reporter) = Email::Address->parse($input_email->header('From')); $fields{'reporter'} = $reporter->address; The problem is that later in the code, we have: if ($line =~ /^@(\\S+)\\s*=\\s*(.*)\\s*/) { $current_field = lc($1); $fields{$current_field} = $2; } So if you have the @reporter line, it will override the one taken from the email header, and so all authenticated emails are vulnerable. I just tried this trick to CC myself to a bug I'm not allowed to see on a test installation, and this works great. I could do the same on Mandriva!"
      }
    ],
    "CVE-2008-2785": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=440230",
        "title": "Firefox CSSValue Array Memory Corruption Vulnerability",
        "description": "ZDI submitted the following advisory to us via mail to security@mozilla.org -- ABSTRACT ------------------------------------------------------------ TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox 2.0.x Mozilla Firefox 3.0.x -- VULNERABILITY DETAILS ----------------------------------------------- This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of Mozilla Firefox. User interaction is required to exploit this vulnerability in that the target must visit a malicious page. The specific flaw exists in the browser's handling reference counters to the nsCSSValue:Array class. Creating more then 65,535 references will overflow a 16-bit reference counter and therefore result in an erroneous free() while the object still exists. Properly manipulated this can result in arbitrary code execution under the context of the current user. Most reference counters are implemented as unsigned longs and can not be feasible overflowed with too many reference. However, the nsCSSValue::Array class uses a 16-bit wide value, layout/style/nsCSSValue.h (lines 321-335): void AddRef() { ++mRefCnt; NS_LOG_ADDREF(this, mRefCnt, \"nsCSSValue::Array\", sizeof(*this)); } void Release() { --mRefCnt; NS_LOG_RELEASE(this, mRefCnt, \"nsCSSValue::Array\"); if (mRefCnt == 0) delete this; } private: PRUint16 mRefCnt; PRUint16 mCount; An attacker can create an arbitrary number of references to this object by creating a style definition with counter-increment, counter-reset, cursor or text-shadow attribute. Setting one of those attributes to an arbitrary HTML object creates a reference to this object. Creating more than 65535 HTML objects with reference to this style definition will overflow the reference counter, which will lead to a freeing of the object whilst references to it still exist. -- CREDIT -------------------------------------------------------------- This vulnerability was discovered by: * Anonymous"
      }
    ],
    "CVE-2008-2798": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=378027",
        "title": "Printing crash [@ nsCellMap::GetCellInfoAt] Exception: EXC_BAD_INSTRUCTION (0x0002)",
        "description": "User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X; en-US; rv:1.8.1.3) Gecko/20070309 Firefox/2.0.0.3 Build Identifier: Mozilla/5.0 (Macintosh; U; Intel Mac OS X; en-US; rv:1.8.1.3) Gecko/20070309 Firefox/2.0.0.3 Firefox crashes every time with an EXC_BAD_INSTRUCTION exception when trying to print a particular page from Intuit.com; a product order page. The original page is from intuit.com. A web complete source page and supporting images,etc are attached to this bug. The crash is 100% reproducible with this page content on MacOS X 10.4.9 with Firefox 2.0.0.3 (20070309). Reproducible: Always Steps to Reproduce: 1. Using Firefox 2.0.0.3 (20070309)... 2. Open the attached 'edit_confirmation.html' file. 3. Once open, click on the 'Print this page' icon/link on the page. 4. When the OS print dialog comes up, select 'Print' Actual Results: Firefox crashes after you have clicked 'Print' and the print dialog has been dismissed. Exception: EXC_BAD_INSTRUCTION (0x0002) Expected Results: Firefox should successfully print the page. This sample page content prints fine on Windows Vista with Firefox 2.0.0.3 (20070309). Attached is a sample 'order_confirmation.xps' of the page output from Windows Vista."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=391178",
        "title": "Crash [@ nsCSSFrameConstructor::FindFrameWithContent] with XUL trees, position:fixed",
        "description": "Thread 0 Crashed reading memory at 0xdddddddd: 0 nsCSSFrameConstructor::FindFrameWithContent(nsFrameManager*, nsIFrame*, nsIContent*, nsIContent*, nsFindFrameHint*) + 372 (nsCSSFrameConstructor.cpp:10773) 1 nsCSSFrameConstructor::FindPrimaryFrameFor(nsFrameManager*, nsIContent*, nsIFrame**, nsFindFrameHint*) + 237 (nsCSSFrameConstructor.cpp:10865) 2 nsFrameManager::GetPrimaryFrameFor(nsIContent*, int) + 538 (nsFrameManager.cpp:394) 3 PresShell::GetPrimaryFrameFor(nsIContent*) const + 42 (nsPresShell.cpp:4688) 4 nsBoxObject::GetFrame(int) + 102 (nsBoxObject.cpp:141) 5 nsTreeBoxObject::GetTreeBody() + 53 (nsTreeBoxObject.cpp:116) 6 nsTreeBoxObject::GetColumns(nsITreeColumns**) + 17 (nsTreeBoxObject.cpp:234) 7 nsTreeColFrame::InvalidateColumns() + 96 (nsTreeColFrame.cpp:228) 8 nsTreeColFrame::Destroy() + 17 (nsTreeColFrame.cpp:103) 9 nsFrameList::DestroyFrames() + 48 (nsFrameList.cpp:68) 10 nsContainerFrame::Destroy() + 73 (nsContainerFrame.cpp:255) ..."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=430814",
        "title": "Crash [@ nsStyleContext::GetStyleDisplay] while trying to print",
        "description": "See testcase, when clicking on the print button and then printing something, current trunk builds of Mozilla crash. http://crash-stats.mozilla.com/report/index/8f00214c-12df-11dd-92b9-001cc4e2bf68?p=1 0 xul.dll nsIFrame::GetStyleDisplay nsStyleStructList.h:95 1 xul.dll nsCSSRendering::PaintBackgroundWithSC mozilla/layout/base/nsCSSRendering.cpp:3448 2 xul.dll TableBackgroundPainter::PaintCell mozilla/layout/tables/nsTablePainter.cpp:634 3 xul.dll TableBackgroundPainter::PaintRow mozilla/layout/tables/nsTablePainter.cpp:590 4 xul.dll TableBackgroundPainter::PaintRowGroup mozilla/layout/tables/nsTablePainter.cpp:530 5 xul.dll TableBackgroundPainter::PaintTable mozilla/layout/tables/nsTablePainter.cpp:446 6 xul.dll nsTableFrame::PaintTableBorderBackground mozilla/layout/tables/nsTableFrame.cpp:1469 7 xul.dll nsDisplayTableBorderBackground::Paint mozilla/layout/tables/nsTableFrame.cpp:1318 8 xul.dll nsDisplayList::Paint mozilla/layout/base/nsDisplayList.cpp:296 9 xul.dll nsLayoutUtils::PaintFrame mozilla/layout/base/nsLayoutUtils.cpp:988 10 xul.dll nsPageFrame::PaintPageContent mozilla/layout/generic/nsPageFrame.cpp:562 11 xul.dll PaintPageContent mozilla/layout/generic/nsPageFrame.cpp:403 12 xul.dll nsDisplayGeneric::Paint mozilla/layout/base/nsDisplayList.h:862 13 xul.dll nsDisplayList::Paint mozilla/layout/base/nsDisplayList.cpp:296 14 xul.dll nsLayoutUtils::PaintFrame mozilla/layout/base/nsLayoutUtils.cpp:988 15 xul.dll nsSimplePageSequenceFrame::PrintNextPage mozilla/layout/generic/nsSimplePageSequence.cpp:647 16 xul.dll nsPrintEngine::PrintPage mozilla/layout/printing/nsPrintEngine.cpp:2368 17 xul.dll nsPagePrintTimer::Notify mozilla/layout/printing/nsPagePrintTimer.cpp:90 18 xul.dll nsTimerImpl::Fire mozilla/xpcom/threads/nsTimerImpl.cpp:403 19 xul.dll nsTimerEvent::Run mozilla/xpcom/threads/nsTimerImpl.cpp:490 20 xul.dll nsThread::ProcessNextEvent mozilla/xpcom/threads/nsThread.cpp:510 21 xul.dll nsBaseAppShell::Run mozilla/widget/src/xpwidgets/nsBaseAppShell.cpp:170 22 nspr4.dll PR_GetEnv 23 firefox.exe wmain mozilla/toolkit/xre/nsWindowsWMain.cpp:87 24 firefox.exe firefox.exe@0x217f 25 kernel32.dll BaseProcessStart"
      }
    ],
    "CVE-2008-2799": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=356378",
        "title": "\"invalid getter usage\" or assertion failure with \"var x; x getter= function () { };\"",
        "description": "js> (function() { var x; x getter= function () { }; })() Opt: typein:1: SyntaxError: invalid getter usage (Why?) Debug: Assertion failure: 0, at jsinterp.c:5128"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=380833",
        "title": "Crash during GC after uneval (involves E4X, mysterious sharp variable)",
        "description": "js> www = <x><y/></x>; print(uneval(this) + \"\\n\"); gc(); ({www:#1=<x> <y/> </x>}) Exception: EXC_BAD_ACCESS (0x0001) Codes: KERN_INVALID_ADDRESS (0x0001) at 0xdddddc00 Thread 0 Crashed: 0 js 0x00053264 js_GetGCThingFlags + 26 (jsgc.c:512) 1 js 0x00055663 JS_CallTracer + 495 (jsgc.c:2146) 2 js 0x0008696b js_TraceObject + 811 (jsobj.c:4898) 3 js 0x000548ec JS_TraceChildren + 140 (jsgc.c:1812) 4 js 0x0005577d JS_CallTracer + 777 (jsgc.c:2172) 5 js 0x0008696b js_TraceObject + 811 (jsobj.c:4898) 6 js 0x000548ec JS_TraceChildren + 140 (jsgc.c:1812) 7 js 0x0005577d JS_CallTracer + 777 (jsgc.c:2172) 8 js 0x00055ccb js_TraceStackFrame + 355 (jsgc.c:2333) 9 js 0x0005639a js_TraceContext + 124 (jsgc.c:2445) 10 js 0x000568d5 js_TraceRuntime + 179 (jsgc.c:2519) 11 js 0x00056b3b js_GC + 530 (jsgc.c:2747) 12 js 0x000161a7 JS_GC + 96 (jsapi.c:2372) 13 js 0x000037f6 GC + 45 (js.c:742) 14 js 0x00059941 js_Invoke + 2945 (jsinterp.c:1332) 15 js 0x0006a376 js_Interpret + 62065 (jsinterp.c:4025) 16 js 0x0005a295 js_Execute + 715 (jsinterp.c:1591) 17 js 0x0001b02f JS_ExecuteScript + 54 (jsapi.c:4692) 18 js 0x00002692 Process + 912 (js.c:268) 19 js 0x0000309b ProcessArgs + 2045 (js.c:519) 20 js 0x00007fb0 main + 612 (js.c:3256) 21 js 0x000021a6 _start + 216 22 js 0x000020cd start + 41"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=418128",
        "title": "Yet another GC hazard with ++/-- in js_Interpret",
        "description": "The current implementation of ++ and -- operators in js_Interpret to increase/decrease indexed property of an object does not root the id of the property. This leads to a GC hazard when code tries to save the result back into object as the following example demonstrates: ~/m/ff/mozilla/js/src $ cat ~/m/y.js var obj = {}; var id = { toString: function() { return \"\"+Math.pow(2, 0.1); } } obj[id] = { valueOf: unrooter }; print(obj[id]++); gc(); print(uneval(obj)); function unrooter() { delete obj[id]; gc(); return 10; } ~/m/ff/mozilla/js/src $ ~/m/ff/mozilla/js/src/Linux_All_OPT.OBJ/js ~/m/y.js before 16384, after 16384, break 09ffc000 10 before 16384, after 16384, break 09ffc000 segmentation fault"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=431409",
        "title": "[1.8 branch] Crash [@ js_AtomToPrintableString]",
        "description": "I found this bug and reduced it. Jesse Ruderman helped to reduce it even more, till: \"012345\".__defineSetter__(5, function(){}); This command crashes at js_AtomToPrintableString with address 0x0000000000000013. It does not crash trunk js shell."
      }
    ],
    "CVE-2008-2800": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=428672",
        "title": "XSS using an event handler attached to the outer window",
        "description": "If an event handler attribute is set on <body> element in a document that has already been unloaded, an event handler function is attached to the outer window. This allows an attacker to perform an XSS attack."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=432591",
        "title": "Fix for bug 428672 can be circumvented by using XUL element",
        "description": "Instead of <body> element, a XUL element can be used to attach an event handler to an outer window."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=433328",
        "title": "XSS using <script> element in unloaded document",
        "description": "This is probably the same bug as bug 433003. And, this seems to be a problem with nsDocument::GetScriptGlobalObject like bug 428672. A <script> element in an old document can be evaluated in a new document. The script itself is evaluated with the old document's principal, but, it's possible to create a function that can run with the new document's principal."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=439035",
        "title": "Same-origin check in nsXMLHttpRequest::OnChannelRedirect() can be circumvented",
        "description": "This is fx2-only. (On trunk, the same-origin check in question compares an old URI to a new URI.) The same-origin check in nsXMLHttpRequest::OnChannelRedirect() uses a principal of an associated JS context. It can be circumvented by loading a cross-origin page in that context before nsXMLHttpRequest::OnChannelRedirect() is called. By using this trick, an attacker can read contents and http headers of a target site. Upcoming testcase consists of an html and a cgi script, thus it does not work on bugzilla.mozilla.org. Please set up it in a suitable place."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=440308",
        "title": "XSS by using XMLHttpRequest and onreadystatechange handler",
        "description": "Please see bug 403168. This is fx2-only. On fx2, nsXMLHttpRequest::ChangeState() does not call CheckInnerWindowCorrectness(), thus, it's possible to perform an XSS attack by using onreadystatechange handler. (On trunk, nsXMLHttpRequest::ChangeState() calls NotifyEventListeners(), which calls CheckInnerWindowCorrectness().)"
      }
    ],
    "CVE-2008-2801": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=418996",
        "title": "[FIX]Unsigned documents can inject script into signed JARs",
        "description": "A malicious web page can embed an iframe to a document inside a signed JAR file and inject script into that document. The injected script runs with privileges of the JAR file, even though it was not written by the signer of the JAR file. Because netscape.security.PrivilegeManager.enablePrivilege uses the common name of the principal who signed the JAR file in its security UI, a malicious web page can impersonate anyone who signs a JAR file. The below web page can impersonate Google, Yahoo!, eBay, and LinkedIn: http://crypto.stanford.edu/~collinj/research/signed-scripts/ It is not hard for an attacker for find such a JAR file, because signed JAR files are commonly used to distribute extensions; addons.mozilla.org contains JAR files signed by various well-known brands. If a user ever checks \"Remember this decision,\" any web site can now obtain that principal's capabilities without prompting the user, provided that the attacker can obtain a JAR file signed by that principal."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=424188",
        "title": "[FIX]Possible to exploit relative xul:script URIs in signed jars",
        "description": "See bug 418996 comment 1 and bug 418996 comment 21."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=424426",
        "title": "[FIX]Downgrading codebase principals in signed jars is not effective",
        "description": "Following up on bug 424188, relative paths in signed JARs are still dangerous. Here is an example of code that, if signed, would lead to universal XSS with on users who trust the signer: <script> function getURL(url) { netscape.security.PrivilegeManager.enablePrivilege('UniversalBrowserRead'); var xhr = new XMLHttpRequest(); xhr.open('GET', url, false); xhr.send(null); return xhr.responseText; } </script> <script src=\"some_relative_path.js\"></script> You can try this test case (\"Globals\") at <http://crypto.stanford.edu/~collinj/research/signed-scripts/more-relative-paths.html>. The problem is that attacker can swap in a malicious unsigned some_relative_path.js file. Although this script downgrades the privileges of the document, the getURL function has already been defined before the downgrade, so it can still request privileges on behalf of the signer. Even if you downgrade the principal associated will all the window's closures, this attack may still work if the getURL function was defined in another frame. See the \"Remote-window Globals\" test case."
      }
    ],
    "CVE-2008-2802": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=419846",
        "title": "Non-chrome XUL documents can load chrome scripts from the fastload file",
        "description": "Without using overlay, non-chrome XUL documents can load chrome scripts from the fastload file by using <script> elements. This is exploitable in the same way as bug 390813."
      }
    ],
    "CVE-2008-2803": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=418356",
        "title": "[FIX]It's unsafe to use mozIJSSubScriptLoader.loadSubScript() with non-chrome urls or chrome urls whose scheme/host part contain uppercase characters",
        "description": "It's unsafe to use mozIJSSubScriptLoader.loadSubScript() with non-chrome urls or chrome urls whose scheme/host part contain uppercase characters. Scripts that are loaded in this way do not use implicit XPCNativeWrappers when accessing content. loader.loadSubScript(\"chrome://test/...\"); // safe loader.loadSubScript(\"chrome://TEST/...\"); // unsafe loader.loadSubScript(\"file://...\"); // unsafe Google Toolbar uses mozIJSSubScriptLoader.loadSubScript() with file: url, and allows an attacker to run arbitrary code with chrome privileges."
      }
    ],
    "CVE-2008-2805": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=423541",
        "title": "Arbitrary file upload via originalTarget and DOM Range",
        "description": "As reported to security@ by Opera: While investigating potential file upload issues, one of our security researchers came across another vulnerability in Firefox. This is unrelated to the issues that we have previously reported to you. Attached. Exploiting the issue only requires one click (anywhere in the page), and one keypress (a-z, 0-9...any typed character works, although ctrl/shift/backspace/etc don't work). Filing in DOM:HTML since that's where bug 413135 was filed."
      }
    ],
    "CVE-2008-2806": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=408329",
        "title": "Mac OS X Java Plugin (JEP) - LiveConnect can still use document.domain bypass to create arbitrary socket connections",
        "description": "User-Agent: Mozilla/5.0 (Macintosh; U; PPC Mac OS X Mach-O; en-US; rv:1.8.1.11) Gecko/20071127 Firefox/2.0.0.11 Build Identifier: Mozilla/5.0 (Macintosh; U; PPC Mac OS X Mach-O; en-US; rv:1.8.1.11) Gecko/20071127 Firefox/2.0.0.11 Apple has released Java for Mac OS X 10.4, Release 6 ( available from http://www.apple.com/support/downloads/javaformacosx104release6.html ). The update appears to contain fixes for the DNS rebinding vulnerabilities discussed in bug #389625. Even though the Java runtime has been updated, the Firefox Mac OS X Java Plugin (MRJ Plugin) appears to remain vulnerable to the 'document.domain' bypass. By using the document.domain exception to the same origin policy, LiveConnect can be used to create arbitrary socket connections. Sun Java Runtime Environment fixes for Windows and Linux were released at the beginning of October. With the Sun JRE updates, the Firefox Java plugins on these platforms are no longer vulnerable to the document.domain bypass. A demo showing how connections can be made to a localhost web server via the loopback device is available from the URL above. Reproducible: Always"
      }
    ],
    "CVE-2008-2807": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=397093",
        "title": "Faulty .properties file results in uninitialized memory being used",
        "description": "I have hit a weird bug writing an extension for Firefox. The extension is localized in both french and english. One of the french *.properties file was not UTF-8 but ISO8859-encoded. The window opened by my extension retrieves 3 strings from that properties file. Surprisingly, the first retrieval (string 'textLayouts' in the attached file) did not fail, while the two others did fail. BUT what I got back from that first |GetStringFromName()| call was absolutely not what's in the properties file but some text coming from a MS Word process also running on my machine !!! My XUL window was showing me a bit of the text I was editing in Word... Fixing the encoding of the file of course resolved the issue."
      }
    ],
    "CVE-2008-2808": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=411433",
        "title": "file location URL in directory listing should be HTML escaped",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US; rv:1.9b3pre) Gecko/2008010813 Minefield/3.0b3pre Build Identifier: When dropping file (its name contains %) from Explorer (or desktop) to browser, browser opens incorrect file. Reproducible: Always Steps to Reproduce: 1.Create file named test&gt%21.html in a foloder 2.Open the folder with browser. 3.Click link to test&gt%21.html Actual Results: Error (File not found) for Firefox can't find the file at test>%21.html. Expected Results: File should be opened. According to DOM inspector, Value of href of \"A\" element in directory view is \"test>%2521.html\", So, it should be \"test&gt;%2521.html\""
      }
    ],
    "CVE-2008-2809": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=240261",
        "title": "[1.8 branch] peer-trusted certs can use alt names to spoof",
        "description": "There appears to be a vulnerability in the way that the peer trust model interacts with alternative subject names. The issue is that NSS only has a single bit which trusts a cert for all of its subject names, not just the name the user intended to trust the cert for. An example would come from an https site with a malicious self-signed cert. despot.mozilla.org would be a good example of a good launch site--someplace where users would not find a self-signed cert to be unusual. The cert would not only contain its own, legitimate, domain, but would include an alternate name of a site the attacker wishes to spoof. The user accepts the cert for purposes of authenticating the legitimate domain, but PSM has NSS mark the cert as trusted for domains that were never mentioned to the user. This affects all peer-trust areas, SSL, S/MIME, and code signing. Bug 230655 at least gives the user an way to see what the domains are, without having to decode ASN.1 in their head. At a minimum, PSM would need to list all of the alternative names before giving the user the opportunity to mark the cert as peer-trusted--this is related to bug 238142. Better would be to have, instead of a peer-trust bit on the cert, a list of names for which the cert is peer-trusted. This would require either an extensive change to NSS or for slightly more extensive changes to PSM to take over the peer-trust-database functions of NSS."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=327181",
        "title": "Improve error reporting for invalid-certificate errors (error page for https, or combined dialog)",
        "description": "I propose eliminating or at least minimizing SSL/TLS-related error messages and warning dialogs in the Firefox UI, particularly in cases where such messages and warnings are arguably not warranted based on the security risk relative to not using SSL/TLS at all. I also suggest modifying the Firefox UI to discourage typical users from modifying the default list of \"trusted\" CAs and certificates by adding new site or CA certs as warning dialogs pop up. The overall effect of this proposal would be to present an http-like UI (possibly with an additional information bar message) for sites presenting invalid certificates, instead of using the standard SSL UI (padlock, etc.). This proposal is based on my n.p.m.crypto posting of March 11, 2005, titled \"Strawman proposal for SSL UI changes\". Note that (unlike the above-referenced post) this proposal is independent of any UI changes proposed for hypothetical future \"extended validation\" or \"high assurance\" certificates. It assumes the use of current \"legacy\" certificates, and no change to the underlying NSS mechanisms for validating certificates. Here's the basic proposal: * Retain the current Firefox UI when SSL/TLS is not used: - location bar background is white, with no padlock - no padlock or other SSL/TLS-related indicator in status bar - site domain name is *not* displayed in the status bar * Retain the current \"normal case\" SSL/TLS Firefox UI: - location bar background is yellow, with padlock - display locked padlock in status bar - site domain name from certificate is displayed in status bar Add the following new SSL/TLS UI cases, for which we do *not* use the traditional \"padlock\" indicator in any form: * SSL/TLS connection involving a self-signed certificate or a certificate from an unknown CA: - location bar background is white, with no padlock - display informational message of some sort (as for blocked popups) - display exclamation point in status bar (as for blocked popups) - site domain name from cert is *not* displayed in the status bar * SSL/TLS connection involving a certificate from a known CA where the domain name in the certificate does not match the domain name requested: - (optional) display warning dialog describing the potential security risk, and giving the user the option of proceeding or cancelling; if the user chooses to proceed, display the following: - location bar background is white, with no padlock - display informational message of some sort (as for blocked popups) - display \"X\" mark in status bar (instead of padlock) - site domain name from cert is displayed in the status bar Some follow-on comments: * \"Known CAs\" are CAs for which we have a stored certificate with the SSL \"trust bit\" set on. Any other case (cert not stored or trust bit not set) is treated as an unknown CA. (I try to avoid the term \"trusted CA\" because of ambiguity over what \"trust\" actually means.) * The site domain name should be displayed in the status bar only when we have some reason to assume that it is valid. Hence it should *not* be displayed for self-signed certs and certs from unknown CAs, but *should* always be displayed for certs from known CAs. * In the case of a self-signed cert or cert from an unknown CA, Firefox should *not* offer users the opportunity to accept the certificate or the certificate's issuing CA as \"trusted\", at least not from the immediately visible UI. If an informational message is displayed in this case, then perhaps its dropdown menu could contain an option to not display the informational message in the future for self-signed certs or unknown CAs (similar to the option for blocked popups); in this case the UI indicators would remain the same, except possibly for a question mark replacing the \"exclamation mark in circle\" accompanying the original informational message. (The other alternative would be to display no status indicator at all once the informational message had been dismissed; in effect this would treat sites with self-signed certs or certs from unknown CAs as similar in all respects to non-SSL sites.) The informational message's dropdown menu could also contain a menu item \"Edit Certificate Options...\" or \"Edit SSL Security Options...\" (similar to the \"Edit Popup Blocker Options...\" item on the \"blocked popup\" informational message), and the resulting dialog box could contain options to accept the site's certificate or a new CA certificate. Future visits to the site would then display the pad lock as for other SSL/TLS connections. * In the case of a cert from a known CA but with an non-matching domain name, if a warning dialog is to be display, then the warning dialog should be displayed at least once per browser session, without the possibility of turning it off permanently for that site. If an informational message is displayed in this case, then perhaps its dropdown menu can contain an option to not display the informational message in the future for not matching domain names (similar to the option for self-signed certs or unknown CAs); in this case the UI indicators would remain the same, except for an \"X\" mark replacing the \"exclamation mark in circle\" accompanying the original informational message. (I don't think it makes sense to not display a status bar indicator at all after dismissing the information message, and to treat this case the same as a non-SSL site. There really is something wrong with the site -- it's either misconfigured or is using a stolen key and cert -- and the UI should reflect that.) * The only way to add new CAs or server certs or to change the default \"trust bits\" should be through the Firefox preferences UI or (perhaps) through a detailed certificate dialog reached by selecting an item from the dropdown menu associated with an informational message (if used). (This latter option would be similar to the \"Edit Popup Blocker Options\" menu item displayed for the blocked popups informational message.)"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=402347",
        "title": "Not binding X.509 certificate to originating domain name allows certificate spoofing",
        "description": "User-Agent: Mozilla/5.0 (X11; U; Linux i686; da-DK; rv:1.8.1.8) Gecko/20061201 Firefox/2.0.0.8 (Ubuntu-feisty) Build Identifier: Mozilla/5.0 (X11; U; Linux i686; da-DK; rv:1.8.1.8) Gecko/20061201 Firefox/2.0.0.8 (Ubuntu-feisty) Mozilla based browsers do not bind a user-approved webserver certificate to the originating domain name. This make the user vulnerable to certificate spoofing by \"subjectAltName:dNSName\"-extensions. Scenario: (1) Assumed a phisher could redirect a user's browser to his prepared spoofing webserver (by MITM or DNS spoofing or domain hijacking or ...). But the spoofed webserver \"www.paypal.com\" uses a webserver cert signed by a browser-accredited CA, such that the user's browser would raise a \"unknown CA\" warning (that's what X.509 and TLS is all about!), so the phisher defers this step. (2) The phisher creates a website \"www.example.com\" and a home brewed X.509 cert: DN=\"CN=www.example.com\" subjectAltName:dNSName=www.example.com subjectAltName:dNSName=www.paypal.com and lures the user to https://www.example.com/. The user gets a \"unknown CA\" warning, but the \"subjectAltName:dNSName\" extensions are not shown to him (see bug #238142). As he does not plan to enter any relevant information, he accepts the cert (temporarily or permanently) and proceeds to download some pics. (3) Any time later (if the cert got accepted temporarily this has to happen within the same session), the phisher lures the user to his spoofed https://www.paypal.com/, using the very same self-signed certificate. NO WARNING. I consider this a severe cert-spoofing issue. Mozillas \"match any wildcard\"-behaviour (bug #159483) makes it worse. Reproducible: Always Steps to Reproduce: 1. Create a X.509 cert with DN=\"CN=www.example.com\", subjectAltName:dNSName=\"www.example.com\" and subjectAltName:dNSName=\"www.example.net\". Configure (virtual) https-hosts \"www.example.com\" and \"www.example.net\" using this cert. 2. Go to <https://www.example.com/> 3. Go to <https://www.example.net/> Actual Results: No warning in step 3 Expected Results: Raise a warning like 'The webserver \"www.example.net\" presents a certificate issued by an unknown CA. You have already accepted this certificate, but for the domain name(s) \"www.example.com\". It is possible, though unlikely, that someone may be trying to intercept your communication with this web site. Do you want to accept this certificate for \"www.example.net\", too?' Demonstration at <http://test.eonis.net/> More details at <https://nils.toedtmann.net/pub/subjectAltName.txt> (sorry, home made CA again ;) Bug #159483: \"cert name matching: RFC 2818 vs. backwards compatibility\" Bug #238142: \"server mismatch dialog doesn't show subject alt names\" Tested: Firefox 2.0.0.8 Linux/FreeBSD, Firefox 2.0.0.9/Windows, Firefox 3.0a8 Linux/Windows, SeaMonkey 1.1.5/Windows and some more."
      }
    ],
    "CVE-2008-2810": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=410156",
        "title": "URL files (IE bookmarks) cause remote code to run as local file when opened directly",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9b3pre) Gecko/2007122805 Minefield/3.0b3pre Build Identifier: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9b3pre) Gecko/2007122805 Minefield/3.0b3pre I added Firefox to my Send To: menu to allow me to open local HTML and URL files in Firefox because these extensions are associated with my editors. I opened a URL file from my IE favorites folder this way (equivalent of dragging it onto the Firefox executable) and lo and behold, the page loaded as a file: protocol page but then went on to download the HTML from the remote server! This should cause a redirect to the URL embedded in the file rather than running it as a local file containing 100% remote code. I'm sure there's > 20 exploits that could be done after this stage has been reached, including spidering the HD through an iframe and sending the data back via dynamic script tag with relative URL added to the page's code. Reproducible: Always Steps to Reproduce: 1. Add Firefox to Send To menu 2. Send it a URL file Actual Results: Remote code loaded under the file: protocol Expected Results: Remote page URL in the address bar, then page load."
      }
    ],
    "CVE-2008-2811": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=439735",
        "title": "exploitable crash at nsBlockFrame::DrainOverflowLines",
        "description": "This was reported to Mozilla today by iSight Partners. I can confirm that the PoC page (which I'll attach shortly) crashes Firefox 2.0.0.14 on all three platforms. On Mac, I crash with the stack pasted below. Note that address space that we crash on is identical to that mentioned in the advisory. The full report is attached. Process: firefox-bin [28540] Path: /Applications/Firefox 2.app/Contents/MacOS/firefox-bin Identifier: org.mozilla.firefox Version: 2.0.0.14 (2.0.0.14) Code Type: X86 (Native) Parent Process: launchd [1] Date/Time: 2008-06-17 15:03:57.922 -0700 OS Version: Mac OS X 10.5.3 (9D34) Report Version: 6 Exception Type: EXC_BAD_INSTRUCTION (SIGILL) Exception Codes: 0x0000000000000001, 0x0000000000000000 Crashed Thread: 0 Thread 0 Crashed: 0 ??? 0x02020202 0 + 33686018 1 org.mozilla.firefox 0x005f2769 nsBlockFrame::DrainOverflowLines(nsBlockReflowState&) + 959 2 org.mozilla.firefox 0x005f6b48 nsBlockFrame::ComputeFinalSize(nsHTMLReflowState const&, nsBlockReflowState&, nsHTMLReflowMetrics&) + 2498 3 org.mozilla.firefox 0x0042afbc nsContainerFrame::ReflowChild(nsIFrame*, nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, int, int, unsigned int, unsigned int&) + 94 4 org.mozilla.firefox 0x0061ecf4 CanvasFrame::GetType() const + 1358 5 org.mozilla.firefox 0x0042afbc nsContainerFrame::ReflowChild(nsIFrame*, nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, int, int, unsigned int, unsigned int&) + 94"
      }
    ],
    "CVE-2008-2933": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=441120",
        "title": "command-line URLs launch multi-tabs if Firefox not running, exploitable with Safari Carpet bombing",
        "description": "Billy Rios reported that if Firefox is not already running, passing it a command-line URI with pipe symbols will open multiple tabs (apparently because it's being treated as a home-page). If Firefox is running then it's treated as a single URI with pipe symbols and probably come up with something pretty mangled. Not only is the inconsistency of behavior depending on state a bug, this allows another application to bypass the fix for bug 305269 and bug 298255 which disallowed apps from loading chrome: uris. This also potentially puts non-Firefox users at risk from Firefox bugs if a unique protocol handler allows launching Firefox. Someone who tried Firefox for a while and went back to their previous browser might end up with an old vulnerable Firefox, and an attacker might be able to use this trick to send the user to an exploit page. Examples that work in Safari on Windows: gopher:https://www.google.com|www.test.com|javascript:alert(1) gopher:https://www.google.com|www.test.com|chrome://browser/content/browser.xul Although Firefox 3 no longer registers for the gopher: protocol, neither does it appear to delete a pre-existing Firefox 2 registration. A user who has upgraded from an earlier Firefox might still be at risk. Now combine this with the Safari \"Carpet Bombing\" attack: Safari drops .html files onto the desktop, uses this trick to have Firefox open them. In Firefox 2 this file can now rummage through your disk and exfiltrate anything interesting (cookies? password file? financial documents?). Firefox 3 users are protected by the fix for bug 230606 -- the dropped file can only read the contents of known files (because directories can't be read) in the same directory or below. Didn't expect that fix to pay off so quickly, less than a week since launch. Nate McFeeters also pointed out that even in the \"fixed\" Safari 3.1.2, data: uris with unknown content-types are downloaded to the c:\\tmp directory (even if %TMP% is set to something else) with somewhat predictable names. It's unclear how bad the bypass of bug 305269 is (loading chrome:). Simply opening most chrome URIs doesn't cause any bad action, but with zillions of addons out there I wouldn't want to guarantee that."
      }
    ],
    "CVE-2008-2934": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=441360",
        "title": "Crash [@ CoreFoundation@0x745a4 ] opening GIF file",
        "description": "Drew Yao from Apple Product Security reported this issue to security@mo. The attached testcase crashes trunk on Mac (after ~2-5 refreshes), but not Windows or Linux, afaict. The link to the Talkback report is provided above, and I'm doing a DEBUG build to hopefully provide a persistent call stack copy (should the Talkback report get deleted). From Drew's email: Free of uninitialized pointer in gfxQuartzSurface::~gfxQuartzSurface() This probably only affects Mac OS X. It does not seem to affect Firefox 2, only Firefox 3. gfxQuartzSurface.cpp gfxQuartzSurface::gfxQuartzSurface(const gfxSize& size, gfxImageFormat format, PRBool aForPrinting) : mSize(size), mForPrinting(aForPrinting) { unsigned int width = (unsigned int) floor(size.width); unsigned int height = (unsigned int) floor(size.height); if (!CheckSurfaceSize(gfxIntSize(width, height))) return; <-- the gif triggers a failure, causing a return before mCGContext is initialized cairo_surface_t *surf = cairo_quartz_surface_create ((cairo_format_t) format, width, height); mCGContext = cairo_quartz_surface_get_cg_context (surf); CGContextRetain(mCGContext); Init(surf); } ... gfxQuartzSurface::~gfxQuartzSurface() { CGContextRelease(mCGContext); //<-- an uninitialized pointer can be released, without ever having been retained. } To reproduce: In Firefox 3 RC1 on Mac OS X 10.5.3 Intel, open the attached gif file and refresh a few times. It should crash. If you set the environment variable MallocScribble=1 first, it will always crash in CFRelease accessing 0xaaaaaaaa, indicating that it's trying to free uninitialized heap memory. man malloc to see the behavior of MallocScribble. It also does what MallocPreScribble claims to do. Process: firefox-bin [55007] Path: /Volumes/data_apps/obj-i386-apple-darwin9.3.0/dist/MinefieldDebug.app/Contents/MacOS/firefox-bin Identifier: org.mozilla.firefox Version: 3.0pre (3.0pre) Code Type: X86 (Native) Parent Process: launchd [1] Date/Time: 2008-06-05 16:19:58.990 -0700 OS Version: Mac OS X 10.5.3 (9D34) Report Version: 6 Exception Type: EXC_BAD_ACCESS (SIGSEGV) Exception Codes: KERN_INVALID_ADDRESS at 0x00000000aaaaaaaf Crashed Thread: 0 Thread 0 Crashed: 0 com.apple.CoreFoundation 0x955f15a4 CFRelease + 36 1 libthebes.dylib 0x12132afb gfxQuartzSurface::~gfxQuartzSurface() + 41 2 libthebes.dylib 0x1211632e gfxASurface::Release() + 182 (gfxASurface.cpp:102) 3 libgkgfxthebes.dylib 0x120db328 nsRefPtr<gfxASurface>::~nsRefPtr() + 28 4 libgkgfxthebes.dylib 0x120de88a nsThebesImage::Draw(nsIRenderingContext&, gfxRect const&, gfxRect const&, gfxRect const&) + 2318 (nsThebesImage.cpp:515) 5 libgklayout.dylib 0x122eb9ff nsLayoutUtils::DrawImage(nsIRenderingContext*, imgIContainer*, nsRect const&, nsRect const&, nsRect const*) + 2569 (nsLayoutUtils.cpp:2618) 6 libgklayout.dylib 0x1237eb68 nsImageFrame::PaintImage(nsIRenderingContext&, nsPoint, nsRect const&, imgIContainer*) + 326 (nsImageFrame.cpp:1185) 7 libgklayout.dylib 0x1237ecad nsDisplayImage::Paint(nsDisplayListBuilder*, nsIRenderingContext*, nsRect const&) + 95 (nsImageFrame.cpp:1167) 8 libgklayout.dylib 0x122c0b91 nsDisplayList::Paint(nsDisplayListBuilder*, nsIRenderingContext*, nsRect const&) const + 61 (nsDisplayList.cpp:295) 9 libgklayout.dylib 0x122c1dbb nsDisplayWrapList::Paint(nsDisplayListBuilder*, nsIRenderingContext*, nsRect const&) + 41 (nsDisplayList.cpp:694) 10 libgklayout.dylib 0x122c2a50 nsDisplayClip::Paint(nsDisplayListBuilder*, nsIRenderingContext*, nsRect const&) + 128 (nsDisplayList.cpp:888) ... By filling the heap, an attacker may be able to control the pointer that gets freed, potentially leading to memory corruption and/or arbitrary code execution."
      }
    ],
    "CVE-2008-3172": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=252342",
        "title": "fix cookie domain checks to not allow .co.uk",
        "description": "Title: Multiple Browser Cookie Injection Vulnerabilities Risk Rating: Moderate Software: Multiple Web Browsers Platforms: Unix and Windows Author: Paul Johnston <paul@westpoint.ltd.uk> assisted by Richard Moore <rich@westpoint.ltd.uk> Date: 20 July 2004 Advisory ID#: wp-04-0001 CVE: <pending> Overview -------- A design goal for cookies is to \"prevent the sharing of session information between hosts that are in different domains.\" [1] It appears current implementations are successful at allowing a domain to keep its cookies private. However, multiple mechanisms have been discovered for one domain to inject cookies into another. These could be used to perform session fixation attacks against web applications. [2] (14:30:08) Chris: Cross-Domain Cookie Injection ----------------------------- Vulnerable: Internet Explorer, Konqueror, Mozilla By default, cookies are only sent to the host that issued them. There is an optonal \"domain\" attribute that overrides this behaviour. For example, red.example.com could set a cookie with domain=.example.com. This would then be sent to any host in the .example.com domain. There is potential for abuse here, consider the case where red.example.com sets a cookie with domain=.com. In principle this would be sent to any host in the .com domain. However [1] requires browsers to reject cookies where: \"The value for the Domain attribute contains no embedded dots\" This prevents a cookie being set with domain=.com. However, this does not extend to country domains that are split into two parts. For example, red.example.co.uk could set a cookie with domain=.co.uk and this will be sent to all hosts in the .co.uk domain. Mozilla follows the RFC exactly and is vulnerable to this. Konqueror and Internet Explorer have some further protection, preventing domains of the following forms: * Where the 2nd level domain is two or fewer characters, i.e. xx.yy or x.yy * Domains of the form (com|net|mil|org|gov|edu|int).yy This does prevent .co.uk cross domain cookie injection but does not protect all domains. For example, the the following .uk domains are unprotected: .ltd.uk .plc.uk .sch.uk .nhs.uk .police.uk .mod.uk Interestingly, some old Netscape documentation [3] specifies the following restriction: (14:30:29) Chris: \"Any domain in the COM, EDU, NET, ORG, GOV, MIL, and INT categories requires only two periods; all other domains require at least three periods.\" This is what Opera does. It seems a sensible choice as it tends more towards \"accept only known good input\" rather than \"reject known bad input\", a principle of secure design. Example exploitation: 1) http://example.ltd.uk/ is identified for attack. It uses the \"sid\" cookie to hold the session ID. 2) Attacker obtains attacker.ltd.uk domain 3) User is enticed to click link to http://attacker.ltd.uk/ 4) This site sets the \"sid\" cookie with domain=.ltd.uk 5) When user logs into example.ltd.uk, they are using a sesion ID known to the attacker. 6) Attacker now has a logged-in session ID and has compromised the user's account. Exploitation is dependent on the user clicking an untrusted link. However, it is fundamental to the use of the web that we do sometimes click untrusted links. This attack can happen regardless of the use of SSL. Cross Security Boundary Cookie Injection ---------------------------------------- Vulnerable: all tested browsers By default cookies are sent to all ports on the host that issued them, regardless of whether SSL is in use. There is an optional \"secure\" attribute that restricts sending to secure channels. This prevents secure cookies for leaking out over insecure channels. However, there is no protection to prevent cookies set over a non-secure channel being presented on a secure channel. In general to maintain proper boundaries between security levels, it is necessary to defend against both attacks - protecting both confidentiality and integrity. Example exploitation: 1) https://example.com/ identified for attack, which uses \"sid\" cookie as session ID. 2) User is enticed to click link to http://example.com/ 3) By some mechanism the attacker intercepts this request and sets the \"sid\" cookie 4) When user logs into https://example.com/ they are using a sesion ID known to the attacker. 5) Attacker now has a logged-in session ID and has compromised the user's account. In addition to the user clicking an untrusted link, exploitation is dependent on the attacker tampering with non-SSL network traffic. This is a reasonable assumption as the purpose of SSL is to provide security over an insecure network."
      }
    ],
    "CVE-2008-3198": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=441169",
        "title": "HTML injection into XUL error pages through badcert parameters",
        "description": "Ben Turner found that the changes to XUL error pages to handle SSL errors works by passing display text as a parameter and that this text is not sanitized against HTML injection. In fact, the intended behavior of those dialogs _relies_ on it. This is now trivial to inject arbitrary code into. chrome://global/content/netError.xhtml?e=nssBadCert&u=https%3A//test.kuix.de/&c=UTF-8&d=%3Cspan%20onmouseover%3d%22try{alert(Components.stack)}catch(e){alert(e)}%22%3Etest.kuix.de%20uses%20an%20%3Cb%3Einvalid%3C/b%3E%20security%20certificate.%0A%0AThe%20certificate%20is%20only%20valid%20for%20%3Cscript%3Ealert(123)%3C/script%3E%3Ca%20id%3D%22cert_domain_link%22%20title%3D%22kuix.de%22%20href%3D%22http://www.mozilla.com%22%3Ekuix.de%3C/a%3E%0A%0A(Error%20code%3A%20ssl_error_bad_cert_domain)%0A%3C/span%3E about:neterror?e=nssBadCert&u=https%3A//test.kuix.de/&c=UTF-8&d=<span%20onmouseover%3d\"try{alert(Components.stack)}catch(e){alert(e)}\">test.kuix.de%20uses%20an%20<b>invalid</b>%20security%20certificate.%0A%0AThe%20certificate%20is%20only%20valid%20for%20<script>alert(123)</script><a%20id%3D\"cert_domain_link\"%20title%3D\"kuix.de\"%20href%3D\"http://www.mozilla.com\">kuix.de</a>%0A%0A(Error%20code%3A%20ssl_error_bad_cert_domain)%0A</span> when called via about:neterror any injected script only has normal privileges, it's primarily a spoofing vector. When called as a chrome: uri this allows arbitrary code execution. Normally remote content can't load user code can't load chrome: URIs directly, but a potential danger when combined with other flaws. There is currently such a flaw: this can be combined with bug 441120 to create an arbitrary code execution exploit."
      }
    ],
    "CVE-2008-3444": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=448564",
        "title": "Radware DoS report [@ nsSubDocumentFrame::Reflow]",
        "description": "Radware reported a DoS crash on the attached testcase <s> <form>a</form> <iframe></iframe> <script src=a></script> <form></form> <table> <optgroup> I have not been able to reproduce the crash on Mac or Windows with a 3.0.1 or thereabouts build (nor could jst in 3.0), but the reported stack is a null dereference: Unhandled exception at 0x606fe7b1 (xul.dll) in firefox.exe: 0xC0000005: Access violation reading location 0x00000004. > xul.dll!nsSubDocumentFrame::Reflow(nsPresContext * aPresContext=0x00b9dae0, nsHTMLReflowMetrics & aDesiredSize={...}, const nsHTMLReflowState & aReflowState={...}, unsigned int & aStatus=0x00000000) Line 507 + 0xb bytes C++ xul.dll!nsLineLayout::ReflowFrame(nsIFrame * aFrame=0x0258d8b8, unsigned int & aReflowStatus=0x00000000, nsHTMLReflowMetrics * aMetrics=0x00000000, int & aPushedFrame=0x00000000) Line 857 C++ xul.dll!nsInlineFrame::ReflowInlineFrame(nsPresContext * aPresContext=0x00b9dae0, const nsHTMLReflowState & aReflowState={...}, nsInlineFrame::InlineReflowState & irs={...}, nsIFrame * aFrame=0x00000000, unsigned int & aStatus=0x00000000) Line 611 C++ xul.dll!nsInlineFrame::ReflowFrames(nsPresContext * aPresContext=0x00b9dae0, const nsHTMLReflowState & aReflowState={...}, nsInlineFrame::InlineReflowState & irs={...}, nsHTMLReflowMetrics & aMetrics={...}, unsigned int & aStatus=0x00000000) Line 479 C++ xul.dll!nsInlineFrame::Reflow(nsPresContext * aPresContext=0x00b9dae0, nsHTMLReflowMetrics & aMetrics={...}, const nsHTMLReflowState & aReflowState={...}, unsigned int & aStatus=0x00000000) Line 399 C++ xul.dll!nsLineLayout::ReflowFrame(nsIFrame * aFrame=0x0258d848, unsigned int & aReflowStatus=0x00000000, nsHTMLReflowMetrics * aMetrics=0x00000000, int & aPushedFrame=0x00000000) Line 857 C++ xul.dll!nsBlockFrame::ReflowInlineFrame(nsBlockReflowState & aState={...}, nsLineLayout & aLineLayout={...}, nsLineList_iterator aLine={...}, nsIFrame * aFrame=0x0258d848, LineReflowStatus * aLineReflowStatus=0x0012e29c) Line 3608 C++ xul.dll!nsBlockFrame::DoReflowInlineFrames(nsBlockReflowState & aState={...}, nsLineLayout & aLineLayout={...}, nsLineList_iterator aLine={...}, int * aKeepReflowGoing=0x0012e4c4, LineReflowStatus * aLineReflowStatus=0x0012e388, int aAllowPullUp=0x00000001) Line 3430 C++ xul.dll!nsBlockFrame::ReflowInlineFrames(nsBlockReflowState & aState={...}, nsLineList_iterator aLine={...}, int * aKeepReflowGoing=0x0012e4c4) Line 3279 C++ xul.dll!nsBlockFrame::ReflowLine(nsBlockReflowState & aState={...}, nsLineList_iterator aLine={...}, int * aKeepReflowGoing=0x0012e4c4) Line 2335 + 0x17 bytes C++ xul.dll!nsBlockFrame::ReflowDirtyLines(nsBlockReflowState & aState={...}) Line 1898 C++ xul.dll!nsBlockFrame::Reflow(nsPresContext * aPresContext=0x00b9dae0, nsHTMLReflowMetrics & aMetrics={...}, const nsHTMLReflowState & aReflowState={...}, unsigned int & aStatus=0x00000000) Line 938 C++ xul.dll!nsBlockReflowContext::ReflowBlock(const nsRect & aSpace={...}, int aApplyTopMargin=0x00000001, nsCollapsingMargin & aPrevMargin={...}, int aClearance=0x00000000, int aIsAdjacentWithTop=0x00000000, nsMargin & aComputedOffsets={...}, nsLineBox * aLine=0x0258db50, nsHTMLReflowState & aFrameRS={...}, unsigned int & aFrameReflowStatus=0x00000000, nsBlockReflowState & aState={...}) Line 339 + 0x24 bytes C++ xul.dll!nsBlockFrame::ReflowBlockFrame(nsBlockReflowState & aState={...}, nsLineList_iterator aLine={...}, int * aKeepReflowGoing=0x0012eb64) Line 3023 C++ xul.dll!nsBlockFrame::ReflowLine(nsBlockReflowState & aState={...}, nsLineList_iterator aLine={...}, int * aKeepReflowGoing=0x0012eb64) Line 2282 + 0xf bytes C++ xul.dll!nsBlockFrame::ReflowDirtyLines(nsBlockReflowState & aState={...}) Line 1898 C++ xul.dll!nsBlockFrame::Reflow(nsPresContext * aPresContext=0x00b9dae0, nsHTMLReflowMetrics & aMetrics={...}, const nsHTMLReflowState & aReflowState={...}, unsigned int & aStatus=0x00000000) Line 938 C++ xul.dll!nsBlockReflowContext::ReflowBlock(const nsRect & aSpace={...}, int aApplyTopMargin=0x00000001, nsCollapsingMargin & aPrevMargin={...}, int aClearance=0x00000000, int aIsAdjacentWithTop=0x00000001, nsMargin & aComputedOffsets={...}, nsLineBox * aLine=0x022a358c, nsHTMLReflowState & aFrameRS={...}, unsigned int & aFrameReflowStatus=0x00000000, nsBlockReflowState & aState={...}) Line 339 + 0x24 bytes C++ xul.dll!nsBlockFrame::ReflowBlockFrame(nsBlockReflowState & aState={...}, nsLineList_iterator aLine={...}, int * aKeepReflowGoing=0x0012f204) Line 3023 C++ xul.dll!nsBlockFrame::ReflowLine(nsBlockReflowState & aState={...}, nsLineList_iterator aLine={...}, int * aKeepReflowGoing=0x0012f204) Line 2282 + 0xf bytes C++ xul.dll!nsBlockFrame::ReflowDirtyLines(nsBlockReflowState & aState={...}) Line 1898 C++ xul.dll!nsBlockFrame::Reflow(nsPresContext * aPresContext=0x00b9dae0, nsHTMLReflowMetrics & aMetrics={...}, const nsHTMLReflowState & aReflowState={...}, unsigned int & aStatus=0x00000000) Line 938 C++ xul.dll!nsContainerFrame::ReflowChild(nsIFrame * aKidFrame=0x00000000, nsPresContext * aPresContext=0x00b9dae0, nsHTMLReflowMetrics & aDesiredSize={...}, const nsHTMLReflowState & aReflowState={...}, int aX=0x00000000, int aY=0x00000000, unsigned int aFlags=0x00000000, unsigned int & aStatus=, nsOverflowContinuationTracker * aTracker=0x00000000) Line 755 + 0x13 bytes C++ xul.dll!CanvasFrame::Reflow(nsPresContext * aPresContext=0x00b9dae0, nsHTMLReflowMetrics & aDesiredSize={...}, const nsHTMLReflowState & aReflowState={...}, unsigned int & aStatus=0x00000000) Line 589 C++ xul.dll!nsContainerFrame::ReflowChild(nsIFrame * aKidFrame=0x00000000, nsPresContext * aPresContext=0x00b9dae0, nsHTMLReflowMetrics & aDesiredSize={...}, const nsHTMLReflowState & aReflowState={...}, int aX=0x00000000, int aY=0x00000000, unsigned int aFlags=0x00000003, unsigned int & aStatus=, nsOverflowContinuationTracker * aTracker=0x00000000) Line 755 + 0x13 bytes C++ xul.dll!nsHTMLScrollFrame::ReflowScrolledFrame(ScrollReflowState * aState=0x0012f808, int aAssumeHScroll=0x00000000, int aAssumeVScroll=0x00000000, nsHTMLReflowMetrics * aMetrics=0x0012f720, int aFirstPass=0x0012f7b8) Line 493 C++ xul.dll!nsHTMLScrollFrame::ReflowContents(ScrollReflowState * aState=0x0012f808, const nsHTMLReflowMetrics & aDesiredSize={...}) Line 570 C++ xul.dll!nsHTMLScrollFrame::Reflow(nsPresContext * aPresContext=0x00b9dae0, nsHTMLReflowMetrics & aDesiredSize={...}, const nsHTMLReflowState & aReflowState={...}, unsigned int & aStatus=0x00000000) Line 771 C++ xul.dll!nsContainerFrame::ReflowChild(nsIFrame * aKidFrame=0x00000000, nsPresContext * aPresContext=0x00b9dae0, nsHTMLReflowMetrics & aDesiredSize={...}, const nsHTMLReflowState & aReflowState={...}, int aX=0x00000000, int aY=0x00000000, unsigned int aFlags=0x00000000, unsigned int & aStatus=, nsOverflowContinuationTracker * aTracker=0x00000000) Line 755 + 0x13 bytes C++ xul.dll!ViewportFrame::Reflow(nsPresContext * aPresContext=0x00b9dae0, nsHTMLReflowMetrics & aDesiredSize={...}, const nsHTMLReflowState & aReflowState={...}, unsigned int & aStatus=0x00000000) Line 288 C++ xul.dll!PresShell::DoReflow(nsIFrame * target=0x00000000) Line 6215 C++ xul.dll!PresShell::ProcessReflowCommands(int aInterruptible=0x00000001) Line 6307 C++ xul.dll!PresShell::DoFlushPendingNotifications(mozFlushType aType=Flush_Layout, int aInterruptibleReflow=0x00000001) Line 4513 C++ xul.dll!PresShell::ReflowEvent::Run() Line 6067 xul.dll!nsThread::ProcessNextEvent(int mayWait=0x00000001, int * result=0x0012fc68) Line 511 C++ xul.dll!NS_ProcessNextEvent_P(nsIThread * thread=0x00000000, int mayWait=0x0012ff14) Line 227 + 0xc bytes C++ xul.dll!nsBaseAppShell::Run() Line 153 C++ xul.dll!nsAppStartup::Run() Line 182 C++ xul.dll!XRE_main(int argc=0x00000001, char * * argv=0x00349bc8, const nsXREAppData * aAppData=0x00349f60) Line 3137 C++ firefox.exe!NS_internal_main(int argc=0x00000001) Line 159 C++ firefox.exe!wmain(int argc=0x00000001, wchar_t * * argv=0x00347c90) Line 55 + 0x8 bytes C++ firefox.exe!__tmainCRTStartup() Line 594 + 0x17 bytes C kernel32.dll!_BaseProcessStart@4() + 0x23 bytes Source nsframeframe.cpp, line 507: mInnerView is 0x00; nsIViewManager* vm = mInnerView->GetViewManager();"
      }
    ],
    "CVE-2008-3835": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=439034",
        "title": "Same-origin check in nsXMLDocument::OnChannelRedirect() can be circumvented",
        "description": "This is fx2-only. (On trunk, the same-origin check in question compares an old URI to a new URI.) The same-origin check in nsXMLDocument::OnChannelRedirect() uses a principal of an associated JS context. It can be circumvented by loading a cross-origin page in that context before nsXMLDocument::OnChannelRedirect() is called. By using this trick, it's possible to change a principal of an XML document, and thus, an attacker can perform an XSS attack. Upcoming testcase consists of an html and a cgi script, thus it does not work on bugzilla.mozilla.org. Please set up it in a suitable place."
      }
    ],
    "CVE-2008-3836": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=360529",
        "title": "Arbitrary code execution using XSS hole and feed preview page",
        "description": "Please see bug 353266. Array.prototype methods trick (bug 344495) and document.(open|write) trick (bug 346659) and XSS holes (bug 351370, bug 359137) are available on fx2.0. (bug 359137 was already fixed.) In a feed preview page, an event handler that was registered by content script can be called by chrome script via elem.doCommand() or elem.dispatchEvent(). In this case, the event handler's scripted caller is chrome script. Thus, an attacker can run arbitrary code with chrome privileges by using Array.prototype methods trick or document.write trick. -- document.getElementById(\"handlersMenuList\") .addEventListener(\"command\", x, true); SubscribeHandler._feedWriter.write(window); or SubscribeHandler._feedWriter .QueryInterface(Components.interfaces.nsIObserver) .observe({}, \"nsPref:changed\", \"browser.feeds.handler.default\"); x() (if x is a function) or x.handleEvent() is called in FeedWriter._setSelectedHandler() via handlers[0].doCommand(), selectedAppMenuItem.doCommand() or liveBookmarksMenuItem.doCommand(). document.getElementById(\"alwaysUse\") .addEventListener(\"CheckboxStateChange\", y, true); SubscribeHandler._feedWriter.write(window); or SubscribeHandler._feedWriter .QueryInterface(Components.interfaces.nsIObserver) .observe({}, \"nsPref:changed\", \"browser.feeds.handler\"); y() or y.handleEvent() is called in FeedWriter._setCheckboxCheckedState() via aCheckbox.dispatchEvent(event). -- * Fx1.5.0.x is not affected since it does not have feed preview feature. * The trunk should be exploitable if an XSS hole existed."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=430658",
        "title": "Remaining attack vectors in FeedWriter.js",
        "description": "This is a follow up to bug 360529. 395 _setTitleText: function FW__setTitleText(container) { 396 if (container.title) { 397 this._setContentText(TITLE_ID, container.title.plainText()); 398 this._document.title = container.title.plainText(); 399 } Line 398 is exploitable since it fires DOMTitleChanged event. 411 _setTitleImage: function FW__setTitleImage(container) { ... 437 var feedTitleText = this._document.getElementById(\"feedTitleText\"); 438 var titleImageWidth = parseInt(parts.getPropertyAsAString(\"width\")) + 15; 439 feedTitleText.style.marginRight = titleImageWidth + \"px\"; Line 439 is exploitable since it sets style attribute and thus fires mutation events. 940 _initSubscriptionUI: function FW__initSubscriptionUI() { ... 960 default: 961 codeStr = \"header.className = 'feedBackground'; \"; 962 header.className = \"feedBackground\"; Line 962 is unnecessary (and exploitable)."
      }
    ],
    "CVE-2008-4058": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=444077",
        "title": "XPCNativeWrapper pollution using chrome JS",
        "description": "It's possible to modify an implicit XPCNativeWrapper within a function loaded from chrome: url without using eval-like methods nor __defineGetter__. (See also the second paragraph of bug 387390 comment #21.)"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=444075",
        "title": "XPCNativeWrapper pollution using chrome XBL",
        "description": "It's possible to modify an implicit XPCNativeWrapper within a chrome XBL method without using eval-like methods nor __defineGetter__. (See also the second paragraph of bug 387390 comment #21.)"
      }
    ],
    "CVE-2008-4059": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=419848",
        "title": "XPCNativeWrapper pollution using chrome js",
        "description": "When content loads a script from a chrome: url by using a <script> element, unlike chrome XBL binding, the script principal is the main document's principal though the script filename is the chrome: url. Thus, the fixes for bug 369211, bug 387881, bug 411092 and bug 411093 can be circumvented. (A script that was loaded from the fastload file cannot be used for this bug's trick, since its script principal is the system principal.)"
      }
    ],
    "CVE-2008-4060": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=448548",
        "title": "XSLT creates documents which don't have script handling objects",
        "description": "This may cause similar problems as bug 393761 and bug 393762."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=451037",
        "title": "document.loadBindingDocument() returns a document that does not have a script handling object",
        "description": "This is similar to bug 448548. This is fx2-only. On fx2, document.loadBindingDocument() returns a document that does not have a script handling object. (On trunk and fx3.0.x, it does not return anything.)"
      }
    ],
    "CVE-2008-4061": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=443089",
        "title": "<mtd> with huge rowspan causes crash with sad nsCellMap",
        "description": "Steps to reproduce: 1. Load the testcase in a debug build (Firefox trunk on Tiger). Result: Sometimes: firefox-bin(17051,0xa000d000) malloc: *** error for object 0x339c001b: pointer being reallocated was not allocated firefox-bin(17051,0xa000d000) malloc: *** set a breakpoint in szone_error to debug ###!!! ASSERTION: invalid array index: 'i < Length()', file ../../dist/include/xpcom/nsTArray.h, line 317 Always, a crash at one of the following: nsCellMap::AppendCell - nsTArray_base::EnsureCapacity nsCellMap::SetDataAt - nsTArrayElementTraits<CellData*>::Construct<CellData*> nsCellMap::AppendCell - CellData::IsOrig All of the crashes involve non-null, bogus pointer dereferences. For the first crash signature, this is easiest to see with: export MallocScribble=1 export MallocPreScribble=1"
      }
    ],
    "CVE-2008-4062": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=367736",
        "title": "potential sign problems in nsEscapeCount",
        "description": "potential sign problems in nsEscapeCount http://lxr.mozilla.org/seamonkey/source/xpcom/io/nsEscape.cpp#76 76 static char* nsEscapeCount( 77 const char * str, [78] PRInt32 len, 79 nsEscapeMask flags, 80 PRInt32* out_len) 81 //---------------------------------------------------------------------------------------- 82 { 83 if (!str) 84 return 0; 85 [86] int i, extra = 0; 87 static const char hexChars[] = \"0123456789ABCDEF\"; 88 89 register const unsigned char* src = (const unsigned char *) str; [90] for (i = 0; i < len; i++) 91 { 92 if (!IS_OK(*src++)) [93] extra += 2; /* the escape, plus an extra byte for each nibble */ 94 } 95 [96] char* result = (char *)nsMemory::Alloc(len + extra + 1); a potentia issue here, probably exploitable on 64 bit systems. 1. [76] and [86] are signed. if len == 0x80000000 == 1 << 31 the loop is not entered and [96] allocates just (1<<31) +1 luckily positive to avoid sign promotion. 2. for len == 0x55555555 (about 1365MB) and always doing += 2 the allocation evaluates to zero meaning trouble. for len > 0x55555555 sign also causes trouble. potential exploit via feeding a string via the gopher protocol seems unfeasible: doesn't succeed after 12 hours on a maching with 1.5G RAM. proposed solution: fixing the sign and checking for overflow of |extra += 2|"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=444608",
        "title": "SM: jsxml.c assumes that Namespace and QName are read-only",
        "description": "jsxml.c contains 3 fragments like: nsobj = CallConstructorFunction(cx, obj, &js_NamespaceClass.base, 1, vp + 2); ... nameobj = CallConstructorFunction(cx, obj, &js_QNameClass.base, 1, &name); if (!nameobj) return JS_FALSE; with CallConstructorFunction defined as: static JSObject * CallConstructorFunction(JSContext *cx, JSObject *obj, JSClass *clasp, uintN argc, jsval *argv) { ... if (!JS_CallFunctionName(cx, obj, clasp->name, argc, argv, &rval)) return NULL; JS_ASSERT(!JSVAL_IS_PRIMITIVE(rval)); return JSVAL_TO_OBJECT(rval); } Here the code assumes that Namespace and QName at the global scope point to the default native constructors. Since both Namespace and QName are not read-only, this can be trivially used to crush the engine on a de-reference of a script-supplied address: ~/m/20-ff/js/src> cat ~/s/x.js var x = <xml/>; Namespace = function() { return 10; }; x.addNamespace(\"x\"); ~/m/20-ff/js/src> ./Linux_All_OPT.OBJ/js ~/s/x.js Segmentation fault"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=445229",
        "title": "NPAPI/NPruntime possible crash when returning a new NPObject as the result of an Invoke/InvokeDefault/GetProperty.",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9) Gecko/2008052906 Firefox/3.0 Build Identifier: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.15) Gecko/2008062306 Firefox/2.0.0.15 From modules/plugin/base/src/nsJSNPRuntime.cpp:1297, in the nsNPObjWrapper::GetNewOrUsed function: --------------------------------------------------------------------- NPObjWrapperHashEntry *entry = NS_STATIC_CAST(NPObjWrapperHashEntry *, PL_DHashTableOperate(&sNPObjWrappers, npobj, PL_DHASH_ADD)); if (!entry) { // Out of memory JS_ReportOutOfMemory(cx); return nsnull; } if (PL_DHASH_ENTRY_IS_BUSY(entry) && entry->mJSObj) { // Found a live NPObject wrapper, return it. return entry->mJSObj; } entry->mNPObj = npobj; entry->mNpp = npp; // No existing JSObject, create one. JSObject *obj = ::JS_NewObject(cx, &sNPObjectJSWrapperClass, nsnull, nsnull); if (!obj) { // OOM? Remove the stale entry from the hash. PL_DHashTableRawRemove(&sNPObjWrappers, entry); return nsnull; } OnWrapperCreated(); entry->mJSObj = obj; --------------------------------------------------------------------- The 'entry' variable is a pointer to an entry inside the data storage of the global 'sNPObjWrappers' hash table. The problem is that the ::JS_NewObject (line 1318) may trigger a JavaScript garbage collection, that can in turn finalize some NPObject, removing them from the 'sNPObjWrappers' hash table. That process can re-allocate the storage of the hash table, making the 'entry' point to released memory, crashing the process when accessed in the line 1330 (or worse, pointing to re-allocated memory, hence corrupting data). This bug was reproduced fairly reliably on Firefox 2.0.0.15. That code snippet looks similar in Firefox 3, suggesting the bug is probably still present (unless ::JS_NewObject can't trigger the JavaScript garbage collector). I don't have a repro test case sample plug-in available currently, but I can probably write one if necessary. It is not clear if specific allocation/garbage collection patterns make this bug easier to reproduce. Reproducible: Sometimes Steps to Reproduce: 1. Write a NPAPI plug-in that has a function that creates and returns a new NPObject every time it is called. 2. Call that function many times from JavaScript. Actual Results: Eventually Firefox will crash. Expected Results: No crash"
      }
    ],
    "CVE-2008-4064": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=441995",
        "title": "crash in cairo_surface_set_device_offset () from /usr/lib/libcairo.so.2",
        "description": "User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9) Gecko/2008061015 Firefox/3.0 Build Identifier: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9) Gecko/2008061015 Firefox/3.0 Crash when trying to display an overlong alert messagebox after a refresh. Reproducible: Always Steps to Reproduce: 1.open the file, the alert box is displayed 2.hit escape button to close the box 3.hit f5 to refresh the page Actual Results: Program received signal SIGSEGV, Segmentation fault. [Switching to Thread 0xb7cdb6c0 (LWP 1444)] 0xb6d892cb in cairo_surface_set_device_offset () from /usr/lib/libcairo.so.2 Expected Results: not crashed seems to be something like Bug 439343, I will enclosed the poc in the report. Don't know really the impact of that, if it can be worst than a crash. #0 0xb6d4c2cb in cairo_surface_set_device_offset () from /usr/lib/libcairo.so.2 #1 0xb78db907 in gfxASurface::SetDeviceOffset () from /usr/lib/xulrunner-1.9/libxul.so #2 0xb77e2652 in ?? () from /usr/lib/xulrunner-1.9/libxul.so #3 0xb77e4f20 in ?? () from /usr/lib/xulrunner-1.9/libxul.so #4 0xb68148d4 in ?? () from /usr/lib/libgtk-x11-2.0.so.0 #5 0xb6bfb759 in g_closure_invoke () from /usr/lib/libgobject-2.0.so.0 #6 0xb6c0fd1d in ?? () from /usr/lib/libgobject-2.0.so.0 #7 0xb6c1164e in g_signal_emit_valist () from /usr/lib/libgobject-2.0.so.0 #8 0xb6c11c59 in g_signal_emit () from /usr/lib/libgobject-2.0.so.0 #9 0xb6933667 in ?? () from /usr/lib/libgtk-x11-2.0.so.0 #10 0xb680edf6 in gtk_main_do_event () from /usr/lib/libgtk-x11-2.0.so.0 #11 0xb6657f33 in ?? () from /usr/lib/libgdk-x11-2.0.so.0 #12 0xb66585c8 in gdk_window_process_all_updates () from /usr/lib/libgdk-x11-2.0.so.0 #13 0xb66585eb in ?? () from /usr/lib/libgdk-x11-2.0.so.0 #14 0xb663e81b in ?? () from /usr/lib/libgdk-x11-2.0.so.0 #15 0xb6b76081 in ?? () from /usr/lib/libglib-2.0.so.0 #16 0xb6b77bf8 in g_main_context_dispatch () from /usr/lib/libglib-2.0.so.0 #17 0xb6b7ae5e in ?? () from /usr/lib/libglib-2.0.so.0 #18 0xb6b7b3ac in g_main_context_iteration () from /usr/lib/libglib-2.0.so.0 #19 0xb77e701c in ?? () from /usr/lib/xulrunner-1.9/libxul.so #20 0xb77fbdc4 in ?? () from /usr/lib/xulrunner-1.9/libxul.so #21 0xb77fc20f in ?? () from /usr/lib/xulrunner-1.9/libxul.so #22 0xb78ab43a in ?? () from /usr/lib/xulrunner-1.9/libxul.so #23 0xb787aa83 in ?? () from /usr/lib/xulrunner-1.9/libxul.so #24 0xb76767fd in ?? () from /usr/lib/xulrunner-1.9/libxul.so #25 0xb76735fd in ?? () from /usr/lib/xulrunner-1.9/libxul.so #26 0xb7652f3f in ?? () from /usr/lib/xulrunner-1.9/libxul.so #27 0xb7653225 in ?? () from /usr/lib/xulrunner-1.9/libxul.so #28 0xb765479d in ?? () from /usr/lib/xulrunner-1.9/libxul.so #29 0xb7654e97 in ?? () from /usr/lib/xulrunner-1.9/libxul.so #30 0xb764e217 in ?? () from /usr/lib/xulrunner-1.9/libxul.so #31 0xb74b6792 in ?? () from /usr/lib/xulrunner-1.9/libxul.so #32 0xb78b7781 in NS_InvokeByIndex_P () from /usr/lib/xulrunner-1.9/libxul.so #33 0xb710b2bb in ?? () from /usr/lib/xulrunner-1.9/libxul.so #34 0xb711106d in ?? () from /usr/lib/xulrunner-1.9/libxul.so #35 0xb7be8176 in js_Invoke () from /usr/lib/xulrunner-1.9/libmozjs.so #36 0xb7bdb0ef in ?? () from /usr/lib/xulrunner-1.9/libmozjs.so #37 0xb7be7a31 in ?? () from /usr/lib/xulrunner-1.9/libmozjs.so #38 0xb7bb3546 in JS_EvaluateUCScriptForPrincipals () from /usr/lib/xulrunner-1.9/libmozjs.so #39 0xb74a230c in ?? () from /usr/lib/xulrunner-1.9/libxul.so #40 0xb73aaddf in ?? () from /usr/lib/xulrunner-1.9/libxul.so #41 0xb73ab663 in ?? () from /usr/lib/xulrunner-1.9/libxul.so #42 0xb73ac58c in ?? () from /usr/lib/xulrunner-1.9/libxul.so #43 0xb73aa2a2 in ?? () from /usr/lib/xulrunner-1.9/libxul.so #44 0xb7408da3 in ?? () from /usr/lib/xulrunner-1.9/libxul.so #45 0xb7408420 in ?? () from /usr/lib/xulrunner-1.9/libxul.so #46 0xb741c76c in ?? () from /usr/lib/xulrunner-1.9/libxul.so #47 0xb741dc6b in ?? () from /usr/lib/xulrunner-1.9/libxul.so #48 0xb741e6d8 in ?? () from /usr/lib/xulrunner-1.9/libxul.so #49 0xb71e00b2 in ?? () from /usr/lib/xulrunner-1.9/libxul.so #50 0xb71e2f63 in ?? () from /usr/lib/xulrunner-1.9/libxul.so #51 0xb71e3ba2 in ?? () from /usr/lib/xulrunner-1.9/libxul.so #52 0xb71e0cf5 in ?? () from /usr/lib/xulrunner-1.9/libxul.so #53 0xb71e9eb8 in ?? () from /usr/lib/xulrunner-1.9/libxul.so #54 0xb71eb51a in ?? () from /usr/lib/xulrunner-1.9/libxul.so #55 0xb71e9d66 in ?? () from /usr/lib/xulrunner-1.9/libxul.so #56 0xb7633fb5 in ?? () from /usr/lib/xulrunner-1.9/libxul.so #57 0xb7122951 in ?? () from /usr/lib/xulrunner-1.9/libxul.so #58 0xb71285de in ?? () from /usr/lib/xulrunner-1.9/libxul.so #59 0xb7128711 in ?? () from /usr/lib/xulrunner-1.9/libxul.so #60 0xb7896977 in ?? () from /usr/lib/xulrunner-1.9/libxul.so #61 0xb78ab496 in ?? () from /usr/lib/xulrunner-1.9/libxul.so #62 0xb787aa83 in ?? () from /usr/lib/xulrunner-1.9/libxul.so #63 0xb77fbefe in ?? () from /usr/lib/xulrunner-1.9/libxul.so #64 0xb768b946 in ?? () from /usr/lib/xulrunner-1.9/libxul.so #65 0xb70e0688 in XRE_main () from /usr/lib/xulrunner-1.9/libxul.so #66 0x08049033 in ?? () #67 0xb7cb6450 in __libc_start_main () from /lib/tls/i686/cmov/libc.so.6 #68 0x08048cc1 in ?? ()"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=443693",
        "title": "Integer overflow in info_callback() processing animated PNG",
        "description": "User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_4; en-us) AppleWebKit/525.18 (KHTML, like Gecko) Version/3.1.1 Safari/525.20 Build Identifier: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9) Gecko/2008061004 Firefox/3.0 Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9) Gecko/2008061004 Firefox/3.0 Integer overflows in info_callback() processing animated PNG There are 2 integer overflows leading to heap buffer overflows in info_callback() in nsPNGDecoder.cpp. I believe it's only exploitable when parsing APNGs, so I think this only affects FF3. I have not looked at the code for FF 2. I'm guessing this might affect Thunderbird, but I haven't checked. Please credit Drew Yao of Apple Product Security. in info_callback(): if (png_get_first_frame_is_hidden(png_ptr, info_ptr)) { decoder->mFrameIsHidden = PR_TRUE; } else { decoder->CreateFrame(0, 0, width, height, decoder->format); } if (decoder->mTransform && (channels <= 2 || interlace_type == PNG_INTERLACE_ADAM7)) { PRUint32 bpp[] = { 0, 3, 4, 3, 4 }; decoder->mCMSLine = (PRUint8 *)nsMemory::Alloc(bpp[channels] * width); if (!decoder->mCMSLine) longjmp(decoder->mPNG->jmpbuf, 5); // NS_ERROR_OUT_OF_MEMORY } if (interlace_type == PNG_INTERLACE_ADAM7) { decoder->interlacebuf = (PRUint8 *)nsMemory::Alloc(channels * width * height); Both of the Allocs can overflow to an unexpectedly small number, leading to a buffer overflow later. The reason I think this can only be triggered by a APNG is that if png_get_first_frame_is_hidden() is false, decoder->CreateFrame will get called. That leads to gfxASurface::CheckSurfaceSize getting called, which checks if height * width would overflow. To avoid this check the attacker needs to use an APNG with the first fcTL chunk missing, which causes png_get_first_frame_is_hidden() to be true. When you run the attached test case png file, Firefox will crash. Sometimes it might be a null deref. I can demonstrate that the integer overflow occurs, leading to a heap buffer overflow, using libgmalloc(3) on Mac OS X. libgmalloc places a guard page immediately after each heap allocation, causing a crash when you write past the end of it. (gdb) set env DYLD_INSERT_LIBRARIES=/usr/lib/libgmalloc.dylib (gdb) b nsPNGDecoder.cpp:648 if png_ptr->apng_flags == 1 (gdb) run Breakpoint 1, info_callback (png_ptr=0x56ddde00, info_ptr=0x56de7f60) at /Volumes/data_apps/mozilla/modules/libpr0n/decoders/png/nsPNGDecoder.cpp:648 648 if (decoder->mTransform && (gdb) n Current language: auto; currently c++ 657 if (interlace_type == PNG_INTERLACE_ADAM7) { (gdb) n 658 decoder->interlacebuf = (PRUint8 *)nsMemory::Alloc(channels * width * height); (gdb) p channels $1 = 4 (gdb) p/x width $2 = 0x8000 (gdb) p/x height $3 = 0x8000 (gdb) p/x channels*width*height $4 = 0x0 #overflow causes a 0-size buffer to be allocated (gdb) n (gdb) p decoder->interlacebuf $11 = (PRUint8 *) 0x5700bff0 \"\" (gdb) c Continuing. Program received signal EXC_BAD_ACCESS, Could not access memory. Reason: KERN_PROTECTION_FAILURE at address: 0x5700c000 0x13480cd4 in MOZ_PNG_combine_row (png_ptr=0x56ddde00, row=0x5700bff0 \"\", mask=255) at /Volumes/data_apps/mozilla/modules/libimg/png/pngrutil.c:2472 2472 png_memcpy(row, png_ptr->row_buf + 1, (gdb) p row $12 = (png_bytep) 0x5700bff0 \"\" #The destination pointer for this memcpy, is the 0-size buffer which was allocated earlier. (gdb) bt #0 0x13463cd4 in MOZ_PNG_combine_row (png_ptr=0x5305de00, row=0x5328dff0 \"\", mask=255) at /Volumes/data_apps/mozilla/modules/libimg/png/pngrutil.c:2472 #1 0x13460f5d in MOZ_PNG_progressive_combine_row (png_ptr=0x5305de00, old_row=0x5328dff0 \"\", new_row=0x5306ffd1 \"\") at /Volumes/data_apps/mozilla/modules/libimg/png/pngpread.c:1746 #2 0x134361fc in row_callback (png_ptr=0x5305de00, new_row=0x5306ffd1 \"\", row_num=0, pass=0) at /Volumes/data_apps/mozilla/modules/libpr0n/decoders/png/nsPNGDecoder.cpp:715 #3 0x13460f16 in MOZ_PNG_push_have_row (png_ptr=0x5305de00, row=0x5306ffd1 \"\") at /Volumes/data_apps/mozilla/modules/libimg/png/pngpread.c:1732 #4 0x1346066a in MOZ_PNG_push_proc_row (png_ptr=0x5305de00) at /Volumes/data_apps/mozilla/modules/libimg/png/pngpread.c:1029 #5 0x13460429 in MOZ_PNG_proc_IDAT_data (png_ptr=0x5305de00, buffer=0xf173e595 \"x??y?\\034?}??y??UgW??@\\003??M\\020 \\001R?(??(?ƒ|??̄|??^Gػ????????\\0373??#bg&<\\023\\033?3?Þ?ږ?;?aY?i?\\\"EJ?O\", buffer_length=2655) at /Volumes/data_apps/mozilla/modules/libimg/png/pngpread.c:980 #6 0x13460239 in MOZ_PNG_push_read_IDAT (png_ptr=0x5305de00) at /Volumes/data_apps/mozilla/modules/libimg/png/pngpread.c:911 #7 0x1345e9e6 in MOZ_PNG_proc_some_data (png_ptr=0x5305de00, info_ptr=0x53067f60) at /Volumes/data_apps/mozilla/modules/libimg/png/pngpread.c:61 #8 0x1345e95d in MOZ_PNG_process_data (png_ptr=0x5305de00, info_ptr=0x53067f60, buffer=0xf173dff4 \",???.???C\\f???????\\031?\\017h?쩉?X?\\\"?\\032????u>????W?j?\\v\\023Zhͳ? L&?d?Q^\\023??\\005\\nr?g\\032?\\032?6?\\024?z\\024?\\017C? \\004}38\\022(?˔\\020?e?.AF??\\0340\\006??\\b?=Sc\", buffer_size=4096) at /Volumes/data_apps/mozilla/modules/libimg/png/pngpread.c:36 #9 0x1343569b in ReadDataOut (in=0x46ea9f6c, closure=0x5305bfc0, fromRawSegment=0xf173dff4 \",???.???C\\f???????\\031?\\017h?쩉?X?\\\"?\\032????u>????W?j?\\v\\023Zhͳ? L&?d?Q^\\023??\\005\\nr?g\\032?\\032?6?\\024?z\\024?\\017C? \\004}38\\022(?˔\\020?e?.AF??\\0340\\006??\\b?=Sc\", toOffset=20480, count=4096, writeCount=0xbfffd2c4) at /Volumes/data_apps/mozilla/modules/libpr0n/decoders/png/nsPNGDecoder.cpp:335 #10 0x00370c5b in nsPipeInputStream::ReadSegments (this=0x46ea9f6c, writer=0x134355ee <ReadDataOut>, closure=0x5305bfc0, count=45056, readCount=0xbfffd564) at /Volumes/data_apps/mozilla/xpcom/io/nsPipe3.cpp:799 Reproducible: Always"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=441368",
        "title": "Crash [@ nsSVGFEGaussianBlurElement::SetupPredivide] opening SVG file",
        "description": "Drew Yao from Apple Product Security reported this crash to security@mo. The attached testcase crashes trunk on Mac and Linux (haven't tested it on Windows). I will follow up shortly to attach the stack contents from the Mac crash. From Drew's email: Integer overflow in nsSVGFEGaussianBlurElement::SetupPredivide It does not seem to affect Firefox 2, only Firefox 3. PRUint8 * nsSVGFEGaussianBlurElement::SetupPredivide(PRUint32 size) const { PRUint8 *tmp = new PRUint8[size * 256]; // <-- integer overflow possible here, leading to an unexpectedly small buffer, and memory corruption if (tmp) { for (PRUint32 i = 0; i < 256; i++) memset(tmp + i * size, i, size); } return tmp; } To reproduce: Open the attached 00001596.svg in Firefox 3 in Mac OS X 10.5.3 Intel. It has the line <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"2147483648\" result=\"blur\"/> Breakpoint 13, nsSVGFEGaussianBlurElement::SetupPredivide (this=0x1c4adaa0, size=2018542109) at /Volumes/data_apps/mozilla/content/svg/content/src/nsSVGFilters.cpp:774 774 PRUint8 *tmp = new PRUint8[size * 256]; (gdb) p size $1001 = 2018542109 (gdb) p/x size $1002 = 0x7850821d (gdb) p/x size * 256 $1003 = 0x50821d00 #smaller than size Process: firefox-bin [55069] Path: /Volumes/data_apps/obj-i386-apple-darwin9.3.0/dist/MinefieldDebug.app/Contents/MacOS/firefox-bin Identifier: org.mozilla.firefox Version: 3.0pre (3.0pre) Code Type: X86 (Native) Parent Process: launchd [1] Date/Time: 2008-06-05 16:25:56.043 -0700 OS Version: Mac OS X 10.5.3 (9D34) Report Version: 6 Exception Type: EXC_BAD_ACCESS (SIGSEGV) Exception Codes: KERN_INVALID_ADDRESS at 0x000000006f4eb000 Crashed Thread: 0 Thread 0 Crashed: 0 libSystem.B.dylib 0xffff06b0 __bzero + 176 1 libgklayout.dylib 0x129ae722 nsSVGFEGaussianBlurElement::SetupPredivide(unsigned int) const + 72 (nsSVGFilters.cpp:776) 2 libgklayout.dylib 0x129b5fb3 nsSVGFEGaussianBlurElement::GaussianBlur(unsigned char*, unsigned char*, nsSVGFilterResource*, unsigned int, unsigned int) + 255 (nsSVGFilters.cpp:828) 3 libgklayout.dylib 0x129c2c63 nsSVGFEGaussianBlurElement::Filter(nsSVGFilterInstance*) + 537 (nsSVGFilters.cpp:896) 4 libgklayout.dylib 0x1296a831 nsSVGFilterFrame::FilterPaint(nsSVGRenderState*, nsISVGChildFrame*) + 4063 (nsSVGFilterFrame.cpp:513) 5 libgklayout.dylib 0x1299034a nsSVGUtils::PaintChildWithEffects(nsSVGRenderState*, nsRect*, nsIFrame*) + 698 (nsSVGUtils.cpp:1378) 6 libgklayout.dylib 0x1297da08 nsSVGOuterSVGFrame::Paint(nsIRenderingContext&, nsRect const&, nsPoint) + 466 (nsSVGOuterSVGFrame.cpp:583) 7 libgklayout.dylib 0x1297dbc6 nsDisplaySVG::Paint(nsDisplayListBuilder*, nsIRenderingContext*, nsRect const&) + 74 (nsSVGOuterSVGFrame.cpp:466) 8 libgklayout.dylib 0x122c0b91 nsDisplayList::Paint(nsDisplayListBuilder*, nsIRenderingContext*, nsRect const&) const + 61 (nsDisplayList.cpp:295) 9 libgklayout.dylib 0x122c1dbb nsDisplayWrapList::Paint(nsDisplayListBuilder*, nsIRenderingContext*, nsRect const&) + 41 (nsDisplayList.cpp:694) 10 libgklayout.dylib 0x122c2a50 nsDisplayClip::Paint(nsDisplayListBuilder*, nsIRenderingContext*, nsRect const&) + 128 (nsDisplayList.cpp:888) ..."
      }
    ],
    "CVE-2008-4065": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=430740",
        "title": "BOM characters are stripped from javascript before execution",
        "description": "User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; SLCC1; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506; .NET CLR 3.5.30319; WWTClient2) Build Identifier: 2.0.0.13 Using control format unicode characters, it is possible for code that will be executed to exist inside what would otherwise appear to be a quoted javascript string. The same technique can be used to escape out of block comments. Reproducible: Always Steps to Reproduce: Execute the following javascript: function evil() { alert('evil'); return 'evil'; } alert(eval(\"(['a\\\\\\u200d', '+evil()])//')]\")); Actual Results: alert 'evil' appears, then an aldert \"a', evil\" Expected Results: only one alert \"a\\,+evil()])//\" should appear. See url for more."
      }
    ],
    "CVE-2008-4066": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=448166",
        "title": "escaped low surrogates possible XSS hazard in URIs",
        "description": "On \"The Scanner\" blog Gareth noticed that html-escaped low surrogates in javascript uris were ignored as if they weren't there, a possible XSS hazard if sites don't recognize javascript: links. http://www.thespanner.co.uk/2008/06/30/javascript-protocol-fuzz-results/ This works in the latest Firefox 2.0.0.16 but not Firefox 3. The trunk did get a fix for bug 316394 but that's in CSS and wouldn't have fixed this I don't think. Putting escaped low surrogates into HTML elements correctly leads to unknown tags (e.g. <scr&#xdc00;ipt> doesn't work). <a href=\"http://www.moz&#xdc00;illa.com\">shouldn't be mozilla</a>"
      }
    ],
    "CVE-2008-4067": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=380994",
        "title": "Fix for bug 367428 lets through escaped slashes on Linux (windows too on trunk)",
        "description": "STEPS TO REPRODUCE: 1) Open browser on Linux 2) Load resource:///..%2F..%2F..%2F in it EXPECTED RESULTS: Don't see file list for an ancestor of the install directory ACTUAL RESULTS: I'm looking at a listing of ~bzbarsky (since the browser is installed under ~bzbarsky/mozilla/nightly/install-dir)."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=394075",
        "title": "Resource Directory Traversal Vulnerability",
        "description": "User-Agent: Mozilla/5.0 (Macintosh; U; PPC Mac OS X Mach-O; it; rv:1.8.1.6) Gecko/20070725 Firefox/2.0.0.6 Build Identifier: Mozilla/5.0 (Macintosh; U; PPC Mac OS X Mach-O; it; rv:1.8.1.6) Gecko/20070725 Firefox/2.0.0.6 Classical Traversal Vulnerability, maybe someone forgot some filters ... It could be dangerous if someone open a \"well forged\" page. Reproducible: Always Steps to Reproduce: 1.Write this \"resource:///%2e%2e\" (Without \") in your UR 2. 3. Actual Results: You can navigate your file system ! Expected Results: The software forgets some filters in resource procedure"
      }
    ],
    "CVE-2008-4069": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=449703",
        "title": "[1.8 branch] XBM appears to draw uninitialized memory",
        "description": "Mozilla/5.0 (Macintosh; U; Intel Mac OS X; en-US; rv:1.8.1.16) Gecko/20080702 Firefox/2.0.0.16 Loading this XBM file makes Firefox 2 draw some random pixels. They're different each time the image is reloaded, so it seems like Firefox might be displaying contents of uninitialized memory. In Firefox 3 and trunk, I just see white, but I don't know whether the bug was really fixed (or whether it was fixed intentionally). Billy Hoffman pointed this bug out during his talk at Black Hat today."
      }
    ],
    "CVE-2008-4070": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=425152",
        "title": "heap overflow when canceling usenet message in nsNNTPProtocol::DoCancel()",
        "description": "this is not trivial to reproduce, but seems wrong by inspection: http://bonsai.mozilla.org/cvsblame.cgi?file=mozilla/mailnews/news/src/nsNNTPProtocol.cpp&rev=1.396 4255 mscott 1.1 L = PL_strlen (id); ... 4258 other_random_headers = (char *) PR_Malloc (L + 20); ... 4339 PL_strcpy (other_random_headers, \"Control: cancel \"); 4340 PL_strcat (other_random_headers, id); 4341 PL_strcat (other_random_headers, CRLF); 4342 sspitzer 1.73 if (distribution) { 4343 bienvenu 1.348 PL_strcat (other_random_headers, \"Distribution: \"); 4344 scott 1.386 PL_strcat (other_random_headers, distribution); 4345 PL_strcat (other_random_headers, CRLF); so |other_random_headers| is allocated strlen(id) + 20. later |id| + stuff is copied. later |distribition| may be appended yet distribution doesn't contribute to the allocation size and this may lead to overflow. even \"Control: cancel Distribution: \" is longer than 20"
      }
    ],
    "CVE-2008-4437": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=437169",
        "title": "[SECURITY] Local files on the server can be attached to a bug (making them publicly visible) when importing bugs with -attach_path",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.8.1.14) Gecko/20080404 Firefox/2.0.0.14 Build Identifier: 3.0.4 when importing a bug in xml, there is an insecure call done to open() which could potentially allow command execution. the bug in the code is as follows: sub process_attachment() { my ( $twig, $attach ) = @_; ... my $encoding = $attach->first_child('data')->{'att'}->{'encoding'}; ... elsif ($encoding =~ /filename/) { ... my $attach_filename = $attach_path . \"/\" . $attach->field('data'); <-- field('data') comes from the xml file open(ATTACH_FH, $attach_filename) or <-- here's the insecure open Error(\"cannot open $attach_filename\", undef); ... } basicly, you could have something like \"; <shell commands> |\". a nice solutions would be to use the 3-arg open. another issue is that there is no check done for directory traversal. Reproducible: Didn't try Steps to Reproduce: 1. 2. 3."
      }
    ],
    "CVE-2008-4582": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=455311",
        "title": "[FIX]mid-autumn festival vulnerability",
        "description": "Lui Dieyu in email reports: For Firefox, location is wrong when dot URL shortcut is launched by HTML elements. Slightly variant from CVE-2008-2810 which is about command line and only fixed in that perspective. Contents at any location can be read by taking advantage of this error - cache information, cookie information, web, local file system, etc. Here is proof of concept showing all cached images. Web page is required to be opened in local path or Windows share(UNC/SMB) path. Reproduced on Firefox 3.0.1 running on Windows XP SP3, US English. -----testurl1.url----- [InternetShortcut] URL=about:cache?device=memory IDList= [{000214A0-0000-0000-C000-000000000046}] Prop3=19,2 -----testurl2.url----- [InternetShortcut] URL=about:cache?device=disk IDList= [{000214A0-0000-0000-C000-000000000046}] Prop3=19,2 -----test.html----- <script> function a() { s=\"\"; h=\"\"; for(i=0;i<window.frames.length;i++) { d=window.frames[i].document; for(j=0;j<d.links.length;j++) { u=d.links[j].text s+=u+\"\\n\"; h+=\"<img src=\\\"\"+u+\"\\\">\"; } } document.getElementById(\"t\").value=s; document.getElementById(\"x\").innerHTML=h; } </script> <a href=\"javascript:a();\">Start Test</a><br> <a href=\"javascript:window.location=location.href\">Load This Page Again</a><br> <br> <br> <b>List of files that you recently fetched from the internet:</b><br> <textarea rows=\"10\" cols=\"100\" id=t wrap=off></textarea> <br> <br> <b>List of images that you recently viewed on the internet:</b><br> <div id=x></div> <br> <br> <iframe width=300 height=200 src=\"testurl1.url\"></iframe> <iframe width=300 height=200 src=\"testurl2.url\"></iframe>"
      }
    ],
    "CVE-2008-5012": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=355126",
        "title": "stealing pictures via canvas and http redirect",
        "description": "stealing pictures via canvas and http redirect using a canvases, drawImage, toDataURL and an image that is redirected via the http protocolit is possible to get the content of arbitrary accessible http images. affects both trunk and 2.0 branch. testcase to follow."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=451619",
        "title": "Redirects permit cross-domain and local-system image disclosure via CANVAS",
        "description": "Hi, Chris Evans (Cc:ed) found out that the security restrictions applied to CANVAS toDataURL() and getImageData() methods once drawImage() is called on a given CANVAS to render a non-same-origin image, may be trivially bypassed if image source is initially specified in SRC attribute to be same-origin, but then HTTP 30x redirected to a non-same-origin resource. This permits theft of potentially sensitive data across domains, should the victim be logged into any services that either store private images, or provide any sensitive visualisations at predictable locations. Just as amusingly, I noticed that this may be exploited to very accurately enumerate locally installed software - and effectively, fingerprint the computer - by abusing moz-icon: as a redirection target: http://lcamtuf.coredump.cx/ico_sniff2.html (works in FF2 on Windows) According to Chris, this does not affect FF3."
      }
    ],
    "CVE-2008-5013": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=433610",
        "title": "Mozilla Firefox Flash Player Dynamic Module Unloading Vulnerability (ZDI-CAN-259)",
        "description": "Tipping Point has reported a bug in the Flash plugin for Firefox which they claim contains a buffer overflow. This could potentially allow an attacker to execute arbitrary code on victim's computer. I have not been able to confirm or reproduce the bug yet, and it would be great if we can get confirmation from someone in the Security Group. Attached is the vulnerability summary submitted by the Tipping Point researcher, Cameron Hotchkies. I will also attach the proof-of-concept materials shortly."
      }
    ],
    "CVE-2008-5014": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=436741",
        "title": "\"Assertion failure: OBJ_IS_NATIVE(obj)\" with __proto__ mangling",
        "description": "Loading the testcase kills Firefox. Debug: Assertion failure: OBJ_IS_NATIVE(obj), at /Users/jruderman/central/mozilla/js/src/jslock.cpp:1187 Opt: Hang. Security-sensitive for now because I don't know whether this is a memory safety bug in opt builds."
      }
    ],
    "CVE-2008-5015": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=447579",
        "title": "[FIX]file: URIs inherit chrome privs if opened from chrome",
        "description": "the security alias received a report from Luke Bryan that file: URIs are given chrome privileges if opened in the same tab as a chrome (or privileged about:) page. This does not happen in the latest Firefox 2.0.0.17pre. Steps: 1. create a local file that contains the following script: <script> try{ alert((Components.classes) ? \"Chrome -- bad!\" : \"Invalid test\"); } catch (e) { alert( \"Not chrome -- good!\"); throw (e); } <script> 2. open about:config 3. in the same tab open the file created in step 1. The first step is to get a regression range. It would be ironic if it were my bug 230606 \"restrict file: abilities\" fix."
      }
    ],
    "CVE-2008-5016": [
      {
        "url": "https://bugzilla.mozilla.org/buglist.cgi?bug_id=439206,453406,458637,444864,452157,449111,444260,457375,433429,443528,430394",
        "description": "the security alias received a report from Luke Bryan that file: URIs are given chrome privileges if opened in the same tab as a chrome (or privileged about:) page. This does not happen in the latest Firefox 2.0.0.17pre. Steps: 1. create a local file that contains the following script: <script> try{ alert((Components.classes) ? \"Chrome -- bad!\" : \"Invalid test\"); } catch (e) { alert( \"Not chrome -- good!\"); throw (e); } <script> 2. open about:config 3. in the same tab open the file created in step 1. The first step is to get a regression range. It would be ironic if it were my bug 230606 \"restrict file: abilities\" fix."
      }
    ],
    "CVE-2008-5017": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=455987",
        "title": "integer overflow in nsEscape",
        "description": "+++ This bug was initially created as a clone of Bug #445117 +++ > /* XXX Hardcoded max entity len. The +1 is for the trailing null. */ > char *rv = (char *) nsMemory::Alloc(strlen(string) * 6 + 1); > > |* 6| overflows at about 683M on 32 bit platform. The issue Georgi noted in bug 445117 also occurs in xpcom/io/nsEscape.cpp -- the same pattern happens in nsEscapeHTML() and nsEscapeHTML2() I'm not sure if you can practically stuff 683M into the things that use nsEscapeHTML, maybe if the transport is gzipped. http://mxr.mozilla.org/mozilla/search?string=nsEscapeHTML"
      }
    ],
    "CVE-2008-5018": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=452786",
        "title": "Crash due to insufficient class checking in Date class",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.0.1) Gecko/2008070208 Firefox/3.0.1 Build Identifier: This bug crashes the browser without any possibility for user intervention. This is exploitable in the browser. Do *not* click the given link if you want to keep anything in your current Firefox session. Reproducible: Always Steps to Reproduce: (new Date()).getMonth.call(new Function()) Actual Results: jsshell (or Firefox) crash. Expected Results: Exception. The built-in Date class doesn't check the class of its \"this\" object sufficiently. Affected methods are getYear(), getMonth(), getDate() and so on. This affects all of Date's methods that internally call GetLocalTime() (in jsdate.c) which doesn't check the class of object passed in (compare with JS_InstanceOf() call in GetUTCTime()). The object passed in needs to have at least 2 private slots, like a) the global object b) Function objects c) Iterator objects The value from the private slot is passed to JSVAL_TO_DOUBLE() without further checks in GetLocalTime(), leading to bogus pointer dereference for objects not of class Date. In addition to adding this to the test suite, this sort of thing could be added to jsparsefuzz.js (i.e. the fuzzer should be modified to use <method>.call() with random arguments if it's not already doing this). I don't have time right now to check out a current tree and post a patch and will not get around to it until some time next week."
      }
    ],
    "CVE-2008-5019": [
      {
        "url": "https://bugzilla.mozilla.org/buglist.cgi?bug_id=459906,460983",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.0.1) Gecko/2008070208 Firefox/3.0.1 Build Identifier: This bug crashes the browser without any possibility for user intervention. This is exploitable in the browser. Do *not* click the given link if you want to keep anything in your current Firefox session. Reproducible: Always Steps to Reproduce: (new Date()).getMonth.call(new Function()) Actual Results: jsshell (or Firefox) crash. Expected Results: Exception. The built-in Date class doesn't check the class of its \"this\" object sufficiently. Affected methods are getYear(), getMonth(), getDate() and so on. This affects all of Date's methods that internally call GetLocalTime() (in jsdate.c) which doesn't check the class of object passed in (compare with JS_InstanceOf() call in GetUTCTime()). The object passed in needs to have at least 2 private slots, like a) the global object b) Function objects c) Iterator objects The value from the private slot is passed to JSVAL_TO_DOUBLE() without further checks in GetLocalTime(), leading to bogus pointer dereference for objects not of class Date. In addition to adding this to the test suite, this sort of thing could be added to jsparsefuzz.js (i.e. the fuzzer should be modified to use <method>.call() with random arguments if it's not already doing this). I don't have time right now to check out a current tree and post a patch and will not get around to it until some time next week."
      }
    ],
    "CVE-2008-5021": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=460002",
        "title": "It's possible to circumvent the inner window check in nsXMLHttpRequest::NotifyEventListeners()",
        "description": "This bug is for fx3.0.x and fx2.0.0.x. In nsXMLHttpRequest::NotifyEventListeners(), CheckInnerWindowCorrectness() is called only once, and then multiple listeners are called. Thus, it's possible to circumvent the inner window check by using two listeners. (Trunk is also exploitable in the same way, but depends on bug 460001.)"
      }
    ],
    "CVE-2008-5022": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=460002",
        "title": "It's possible to circumvent the inner window check in nsXMLHttpRequest::NotifyEventListeners()",
        "description": "This bug is for fx3.0.x and fx2.0.0.x. In nsXMLHttpRequest::NotifyEventListeners(), CheckInnerWindowCorrectness() is called only once, and then multiple listeners are called. Thus, it's possible to circumvent the inner window check by using two listeners. (Trunk is also exploitable in the same way, but depends on bug 460001.)"
      }
    ],
    "CVE-2008-5023": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=424733",
        "title": "[FIX]CSS -moz-binding property bypasses security checks on codebase principals",
        "description": "Following up on comment 9 on bug 424426 <https://bugzilla.mozilla.org/show_bug.cgi?id=424426#c9>, we did some testing and it appears that stylesheets don't invoke downgrading/blocking rules for codebase principals. If a signed JAR includes <link rel=\"stylesheet\" href=\"some_relative_path.css\"> anywhere inside it, a malicious web site can replace the stylesheet using the JAR-switching technique originally described in comment #1 on bug 424426 <https://bugzilla.mozilla.org/show_bug.cgi?id=418996#c1>. The malicious stylesheet can then use the -moz-binding property to inject script into the page and hijack the signer's privileges. The proof of concept is the \"CSS\" test case at <http://crypto.stanford.edu/~collinj/research/signed-scripts/more-relative-paths.html>. It is likely that Flash and Java have similar problems."
      }
    ],
    "CVE-2008-5052": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=454113",
        "title": "e4x/extensions/regress-374025.js - invalid write",
        "description": "This is fixed on the trunk and is a known crasher on 1.8.1, but I just realized it is a security issue. ==30135== Invalid write of size 2 ==30135== at 0x40D6CA4: js_RepeatChar (jsscan.c:845) ==30135== by 0x40F5597: XMLToXMLString (jsxml.c:2709) ==30135== by 0x40F6246: XMLToXMLString (jsxml.c:3004) ==30135== by 0x40F6624: ToXMLString (jsxml.c:3082) ==30135== by 0x4102289: xml_toXMLString (jsxml.c:7168) ==30135== by 0x406B298: js_Invoke (jsinterp.c:1387) ==30135== by 0x406B6CB: js_InternalInvoke (jsinterp.c:1481) ==30135== by 0x40A78ED: js_TryMethod (jsobj.c:4686) ==30135== by 0x40E8B98: js_ValueToSource (jsstr.c:2718) ==30135== by 0x40E1CA2: str_uneval (jsstr.c:470) ==30135== by 0x406B298: js_Invoke (jsinterp.c:1387) ==30135== by 0x407E78D: js_Interpret (jsinterp.c:3964)"
      }
    ],
    "CVE-2008-5500": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=460803",
        "title": "[FIX]PresShell::InitialReflow \"ASSERTION: Why are we being called?\" with XUL iframe",
        "description": "About 50% of the time, loading the testcase triggers these six assertions: 1. ###!!! ASSERTION: Why are we being called?: '!mDidInitialReflow', file layout/base/nsPresShell.cpp, line 2373 2. ###!!! ASSERTION: initial containing block already created: 'nsnull == mInitialContainingBlock', file layout/base/nsCSSFrameConstructor.cpp, line 8760 3. ###!!! ASSERTION: Already have an undisplayed context entry for aContent: '!GetUndisplayedContent(aContent)', file layout/base/nsFrameManager.cpp, line 574 4. ###!!! ASSERTION: unexpected mInitialContainingBlock: 'processChildren ? !mInitialContainingBlock : mInitialContainingBlock == contentFrame', file layout/base/nsCSSFrameConstructor.cpp, line 4308 5. ###!!! ASSERTION: unexpected second call to SetInitialChildList: 'Not Reached', file layout/generic/nsContainerFrame.cpp, line 111 6. ###!!! ASSERTION: Why is the root in mDirtyRoots already?: 'mDirtyRoots.IndexOf(rootFrame) == -1', file layout/base/nsPresShell.cpp, line 2462 and then closing it triggers: 7. ###!!! ASSERTION: Some objects allocated with AllocateFrame were not freed: 'mFrameCount == 0', file layout/base/nsPresShell.cpp, line 676"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=464998",
        "title": "integer overflow in nsEscape, still",
        "description": "+++ This bug was initially created as a clone of Bug #455987 +++ +++ This bug was initially created as a clone of Bug #445117 +++ bug 455987 tried to fix this, but I added when I should have subtracted the size of the terminator in nsEscapeHTML2."
      }
    ],
    "CVE-2008-5502": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=458679",
        "title": "Crash [@ js_DeflateString]",
        "description": "function f() { for (var i = 1; i < dps.length; ++i) { var a = \"\"; var b = \"\"; var c = \"\"; } } function stringOfLength(n) { if (n == 0) { return \"\"; } else if (n == 1) { return \"\\\"\"; } else { var r = n % 2; var d = (n - r) / 2; var y = stringOfLength(d); return y + y + stringOfLength(r); } } this.__defineGetter__('x', this.toSource); while (x.length < 12000000) { let q = x; s = q + q; } print(x.length); <e4x>{x}</e4x>; Huge thanks to Jesse Ruderman for helping to reduce this massive testcase. These lines crash js trunk shell at 0x0000000006b30000. This also asserts debug shell at \"Assertion failure: nbytes != 0, at jsapi.cpp:1841\". Related to bug 421623 or bug 457521? Nominating security sensitive because they crash at this scary address. Nominating wanted-1.9.0.x as well because we have seen variants of this testcase crashing 1.9.0.x."
      }
    ],
    "CVE-2008-5504": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=453526",
        "title": "Remaining attack vectors in feed preview on 1.8 branch",
        "description": "See bug 360529 comment 68 and bug 360529 comment 69."
      }
    ],
    "CVE-2008-5505": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=295994",
        "title": "Can store cookie-like information via xul persist attribute",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US; rv:1.7.8) Gecko/20050511 Build Identifier: Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US; rv:1.7.8) Gecko/20050511 When user turns off cookies, I still can write cookie-like information by using the xul persist attribute on a remote page. Reproducible: Always Steps to Reproduce: <xul:element id=\"test\" persist=\"att1,att2\" /> Store: document.getElementById('test').setAttribute('att1','xxx'); Restore: alert(document.getElementById('test').getAttribute('att1')); Expected Results: I expect a remote XUL page being able to work with the persist attribute but onla when the user allows cookies from this site."
      }
    ],
    "CVE-2008-5506": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=458248",
        "title": "XMLHttpRequest 302 response disclosure",
        "description": "User-Agent: Mozilla/5.0 (X11; U; Linux i686 (x86_64); en-US; rv:1.9) Gecko/2008052912 Firefox/3.0 Build Identifier: Mozilla/5.0 (X11; U; Linux i686 (x86_64); en-US; rv:1.9) Gecko/2008052912 Firefox/3.0 A XMLHttpRequest which hits a 302 to another domain returns the 302 headers and body. In single-signon environments these headers might contain sensitive url parameters. The XMLHttpRequest originates from source domain, but the SSO state could be protected with HttpOnly. Returning the 302 headers allows for using the SSO state as an oracle to mints access tokens for other domains. All other browsers I tested do not return such 302 responses to the script. Reproducible: Always Steps to Reproduce: 1.Setup a server that has a 302 to another domain 2.Issue XHR, in domain, to the url that will 302 3.Observe the 302 headers and body are available to the XHR issuer Actual Results: 302 headers and body, with location being a different protocol:host:port/path?params Expected Results: Security exception or no data. Other browsers return status 0 and no content. Or throw security exceptions. Since other browsers do not return data, it is unlikely that tightening this up will break existing applications. As for precedents regarding fixing this type of bug, see https://bugzilla.mozilla.org/show_bug.cgi?id=397427"
      }
    ],
    "CVE-2008-5507": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=461735",
        "title": "[FIX]Security: theft of strings cross-domain with redirect, <script src> and window.onerror",
        "description": "User-Agent: Mozilla/5.0 (X11; U; Linux i686 (x86_64); en-US; rv:1.8.1.16) Gecko/20080716 Firefox/2.0.0.16 Build Identifier: Mozilla/5.0 (X11; U; Linux i686 (x86_64); en-US; rv:1.8.1.16) Gecko/20080716 Firefox/2.0.0.16 The URL above demos the problem nicely. Note that this is with FF3.0.3. This is essentially a new twist to the existing bug: https://bugzilla.mozilla.org/show_bug.cgi?id=363897 This bug was fixed in FF3, but the fix can be bypassed with the redirector trick. Also note that the bug referenced above underestimates the severity of leaking JS error messages cross-domain. Hopefully my demo illustrates that. Reproducible: Always Steps to Reproduce: 1. 2. 3."
      }
    ],
    "CVE-2008-5508": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=425046",
        "title": "URLs containing 0x01 are interpreted very oddly - possible overflow bug?",
        "description": "User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.12) Gecko/20080129 Iceweasel/2.0.0.12 (Debian-2.0.0.12-2) Build Identifier: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.12) Gecko/20080129 Iceweasel/2.0.0.12 (Debian-2.0.0.12-2) This tag: <a href=&#1;http://yahoo.com/space&#32;space&#32;here>linky</a> genrates this link text: htt:///yahoo.co/m/space%20space%20her there's a ^A at the beginning of that, if you can't see it here. What is wrong with this? Let me count the ways: htt: instead of http: three slashes instead of two before \"yahoo\" slash in the middle of \"com\" missing \"e\" at the very end I'm a C programmer and this smells like the kind of result that could spring from a potential buffer overflow bug. However I have no evidence that an overflow is actually happening. I tag this bug \"Security\" out of caution. BTW this link works in Outlook - not that I would suggest for a second that you imitate Outlook! But that's why I was testing it. Reproducible: Always Steps to Reproduce: 1. Paste the above link tag into HTML 2. View it 3. \"Copy link location\" from link Actual Results: htt:///yahoo.co/m/space%20space%20her (note leading ^A) Expected Results: http://yahoo.com/space%20space%20here (possibly with leading ^A)"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=460803",
        "title": "[FIX]PresShell::InitialReflow \"ASSERTION: Why are we being called?\" with XUL iframe",
        "description": "About 50% of the time, loading the testcase triggers these six assertions: 1. ###!!! ASSERTION: Why are we being called?: '!mDidInitialReflow', file layout/base/nsPresShell.cpp, line 2373 2. ###!!! ASSERTION: initial containing block already created: 'nsnull == mInitialContainingBlock', file layout/base/nsCSSFrameConstructor.cpp, line 8760 3. ###!!! ASSERTION: Already have an undisplayed context entry for aContent: '!GetUndisplayedContent(aContent)', file layout/base/nsFrameManager.cpp, line 574 4. ###!!! ASSERTION: unexpected mInitialContainingBlock: 'processChildren ? !mInitialContainingBlock : mInitialContainingBlock == contentFrame', file layout/base/nsCSSFrameConstructor.cpp, line 4308 5. ###!!! ASSERTION: unexpected second call to SetInitialChildList: 'Not Reached', file layout/generic/nsContainerFrame.cpp, line 111 6. ###!!! ASSERTION: Why is the root in mDirtyRoots already?: 'mDirtyRoots.IndexOf(rootFrame) == -1', file layout/base/nsPresShell.cpp, line 2462 and then closing it triggers: 7. ###!!! ASSERTION: Some objects allocated with AllocateFrame were not freed: 'mFrameCount == 0', file layout/base/nsPresShell.cpp, line 676"
      }
    ],
    "CVE-2008-5511": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=451680",
        "title": "XSS by attaching a binding to an element in an unloaded document",
        "description": "It's possible to use a binding to perform an XSS attack in a similar way to bug 428672 and bug 433328."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=464174",
        "title": "The fix in bug 451680 does not fix <field>",
        "description": "The fix in bug 451680 does not fix <field>."
      }
    ],
    "CVE-2008-5512": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=451680",
        "title": "XSS by attaching a binding to an element in an unloaded document",
        "description": "It's possible to use a binding to perform an XSS attack in a similar way to bug 428672 and bug 433328."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=464174",
        "title": "The fix in bug 451680 does not fix <field>",
        "description": "The fix in bug 451680 does not fix <field>."
      }
    ],
    "CVE-2008-6098": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=449931",
        "title": "[SECURITY] Unprivileged users can approve/unapprove all the quips (including bypassing moderation)",
        "description": "User-Agent: Mozilla/5.0 (X11; U; Linux i686; da; rv:1.9) Gecko/2008052912 Firefox/3.0 Build Identifier: Bugzilla 3.0.4 After one of our developers were playing around with the quip system in our Bugzilla setup he figured out that he could unapprove all our quips by visiting a specially crafted URL. For example: http://bugs.example.org/quips.cgi?action=approve Our current quip setup is set to be 'moderated', but that doesn't change the outcome of the above URL. Reproducible: Always Steps to Reproduce: 1. Visit http://bugs.example.org/quips.cgi?action=approve 2. Wait for a Bugzilla admin to kill you. Actual Results: Unapproving all the quips in the database Expected Results: Show some access denied error or at least not unapprove all the quips :) Perhaps it would be nice to create a group where the Bugzilla admins can put users in so that those users are allowed to approve bugs. But that's probably a feature request."
      }
    ],
    "CVE-2008-6961": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=458883",
        "title": "Make Document.documentURI and .textContent noAccess in mailnews",
        "description": "See bug 453928 comment 5. We need to fix this on the 1.8 branch and 1.9.0 branch no matter what we're doing on trunk."
      }
    ],
    "CVE-2008-7292": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=414002",
        "title": "Temporary files for uploaded attachments are not deleted on Windows",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.8.1.11) Gecko/20071127 Firefox/2.0.0.11 Build Identifier: 3.0.3 After uploading an attachment, I find that a CGItempXXXXX file is left behind in the temporary files directory. I notice that Bugzilla/CGI.pm uses the :private_tempfiles feature of CGI.pm, but this doesn't work on Windows because you cannot delete an open file on Windows (unless you start using some low-level Win32API::File trickery. Therefore, it is the CGI::DESTROY() method that normally deletes the temporary files for uploads on Windows, but this never gets called by Bugzilla::CGI. It has its own DESTROY() method which does nothing. This is probably a hang-over from the past when CGI::DESTROY() itself was empty, but now that CGI::DESTROY() does something useful Bugzilla::CGI::DESTROY() needs to call it. (The deletion of temporary files in CGI::DESTROY() was added in CGI.pm version 3.01, from a patch by me.) Reproducible: Always Steps to Reproduce: 1. Add an attachment to a bug in a Bugzilla system running on Windows. 2. Look in the temporary files directory (probably the folder specified by the TEMP or TMP environment variables, or else something like C:\\WINDOWS\\TEMP--see the BEGIN {} block in Bugzilla::CGI). Actual Results: You'll find a CGItempXXXXX file has been left behind in that directory. Expected Results: These temporary files should be deleted after the upload is done. The following patch to Bugzilla/CGI.pm fixes it (as long as you're using CGI.pm $VERSION >= 3.01). --- CGI.pm.orig 2008-01-25 16:42:13.904661500 +0000 +++ CGI.pm 2008-01-25 16:42:18.389180000 +0000 @@ -54,7 +54,7 @@ # We need to do so, too, otherwise perl dies when the object is destroyed # and we don't have a DESTROY method (because CGI.pm's AUTOLOAD will |die| # on getting an unknown sub to try to call) -sub DESTROY {}; +sub DESTROY { shift->SUPER::DESTROY(@_); }; sub new { my ($invocant, @args) = @_; End of Patch."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=660502",
        "title": "[SECURITY] Temporary files for uploaded attachments are not deleted on Windows (again)",
        "description": "We already fixed this problem in Bugzilla 2.20.5 in bug 414002, and it's still working fine in Bugzilla 3.2 and 3.4, but we regressed this again in Bugzilla 3.6. No idea so far what regressed this. As a user having local access to the server can access the Temp\\ directory on Windows, attachments which are uploaded to security bugs or marked as private are still accessible to such users, even if they cannot access them using Bugzilla."
      }
    ],
    "CVE-2008-7293": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=660053",
        "title": "[SECURITY] If a BUGLIST cookie is compromised, it can be used to XSS show_bug.cgi and inject HTML into <head>",
        "description": "Bugzilla 3.4.11 and below are affected by an XSS that is only possible if the user's BUGLIST cookie is somehow compromised. The bug_list.first and bug_list.last variables in the bug/navigate.html.tmpl template are not properly escaped when displayed. As far as we know, it is not possible to compromise the BUGLIST cookie in Bugzilla, and as such we are not treating this as a high-priority security issue, but still something that we should fix for the 3.4 branch in case administrators have customized their installation in such a way that BUGLIST could have been compromised, or there are other programs on the user's system that could somehow have compromised the cookie."
      }
    ],
    "CVE-2008-7294": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=660053",
        "title": "[SECURITY] If a BUGLIST cookie is compromised, it can be used to XSS show_bug.cgi and inject HTML into <head>",
        "description": "Bugzilla 3.4.11 and below are affected by an XSS that is only possible if the user's BUGLIST cookie is somehow compromised. The bug_list.first and bug_list.last variables in the bug/navigate.html.tmpl template are not properly escaped when displayed. As far as we know, it is not possible to compromise the BUGLIST cookie in Bugzilla, and as such we are not treating this as a high-priority security issue, but still something that we should fix for the 3.4 branch in case administrators have customized their installation in such a way that BUGLIST could have been compromised, or there are other programs on the user's system that could somehow have compromised the cookie."
      }
    ],
    "CVE-2008-7295": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=660053",
        "title": "[SECURITY] If a BUGLIST cookie is compromised, it can be used to XSS show_bug.cgi and inject HTML into <head>",
        "description": "Bugzilla 3.4.11 and below are affected by an XSS that is only possible if the user's BUGLIST cookie is somehow compromised. The bug_list.first and bug_list.last variables in the bug/navigate.html.tmpl template are not properly escaped when displayed. As far as we know, it is not possible to compromise the BUGLIST cookie in Bugzilla, and as such we are not treating this as a high-priority security issue, but still something that we should fix for the 3.4 branch in case administrators have customized their installation in such a way that BUGLIST could have been compromised, or there are other programs on the user's system that could somehow have compromised the cookie."
      }
    ],
    "CVE-2008-7296": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=660053",
        "title": "[SECURITY] If a BUGLIST cookie is compromised, it can be used to XSS show_bug.cgi and inject HTML into <head>",
        "description": "Bugzilla 3.4.11 and below are affected by an XSS that is only possible if the user's BUGLIST cookie is somehow compromised. The bug_list.first and bug_list.last variables in the bug/navigate.html.tmpl template are not properly escaped when displayed. As far as we know, it is not possible to compromise the BUGLIST cookie in Bugzilla, and as such we are not treating this as a high-priority security issue, but still something that we should fix for the 3.4 branch in case administrators have customized their installation in such a way that BUGLIST could have been compromised, or there are other programs on the user's system that could somehow have compromised the cookie."
      }
    ],
    "CVE-2008-7297": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=660053",
        "title": "[SECURITY] If a BUGLIST cookie is compromised, it can be used to XSS show_bug.cgi and inject HTML into <head>",
        "description": "Bugzilla 3.4.11 and below are affected by an XSS that is only possible if the user's BUGLIST cookie is somehow compromised. The bug_list.first and bug_list.last variables in the bug/navigate.html.tmpl template are not properly escaped when displayed. As far as we know, it is not possible to compromise the BUGLIST cookie in Bugzilla, and as such we are not treating this as a high-priority security issue, but still something that we should fix for the 3.4 branch in case administrators have customized their installation in such a way that BUGLIST could have been compromised, or there are other programs on the user's system that could somehow have compromised the cookie."
      }
    ],
    "CVE-2008-7298": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=660053",
        "title": "[SECURITY] If a BUGLIST cookie is compromised, it can be used to XSS show_bug.cgi and inject HTML into <head>",
        "description": "Bugzilla 3.4.11 and below are affected by an XSS that is only possible if the user's BUGLIST cookie is somehow compromised. The bug_list.first and bug_list.last variables in the bug/navigate.html.tmpl template are not properly escaped when displayed. As far as we know, it is not possible to compromise the BUGLIST cookie in Bugzilla, and as such we are not treating this as a high-priority security issue, but still something that we should fix for the 3.4 branch in case administrators have customized their installation in such a way that BUGLIST could have been compromised, or there are other programs on the user's system that could somehow have compromised the cookie."
      }
    ]
  }
}